
duck.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005dd0  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80007e00  80007e00  00008200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000288  80008000  80008000  00008400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000000e0  00000008  80008288  00008808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006e0  000000e8  000000e8  00000000  2**2
                  ALLOC
  8 .heap         00006838  000007c8  000007c8  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  000088e8  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000e78  00000000  00000000  00008918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00002a19  00000000  00000000  00009790  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0001bc23  00000000  00000000  0000c1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e6c  00000000  00000000  00027dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000cca0  00000000  00000000  0002ac38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000029bc  00000000  00000000  000378d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008631  00000000  00000000  0003a294  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00007109  00000000  00000000  000428c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 011814a0  00000000  00000000  000499ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  00007000  00007000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000e48  00000000  00000000  011cae6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf b4 70 	sub	pc,pc,-19344

Disassembly of section .text:

80002004 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#define AT45DBX_MEM_CNT             1
#endif

void board_init(void)
{
80002004:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002006:	30 3b       	mov	r11,3
80002008:	30 7c       	mov	r12,7
8000200a:	f0 1f 00 14 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200e:	30 3b       	mov	r11,3
80002010:	30 8c       	mov	r12,8
80002012:	f0 1f 00 12 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002016:	30 3b       	mov	r11,3
80002018:	31 5c       	mov	r12,21
8000201a:	f0 1f 00 10 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201e:	30 3b       	mov	r11,3
80002020:	31 6c       	mov	r12,22
80002022:	f0 1f 00 0e 	mcall	80002058 <board_init+0x54>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
80002026:	30 0b       	mov	r11,0
80002028:	32 2c       	mov	r12,34
8000202a:	f0 1f 00 0c 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
8000202e:	30 0b       	mov	r11,0
80002030:	32 3c       	mov	r12,35
80002032:	f0 1f 00 0a 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
80002036:	30 0b       	mov	r11,0
80002038:	30 dc       	mov	r12,13
8000203a:	f0 1f 00 08 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
8000203e:	30 0b       	mov	r11,0
80002040:	32 6c       	mov	r12,38
80002042:	f0 1f 00 06 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
80002046:	30 0b       	mov	r11,0
80002048:	32 7c       	mov	r12,39
8000204a:	f0 1f 00 04 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
8000204e:	30 0b       	mov	r11,0
80002050:	32 8c       	mov	r12,40
80002052:	f0 1f 00 02 	mcall	80002058 <board_init+0x54>
	// Assign GPIO pins to USB.
	gpio_enable_module(USB_GPIO_MAP,
            sizeof(USB_GPIO_MAP) / sizeof(USB_GPIO_MAP[0]));
#endif
  
}
80002056:	d8 02       	popm	pc
80002058:	80 00       	ld.sh	r0,r0[0x0]
8000205a:	2f 28       	sub	r8,-14

8000205c <LED_Set_Intensity>:
           AVR32_PWM.channel[led_descriptor->PWM.CHANNEL].cdty : 0;
}


void LED_Set_Intensity(U32 leds, U8 intensity)
{
8000205c:	eb cd 40 f8 	pushm	r3-r7,lr
  volatile avr32_pwm_channel_t *led_pwm_channel;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // For each specified LED...
  for (leds &= (1 << LED_COUNT) - 1; leds; leds >>= led_shift)
80002060:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80002064:	c4 70       	breq	800020f2 <LED_Set_Intensity+0x96>
80002066:	4a 58       	lddpc	r8,800020f8 <LED_Set_Intensity+0x9c>
80002068:	21 08       	sub	r8,16
    led_descriptor += led_shift;
    if (led_descriptor->PWM.CHANNEL < 0) continue;

    // Initialize or update the LED PWM channel.
    led_pwm_channel = &AVR32_PWM.channel[led_descriptor->PWM.CHANNEL];
    if (!(AVR32_PWM.sr & (1 << led_descriptor->PWM.CHANNEL)))
8000206a:	fe 7a 30 00 	mov	r10,-53248
8000206e:	30 15       	mov	r5,1
    {
      led_pwm_channel->cmr = (AVR32_PWM_CPRE_MCK << AVR32_PWM_CPRE_OFFSET) &
80002070:	30 03       	mov	r3,0
                             ~(AVR32_PWM_CALG_MASK |
                               AVR32_PWM_CPOL_MASK |
                               AVR32_PWM_CPD_MASK);
      led_pwm_channel->cprd = 0x000000FF;
80002072:	e0 64 00 ff 	mov	r4,255

  // For each specified LED...
  for (leds &= (1 << LED_COUNT) - 1; leds; leds >>= led_shift)
  {
    // Select the next specified LED and check that it has a PWM channel.
    led_shift = 1 + ctz(leds);
80002076:	18 97       	mov	r7,r12
80002078:	5c 97       	brev	r7
8000207a:	ee 07 12 00 	clz	r7,r7
8000207e:	2f f7       	sub	r7,-1
    led_descriptor += led_shift;
80002080:	ee 09 15 04 	lsl	r9,r7,0x4
80002084:	12 08       	add	r8,r9
    if (led_descriptor->PWM.CHANNEL < 0) continue;
80002086:	70 2e       	ld.w	lr,r8[0x8]
80002088:	58 0e       	cp.w	lr,0
8000208a:	c3 15       	brlt	800020ec <LED_Set_Intensity+0x90>

    // Initialize or update the LED PWM channel.
    led_pwm_channel = &AVR32_PWM.channel[led_descriptor->PWM.CHANNEL];
8000208c:	fc 06 15 05 	lsl	r6,lr,0x5
80002090:	e0 26 ce 00 	sub	r6,52736
    if (!(AVR32_PWM.sr & (1 << led_descriptor->PWM.CHANNEL)))
80002094:	74 39       	ld.w	r9,r10[0xc]
80002096:	ea 0e 09 4e 	lsl	lr,r5,lr
8000209a:	fd e9 00 09 	and	r9,lr,r9
8000209e:	c0 91       	brne	800020b0 <LED_Set_Intensity+0x54>
    {
      led_pwm_channel->cmr = (AVR32_PWM_CPRE_MCK << AVR32_PWM_CPRE_OFFSET) &
800020a0:	8d 03       	st.w	r6[0x0],r3
                             ~(AVR32_PWM_CALG_MASK |
                               AVR32_PWM_CPOL_MASK |
                               AVR32_PWM_CPD_MASK);
      led_pwm_channel->cprd = 0x000000FF;
800020a2:	8d 24       	st.w	r6[0x8],r4
      led_pwm_channel->cdty = intensity;
800020a4:	8d 1b       	st.w	r6[0x4],r11
      AVR32_PWM.ena = 1 << led_descriptor->PWM.CHANNEL;
800020a6:	70 29       	ld.w	r9,r8[0x8]
800020a8:	ea 09 09 49 	lsl	r9,r5,r9
800020ac:	95 19       	st.w	r10[0x4],r9
800020ae:	c0 78       	rjmp	800020bc <LED_Set_Intensity+0x60>
    }
    else
    {
      AVR32_PWM.isr;
800020b0:	74 79       	ld.w	r9,r10[0x1c]
      while (!(AVR32_PWM.isr & (1 << led_descriptor->PWM.CHANNEL)));
800020b2:	74 79       	ld.w	r9,r10[0x1c]
800020b4:	fd e9 00 09 	and	r9,lr,r9
800020b8:	cf d0       	breq	800020b2 <LED_Set_Intensity+0x56>
      led_pwm_channel->cupd = intensity;
800020ba:	8d 4b       	st.w	r6[0x10],r11
    }

    // Switch the LED pin to its PWM function.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800020bc:	70 09       	ld.w	r9,r8[0x0]
800020be:	a9 69       	lsl	r9,0x8
800020c0:	e0 29 f0 00 	sub	r9,61440
    if (led_descriptor->PWM.FUNCTION & 0x1)
800020c4:	70 3e       	ld.w	lr,r8[0xc]
800020c6:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
800020ca:	c0 40       	breq	800020d2 <LED_Set_Intensity+0x76>
    {
      led_gpio_port->pmr0s = led_descriptor->GPIO.PIN_MASK;
800020cc:	70 1e       	ld.w	lr,r8[0x4]
800020ce:	93 5e       	st.w	r9[0x14],lr
800020d0:	c0 38       	rjmp	800020d6 <LED_Set_Intensity+0x7a>
    }
    else
    {
      led_gpio_port->pmr0c = led_descriptor->GPIO.PIN_MASK;
800020d2:	70 1e       	ld.w	lr,r8[0x4]
800020d4:	93 6e       	st.w	r9[0x18],lr
    }
    if (led_descriptor->PWM.FUNCTION & 0x2)
800020d6:	70 3e       	ld.w	lr,r8[0xc]
800020d8:	e2 1e 00 02 	andl	lr,0x2,COH
800020dc:	c0 40       	breq	800020e4 <LED_Set_Intensity+0x88>
    {
      led_gpio_port->pmr1s = led_descriptor->GPIO.PIN_MASK;
800020de:	70 1e       	ld.w	lr,r8[0x4]
800020e0:	93 9e       	st.w	r9[0x24],lr
800020e2:	c0 38       	rjmp	800020e8 <LED_Set_Intensity+0x8c>
    }
    else
    {
      led_gpio_port->pmr1c = led_descriptor->GPIO.PIN_MASK;
800020e4:	70 1e       	ld.w	lr,r8[0x4]
800020e6:	93 ae       	st.w	r9[0x28],lr
    }
    led_gpio_port->gperc = led_descriptor->GPIO.PIN_MASK;
800020e8:	70 1e       	ld.w	lr,r8[0x4]
800020ea:	93 2e       	st.w	r9[0x8],lr
  volatile avr32_pwm_channel_t *led_pwm_channel;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // For each specified LED...
  for (leds &= (1 << LED_COUNT) - 1; leds; leds >>= led_shift)
800020ec:	f8 07 0a 4c 	lsr	r12,r12,r7
800020f0:	cc 31       	brne	80002076 <LED_Set_Intensity+0x1a>
800020f2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800020f6:	00 00       	add	r0,r0
800020f8:	80 00       	ld.sh	r0,r0[0x0]
800020fa:	80 00       	ld.sh	r0,r0[0x0]

800020fc <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800020fc:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80002100:	49 18       	lddpc	r8,80002144 <LED_On+0x48>
80002102:	70 09       	ld.w	r9,r8[0x0]
80002104:	f9 e9 10 09 	or	r9,r12,r9
80002108:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000210a:	58 0c       	cp.w	r12,0
8000210c:	5e 0c       	reteq	r12
8000210e:	48 f8       	lddpc	r8,80002148 <LED_On+0x4c>
80002110:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80002112:	18 9a       	mov	r10,r12
80002114:	5c 9a       	brev	r10
80002116:	f4 0a 12 00 	clz	r10,r10
8000211a:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
8000211c:	f4 09 15 04 	lsl	r9,r10,0x4
80002120:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002122:	70 09       	ld.w	r9,r8[0x0]
80002124:	a9 69       	lsl	r9,0x8
80002126:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
8000212a:	70 1b       	ld.w	r11,r8[0x4]
8000212c:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002130:	70 1b       	ld.w	r11,r8[0x4]
80002132:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002136:	70 1b       	ld.w	r11,r8[0x4]
80002138:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
8000213a:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
8000213e:	ce a1       	brne	80002112 <LED_On+0x16>
80002140:	5e fc       	retal	r12
80002142:	00 00       	add	r0,r0
80002144:	00 00       	add	r0,r0
80002146:	00 08       	add	r8,r0
80002148:	80 00       	ld.sh	r0,r0[0x0]
8000214a:	80 00       	ld.sh	r0,r0[0x0]

8000214c <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000214c:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80002150:	49 28       	lddpc	r8,80002198 <LED_Off+0x4c>
80002152:	70 09       	ld.w	r9,r8[0x0]
80002154:	f8 0a 11 ff 	rsub	r10,r12,-1
80002158:	f5 e9 00 09 	and	r9,r10,r9
8000215c:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000215e:	58 0c       	cp.w	r12,0
80002160:	5e 0c       	reteq	r12
80002162:	48 f8       	lddpc	r8,8000219c <LED_Off+0x50>
80002164:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80002166:	18 9a       	mov	r10,r12
80002168:	5c 9a       	brev	r10
8000216a:	f4 0a 12 00 	clz	r10,r10
8000216e:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002170:	f4 09 15 04 	lsl	r9,r10,0x4
80002174:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002176:	70 09       	ld.w	r9,r8[0x0]
80002178:	a9 69       	lsl	r9,0x8
8000217a:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
8000217e:	70 1b       	ld.w	r11,r8[0x4]
80002180:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002184:	70 1b       	ld.w	r11,r8[0x4]
80002186:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000218a:	70 1b       	ld.w	r11,r8[0x4]
8000218c:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
8000218e:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80002192:	ce a1       	brne	80002166 <LED_Off+0x1a>
80002194:	5e fc       	retal	r12
80002196:	00 00       	add	r0,r0
80002198:	00 00       	add	r0,r0
8000219a:	00 08       	add	r8,r0
8000219c:	80 00       	ld.sh	r0,r0[0x0]
8000219e:	80 00       	ld.sh	r0,r0[0x0]

800021a0 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         OK
void sd_mmc_spi_get_capacity(void)
{
800021a0:	d4 01       	pushm	lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
800021a2:	4b c8       	lddpc	r8,80002290 <sd_mmc_spi_get_capacity+0xf0>
800021a4:	11 dc       	ld.ub	r12,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
800021a6:	4b c9       	lddpc	r9,80002294 <sd_mmc_spi_get_capacity+0xf4>
800021a8:	13 89       	ld.ub	r9,r9[0x0]
800021aa:	30 3a       	mov	r10,3
800021ac:	f4 09 18 00 	cp.b	r9,r10
800021b0:	c1 e1       	brne	800021ec <sd_mmc_spi_get_capacity+0x4c>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
800021b2:	f1 3a 00 08 	ld.ub	r10,r8[8]
800021b6:	f1 39 00 09 	ld.ub	r9,r8[9]
800021ba:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800021be:	11 f8       	ld.ub	r8,r8[0x7]
800021c0:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800021c4:	f3 e8 11 08 	or	r8,r9,r8<<0x10
    ++c_size;
800021c8:	2f f8       	sub	r8,-1
    capacity = c_size << 19;
800021ca:	f0 0a 15 13 	lsl	r10,r8,0x13
800021ce:	4b 39       	lddpc	r9,80002298 <sd_mmc_spi_get_capacity+0xf8>
800021d0:	93 0a       	st.w	r9[0x0],r10
    capacity_mult = (c_size >> 13) & 0x01FF;
800021d2:	f5 d8 c1 a9 	bfextu	r10,r8,0xd,0x9
800021d6:	4b 28       	lddpc	r8,8000229c <sd_mmc_spi_get_capacity+0xfc>
800021d8:	b0 0a       	st.h	r8[0x0],r10
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
800021da:	72 09       	ld.w	r9,r9[0x0]
800021dc:	90 08       	ld.sh	r8,r8[0x0]
800021de:	a9 99       	lsr	r9,0x9
800021e0:	20 19       	sub	r9,1
800021e2:	b7 78       	lsl	r8,0x17
800021e4:	10 09       	add	r9,r8
800021e6:	4a f8       	lddpc	r8,800022a0 <sd_mmc_spi_get_capacity+0x100>
800021e8:	91 09       	st.w	r8[0x0],r9
800021ea:	c4 28       	rjmp	8000226e <sd_mmc_spi_get_capacity+0xce>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
800021ec:	4a 98       	lddpc	r8,80002290 <sd_mmc_spi_get_capacity+0xf0>
800021ee:	f1 3a 00 0a 	ld.ub	r10,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
800021f2:	f1 3b 00 08 	ld.ub	r11,r8[8]
800021f6:	a7 8b       	lsr	r11,0x6
800021f8:	11 fe       	ld.ub	lr,r8[0x7]
800021fa:	f6 0e 00 2b 	add	r11,r11,lr<<0x2
800021fe:	11 ee       	ld.ub	lr,r8[0x6]
80002200:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
80002204:	ab 6e       	lsl	lr,0xa
80002206:	1c 0b       	add	r11,lr
80002208:	2f fb       	sub	r11,-1
8000220a:	f1 38 00 09 	ld.ub	r8,r8[9]
8000220e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002212:	f4 0e 16 07 	lsr	lr,r10,0x7
80002216:	fc 08 00 18 	add	r8,lr,r8<<0x1
8000221a:	2f e8       	sub	r8,-2
8000221c:	f6 08 09 48 	lsl	r8,r11,r8
80002220:	20 18       	sub	r8,1
80002222:	4a 0b       	lddpc	r11,800022a0 <sd_mmc_spi_get_capacity+0x100>
80002224:	97 08       	st.w	r11[0x0],r8
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
80002226:	76 0b       	ld.w	r11,r11[0x0]
80002228:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
8000222c:	f6 cc ff ff 	sub	r12,r11,-1
80002230:	f8 08 09 4c 	lsl	r12,r12,r8
80002234:	49 9b       	lddpc	r11,80002298 <sd_mmc_spi_get_capacity+0xf8>
80002236:	97 0c       	st.w	r11[0x0],r12
    capacity_mult = 0;
80002238:	30 0c       	mov	r12,0
8000223a:	49 9b       	lddpc	r11,8000229c <sd_mmc_spi_get_capacity+0xfc>
8000223c:	b6 0c       	st.h	r11[0x0],r12
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
8000223e:	30 9b       	mov	r11,9
80002240:	f6 08 18 00 	cp.b	r8,r11
80002244:	e0 88 00 08 	brls	80002254 <sd_mmc_spi_get_capacity+0xb4>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
80002248:	49 6b       	lddpc	r11,800022a0 <sd_mmc_spi_get_capacity+0x100>
8000224a:	76 0c       	ld.w	r12,r11[0x0]
8000224c:	20 98       	sub	r8,9
8000224e:	f8 08 09 48 	lsl	r8,r12,r8
80002252:	97 08       	st.w	r11[0x0],r8
    }
  }
  if (card_type == MMC_CARD)
80002254:	58 09       	cp.w	r9,0
80002256:	c0 c1       	brne	8000226e <sd_mmc_spi_get_capacity+0xce>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
80002258:	f1 da c0 45 	bfextu	r8,r10,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
8000225c:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80002260:	48 c9       	lddpc	r9,80002290 <sd_mmc_spi_get_capacity+0xf0>
80002262:	f3 39 00 0b 	ld.ub	r9,r9[11]
80002266:	a3 7a       	lsl	r10,0x3
80002268:	f5 e9 12 59 	or	r9,r10,r9>>0x5
8000226c:	c0 c8       	rjmp	80002284 <sd_mmc_spi_get_capacity+0xe4>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
8000226e:	48 9a       	lddpc	r10,80002290 <sd_mmc_spi_get_capacity+0xf0>
80002270:	f5 39 00 0a 	ld.ub	r9,r10[10]
80002274:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
80002278:	f5 38 00 0b 	ld.ub	r8,r10[11]
8000227c:	a7 98       	lsr	r8,0x7
8000227e:	f0 09 00 18 	add	r8,r8,r9<<0x1
80002282:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
80002284:	2f f9       	sub	r9,-1
80002286:	2f f8       	sub	r8,-1
80002288:	b1 39       	mul	r9,r8
8000228a:	48 78       	lddpc	r8,800022a4 <sd_mmc_spi_get_capacity+0x104>
8000228c:	b0 09       	st.h	r8[0x0],r9
}
8000228e:	d8 02       	popm	pc
80002290:	00 00       	add	r0,r0
80002292:	04 7c       	tst	r12,r2
80002294:	00 00       	add	r0,r0
80002296:	04 7a       	tst	r10,r2
80002298:	00 00       	add	r0,r0
8000229a:	04 6c       	and	r12,r2
8000229c:	00 00       	add	r0,r0
8000229e:	04 70       	tst	r0,r2
800022a0:	00 00       	add	r0,r0
800022a2:	04 74       	tst	r4,r2
800022a4:	00 00       	add	r0,r0
800022a6:	04 72       	tst	r2,r2

800022a8 <sd_mmc_spi_write_close>:
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{

}
800022a8:	5e fc       	retal	r12
800022aa:	d7 03       	nop

800022ac <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
800022ac:	d4 01       	pushm	lr
800022ae:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800022b0:	18 9b       	mov	r11,r12
800022b2:	fe 7c 24 00 	mov	r12,-56320
800022b6:	f0 1f 00 09 	mcall	800022d8 <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800022ba:	fa cb ff fe 	sub	r11,sp,-2
800022be:	fe 7c 24 00 	mov	r12,-56320
800022c2:	f0 1f 00 07 	mcall	800022dc <sd_mmc_spi_send_and_read+0x30>
800022c6:	58 1c       	cp.w	r12,1
800022c8:	c0 41       	brne	800022d0 <sd_mmc_spi_send_and_read+0x24>
800022ca:	e0 6c 00 ff 	mov	r12,255
800022ce:	c0 28       	rjmp	800022d2 <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
800022d0:	1b bc       	ld.ub	r12,sp[0x3]
}
800022d2:	2f fd       	sub	sp,-4
800022d4:	d8 02       	popm	pc
800022d6:	00 00       	add	r0,r0
800022d8:	80 00       	ld.sh	r0,r0[0x0]
800022da:	32 66       	mov	r6,38
800022dc:	80 00       	ld.sh	r0,r0[0x0]
800022de:	32 82       	mov	r2,40

800022e0 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          OK when card is not busy
Bool sd_mmc_spi_wait_not_busy(void)
{
800022e0:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800022e2:	30 1b       	mov	r11,1
800022e4:	fe 7c 24 00 	mov	r12,-56320
800022e8:	f0 1f 00 10 	mcall	80002328 <sd_mmc_spi_wait_not_busy+0x48>
800022ec:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
800022ee:	e0 65 00 ff 	mov	r5,255
800022f2:	48 f4       	lddpc	r4,8000232c <sd_mmc_spi_wait_not_busy+0x4c>
800022f4:	3f f6       	mov	r6,-1
800022f6:	c0 b8       	rjmp	8000230c <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
800022f8:	2f f7       	sub	r7,-1
    if (retry == 200000)
800022fa:	e2 57 0d 40 	cp.w	r7,200000
800022fe:	c0 71       	brne	8000230c <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002300:	30 1b       	mov	r11,1
80002302:	fe 7c 24 00 	mov	r12,-56320
80002306:	f0 1f 00 0b 	mcall	80002330 <sd_mmc_spi_wait_not_busy+0x50>
8000230a:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
8000230c:	0a 9c       	mov	r12,r5
8000230e:	f0 1f 00 0a 	mcall	80002334 <sd_mmc_spi_wait_not_busy+0x54>
80002312:	a8 8c       	st.b	r4[0x0],r12
80002314:	ec 0c 18 00 	cp.b	r12,r6
80002318:	cf 01       	brne	800022f8 <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return KO;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000231a:	30 1b       	mov	r11,1
8000231c:	fe 7c 24 00 	mov	r12,-56320
80002320:	f0 1f 00 04 	mcall	80002330 <sd_mmc_spi_wait_not_busy+0x50>
80002324:	da 2a       	popm	r4-r7,pc,r12=1
80002326:	00 00       	add	r0,r0
80002328:	80 00       	ld.sh	r0,r0[0x0]
8000232a:	31 32       	mov	r2,19
8000232c:	00 00       	add	r0,r0
8000232e:	04 8c       	andn	r12,r2
80002330:	80 00       	ld.sh	r0,r0[0x0]
80002332:	31 7e       	mov	lr,23
80002334:	80 00       	ld.sh	r0,r0[0x0]
80002336:	22 ac       	sub	r12,42

80002338 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> OK
Bool sd_mmc_spi_write_open (uint32_t pos)
{
80002338:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
8000233a:	a9 7c       	lsl	r12,0x9
8000233c:	48 38       	lddpc	r8,80002348 <sd_mmc_spi_write_open+0x10>
8000233e:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80002340:	f0 1f 00 03 	mcall	8000234c <sd_mmc_spi_write_open+0x14>
}
80002344:	d8 02       	popm	pc
80002346:	00 00       	add	r0,r0
80002348:	00 00       	add	r0,r0
8000234a:	00 e8       	st.h	--r0,r8
8000234c:	80 00       	ld.sh	r0,r0[0x0]
8000234e:	22 e0       	sub	r0,46

80002350 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
Bool sd_mmc_spi_read_close (void)
{
80002350:	d4 01       	pushm	lr
  if (KO == sd_mmc_spi_wait_not_busy())
80002352:	f0 1f 00 03 	mcall	8000235c <sd_mmc_spi_read_close+0xc>
    return false;
  return true;
}
80002356:	5f 1c       	srne	r12
80002358:	d8 02       	popm	pc
8000235a:	00 00       	add	r0,r0
8000235c:	80 00       	ld.sh	r0,r0[0x0]
8000235e:	22 e0       	sub	r0,46

80002360 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> OK
Bool sd_mmc_spi_read_open (uint32_t pos)
{
80002360:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
80002362:	a9 7c       	lsl	r12,0x9
80002364:	48 38       	lddpc	r8,80002370 <sd_mmc_spi_read_open+0x10>
80002366:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80002368:	f0 1f 00 03 	mcall	80002374 <sd_mmc_spi_read_open+0x14>
}
8000236c:	d8 02       	popm	pc
8000236e:	00 00       	add	r0,r0
80002370:	00 00       	add	r0,r0
80002372:	00 e8       	st.h	--r0,r8
80002374:	80 00       	ld.sh	r0,r0[0x0]
80002376:	22 e0       	sub	r0,46

80002378 <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
80002378:	eb cd 40 f8 	pushm	r3-r7,lr
8000237c:	18 96       	mov	r6,r12
8000237e:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
80002380:	e0 6b 00 ff 	mov	r11,255
80002384:	fe 7c 24 00 	mov	r12,-56320
80002388:	f0 1f 00 2b 	mcall	80002434 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
8000238c:	0c 9b       	mov	r11,r6
8000238e:	a7 ab       	sbr	r11,0x6
80002390:	5c 5b       	castu.b	r11
80002392:	fe 7c 24 00 	mov	r12,-56320
80002396:	f0 1f 00 28 	mcall	80002434 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
8000239a:	ee 0b 16 18 	lsr	r11,r7,0x18
8000239e:	fe 7c 24 00 	mov	r12,-56320
800023a2:	f0 1f 00 25 	mcall	80002434 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
800023a6:	ee 0b 16 10 	lsr	r11,r7,0x10
800023aa:	fe 7c 24 00 	mov	r12,-56320
800023ae:	f0 1f 00 22 	mcall	80002434 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
800023b2:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
800023b6:	fe 7c 24 00 	mov	r12,-56320
800023ba:	f0 1f 00 1f 	mcall	80002434 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
800023be:	0e 9b       	mov	r11,r7
800023c0:	5c 7b       	castu.h	r11
800023c2:	fe 7c 24 00 	mov	r12,-56320
800023c6:	f0 1f 00 1c 	mcall	80002434 <sd_mmc_spi_command+0xbc>
  switch(command)
800023ca:	30 08       	mov	r8,0
800023cc:	f0 06 18 00 	cp.b	r6,r8
800023d0:	c0 60       	breq	800023dc <sd_mmc_spi_command+0x64>
800023d2:	30 88       	mov	r8,8
800023d4:	f0 06 18 00 	cp.b	r6,r8
800023d8:	c1 01       	brne	800023f8 <sd_mmc_spi_command+0x80>
800023da:	c0 88       	rjmp	800023ea <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
800023dc:	e0 6b 00 95 	mov	r11,149
800023e0:	fe 7c 24 00 	mov	r12,-56320
800023e4:	f0 1f 00 14 	mcall	80002434 <sd_mmc_spi_command+0xbc>
         break;
800023e8:	c0 e8       	rjmp	80002404 <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
800023ea:	e0 6b 00 87 	mov	r11,135
800023ee:	fe 7c 24 00 	mov	r12,-56320
800023f2:	f0 1f 00 11 	mcall	80002434 <sd_mmc_spi_command+0xbc>
         break;
800023f6:	c0 78       	rjmp	80002404 <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
800023f8:	e0 6b 00 ff 	mov	r11,255
800023fc:	fe 7c 24 00 	mov	r12,-56320
80002400:	f0 1f 00 0d 	mcall	80002434 <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002404:	3f f9       	mov	r9,-1
80002406:	48 d8       	lddpc	r8,80002438 <sd_mmc_spi_command+0xc0>
80002408:	b0 89       	st.b	r8[0x0],r9
8000240a:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000240c:	e0 64 00 ff 	mov	r4,255
80002410:	10 93       	mov	r3,r8
80002412:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
80002414:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002416:	c0 68       	rjmp	80002422 <sd_mmc_spi_command+0xaa>
  {
    retry++;
80002418:	2f f7       	sub	r7,-1
8000241a:	5c 57       	castu.b	r7
    if(retry > 10) break;
8000241c:	ea 07 18 00 	cp.b	r7,r5
80002420:	c0 80       	breq	80002430 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002422:	08 9c       	mov	r12,r4
80002424:	f0 1f 00 06 	mcall	8000243c <sd_mmc_spi_command+0xc4>
80002428:	a6 8c       	st.b	r3[0x0],r12
8000242a:	ec 0c 18 00 	cp.b	r12,r6
8000242e:	cf 50       	breq	80002418 <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
80002430:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002434:	80 00       	ld.sh	r0,r0[0x0]
80002436:	32 66       	mov	r6,38
80002438:	00 00       	add	r0,r0
8000243a:	04 8c       	andn	r12,r2
8000243c:	80 00       	ld.sh	r0,r0[0x0]
8000243e:	22 ac       	sub	r12,42

80002440 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
80002440:	eb cd 40 c0 	pushm	r6-r7,lr
80002444:	18 97       	mov	r7,r12
80002446:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002448:	30 1b       	mov	r11,1
8000244a:	fe 7c 24 00 	mov	r12,-56320
8000244e:	f0 1f 00 09 	mcall	80002470 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
80002452:	0c 9b       	mov	r11,r6
80002454:	0e 9c       	mov	r12,r7
80002456:	f0 1f 00 08 	mcall	80002474 <sd_mmc_spi_send_command+0x34>
8000245a:	48 87       	lddpc	r7,80002478 <sd_mmc_spi_send_command+0x38>
8000245c:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000245e:	30 1b       	mov	r11,1
80002460:	fe 7c 24 00 	mov	r12,-56320
80002464:	f0 1f 00 06 	mcall	8000247c <sd_mmc_spi_send_command+0x3c>
  return r1;
}
80002468:	0f 8c       	ld.ub	r12,r7[0x0]
8000246a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000246e:	00 00       	add	r0,r0
80002470:	80 00       	ld.sh	r0,r0[0x0]
80002472:	31 32       	mov	r2,19
80002474:	80 00       	ld.sh	r0,r0[0x0]
80002476:	23 78       	sub	r8,55
80002478:	00 00       	add	r0,r0
8000247a:	04 8c       	andn	r12,r2
8000247c:	80 00       	ld.sh	r0,r0[0x0]
8000247e:	31 7e       	mov	lr,23

80002480 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (OK)
//!   The memory does not respond (disconnected) (KO)
Bool sd_mmc_spi_check_presence(void)
{
80002480:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
80002484:	49 a8       	lddpc	r8,800024ec <sd_mmc_spi_check_presence+0x6c>
80002486:	11 89       	ld.ub	r9,r8[0x0]
80002488:	30 08       	mov	r8,0
8000248a:	f0 09 18 00 	cp.b	r9,r8
8000248e:	c1 f1       	brne	800024cc <sd_mmc_spi_check_presence+0x4c>
80002490:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002492:	0e 94       	mov	r4,r7
80002494:	49 73       	lddpc	r3,800024f0 <sd_mmc_spi_check_presence+0x70>
80002496:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002498:	e0 62 00 ff 	mov	r2,255
8000249c:	fe 71 24 00 	mov	r1,-56320
      retry++;
      if (retry > 10)
800024a0:	30 b5       	mov	r5,11
800024a2:	c0 c8       	rjmp	800024ba <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800024a4:	04 9b       	mov	r11,r2
800024a6:	02 9c       	mov	r12,r1
800024a8:	f0 1f 00 13 	mcall	800024f4 <sd_mmc_spi_check_presence+0x74>
      retry++;
800024ac:	2f f7       	sub	r7,-1
800024ae:	5c 87       	casts.h	r7
      if (retry > 10)
800024b0:	ea 07 19 00 	cp.h	r7,r5
800024b4:	c0 31       	brne	800024ba <sd_mmc_spi_check_presence+0x3a>
800024b6:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800024ba:	08 9b       	mov	r11,r4
800024bc:	08 9c       	mov	r12,r4
800024be:	f0 1f 00 0f 	mcall	800024f8 <sd_mmc_spi_check_presence+0x78>
800024c2:	a6 8c       	st.b	r3[0x0],r12
800024c4:	ec 0c 18 00 	cp.b	r12,r6
800024c8:	ce e1       	brne	800024a4 <sd_mmc_spi_check_presence+0x24>
800024ca:	c0 e8       	rjmp	800024e6 <sd_mmc_spi_check_presence+0x66>
    return OK;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
800024cc:	30 0b       	mov	r11,0
800024ce:	33 bc       	mov	r12,59
800024d0:	f0 1f 00 0a 	mcall	800024f8 <sd_mmc_spi_check_presence+0x78>
800024d4:	48 78       	lddpc	r8,800024f0 <sd_mmc_spi_check_presence+0x70>
800024d6:	b0 8c       	st.b	r8[0x0],r12
800024d8:	58 0c       	cp.w	r12,0
800024da:	c0 60       	breq	800024e6 <sd_mmc_spi_check_presence+0x66>
      return OK;
    sd_mmc_spi_init_done = false;
800024dc:	30 09       	mov	r9,0
800024de:	48 48       	lddpc	r8,800024ec <sd_mmc_spi_check_presence+0x6c>
800024e0:	b0 89       	st.b	r8[0x0],r9
800024e2:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return KO;
800024e6:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
800024ea:	00 00       	add	r0,r0
800024ec:	00 00       	add	r0,r0
800024ee:	01 00       	ld.w	r0,r0++
800024f0:	00 00       	add	r0,r0
800024f2:	04 8c       	andn	r12,r2
800024f4:	80 00       	ld.sh	r0,r0[0x0]
800024f6:	32 66       	mov	r6,38
800024f8:	80 00       	ld.sh	r0,r0[0x0]
800024fa:	24 40       	sub	r0,68

800024fc <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> OK
//!   The write failed      -> KO
//!
Bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
800024fc:	eb cd 40 e0 	pushm	r5-r7,lr
80002500:	18 97       	mov	r7,r12
  const uint8_t *_ram = ram;
  uint16_t i;

  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
80002502:	f0 1f 00 49 	mcall	80002624 <sd_mmc_spi_write_sector_from_ram+0x128>
80002506:	e0 80 00 8c 	breq	8000261e <sd_mmc_spi_write_sector_from_ram+0x122>
    return KO;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000250a:	30 1b       	mov	r11,1
8000250c:	fe 7c 24 00 	mov	r12,-56320
80002510:	f0 1f 00 46 	mcall	80002628 <sd_mmc_spi_write_sector_from_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002514:	4c 68       	lddpc	r8,8000262c <sd_mmc_spi_write_sector_from_ram+0x130>
80002516:	11 89       	ld.ub	r9,r8[0x0]
80002518:	30 38       	mov	r8,3
8000251a:	f0 09 18 00 	cp.b	r9,r8
8000251e:	c0 a1       	brne	80002532 <sd_mmc_spi_write_sector_from_ram+0x36>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002520:	4c 48       	lddpc	r8,80002630 <sd_mmc_spi_write_sector_from_ram+0x134>
80002522:	70 0b       	ld.w	r11,r8[0x0]
80002524:	a9 9b       	lsr	r11,0x9
80002526:	31 8c       	mov	r12,24
80002528:	f0 1f 00 43 	mcall	80002634 <sd_mmc_spi_write_sector_from_ram+0x138>
8000252c:	4c 38       	lddpc	r8,80002638 <sd_mmc_spi_write_sector_from_ram+0x13c>
8000252e:	b0 8c       	st.b	r8[0x0],r12
80002530:	c0 88       	rjmp	80002540 <sd_mmc_spi_write_sector_from_ram+0x44>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
80002532:	4c 08       	lddpc	r8,80002630 <sd_mmc_spi_write_sector_from_ram+0x134>
80002534:	70 0b       	ld.w	r11,r8[0x0]
80002536:	31 8c       	mov	r12,24
80002538:	f0 1f 00 3f 	mcall	80002634 <sd_mmc_spi_write_sector_from_ram+0x138>
8000253c:	4b f8       	lddpc	r8,80002638 <sd_mmc_spi_write_sector_from_ram+0x13c>
8000253e:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if(r1 != 0x00)
80002540:	4b e8       	lddpc	r8,80002638 <sd_mmc_spi_write_sector_from_ram+0x13c>
80002542:	11 89       	ld.ub	r9,r8[0x0]
80002544:	30 08       	mov	r8,0
80002546:	f0 09 18 00 	cp.b	r9,r8
8000254a:	c0 80       	breq	8000255a <sd_mmc_spi_write_sector_from_ram+0x5e>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000254c:	30 1b       	mov	r11,1
8000254e:	fe 7c 24 00 	mov	r12,-56320
80002552:	f0 1f 00 3b 	mcall	8000263c <sd_mmc_spi_write_sector_from_ram+0x140>
80002556:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return KO;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
8000255a:	e0 6b 00 ff 	mov	r11,255
8000255e:	fe 7c 24 00 	mov	r12,-56320
80002562:	f0 1f 00 38 	mcall	80002640 <sd_mmc_spi_write_sector_from_ram+0x144>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
80002566:	e0 6b 00 fe 	mov	r11,254
8000256a:	fe 7c 24 00 	mov	r12,-56320
8000256e:	f0 1f 00 35 	mcall	80002640 <sd_mmc_spi_write_sector_from_ram+0x144>
//!
//! @return bit
//!   The write succeeded   -> OK
//!   The write failed      -> KO
//!
Bool sd_mmc_spi_write_sector_from_ram(const void *ram)
80002572:	ee c6 fe 00 	sub	r6,r7,-512
  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
80002576:	fe 75 24 00 	mov	r5,-56320
8000257a:	0f 3b       	ld.ub	r11,r7++
8000257c:	0a 9c       	mov	r12,r5
8000257e:	f0 1f 00 31 	mcall	80002640 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80002582:	0c 37       	cp.w	r7,r6
80002584:	cf b1       	brne	8000257a <sd_mmc_spi_write_sector_from_ram+0x7e>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
80002586:	e0 6b 00 ff 	mov	r11,255
8000258a:	fe 7c 24 00 	mov	r12,-56320
8000258e:	f0 1f 00 2d 	mcall	80002640 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002592:	e0 6b 00 ff 	mov	r11,255
80002596:	fe 7c 24 00 	mov	r12,-56320
8000259a:	f0 1f 00 2a 	mcall	80002640 <sd_mmc_spi_write_sector_from_ram+0x144>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000259e:	e0 6c 00 ff 	mov	r12,255
800025a2:	f0 1f 00 29 	mcall	80002644 <sd_mmc_spi_write_sector_from_ram+0x148>
800025a6:	4a 58       	lddpc	r8,80002638 <sd_mmc_spi_write_sector_from_ram+0x13c>
800025a8:	b0 8c       	st.b	r8[0x0],r12
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
800025aa:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
800025ae:	58 5c       	cp.w	r12,5
800025b0:	c1 40       	breq	800025d8 <sd_mmc_spi_write_sector_from_ram+0xdc>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
800025b2:	e0 6b 00 ff 	mov	r11,255
800025b6:	fe 7c 24 00 	mov	r12,-56320
800025ba:	f0 1f 00 22 	mcall	80002640 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_write(SD_MMC_SPI,0xFF);
800025be:	e0 6b 00 ff 	mov	r11,255
800025c2:	fe 7c 24 00 	mov	r12,-56320
800025c6:	f0 1f 00 1f 	mcall	80002640 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800025ca:	30 1b       	mov	r11,1
800025cc:	fe 7c 24 00 	mov	r12,-56320
800025d0:	f0 1f 00 1b 	mcall	8000263c <sd_mmc_spi_write_sector_from_ram+0x140>
800025d4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return KO;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
800025d8:	e0 6b 00 ff 	mov	r11,255
800025dc:	fe 7c 24 00 	mov	r12,-56320
800025e0:	f0 1f 00 18 	mcall	80002640 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
800025e4:	e0 6b 00 ff 	mov	r11,255
800025e8:	fe 7c 24 00 	mov	r12,-56320
800025ec:	f0 1f 00 15 	mcall	80002640 <sd_mmc_spi_write_sector_from_ram+0x144>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025f0:	30 1b       	mov	r11,1
800025f2:	fe 7c 24 00 	mov	r12,-56320
800025f6:	f0 1f 00 12 	mcall	8000263c <sd_mmc_spi_write_sector_from_ram+0x140>
  gl_ptr_mem += 512;        // Update the memory pointer.
800025fa:	48 e8       	lddpc	r8,80002630 <sd_mmc_spi_write_sector_from_ram+0x134>
800025fc:	70 09       	ld.w	r9,r8[0x0]
800025fe:	f2 c9 fe 00 	sub	r9,r9,-512
80002602:	91 09       	st.w	r8[0x0],r9
80002604:	30 07       	mov	r7,0
  // wait card not busy after last programming operation
  i=0;
  while (KO == sd_mmc_spi_wait_not_busy())
  {
    i++;
    if (i == 10)
80002606:	30 a6       	mov	r6,10
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (KO == sd_mmc_spi_wait_not_busy())
80002608:	c0 68       	rjmp	80002614 <sd_mmc_spi_write_sector_from_ram+0x118>
  {
    i++;
8000260a:	2f f7       	sub	r7,-1
8000260c:	5c 87       	casts.h	r7
    if (i == 10)
8000260e:	ec 07 19 00 	cp.h	r7,r6
80002612:	c0 60       	breq	8000261e <sd_mmc_spi_write_sector_from_ram+0x122>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (KO == sd_mmc_spi_wait_not_busy())
80002614:	f0 1f 00 04 	mcall	80002624 <sd_mmc_spi_write_sector_from_ram+0x128>
80002618:	cf 90       	breq	8000260a <sd_mmc_spi_write_sector_from_ram+0x10e>
8000261a:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
8000261e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002622:	00 00       	add	r0,r0
80002624:	80 00       	ld.sh	r0,r0[0x0]
80002626:	22 e0       	sub	r0,46
80002628:	80 00       	ld.sh	r0,r0[0x0]
8000262a:	31 32       	mov	r2,19
8000262c:	00 00       	add	r0,r0
8000262e:	04 7a       	tst	r10,r2
80002630:	00 00       	add	r0,r0
80002632:	00 e8       	st.h	--r0,r8
80002634:	80 00       	ld.sh	r0,r0[0x0]
80002636:	23 78       	sub	r8,55
80002638:	00 00       	add	r0,r0
8000263a:	04 8c       	andn	r12,r2
8000263c:	80 00       	ld.sh	r0,r0[0x0]
8000263e:	31 7e       	mov	lr,23
80002640:	80 00       	ld.sh	r0,r0[0x0]
80002642:	32 66       	mov	r6,38
80002644:	80 00       	ld.sh	r0,r0[0x0]
80002646:	22 ac       	sub	r12,42

80002648 <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR                                  


int sd_mmc_spi_check_hc(void)
{
80002648:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
8000264c:	f0 1f 00 1c 	mcall	800026bc <sd_mmc_spi_check_hc+0x74>
80002650:	c0 31       	brne	80002656 <sd_mmc_spi_check_hc+0xe>
80002652:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002656:	30 1b       	mov	r11,1
80002658:	fe 7c 24 00 	mov	r12,-56320
8000265c:	f0 1f 00 19 	mcall	800026c0 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
80002660:	30 0b       	mov	r11,0
80002662:	33 ac       	mov	r12,58
80002664:	f0 1f 00 18 	mcall	800026c4 <sd_mmc_spi_check_hc+0x7c>
80002668:	49 88       	lddpc	r8,800026c8 <sd_mmc_spi_check_hc+0x80>
8000266a:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
8000266c:	58 0c       	cp.w	r12,0
8000266e:	c0 80       	breq	8000267e <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002670:	30 1b       	mov	r11,1
80002672:	fe 7c 24 00 	mov	r12,-56320
80002676:	f0 1f 00 16 	mcall	800026cc <sd_mmc_spi_check_hc+0x84>
8000267a:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
8000267e:	e0 6c 00 ff 	mov	r12,255
80002682:	f0 1f 00 14 	mcall	800026d0 <sd_mmc_spi_check_hc+0x88>
80002686:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002688:	e0 6c 00 ff 	mov	r12,255
8000268c:	f0 1f 00 11 	mcall	800026d0 <sd_mmc_spi_check_hc+0x88>
80002690:	48 e7       	lddpc	r7,800026c8 <sd_mmc_spi_check_hc+0x80>
80002692:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002694:	e0 6c 00 ff 	mov	r12,255
80002698:	f0 1f 00 0e 	mcall	800026d0 <sd_mmc_spi_check_hc+0x88>
8000269c:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000269e:	e0 6c 00 ff 	mov	r12,255
800026a2:	f0 1f 00 0c 	mcall	800026d0 <sd_mmc_spi_check_hc+0x88>
800026a6:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026a8:	30 1b       	mov	r11,1
800026aa:	fe 7c 24 00 	mov	r12,-56320
800026ae:	f0 1f 00 08 	mcall	800026cc <sd_mmc_spi_check_hc+0x84>
800026b2:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
800026b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800026ba:	00 00       	add	r0,r0
800026bc:	80 00       	ld.sh	r0,r0[0x0]
800026be:	22 e0       	sub	r0,46
800026c0:	80 00       	ld.sh	r0,r0[0x0]
800026c2:	31 32       	mov	r2,19
800026c4:	80 00       	ld.sh	r0,r0[0x0]
800026c6:	23 78       	sub	r8,55
800026c8:	00 00       	add	r0,r0
800026ca:	04 8c       	andn	r12,r2
800026cc:	80 00       	ld.sh	r0,r0[0x0]
800026ce:	31 7e       	mov	lr,23
800026d0:	80 00       	ld.sh	r0,r0[0x0]
800026d2:	22 ac       	sub	r12,42

800026d4 <sd_mmc_spi_get_if>:
//!                OK
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
800026d4:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
800026d8:	f0 1f 00 27 	mcall	80002774 <sd_mmc_spi_get_if+0xa0>
800026dc:	c0 31       	brne	800026e2 <sd_mmc_spi_get_if+0xe>
800026de:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800026e2:	30 1b       	mov	r11,1
800026e4:	fe 7c 24 00 	mov	r12,-56320
800026e8:	f0 1f 00 24 	mcall	80002778 <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
800026ec:	e0 6b 01 aa 	mov	r11,426
800026f0:	30 8c       	mov	r12,8
800026f2:	f0 1f 00 23 	mcall	8000277c <sd_mmc_spi_get_if+0xa8>
800026f6:	4a 38       	lddpc	r8,80002780 <sd_mmc_spi_get_if+0xac>
800026f8:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
800026fa:	e2 1c 00 04 	andl	r12,0x4,COH
800026fe:	c0 80       	breq	8000270e <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002700:	30 1b       	mov	r11,1
80002702:	fe 7c 24 00 	mov	r12,-56320
80002706:	f0 1f 00 20 	mcall	80002784 <sd_mmc_spi_get_if+0xb0>
8000270a:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000270e:	e0 6c 00 ff 	mov	r12,255
80002712:	f0 1f 00 1e 	mcall	80002788 <sd_mmc_spi_get_if+0xb4>
80002716:	49 b7       	lddpc	r7,80002780 <sd_mmc_spi_get_if+0xac>
80002718:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000271a:	e0 6c 00 ff 	mov	r12,255
8000271e:	f0 1f 00 1b 	mcall	80002788 <sd_mmc_spi_get_if+0xb4>
80002722:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002724:	e0 6c 00 ff 	mov	r12,255
80002728:	f0 1f 00 18 	mcall	80002788 <sd_mmc_spi_get_if+0xb4>
8000272c:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
8000272e:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002732:	c0 81       	brne	80002742 <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002734:	30 1b       	mov	r11,1
80002736:	fe 7c 24 00 	mov	r12,-56320
8000273a:	f0 1f 00 13 	mcall	80002784 <sd_mmc_spi_get_if+0xb0>
8000273e:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002742:	e0 6c 00 ff 	mov	r12,255
80002746:	f0 1f 00 11 	mcall	80002788 <sd_mmc_spi_get_if+0xb4>
8000274a:	48 e8       	lddpc	r8,80002780 <sd_mmc_spi_get_if+0xac>
8000274c:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
8000274e:	3a a8       	mov	r8,-86
80002750:	f0 0c 18 00 	cp.b	r12,r8
80002754:	c0 80       	breq	80002764 <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002756:	30 1b       	mov	r11,1
80002758:	fe 7c 24 00 	mov	r12,-56320
8000275c:	f0 1f 00 0a 	mcall	80002784 <sd_mmc_spi_get_if+0xb0>
80002760:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002764:	30 1b       	mov	r11,1
80002766:	fe 7c 24 00 	mov	r12,-56320
8000276a:	f0 1f 00 07 	mcall	80002784 <sd_mmc_spi_get_if+0xb0>
8000276e:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80002772:	00 00       	add	r0,r0
80002774:	80 00       	ld.sh	r0,r0[0x0]
80002776:	22 e0       	sub	r0,46
80002778:	80 00       	ld.sh	r0,r0[0x0]
8000277a:	31 32       	mov	r2,19
8000277c:	80 00       	ld.sh	r0,r0[0x0]
8000277e:	23 78       	sub	r8,55
80002780:	00 00       	add	r0,r0
80002782:	04 8c       	andn	r12,r2
80002784:	80 00       	ld.sh	r0,r0[0x0]
80002786:	31 7e       	mov	lr,23
80002788:	80 00       	ld.sh	r0,r0[0x0]
8000278a:	22 ac       	sub	r12,42

8000278c <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> OK
//!   The read failed (bad address, etc.)  -> KO
//!/
Bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
8000278c:	eb cd 40 f8 	pushm	r3-r7,lr
80002790:	20 1d       	sub	sp,4
80002792:	18 93       	mov	r3,r12
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
80002794:	f0 1f 00 48 	mcall	800028b4 <sd_mmc_spi_read_sector_to_ram+0x128>
80002798:	e0 80 00 8a 	breq	800028ac <sd_mmc_spi_read_sector_to_ram+0x120>
    return KO;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000279c:	30 1b       	mov	r11,1
8000279e:	fe 7c 24 00 	mov	r12,-56320
800027a2:	f0 1f 00 46 	mcall	800028b8 <sd_mmc_spi_read_sector_to_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
800027a6:	4c 68       	lddpc	r8,800028bc <sd_mmc_spi_read_sector_to_ram+0x130>
800027a8:	11 89       	ld.ub	r9,r8[0x0]
800027aa:	30 38       	mov	r8,3
800027ac:	f0 09 18 00 	cp.b	r9,r8
800027b0:	c0 a1       	brne	800027c4 <sd_mmc_spi_read_sector_to_ram+0x38>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
800027b2:	4c 48       	lddpc	r8,800028c0 <sd_mmc_spi_read_sector_to_ram+0x134>
800027b4:	70 0b       	ld.w	r11,r8[0x0]
800027b6:	a9 9b       	lsr	r11,0x9
800027b8:	31 1c       	mov	r12,17
800027ba:	f0 1f 00 43 	mcall	800028c4 <sd_mmc_spi_read_sector_to_ram+0x138>
800027be:	4c 38       	lddpc	r8,800028c8 <sd_mmc_spi_read_sector_to_ram+0x13c>
800027c0:	b0 8c       	st.b	r8[0x0],r12
800027c2:	c0 88       	rjmp	800027d2 <sd_mmc_spi_read_sector_to_ram+0x46>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
800027c4:	4b f8       	lddpc	r8,800028c0 <sd_mmc_spi_read_sector_to_ram+0x134>
800027c6:	70 0b       	ld.w	r11,r8[0x0]
800027c8:	31 1c       	mov	r12,17
800027ca:	f0 1f 00 3f 	mcall	800028c4 <sd_mmc_spi_read_sector_to_ram+0x138>
800027ce:	4b f8       	lddpc	r8,800028c8 <sd_mmc_spi_read_sector_to_ram+0x13c>
800027d0:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
800027d2:	4b e8       	lddpc	r8,800028c8 <sd_mmc_spi_read_sector_to_ram+0x13c>
800027d4:	11 89       	ld.ub	r9,r8[0x0]
800027d6:	30 08       	mov	r8,0
800027d8:	f0 09 18 00 	cp.b	r9,r8
800027dc:	c1 20       	breq	80002800 <sd_mmc_spi_read_sector_to_ram+0x74>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027de:	30 1b       	mov	r11,1
800027e0:	fe 7c 24 00 	mov	r12,-56320
800027e4:	f0 1f 00 3a 	mcall	800028cc <sd_mmc_spi_read_sector_to_ram+0x140>
800027e8:	30 0c       	mov	r12,0
    return KO;
800027ea:	c6 18       	rjmp	800028ac <sd_mmc_spi_read_sector_to_ram+0x120>

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
800027ec:	20 17       	sub	r7,1
800027ee:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
800027f0:	c0 e1       	brne	8000280c <sd_mmc_spi_read_sector_to_ram+0x80>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
800027f2:	30 1b       	mov	r11,1
800027f4:	fe 7c 24 00 	mov	r12,-56320
800027f8:	f0 1f 00 35 	mcall	800028cc <sd_mmc_spi_read_sector_to_ram+0x140>
800027fc:	30 0c       	mov	r12,0
       return KO;
800027fe:	c5 78       	rjmp	800028ac <sd_mmc_spi_read_sector_to_ram+0x120>
80002800:	e0 67 75 30 	mov	r7,30000
    return KO;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002804:	e0 65 00 ff 	mov	r5,255
80002808:	4b 04       	lddpc	r4,800028c8 <sd_mmc_spi_read_sector_to_ram+0x13c>
8000280a:	3f f6       	mov	r6,-1
8000280c:	0a 9c       	mov	r12,r5
8000280e:	f0 1f 00 31 	mcall	800028d0 <sd_mmc_spi_read_sector_to_ram+0x144>
80002812:	a8 8c       	st.b	r4[0x0],r12
80002814:	ec 0c 18 00 	cp.b	r12,r6
80002818:	ce a0       	breq	800027ec <sd_mmc_spi_read_sector_to_ram+0x60>
       return KO;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000281a:	3f e8       	mov	r8,-2
8000281c:	f0 0c 18 00 	cp.b	r12,r8
80002820:	c0 e0       	breq	8000283c <sd_mmc_spi_read_sector_to_ram+0xb0>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002822:	e0 6b 00 ff 	mov	r11,255
80002826:	fe 7c 24 00 	mov	r12,-56320
8000282a:	f0 1f 00 2b 	mcall	800028d4 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000282e:	30 1b       	mov	r11,1
80002830:	fe 7c 24 00 	mov	r12,-56320
80002834:	f0 1f 00 26 	mcall	800028cc <sd_mmc_spi_read_sector_to_ram+0x140>
80002838:	30 0c       	mov	r12,0
    return KO;
8000283a:	c3 98       	rjmp	800028ac <sd_mmc_spi_read_sector_to_ram+0x120>
//!   The read succeeded   -> OK
//!   The read failed (bad address, etc.)  -> KO
//!/
Bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
  uint8_t *_ram = ram;
8000283c:	06 97       	mov	r7,r3
//!
//! @return bit
//!   The read succeeded   -> OK
//!   The read failed (bad address, etc.)  -> KO
//!/
Bool sd_mmc_spi_read_sector_to_ram(void *ram)
8000283e:	e6 c5 fe 00 	sub	r5,r3,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
80002842:	e0 64 00 ff 	mov	r4,255
80002846:	fe 76 24 00 	mov	r6,-56320
    spi_read(SD_MMC_SPI,&data_read);
8000284a:	fa c3 ff fe 	sub	r3,sp,-2
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
8000284e:	08 9b       	mov	r11,r4
80002850:	0c 9c       	mov	r12,r6
80002852:	f0 1f 00 21 	mcall	800028d4 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_read(SD_MMC_SPI,&data_read);
80002856:	06 9b       	mov	r11,r3
80002858:	0c 9c       	mov	r12,r6
8000285a:	f0 1f 00 20 	mcall	800028d8 <sd_mmc_spi_read_sector_to_ram+0x14c>
    *_ram++=data_read;
8000285e:	9a 18       	ld.sh	r8,sp[0x2]
80002860:	0e c8       	st.b	r7++,r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return KO;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80002862:	0a 37       	cp.w	r7,r5
80002864:	cf 51       	brne	8000284e <sd_mmc_spi_read_sector_to_ram+0xc2>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
80002866:	49 78       	lddpc	r8,800028c0 <sd_mmc_spi_read_sector_to_ram+0x134>
80002868:	70 09       	ld.w	r9,r8[0x0]
8000286a:	f2 c9 fe 00 	sub	r9,r9,-512
8000286e:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80002870:	e0 6b 00 ff 	mov	r11,255
80002874:	fe 7c 24 00 	mov	r12,-56320
80002878:	f0 1f 00 17 	mcall	800028d4 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
8000287c:	e0 6b 00 ff 	mov	r11,255
80002880:	fe 7c 24 00 	mov	r12,-56320
80002884:	f0 1f 00 14 	mcall	800028d4 <sd_mmc_spi_read_sector_to_ram+0x148>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80002888:	e0 6b 00 ff 	mov	r11,255
8000288c:	fe 7c 24 00 	mov	r12,-56320
80002890:	f0 1f 00 11 	mcall	800028d4 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
80002894:	e0 6b 00 ff 	mov	r11,255
80002898:	fe 7c 24 00 	mov	r12,-56320
8000289c:	f0 1f 00 0e 	mcall	800028d4 <sd_mmc_spi_read_sector_to_ram+0x148>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800028a0:	30 1b       	mov	r11,1
800028a2:	fe 7c 24 00 	mov	r12,-56320
800028a6:	f0 1f 00 0a 	mcall	800028cc <sd_mmc_spi_read_sector_to_ram+0x140>
800028aa:	30 1c       	mov	r12,1

  return OK;   // Read done.
}
800028ac:	2f fd       	sub	sp,-4
800028ae:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800028b2:	00 00       	add	r0,r0
800028b4:	80 00       	ld.sh	r0,r0[0x0]
800028b6:	22 e0       	sub	r0,46
800028b8:	80 00       	ld.sh	r0,r0[0x0]
800028ba:	31 32       	mov	r2,19
800028bc:	00 00       	add	r0,r0
800028be:	04 7a       	tst	r10,r2
800028c0:	00 00       	add	r0,r0
800028c2:	00 e8       	st.h	--r0,r8
800028c4:	80 00       	ld.sh	r0,r0[0x0]
800028c6:	23 78       	sub	r8,55
800028c8:	00 00       	add	r0,r0
800028ca:	04 8c       	andn	r12,r2
800028cc:	80 00       	ld.sh	r0,r0[0x0]
800028ce:	31 7e       	mov	lr,23
800028d0:	80 00       	ld.sh	r0,r0[0x0]
800028d2:	22 ac       	sub	r12,42
800028d4:	80 00       	ld.sh	r0,r0[0x0]
800028d6:	32 66       	mov	r6,38
800028d8:	80 00       	ld.sh	r0,r0[0x0]
800028da:	32 82       	mov	r2,40

800028dc <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         OK / KO
Bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
800028dc:	eb cd 40 fc 	pushm	r2-r7,lr
800028e0:	20 1d       	sub	sp,4
800028e2:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
800028e4:	f0 1f 00 32 	mcall	800029ac <sd_mmc_spi_get_csd+0xd0>
800028e8:	c5 f0       	breq	800029a6 <sd_mmc_spi_get_csd+0xca>
    return KO;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800028ea:	30 1b       	mov	r11,1
800028ec:	fe 7c 24 00 	mov	r12,-56320
800028f0:	f0 1f 00 30 	mcall	800029b0 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
800028f4:	30 0b       	mov	r11,0
800028f6:	30 9c       	mov	r12,9
800028f8:	f0 1f 00 2f 	mcall	800029b4 <sd_mmc_spi_get_csd+0xd8>
800028fc:	4a f8       	lddpc	r8,800029b8 <sd_mmc_spi_get_csd+0xdc>
800028fe:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002900:	58 0c       	cp.w	r12,0
80002902:	c0 81       	brne	80002912 <sd_mmc_spi_get_csd+0x36>
80002904:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return KO;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002906:	e0 64 00 ff 	mov	r4,255
8000290a:	10 93       	mov	r3,r8
8000290c:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
8000290e:	30 95       	mov	r5,9
80002910:	c1 78       	rjmp	8000293e <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002912:	30 1b       	mov	r11,1
80002914:	fe 7c 24 00 	mov	r12,-56320
80002918:	f0 1f 00 29 	mcall	800029bc <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
8000291c:	30 09       	mov	r9,0
8000291e:	4a 98       	lddpc	r8,800029c0 <sd_mmc_spi_get_csd+0xe4>
80002920:	b0 89       	st.b	r8[0x0],r9
80002922:	30 0c       	mov	r12,0
    return KO;
80002924:	c4 18       	rjmp	800029a6 <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
80002926:	ea 07 18 00 	cp.b	r7,r5
8000292a:	c0 81       	brne	8000293a <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000292c:	30 1b       	mov	r11,1
8000292e:	fe 7c 24 00 	mov	r12,-56320
80002932:	f0 1f 00 23 	mcall	800029bc <sd_mmc_spi_get_csd+0xe0>
80002936:	30 0c       	mov	r12,0
      return KO;
80002938:	c3 78       	rjmp	800029a6 <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
8000293a:	2f f7       	sub	r7,-1
8000293c:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return KO;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000293e:	08 9c       	mov	r12,r4
80002940:	f0 1f 00 21 	mcall	800029c4 <sd_mmc_spi_get_csd+0xe8>
80002944:	a6 8c       	st.b	r3[0x0],r12
80002946:	ec 0c 18 00 	cp.b	r12,r6
8000294a:	ce e1       	brne	80002926 <sd_mmc_spi_get_csd+0x4a>
8000294c:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000294e:	e0 65 00 ff 	mov	r5,255
80002952:	fe 76 24 00 	mov	r6,-56320
   spi_read(SD_MMC_SPI,&data_read);
80002956:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000295a:	0a 9b       	mov	r11,r5
8000295c:	0c 9c       	mov	r12,r6
8000295e:	f0 1f 00 1b 	mcall	800029c8 <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
80002962:	08 9b       	mov	r11,r4
80002964:	0c 9c       	mov	r12,r6
80002966:	f0 1f 00 1a 	mcall	800029cc <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
8000296a:	9a 18       	ld.sh	r8,sp[0x2]
8000296c:	e4 07 0b 08 	st.b	r2[r7],r8
80002970:	2f f7       	sub	r7,-1
      return KO;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
80002972:	59 07       	cp.w	r7,16
80002974:	cf 31       	brne	8000295a <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80002976:	e0 6b 00 ff 	mov	r11,255
8000297a:	fe 7c 24 00 	mov	r12,-56320
8000297e:	f0 1f 00 13 	mcall	800029c8 <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
80002982:	e0 6b 00 ff 	mov	r11,255
80002986:	fe 7c 24 00 	mov	r12,-56320
8000298a:	f0 1f 00 10 	mcall	800029c8 <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
8000298e:	e0 6b 00 ff 	mov	r11,255
80002992:	fe 7c 24 00 	mov	r12,-56320
80002996:	f0 1f 00 0d 	mcall	800029c8 <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000299a:	30 1b       	mov	r11,1
8000299c:	fe 7c 24 00 	mov	r12,-56320
800029a0:	f0 1f 00 07 	mcall	800029bc <sd_mmc_spi_get_csd+0xe0>
800029a4:	30 1c       	mov	r12,1
  return OK;
}
800029a6:	2f fd       	sub	sp,-4
800029a8:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800029ac:	80 00       	ld.sh	r0,r0[0x0]
800029ae:	22 e0       	sub	r0,46
800029b0:	80 00       	ld.sh	r0,r0[0x0]
800029b2:	31 32       	mov	r2,19
800029b4:	80 00       	ld.sh	r0,r0[0x0]
800029b6:	23 78       	sub	r8,55
800029b8:	00 00       	add	r0,r0
800029ba:	04 8c       	andn	r12,r2
800029bc:	80 00       	ld.sh	r0,r0[0x0]
800029be:	31 7e       	mov	lr,23
800029c0:	00 00       	add	r0,r0
800029c2:	01 00       	ld.w	r0,r0++
800029c4:	80 00       	ld.sh	r0,r0[0x0]
800029c6:	22 ac       	sub	r12,42
800029c8:	80 00       	ld.sh	r0,r0[0x0]
800029ca:	32 66       	mov	r6,38
800029cc:	80 00       	ld.sh	r0,r0[0x0]
800029ce:	32 82       	mov	r2,40

800029d0 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> OK (always)
Bool sd_mmc_spi_internal_init(void)
{
800029d0:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
800029d2:	fe fb 02 6a 	ld.w	r11,pc[618]
800029d6:	e6 68 1a 80 	mov	r8,400000
800029da:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
800029dc:	fe f8 02 64 	ld.w	r8,pc[612]
800029e0:	70 0a       	ld.w	r10,r8[0x0]
800029e2:	fe 7c 24 00 	mov	r12,-56320
800029e6:	f0 1f 00 98 	mcall	80002c44 <sd_mmc_spi_internal_init+0x274>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800029ea:	30 1b       	mov	r11,1
800029ec:	fe 7c 24 00 	mov	r12,-56320
800029f0:	f0 1f 00 96 	mcall	80002c48 <sd_mmc_spi_internal_init+0x278>
800029f4:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
800029f6:	e0 66 00 ff 	mov	r6,255
800029fa:	fe 75 24 00 	mov	r5,-56320
800029fe:	0c 9b       	mov	r11,r6
80002a00:	0a 9c       	mov	r12,r5
80002a02:	f0 1f 00 93 	mcall	80002c4c <sd_mmc_spi_internal_init+0x27c>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
80002a06:	2f f7       	sub	r7,-1
80002a08:	58 a7       	cp.w	r7,10
80002a0a:	cf a1       	brne	800029fe <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002a0c:	30 1b       	mov	r11,1
80002a0e:	fe 7c 24 00 	mov	r12,-56320
80002a12:	f0 1f 00 90 	mcall	80002c50 <sd_mmc_spi_internal_init+0x280>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
80002a16:	30 08       	mov	r8,0
80002a18:	fe f9 02 3c 	ld.w	r9,pc[572]
80002a1c:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
80002a1e:	fe f9 02 3a 	ld.w	r9,pc[570]
80002a22:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002a24:	30 0b       	mov	r11,0
80002a26:	16 9c       	mov	r12,r11
80002a28:	f0 1f 00 8d 	mcall	80002c5c <sd_mmc_spi_internal_init+0x28c>
80002a2c:	fe f8 02 34 	ld.w	r8,pc[564]
80002a30:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a32:	e0 6b 00 ff 	mov	r11,255
80002a36:	fe 7c 24 00 	mov	r12,-56320
80002a3a:	f0 1f 00 85 	mcall	80002c4c <sd_mmc_spi_internal_init+0x27c>
80002a3e:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return KO;
  }
  while(r1 != 0x01);   // check memory enters idle_state
80002a40:	fe f6 02 20 	ld.w	r6,pc[544]
80002a44:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002a46:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a48:	e0 62 00 ff 	mov	r2,255
80002a4c:	fe 71 24 00 	mov	r1,-56320
    // do retry counter
    retry++;
    if(retry > 100)
80002a50:	36 54       	mov	r4,101
80002a52:	c1 08       	rjmp	80002a72 <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002a54:	06 9b       	mov	r11,r3
80002a56:	06 9c       	mov	r12,r3
80002a58:	f0 1f 00 81 	mcall	80002c5c <sd_mmc_spi_internal_init+0x28c>
80002a5c:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a5e:	04 9b       	mov	r11,r2
80002a60:	02 9c       	mov	r12,r1
80002a62:	f0 1f 00 7b 	mcall	80002c4c <sd_mmc_spi_internal_init+0x27c>
    // do retry counter
    retry++;
80002a66:	2f f7       	sub	r7,-1
80002a68:	5c 87       	casts.h	r7
    if(retry > 100)
80002a6a:	e8 07 19 00 	cp.h	r7,r4
80002a6e:	e0 80 00 e5 	breq	80002c38 <sd_mmc_spi_internal_init+0x268>
      return KO;
  }
  while(r1 != 0x01);   // check memory enters idle_state
80002a72:	0d 88       	ld.ub	r8,r6[0x0]
80002a74:	ea 08 18 00 	cp.b	r8,r5
80002a78:	ce e1       	brne	80002a54 <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
80002a7a:	f0 1f 00 7b 	mcall	80002c64 <sd_mmc_spi_internal_init+0x294>
  if(if_cond == -1) {
80002a7e:	5b fc       	cp.w	r12,-1
80002a80:	e0 80 00 dc 	breq	80002c38 <sd_mmc_spi_internal_init+0x268>
      return KO; // card is bad
  } else if (if_cond == 1) {
80002a84:	58 1c       	cp.w	r12,1
80002a86:	c0 51       	brne	80002a90 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
80002a88:	30 29       	mov	r9,2
80002a8a:	4f 48       	lddpc	r8,80002c58 <sd_mmc_spi_internal_init+0x288>
80002a8c:	b0 89       	st.b	r8[0x0],r9
80002a8e:	c4 c8       	rjmp	80002b26 <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002a90:	30 0b       	mov	r11,0
80002a92:	33 7c       	mov	r12,55
80002a94:	f0 1f 00 72 	mcall	80002c5c <sd_mmc_spi_internal_init+0x28c>
80002a98:	4f 27       	lddpc	r7,80002c60 <sd_mmc_spi_internal_init+0x290>
80002a9a:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002a9c:	e0 6b 00 ff 	mov	r11,255
80002aa0:	fe 7c 24 00 	mov	r12,-56320
80002aa4:	f0 1f 00 6a 	mcall	80002c4c <sd_mmc_spi_internal_init+0x27c>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002aa8:	30 0b       	mov	r11,0
80002aaa:	32 9c       	mov	r12,41
80002aac:	f0 1f 00 6c 	mcall	80002c5c <sd_mmc_spi_internal_init+0x28c>
80002ab0:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002ab2:	e0 6b 00 ff 	mov	r11,255
80002ab6:	fe 7c 24 00 	mov	r12,-56320
80002aba:	f0 1f 00 65 	mcall	80002c4c <sd_mmc_spi_internal_init+0x27c>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002abe:	0f 88       	ld.ub	r8,r7[0x0]
80002ac0:	e2 18 00 fe 	andl	r8,0xfe,COH
80002ac4:	c0 51       	brne	80002ace <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
80002ac6:	30 19       	mov	r9,1
80002ac8:	4e 48       	lddpc	r8,80002c58 <sd_mmc_spi_internal_init+0x288>
80002aca:	b0 89       	st.b	r8[0x0],r9
80002acc:	c2 d8       	rjmp	80002b26 <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80002ace:	30 09       	mov	r9,0
80002ad0:	4e 28       	lddpc	r8,80002c58 <sd_mmc_spi_internal_init+0x288>
80002ad2:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002ad4:	30 0b       	mov	r11,0
80002ad6:	16 9c       	mov	r12,r11
80002ad8:	f0 1f 00 61 	mcall	80002c5c <sd_mmc_spi_internal_init+0x28c>
80002adc:	4e 18       	lddpc	r8,80002c60 <sd_mmc_spi_internal_init+0x290>
80002ade:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002ae0:	e0 6b 00 ff 	mov	r11,255
80002ae4:	fe 7c 24 00 	mov	r12,-56320
80002ae8:	f0 1f 00 59 	mcall	80002c4c <sd_mmc_spi_internal_init+0x27c>
80002aec:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return KO;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002aee:	4d d6       	lddpc	r6,80002c60 <sd_mmc_spi_internal_init+0x290>
80002af0:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002af2:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002af4:	e0 62 00 ff 	mov	r2,255
80002af8:	fe 71 24 00 	mov	r1,-56320
        // do retry counter
        retry++;
        if(retry > 100)
80002afc:	36 54       	mov	r4,101
80002afe:	c1 08       	rjmp	80002b1e <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002b00:	06 9b       	mov	r11,r3
80002b02:	06 9c       	mov	r12,r3
80002b04:	f0 1f 00 56 	mcall	80002c5c <sd_mmc_spi_internal_init+0x28c>
80002b08:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002b0a:	04 9b       	mov	r11,r2
80002b0c:	02 9c       	mov	r12,r1
80002b0e:	f0 1f 00 50 	mcall	80002c4c <sd_mmc_spi_internal_init+0x27c>
        // do retry counter
        retry++;
80002b12:	2f f7       	sub	r7,-1
80002b14:	5c 87       	casts.h	r7
        if(retry > 100)
80002b16:	e8 07 19 00 	cp.h	r7,r4
80002b1a:	e0 80 00 8f 	breq	80002c38 <sd_mmc_spi_internal_init+0x268>
          return KO;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002b1e:	0d 88       	ld.ub	r8,r6[0x0]
80002b20:	ea 08 18 00 	cp.b	r8,r5
80002b24:	ce e1       	brne	80002b00 <sd_mmc_spi_internal_init+0x130>
80002b26:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80002b28:	4c c4       	lddpc	r4,80002c58 <sd_mmc_spi_internal_init+0x288>
80002b2a:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002b2c:	0e 93       	mov	r3,r7
80002b2e:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002b30:	4c c6       	lddpc	r6,80002c60 <sd_mmc_spi_internal_init+0x290>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002b32:	e0 62 00 ff 	mov	r2,255
80002b36:	fe 71 24 00 	mov	r1,-56320

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80002b3a:	09 88       	ld.ub	r8,r4[0x0]
80002b3c:	ea 08 18 00 	cp.b	r8,r5
80002b40:	c1 10       	breq	80002b62 <sd_mmc_spi_internal_init+0x192>
80002b42:	c0 63       	brcs	80002b4e <sd_mmc_spi_internal_init+0x17e>
80002b44:	30 29       	mov	r9,2
80002b46:	f2 08 18 00 	cp.b	r8,r9
80002b4a:	c2 91       	brne	80002b9c <sd_mmc_spi_internal_init+0x1cc>
80002b4c:	c1 98       	rjmp	80002b7e <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
80002b4e:	06 9b       	mov	r11,r3
80002b50:	30 1c       	mov	r12,1
80002b52:	f0 1f 00 43 	mcall	80002c5c <sd_mmc_spi_internal_init+0x28c>
80002b56:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002b58:	04 9b       	mov	r11,r2
80002b5a:	02 9c       	mov	r12,r1
80002b5c:	f0 1f 00 3c 	mcall	80002c4c <sd_mmc_spi_internal_init+0x27c>
      break;
80002b60:	c1 e8       	rjmp	80002b9c <sd_mmc_spi_internal_init+0x1cc>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002b62:	06 9b       	mov	r11,r3
80002b64:	00 9c       	mov	r12,r0
80002b66:	f0 1f 00 3e 	mcall	80002c5c <sd_mmc_spi_internal_init+0x28c>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002b6a:	06 9b       	mov	r11,r3
80002b6c:	32 9c       	mov	r12,41
80002b6e:	f0 1f 00 3c 	mcall	80002c5c <sd_mmc_spi_internal_init+0x28c>
80002b72:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002b74:	04 9b       	mov	r11,r2
80002b76:	02 9c       	mov	r12,r1
80002b78:	f0 1f 00 35 	mcall	80002c4c <sd_mmc_spi_internal_init+0x27c>
      break;
80002b7c:	c1 08       	rjmp	80002b9c <sd_mmc_spi_internal_init+0x1cc>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002b7e:	06 9b       	mov	r11,r3
80002b80:	00 9c       	mov	r12,r0
80002b82:	f0 1f 00 37 	mcall	80002c5c <sd_mmc_spi_internal_init+0x28c>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
80002b86:	30 0b       	mov	r11,0
80002b88:	ea 1b 40 00 	orh	r11,0x4000
80002b8c:	32 9c       	mov	r12,41
80002b8e:	f0 1f 00 34 	mcall	80002c5c <sd_mmc_spi_internal_init+0x28c>
80002b92:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002b94:	04 9b       	mov	r11,r2
80002b96:	02 9c       	mov	r12,r1
80002b98:	f0 1f 00 2d 	mcall	80002c4c <sd_mmc_spi_internal_init+0x27c>
      break;
    }
     // do retry counter
     retry++;
80002b9c:	2f f7       	sub	r7,-1
80002b9e:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
80002ba0:	fe 78 c3 50 	mov	r8,-15536
80002ba4:	f0 07 19 00 	cp.h	r7,r8
80002ba8:	c4 80       	breq	80002c38 <sd_mmc_spi_internal_init+0x268>
        return KO;
  } while (r1);
80002baa:	0d 89       	ld.ub	r9,r6[0x0]
80002bac:	30 08       	mov	r8,0
80002bae:	f0 09 18 00 	cp.b	r9,r8
80002bb2:	cc 41       	brne	80002b3a <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80002bb4:	4a 98       	lddpc	r8,80002c58 <sd_mmc_spi_internal_init+0x288>
80002bb6:	11 89       	ld.ub	r9,r8[0x0]
80002bb8:	30 28       	mov	r8,2
80002bba:	f0 09 18 00 	cp.b	r9,r8
80002bbe:	c0 a1       	brne	80002bd2 <sd_mmc_spi_internal_init+0x202>
    if_cond = sd_mmc_spi_check_hc();
80002bc0:	f0 1f 00 2a 	mcall	80002c68 <sd_mmc_spi_internal_init+0x298>
    if (if_cond == -1) {
80002bc4:	5b fc       	cp.w	r12,-1
80002bc6:	c3 90       	breq	80002c38 <sd_mmc_spi_internal_init+0x268>
      return KO;
    } else if (if_cond == 1){
80002bc8:	58 1c       	cp.w	r12,1
80002bca:	c0 41       	brne	80002bd2 <sd_mmc_spi_internal_init+0x202>
          card_type = SD_CARD_2_SDHC;
80002bcc:	30 39       	mov	r9,3
80002bce:	4a 38       	lddpc	r8,80002c58 <sd_mmc_spi_internal_init+0x288>
80002bd0:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80002bd2:	30 0b       	mov	r11,0
80002bd4:	33 bc       	mov	r12,59
80002bd6:	f0 1f 00 22 	mcall	80002c5c <sd_mmc_spi_internal_init+0x28c>
80002bda:	4a 27       	lddpc	r7,80002c60 <sd_mmc_spi_internal_init+0x290>
80002bdc:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002bde:	e0 6b 00 ff 	mov	r11,255
80002be2:	fe 7c 24 00 	mov	r12,-56320
80002be6:	f0 1f 00 1a 	mcall	80002c4c <sd_mmc_spi_internal_init+0x27c>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002bea:	e0 6b 02 00 	mov	r11,512
80002bee:	31 0c       	mov	r12,16
80002bf0:	f0 1f 00 1b 	mcall	80002c5c <sd_mmc_spi_internal_init+0x28c>
80002bf4:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002bf6:	e0 6b 00 ff 	mov	r11,255
80002bfa:	fe 7c 24 00 	mov	r12,-56320
80002bfe:	f0 1f 00 14 	mcall	80002c4c <sd_mmc_spi_internal_init+0x27c>
  if (r1 != 0x00)
80002c02:	0f 89       	ld.ub	r9,r7[0x0]
80002c04:	30 08       	mov	r8,0
80002c06:	f0 09 18 00 	cp.b	r9,r8
80002c0a:	c1 71       	brne	80002c38 <sd_mmc_spi_internal_init+0x268>
    return KO;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (KO ==  sd_mmc_spi_get_csd(csd))
80002c0c:	49 8c       	lddpc	r12,80002c6c <sd_mmc_spi_internal_init+0x29c>
80002c0e:	f0 1f 00 19 	mcall	80002c70 <sd_mmc_spi_internal_init+0x2a0>
80002c12:	c1 30       	breq	80002c38 <sd_mmc_spi_internal_init+0x268>
    return KO;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002c14:	f0 1f 00 18 	mcall	80002c74 <sd_mmc_spi_internal_init+0x2a4>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == ENABLED)
  if (KO ==  sd_mmc_spi_get_cid(cid))
    return KO;
#endif

  sd_mmc_spi_init_done = true;
80002c18:	30 19       	mov	r9,1
80002c1a:	48 f8       	lddpc	r8,80002c54 <sd_mmc_spi_internal_init+0x284>
80002c1c:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80002c1e:	48 8b       	lddpc	r11,80002c3c <sd_mmc_spi_internal_init+0x26c>
80002c20:	e0 68 1b 00 	mov	r8,6912
80002c24:	ea 18 00 b7 	orh	r8,0xb7
80002c28:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002c2a:	48 68       	lddpc	r8,80002c40 <sd_mmc_spi_internal_init+0x270>
80002c2c:	70 0a       	ld.w	r10,r8[0x0]
80002c2e:	fe 7c 24 00 	mov	r12,-56320
80002c32:	f0 1f 00 05 	mcall	80002c44 <sd_mmc_spi_internal_init+0x274>
80002c36:	da 3a       	popm	r0-r7,pc,r12=1
  return OK;
80002c38:	d8 3a       	popm	r0-r7,pc,r12=0
80002c3a:	00 00       	add	r0,r0
80002c3c:	00 00       	add	r0,r0
80002c3e:	00 ec       	st.h	--r0,r12
80002c40:	00 00       	add	r0,r0
80002c42:	00 fc       	st.b	--r0,r12
80002c44:	80 00       	ld.sh	r0,r0[0x0]
80002c46:	31 a8       	mov	r8,26
80002c48:	80 00       	ld.sh	r0,r0[0x0]
80002c4a:	31 32       	mov	r2,19
80002c4c:	80 00       	ld.sh	r0,r0[0x0]
80002c4e:	32 66       	mov	r6,38
80002c50:	80 00       	ld.sh	r0,r0[0x0]
80002c52:	31 7e       	mov	lr,23
80002c54:	00 00       	add	r0,r0
80002c56:	01 00       	ld.w	r0,r0++
80002c58:	00 00       	add	r0,r0
80002c5a:	04 7a       	tst	r10,r2
80002c5c:	80 00       	ld.sh	r0,r0[0x0]
80002c5e:	24 40       	sub	r0,68
80002c60:	00 00       	add	r0,r0
80002c62:	04 8c       	andn	r12,r2
80002c64:	80 00       	ld.sh	r0,r0[0x0]
80002c66:	26 d4       	sub	r4,109
80002c68:	80 00       	ld.sh	r0,r0[0x0]
80002c6a:	26 48       	sub	r8,100
80002c6c:	00 00       	add	r0,r0
80002c6e:	04 7c       	tst	r12,r2
80002c70:	80 00       	ld.sh	r0,r0[0x0]
80002c72:	28 dc       	sub	r12,-115
80002c74:	80 00       	ld.sh	r0,r0[0x0]
80002c76:	21 a0       	sub	r0,26

80002c78 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> OK
//!   The memory check failed -> KO
Bool sd_mmc_spi_mem_check(void)
{
80002c78:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence() == OK)
80002c7a:	f0 1f 00 09 	mcall	80002c9c <sd_mmc_spi_mem_check+0x24>
80002c7e:	30 18       	mov	r8,1
80002c80:	f0 0c 18 00 	cp.b	r12,r8
80002c84:	c0 20       	breq	80002c88 <sd_mmc_spi_mem_check+0x10>
80002c86:	d8 0a       	popm	pc,r12=0
  {
    if (sd_mmc_spi_init_done == false)
80002c88:	48 68       	lddpc	r8,80002ca0 <sd_mmc_spi_mem_check+0x28>
80002c8a:	11 89       	ld.ub	r9,r8[0x0]
80002c8c:	30 08       	mov	r8,0
80002c8e:	f0 09 18 00 	cp.b	r9,r8
80002c92:	c0 20       	breq	80002c96 <sd_mmc_spi_mem_check+0x1e>
80002c94:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80002c96:	f0 1f 00 04 	mcall	80002ca4 <sd_mmc_spi_mem_check+0x2c>
    }
    else
      return OK;
  }
  return KO;
}
80002c9a:	d8 02       	popm	pc
80002c9c:	80 00       	ld.sh	r0,r0[0x0]
80002c9e:	24 80       	sub	r0,72
80002ca0:	00 00       	add	r0,r0
80002ca2:	01 00       	ld.w	r0,r0++
80002ca4:	80 00       	ld.sh	r0,r0[0x0]
80002ca6:	29 d0       	sub	r0,-99

80002ca8 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> OK (always)
Bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80002ca8:	eb cd 40 10 	pushm	r4,lr
80002cac:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
80002cb0:	48 88       	lddpc	r8,80002cd0 <sd_mmc_spi_init+0x28>
80002cb2:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002cb4:	48 88       	lddpc	r8,80002cd4 <sd_mmc_spi_init+0x2c>
80002cb6:	e8 ea 00 00 	ld.d	r10,r4[0]
80002cba:	f0 eb 00 00 	st.d	r8[0],r10
80002cbe:	e8 ea 00 08 	ld.d	r10,r4[8]
80002cc2:	f0 eb 00 08 	st.d	r8[8],r10

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80002cc6:	f0 1f 00 05 	mcall	80002cd8 <sd_mmc_spi_init+0x30>
}
80002cca:	e3 cd 80 10 	ldm	sp++,r4,pc
80002cce:	00 00       	add	r0,r0
80002cd0:	00 00       	add	r0,r0
80002cd2:	00 fc       	st.b	--r0,r12
80002cd4:	00 00       	add	r0,r0
80002cd6:	00 ec       	st.h	--r0,r12
80002cd8:	80 00       	ld.sh	r0,r0[0x0]
80002cda:	29 d0       	sub	r0,-99

80002cdc <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
Bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
80002cdc:	5e fd       	retal	0

80002cde <sd_mmc_spi_removal>:
//!/
Bool  sd_mmc_spi_removal(void)
{
  return false;
//  return ((OK == sd_mmc_spi_check_presence()) ? false : true);
}
80002cde:	5e fd       	retal	0

80002ce0 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80002ce0:	d4 01       	pushm	lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80002ce2:	49 b8       	lddpc	r8,80002d4c <sd_mmc_spi_test_unit_ready+0x6c>
80002ce4:	11 88       	ld.ub	r8,r8[0x0]
80002ce6:	30 19       	mov	r9,1
80002ce8:	f2 08 18 00 	cp.b	r8,r9
80002cec:	c1 70       	breq	80002d1a <sd_mmc_spi_test_unit_ready+0x3a>
80002cee:	c0 63       	brcs	80002cfa <sd_mmc_spi_test_unit_ready+0x1a>
80002cf0:	30 29       	mov	r9,2
80002cf2:	f2 08 18 00 	cp.b	r8,r9
80002cf6:	c2 61       	brne	80002d42 <sd_mmc_spi_test_unit_ready+0x62>
80002cf8:	c2 08       	rjmp	80002d38 <sd_mmc_spi_test_unit_ready+0x58>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80002cfa:	30 09       	mov	r9,0
80002cfc:	49 58       	lddpc	r8,80002d50 <sd_mmc_spi_test_unit_ready+0x70>
80002cfe:	b0 89       	st.b	r8[0x0],r9
      if (OK == sd_mmc_spi_mem_check())
80002d00:	f0 1f 00 15 	mcall	80002d54 <sd_mmc_spi_test_unit_ready+0x74>
80002d04:	30 18       	mov	r8,1
80002d06:	f0 0c 18 00 	cp.b	r12,r8
80002d0a:	c0 30       	breq	80002d10 <sd_mmc_spi_test_unit_ready+0x30>
80002d0c:	30 2c       	mov	r12,2
80002d0e:	d8 02       	popm	pc
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80002d10:	30 19       	mov	r9,1
80002d12:	48 f8       	lddpc	r8,80002d4c <sd_mmc_spi_test_unit_ready+0x6c>
80002d14:	b0 89       	st.b	r8[0x0],r9
80002d16:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002d18:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (OK != sd_mmc_spi_mem_check())
80002d1a:	f0 1f 00 0f 	mcall	80002d54 <sd_mmc_spi_test_unit_ready+0x74>
80002d1e:	30 18       	mov	r8,1
80002d20:	f0 0c 18 00 	cp.b	r12,r8
80002d24:	c0 21       	brne	80002d28 <sd_mmc_spi_test_unit_ready+0x48>
80002d26:	d8 0a       	popm	pc,r12=0
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80002d28:	30 29       	mov	r9,2
80002d2a:	48 98       	lddpc	r8,80002d4c <sd_mmc_spi_test_unit_ready+0x6c>
80002d2c:	b0 89       	st.b	r8[0x0],r9
        sd_mmc_spi_init_done = false;
80002d2e:	30 09       	mov	r9,0
80002d30:	48 88       	lddpc	r8,80002d50 <sd_mmc_spi_test_unit_ready+0x70>
80002d32:	b0 89       	st.b	r8[0x0],r9
80002d34:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002d36:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002d38:	30 09       	mov	r9,0
80002d3a:	48 58       	lddpc	r8,80002d4c <sd_mmc_spi_test_unit_ready+0x6c>
80002d3c:	b0 89       	st.b	r8[0x0],r9
80002d3e:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80002d40:	d8 02       	popm	pc

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002d42:	30 09       	mov	r9,0
80002d44:	48 28       	lddpc	r8,80002d4c <sd_mmc_spi_test_unit_ready+0x6c>
80002d46:	b0 89       	st.b	r8[0x0],r9
80002d48:	30 3c       	mov	r12,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80002d4a:	d8 02       	popm	pc
80002d4c:	00 00       	add	r0,r0
80002d4e:	00 0c       	add	r12,r0
80002d50:	00 00       	add	r0,r0
80002d52:	01 00       	ld.w	r0,r0++
80002d54:	80 00       	ld.sh	r0,r0[0x0]
80002d56:	2c 78       	sub	r8,-57

80002d58 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
80002d58:	d4 01       	pushm	lr
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80002d5a:	f0 1f 00 02 	mcall	80002d60 <sd_mmc_spi_mem_init+0x8>
}
80002d5e:	d8 02       	popm	pc
80002d60:	80 00       	ld.sh	r0,r0[0x0]
80002d62:	29 d0       	sub	r0,-99

80002d64 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80002d64:	eb cd 40 c0 	pushm	r6-r7,lr
80002d68:	18 96       	mov	r6,r12
80002d6a:	16 97       	mov	r7,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002d6c:	f0 1f 00 12 	mcall	80002db4 <sd_mmc_spi_ram_2_mem+0x50>

   if (sd_mmc_spi_init_done == false)
80002d70:	49 28       	lddpc	r8,80002db8 <sd_mmc_spi_ram_2_mem+0x54>
80002d72:	11 89       	ld.ub	r9,r8[0x0]
80002d74:	30 08       	mov	r8,0
80002d76:	f0 09 18 00 	cp.b	r9,r8
80002d7a:	c0 31       	brne	80002d80 <sd_mmc_spi_ram_2_mem+0x1c>
   {
      sd_mmc_spi_mem_init();
80002d7c:	f0 1f 00 10 	mcall	80002dbc <sd_mmc_spi_ram_2_mem+0x58>
   }

   if (sd_mmc_spi_init_done == true)
80002d80:	48 e8       	lddpc	r8,80002db8 <sd_mmc_spi_ram_2_mem+0x54>
80002d82:	11 89       	ld.ub	r9,r8[0x0]
80002d84:	30 18       	mov	r8,1
80002d86:	f0 09 18 00 	cp.b	r9,r8
80002d8a:	c0 40       	breq	80002d92 <sd_mmc_spi_ram_2_mem+0x2e>
80002d8c:	30 2c       	mov	r12,2
80002d8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   {
     sd_mmc_spi_write_open(addr);
80002d92:	0c 9c       	mov	r12,r6
80002d94:	f0 1f 00 0b 	mcall	80002dc0 <sd_mmc_spi_ram_2_mem+0x5c>
     if (KO == sd_mmc_spi_write_sector_from_ram(ram))
80002d98:	0e 9c       	mov	r12,r7
80002d9a:	f0 1f 00 0b 	mcall	80002dc4 <sd_mmc_spi_ram_2_mem+0x60>
80002d9e:	c0 61       	brne	80002daa <sd_mmc_spi_ram_2_mem+0x46>
     {
       sd_mmc_spi_write_close();
80002da0:	f0 1f 00 0a 	mcall	80002dc8 <sd_mmc_spi_ram_2_mem+0x64>
80002da4:	30 2c       	mov	r12,2
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80002da6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     sd_mmc_spi_write_close();
80002daa:	f0 1f 00 08 	mcall	80002dc8 <sd_mmc_spi_ram_2_mem+0x64>
80002dae:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002db2:	00 00       	add	r0,r0
80002db4:	80 00       	ld.sh	r0,r0[0x0]
80002db6:	24 80       	sub	r0,72
80002db8:	00 00       	add	r0,r0
80002dba:	01 00       	ld.w	r0,r0++
80002dbc:	80 00       	ld.sh	r0,r0[0x0]
80002dbe:	2d 58       	sub	r8,-43
80002dc0:	80 00       	ld.sh	r0,r0[0x0]
80002dc2:	23 38       	sub	r8,51
80002dc4:	80 00       	ld.sh	r0,r0[0x0]
80002dc6:	24 fc       	sub	r12,79
80002dc8:	80 00       	ld.sh	r0,r0[0x0]
80002dca:	22 a8       	sub	r8,42

80002dcc <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == ENABLED

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80002dcc:	eb cd 40 c0 	pushm	r6-r7,lr
80002dd0:	18 97       	mov	r7,r12
80002dd2:	16 96       	mov	r6,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002dd4:	f0 1f 00 11 	mcall	80002e18 <sd_mmc_spi_mem_2_ram+0x4c>

   if (sd_mmc_spi_init_done == false)
80002dd8:	49 18       	lddpc	r8,80002e1c <sd_mmc_spi_mem_2_ram+0x50>
80002dda:	11 89       	ld.ub	r9,r8[0x0]
80002ddc:	30 08       	mov	r8,0
80002dde:	f0 09 18 00 	cp.b	r9,r8
80002de2:	c0 31       	brne	80002de8 <sd_mmc_spi_mem_2_ram+0x1c>
   {
      sd_mmc_spi_mem_init();
80002de4:	f0 1f 00 0f 	mcall	80002e20 <sd_mmc_spi_mem_2_ram+0x54>
   }

   if (sd_mmc_spi_init_done != true)
80002de8:	48 d8       	lddpc	r8,80002e1c <sd_mmc_spi_mem_2_ram+0x50>
80002dea:	11 89       	ld.ub	r9,r8[0x0]
80002dec:	30 18       	mov	r8,1
80002dee:	f0 09 18 00 	cp.b	r9,r8
80002df2:	c0 40       	breq	80002dfa <sd_mmc_spi_mem_2_ram+0x2e>
80002df4:	30 2c       	mov	r12,2
80002df6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80002dfa:	0e 9c       	mov	r12,r7
80002dfc:	f0 1f 00 0a 	mcall	80002e24 <sd_mmc_spi_mem_2_ram+0x58>
80002e00:	c0 a0       	breq	80002e14 <sd_mmc_spi_mem_2_ram+0x48>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80002e02:	0c 9c       	mov	r12,r6
80002e04:	f0 1f 00 09 	mcall	80002e28 <sd_mmc_spi_mem_2_ram+0x5c>
80002e08:	c0 60       	breq	80002e14 <sd_mmc_spi_mem_2_ram+0x48>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80002e0a:	f0 1f 00 09 	mcall	80002e2c <sd_mmc_spi_mem_2_ram+0x60>
80002e0e:	5f 0c       	sreq	r12
80002e10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e14:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80002e18:	80 00       	ld.sh	r0,r0[0x0]
80002e1a:	24 80       	sub	r0,72
80002e1c:	00 00       	add	r0,r0
80002e1e:	01 00       	ld.w	r0,r0++
80002e20:	80 00       	ld.sh	r0,r0[0x0]
80002e22:	2d 58       	sub	r8,-43
80002e24:	80 00       	ld.sh	r0,r0[0x0]
80002e26:	23 60       	sub	r0,54
80002e28:	80 00       	ld.sh	r0,r0[0x0]
80002e2a:	27 8c       	sub	r12,120
80002e2c:	80 00       	ld.sh	r0,r0[0x0]
80002e2e:	23 50       	sub	r0,53

80002e30 <sd_mmc_spi_read_capacity>:
}



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
80002e30:	eb cd 40 80 	pushm	r7,lr
80002e34:	18 97       	mov	r7,r12
//   sd_mmc_spi_check_presence();   // ommited because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (sd_mmc_spi_init_done == false)
80002e36:	48 c8       	lddpc	r8,80002e64 <sd_mmc_spi_read_capacity+0x34>
80002e38:	11 89       	ld.ub	r9,r8[0x0]
80002e3a:	30 08       	mov	r8,0
80002e3c:	f0 09 18 00 	cp.b	r9,r8
80002e40:	c0 31       	brne	80002e46 <sd_mmc_spi_read_capacity+0x16>
   {
      sd_mmc_spi_mem_init();
80002e42:	f0 1f 00 0a 	mcall	80002e68 <sd_mmc_spi_read_capacity+0x38>
   }

   if (sd_mmc_spi_init_done == true)
80002e46:	48 88       	lddpc	r8,80002e64 <sd_mmc_spi_read_capacity+0x34>
80002e48:	11 89       	ld.ub	r9,r8[0x0]
80002e4a:	30 18       	mov	r8,1
80002e4c:	f0 09 18 00 	cp.b	r9,r8
80002e50:	c0 40       	breq	80002e58 <sd_mmc_spi_read_capacity+0x28>
80002e52:	30 2c       	mov	r12,2
80002e54:	e3 cd 80 80 	ldm	sp++,r7,pc
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80002e58:	48 58       	lddpc	r8,80002e6c <sd_mmc_spi_read_capacity+0x3c>
80002e5a:	70 08       	ld.w	r8,r8[0x0]
80002e5c:	2f f8       	sub	r8,-1
80002e5e:	8f 08       	st.w	r7[0x0],r8
80002e60:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002e64:	00 00       	add	r0,r0
80002e66:	01 00       	ld.w	r0,r0++
80002e68:	80 00       	ld.sh	r0,r0[0x0]
80002e6a:	2d 58       	sub	r8,-43
80002e6c:	00 00       	add	r0,r0
80002e6e:	04 74       	tst	r4,r2

80002e70 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002e70:	fe 68 14 00 	mov	r8,-125952
80002e74:	70 09       	ld.w	r9,r8[0x0]
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80002e76:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002e7a:	91 09       	st.w	r8[0x0],r9
}
80002e7c:	5e fc       	retal	r12
80002e7e:	d7 03       	nop

80002e80 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80002e80:	d4 01       	pushm	lr
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
80002e82:	e0 68 8a 3f 	mov	r8,35391
80002e86:	ea 18 01 f7 	orh	r8,0x1f7
80002e8a:	10 3c       	cp.w	r12,r8
80002e8c:	e0 88 00 06 	brls	80002e98 <flashc_set_bus_freq+0x18>
  {
    // Set 1 WS.
    flashc_set_wait_state(1);
80002e90:	30 1c       	mov	r12,1
80002e92:	f0 1f 00 04 	mcall	80002ea0 <flashc_set_bus_freq+0x20>
80002e96:	d8 02       	popm	pc
  }
  else
  {
    // Set 0 WS.
    flashc_set_wait_state(0);
80002e98:	30 0c       	mov	r12,0
80002e9a:	f0 1f 00 02 	mcall	80002ea0 <flashc_set_bus_freq+0x20>
80002e9e:	d8 02       	popm	pc
80002ea0:	80 00       	ld.sh	r0,r0[0x0]
80002ea2:	2e 70       	sub	r0,-25

80002ea4 <gpio_enable_module_pin>:
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002ea4:	f8 08 16 05 	lsr	r8,r12,0x5
80002ea8:	a9 68       	lsl	r8,0x8
80002eaa:	e0 28 f0 00 	sub	r8,61440

  // Enable the correct function.
  switch (function)
80002eae:	58 1b       	cp.w	r11,1
80002eb0:	c0 d0       	breq	80002eca <gpio_enable_module_pin+0x26>
80002eb2:	c0 63       	brcs	80002ebe <gpio_enable_module_pin+0x1a>
80002eb4:	58 2b       	cp.w	r11,2
80002eb6:	c1 00       	breq	80002ed6 <gpio_enable_module_pin+0x32>
80002eb8:	58 3b       	cp.w	r11,3
80002eba:	c1 40       	breq	80002ee2 <gpio_enable_module_pin+0x3e>
80002ebc:	5e ff       	retal	1
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80002ebe:	30 19       	mov	r9,1
80002ec0:	f2 0c 09 49 	lsl	r9,r9,r12
80002ec4:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002ec6:	91 a9       	st.w	r8[0x28],r9
#if defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_211_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80002ec8:	c1 28       	rjmp	80002eec <gpio_enable_module_pin+0x48>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002eca:	30 19       	mov	r9,1
80002ecc:	f2 0c 09 49 	lsl	r9,r9,r12
80002ed0:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002ed2:	91 a9       	st.w	r8[0x28],r9
#if defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_211_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80002ed4:	c0 c8       	rjmp	80002eec <gpio_enable_module_pin+0x48>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80002ed6:	30 19       	mov	r9,1
80002ed8:	f2 0c 09 49 	lsl	r9,r9,r12
80002edc:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002ede:	91 99       	st.w	r8[0x24],r9
#if defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_211_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80002ee0:	c0 68       	rjmp	80002eec <gpio_enable_module_pin+0x48>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002ee2:	30 19       	mov	r9,1
80002ee4:	f2 0c 09 49 	lsl	r9,r9,r12
80002ee8:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002eea:	91 99       	st.w	r8[0x24],r9
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002eec:	30 19       	mov	r9,1
80002eee:	f2 0c 09 4c 	lsl	r12,r9,r12
80002ef2:	91 2c       	st.w	r8[0x8],r12
80002ef4:	5e fd       	retal	0
80002ef6:	d7 03       	nop

80002ef8 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002ef8:	d4 21       	pushm	r4-r7,lr
80002efa:	18 97       	mov	r7,r12
80002efc:	16 94       	mov	r4,r11
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002efe:	58 0b       	cp.w	r11,0
80002f00:	c0 31       	brne	80002f06 <gpio_enable_module+0xe>
80002f02:	30 05       	mov	r5,0
80002f04:	c0 d8       	rjmp	80002f1e <gpio_enable_module+0x26>
80002f06:	30 06       	mov	r6,0
80002f08:	0c 95       	mov	r5,r6
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002f0a:	0f 9b       	ld.ub	r11,r7[0x1]
80002f0c:	0f 8c       	ld.ub	r12,r7[0x0]
80002f0e:	f0 1f 00 06 	mcall	80002f24 <gpio_enable_module+0x2c>
80002f12:	18 45       	or	r5,r12
    gpiomap++;
80002f14:	2f e7       	sub	r7,-2
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002f16:	2f f6       	sub	r6,-1
80002f18:	0c 34       	cp.w	r4,r6
80002f1a:	fe 9b ff f8 	brhi	80002f0a <gpio_enable_module+0x12>
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
}
80002f1e:	0a 9c       	mov	r12,r5
80002f20:	d8 22       	popm	r4-r7,pc
80002f22:	00 00       	add	r0,r0
80002f24:	80 00       	ld.sh	r0,r0[0x0]
80002f26:	2e a4       	sub	r4,-22

80002f28 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80002f28:	f8 08 16 05 	lsr	r8,r12,0x5
80002f2c:	a9 68       	lsl	r8,0x8
80002f2e:	e0 28 f0 00 	sub	r8,61440
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002f32:	16 99       	mov	r9,r11
80002f34:	e2 19 00 04 	andl	r9,0x4,COH
80002f38:	c0 70       	breq	80002f46 <gpio_configure_pin+0x1e>
            gpio_port->puers = 1 << (pin & 0x1F);
80002f3a:	30 19       	mov	r9,1
80002f3c:	f2 0c 09 49 	lsl	r9,r9,r12
80002f40:	f1 49 00 74 	st.w	r8[116],r9
80002f44:	c0 68       	rjmp	80002f50 <gpio_configure_pin+0x28>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80002f46:	30 19       	mov	r9,1
80002f48:	f2 0c 09 49 	lsl	r9,r9,r12
80002f4c:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80002f50:	16 99       	mov	r9,r11
80002f52:	e2 19 00 80 	andl	r9,0x80,COH
80002f56:	c2 40       	breq	80002f9e <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
80002f58:	16 99       	mov	r9,r11
80002f5a:	e2 19 01 80 	andl	r9,0x180,COH
80002f5e:	c0 90       	breq	80002f70 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002f60:	30 19       	mov	r9,1
80002f62:	f2 0c 09 49 	lsl	r9,r9,r12
80002f66:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80002f6a:	f1 49 00 b8 	st.w	r8[184],r9
80002f6e:	c1 88       	rjmp	80002f9e <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_RISING)
80002f70:	16 99       	mov	r9,r11
80002f72:	e2 19 02 80 	andl	r9,0x280,COH
80002f76:	c0 90       	breq	80002f88 <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80002f78:	30 19       	mov	r9,1
80002f7a:	f2 0c 09 49 	lsl	r9,r9,r12
80002f7e:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80002f82:	f1 49 00 b8 	st.w	r8[184],r9
80002f86:	c0 c8       	rjmp	80002f9e <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
80002f88:	16 99       	mov	r9,r11
80002f8a:	e2 19 03 80 	andl	r9,0x380,COH
80002f8e:	c0 80       	breq	80002f9e <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002f90:	30 19       	mov	r9,1
80002f92:	f2 0c 09 49 	lsl	r9,r9,r12
80002f96:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80002f9a:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80002f9e:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002fa2:	c1 50       	breq	80002fcc <gpio_configure_pin+0xa4>
            if (flags & GPIO_INIT_HIGH)
80002fa4:	e2 1b 00 02 	andl	r11,0x2,COH
80002fa8:	c0 70       	breq	80002fb6 <gpio_configure_pin+0x8e>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80002faa:	30 19       	mov	r9,1
80002fac:	f2 0c 09 49 	lsl	r9,r9,r12
80002fb0:	f1 49 00 54 	st.w	r8[84],r9
80002fb4:	c0 68       	rjmp	80002fc0 <gpio_configure_pin+0x98>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80002fb6:	30 19       	mov	r9,1
80002fb8:	f2 0c 09 49 	lsl	r9,r9,r12
80002fbc:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80002fc0:	30 19       	mov	r9,1
80002fc2:	f2 0c 09 49 	lsl	r9,r9,r12
80002fc6:	f1 49 00 44 	st.w	r8[68],r9
80002fca:	c0 68       	rjmp	80002fd6 <gpio_configure_pin+0xae>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80002fcc:	30 19       	mov	r9,1
80002fce:	f2 0c 09 49 	lsl	r9,r9,r12
80002fd2:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80002fd6:	30 19       	mov	r9,1
80002fd8:	f2 0c 09 4c 	lsl	r12,r9,r12
80002fdc:	91 1c       	st.w	r8[0x4],r12
}
80002fde:	5e fc       	retal	r12

80002fe0 <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002fe0:	f8 08 16 05 	lsr	r8,r12,0x5
80002fe4:	a9 68       	lsl	r8,0x8
80002fe6:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80002fea:	71 88       	ld.w	r8,r8[0x60]
80002fec:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002ff0:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002ff4:	5e fc       	retal	r12

80002ff6 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002ff6:	c0 08       	rjmp	80002ff6 <_unhandled_interrupt>

80002ff8 <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002ff8:	f6 08 16 05 	lsr	r8,r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80002ffc:	48 99       	lddpc	r9,80003020 <INTC_register_interrupt+0x28>
80002ffe:	f2 08 00 39 	add	r9,r9,r8<<0x3
80003002:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80003006:	72 19       	ld.w	r9,r9[0x4]
80003008:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
8000300c:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80003010:	48 59       	lddpc	r9,80003024 <INTC_register_interrupt+0x2c>
80003012:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80003016:	fe 79 08 00 	mov	r9,-63488
8000301a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
8000301e:	5e fc       	retal	r12
80003020:	80 00       	ld.sh	r0,r0[0x0]
80003022:	80 40       	ld.sh	r0,r0[0x8]
80003024:	80 00       	ld.sh	r0,r0[0x0]
80003026:	7f 3c       	ld.w	r12,pc[0x4c]

80003028 <INTC_init_interrupts>:
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
}

void INTC_init_interrupts(void)
{
80003028:	d4 21       	pushm	r4-r7,lr
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
8000302a:	49 18       	lddpc	r8,8000306c <INTC_init_interrupts+0x44>
8000302c:	e3 b8 00 01 	mtsr	0x4,r8
80003030:	49 0e       	lddpc	lr,80003070 <INTC_init_interrupts+0x48>
80003032:	30 07       	mov	r7,0
80003034:	0e 94       	mov	r4,r7
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80003036:	49 0c       	lddpc	r12,80003074 <INTC_init_interrupts+0x4c>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80003038:	49 08       	lddpc	r8,80003078 <INTC_init_interrupts+0x50>
8000303a:	70 05       	ld.w	r5,r8[0x0]
8000303c:	fe 76 08 00 	mov	r6,-63488
80003040:	c1 08       	rjmp	80003060 <INTC_init_interrupts+0x38>
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
80003042:	08 98       	mov	r8,r4
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80003044:	7c 1b       	ld.w	r11,lr[0x4]

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80003046:	7c 0a       	ld.w	r10,lr[0x0]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80003048:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
8000304c:	2f f8       	sub	r8,-1
8000304e:	10 3a       	cp.w	r10,r8
80003050:	fe 9b ff fc 	brhi	80003048 <INTC_init_interrupts+0x20>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80003054:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80003058:	2f f7       	sub	r7,-1
8000305a:	2f 8e       	sub	lr,-8
8000305c:	59 27       	cp.w	r7,18
8000305e:	c0 50       	breq	80003068 <INTC_init_interrupts+0x40>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80003060:	7c 08       	ld.w	r8,lr[0x0]
80003062:	58 08       	cp.w	r8,0
80003064:	ce f1       	brne	80003042 <INTC_init_interrupts+0x1a>
80003066:	cf 7b       	rjmp	80003054 <INTC_init_interrupts+0x2c>
80003068:	d8 22       	popm	r4-r7,pc
8000306a:	00 00       	add	r0,r0
8000306c:	80 00       	ld.sh	r0,r0[0x0]
8000306e:	7e 00       	ld.w	r0,pc[0x0]
80003070:	80 00       	ld.sh	r0,r0[0x0]
80003072:	80 40       	ld.sh	r0,r0[0x8]
80003074:	80 00       	ld.sh	r0,r0[0x0]
80003076:	2f f6       	sub	r6,-1
80003078:	80 00       	ld.sh	r0,r0[0x0]
8000307a:	7f 3c       	ld.w	r12,pc[0x4c]

8000307c <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
8000307c:	fe 78 08 00 	mov	r8,-63488
80003080:	e0 69 00 83 	mov	r9,131
80003084:	f2 0c 01 0c 	sub	r12,r9,r12
80003088:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
8000308c:	f2 ca ff c0 	sub	r10,r9,-64
80003090:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
80003094:	58 08       	cp.w	r8,0
80003096:	c0 21       	brne	8000309a <_get_interrupt_handler+0x1e>
80003098:	5e fd       	retal	0
8000309a:	f0 08 12 00 	clz	r8,r8
8000309e:	48 5a       	lddpc	r10,800030b0 <_get_interrupt_handler+0x34>
800030a0:	f4 09 00 39 	add	r9,r10,r9<<0x3
800030a4:	f0 08 11 1f 	rsub	r8,r8,31
800030a8:	72 19       	ld.w	r9,r9[0x4]
800030aa:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
}
800030ae:	5e fc       	retal	r12
800030b0:	80 00       	ld.sh	r0,r0[0x0]
800030b2:	80 40       	ld.sh	r0,r0[0x8]

800030b4 <getBaudDiv>:
#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pba_hz)
{
  int baudDiv = (pba_hz + baudrate / 2) / baudrate;
800030b4:	f8 08 16 01 	lsr	r8,r12,0x1
800030b8:	10 0b       	add	r11,r8
800030ba:	f6 0c 0d 0a 	divu	r10,r11,r12
800030be:	14 9c       	mov	r12,r10

  if (baudDiv <= 0 || baudDiv > 255) {
800030c0:	f4 c8 00 01 	sub	r8,r10,1
    return -1;
  }

  return baudDiv;
800030c4:	5c 8c       	casts.h	r12

int16_t getBaudDiv(const unsigned int baudrate, uint32_t pba_hz)
{
  int baudDiv = (pba_hz + baudrate / 2) / baudrate;

  if (baudDiv <= 0 || baudDiv > 255) {
800030c6:	e0 48 00 ff 	cp.w	r8,255
800030ca:	5e 3c       	retlo	r12
800030cc:	5e 2e       	reths	-1

800030ce <spi_initMaster>:

spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
800030ce:	f7 39 00 0d 	ld.ub	r9,r11[13]
800030d2:	30 18       	mov	r8,1
800030d4:	f0 09 18 00 	cp.b	r9,r8
800030d8:	e0 88 00 04 	brls	800030e0 <spi_initMaster+0x12>
800030dc:	30 2c       	mov	r12,2
800030de:	5e fc       	retal	r12
    return SPI_ERROR_ARGUMENT;
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
800030e0:	e0 68 00 80 	mov	r8,128
800030e4:	99 08       	st.w	r12[0x0],r8

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
800030e6:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.mstr = 1;
800030e8:	30 19       	mov	r9,1
800030ea:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
800030ee:	f7 39 00 0d 	ld.ub	r9,r11[13]
800030f2:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
  u_avr32_spi_mr.MR.llb = 0;
800030f6:	30 09       	mov	r9,0
800030f8:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800030fc:	30 fa       	mov	r10,15
800030fe:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
  spi->mr = u_avr32_spi_mr.mr;
80003102:	99 18       	st.w	r12[0x4],r8
80003104:	5e f9       	retal	r9

80003106 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
80003106:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
80003108:	30 18       	mov	r8,1
8000310a:	f0 0b 18 00 	cp.b	r11,r8
8000310e:	5f be       	srhi	lr
80003110:	f0 0a 18 00 	cp.b	r10,r8
80003114:	5f b8       	srhi	r8
80003116:	fd e8 10 08 	or	r8,lr,r8
8000311a:	c0 30       	breq	80003120 <spi_selectionMode+0x1a>
8000311c:	30 2c       	mov	r12,2
8000311e:	d8 02       	popm	pc
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  u_avr32_spi_mr.mr = spi->mr;
80003120:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.ps = variable_ps;
80003122:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003126:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
  u_avr32_spi_mr.MR.dlybcs = delay;
8000312a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
  spi->mr = u_avr32_spi_mr.mr;
8000312e:	99 18       	st.w	r12[0x4],r8
80003130:	d8 0a       	popm	pc,r12=0

80003132 <spi_selectChip>:
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003132:	78 18       	ld.w	r8,r12[0x4]
80003134:	ea 18 00 0f 	orh	r8,0xf
80003138:	99 18       	st.w	r12[0x4],r8

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000313a:	78 18       	ld.w	r8,r12[0x4]
8000313c:	e2 18 00 04 	andl	r8,0x4,COH
80003140:	c0 f0       	breq	8000315e <spi_selectChip+0x2c>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
80003142:	30 e8       	mov	r8,14
80003144:	f0 0b 18 00 	cp.b	r11,r8
80003148:	e0 8b 00 19 	brhi	8000317a <spi_selectChip+0x48>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
8000314c:	78 18       	ld.w	r8,r12[0x4]
8000314e:	b1 6b       	lsl	r11,0x10
80003150:	ea 1b ff f0 	orh	r11,0xfff0
80003154:	e8 1b ff ff 	orl	r11,0xffff
80003158:	10 6b       	and	r11,r8
8000315a:	99 1b       	st.w	r12[0x4],r11
8000315c:	5e fd       	retal	0
  } else {
    if (chip > 3) {
8000315e:	30 38       	mov	r8,3
80003160:	f0 0b 18 00 	cp.b	r11,r8
80003164:	e0 8b 00 0b 	brhi	8000317a <spi_selectChip+0x48>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003168:	78 18       	ld.w	r8,r12[0x4]
8000316a:	2f 0b       	sub	r11,-16
8000316c:	30 19       	mov	r9,1
8000316e:	f2 0b 09 4b 	lsl	r11,r9,r11
80003172:	5c db       	com	r11
80003174:	10 6b       	and	r11,r8
80003176:	99 1b       	st.w	r12[0x4],r11
80003178:	5e fd       	retal	0
8000317a:	30 2c       	mov	r12,2
  }

  return SPI_OK;
}
8000317c:	5e fc       	retal	r12

8000317e <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
8000317e:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003182:	c0 58       	rjmp	8000318c <spi_unselectChip+0xe>
    if (!timeout--) {
80003184:	58 08       	cp.w	r8,0
80003186:	c0 21       	brne	8000318a <spi_unselectChip+0xc>
80003188:	5e ff       	retal	1
8000318a:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000318c:	78 49       	ld.w	r9,r12[0x10]
8000318e:	e2 19 02 00 	andl	r9,0x200,COH
80003192:	cf 90       	breq	80003184 <spi_unselectChip+0x6>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003194:	78 18       	ld.w	r8,r12[0x4]
80003196:	ea 18 00 0f 	orh	r8,0xf
8000319a:	99 18       	st.w	r12[0x4],r8

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000319c:	30 08       	mov	r8,0
8000319e:	ea 18 01 00 	orh	r8,0x100
800031a2:	99 08       	st.w	r12[0x0],r8
800031a4:	5e fd       	retal	0
800031a6:	d7 03       	nop

800031a8 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
800031a8:	eb cd 40 f8 	pushm	r3-r7,lr
800031ac:	18 95       	mov	r5,r12
800031ae:	16 97       	mov	r7,r11
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
800031b0:	f7 36 00 0c 	ld.ub	r6,r11[12]
800031b4:	30 38       	mov	r8,3
800031b6:	f0 06 18 00 	cp.b	r6,r8
800031ba:	e0 8b 00 4d 	brhi	80003254 <spi_setupChipReg+0xac>
      options->stay_act > 1 ||
800031be:	f7 34 00 0b 	ld.ub	r4,r11[11]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
800031c2:	30 18       	mov	r8,1
800031c4:	f0 04 18 00 	cp.b	r4,r8
800031c8:	e0 8b 00 46 	brhi	80003254 <spi_setupChipReg+0xac>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
800031cc:	f7 33 00 08 	ld.ub	r3,r11[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
800031d0:	30 78       	mov	r8,7
800031d2:	f0 03 18 00 	cp.b	r3,r8
800031d6:	e0 88 00 3f 	brls	80003254 <spi_setupChipReg+0xac>
800031da:	31 08       	mov	r8,16
800031dc:	f0 03 18 00 	cp.b	r3,r8
800031e0:	e0 8b 00 3a 	brhi	80003254 <spi_setupChipReg+0xac>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
  }

  int baudDiv = getBaudDiv(options->baudrate, pba_hz);
800031e4:	14 9b       	mov	r11,r10
800031e6:	6e 1c       	ld.w	r12,r7[0x4]
800031e8:	f0 1f 00 1d 	mcall	8000325c <spi_setupChipReg+0xb4>

  if (baudDiv < 0) {
800031ec:	c3 45       	brlt	80003254 <spi_setupChipReg+0xac>
    return SPI_ERROR_ARGUMENT;
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
800031ee:	30 08       	mov	r8,0
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800031f0:	ec 09 16 01 	lsr	r9,r6,0x1
800031f4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
800031f8:	ec 16 00 01 	eorl	r6,0x1
800031fc:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003200:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003204:	20 83       	sub	r3,8
80003206:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
8000320a:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000320e:	ef 39 00 09 	ld.ub	r9,r7[9]
80003212:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003216:	ef 39 00 0a 	ld.ub	r9,r7[10]
8000321a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

  switch(options->reg) {
8000321e:	0f 89       	ld.ub	r9,r7[0x0]
80003220:	30 1a       	mov	r10,1
80003222:	f4 09 18 00 	cp.b	r9,r10
80003226:	c0 e0       	breq	80003242 <spi_setupChipReg+0x9a>
80003228:	c0 a3       	brcs	8000323c <spi_setupChipReg+0x94>
8000322a:	30 2a       	mov	r10,2
8000322c:	f4 09 18 00 	cp.b	r9,r10
80003230:	c0 c0       	breq	80003248 <spi_setupChipReg+0xa0>
80003232:	30 3a       	mov	r10,3
80003234:	f4 09 18 00 	cp.b	r9,r10
80003238:	c0 e1       	brne	80003254 <spi_setupChipReg+0xac>
8000323a:	c0 a8       	rjmp	8000324e <spi_setupChipReg+0xa6>
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
8000323c:	8b c8       	st.w	r5[0x30],r8
8000323e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
80003242:	8b d8       	st.w	r5[0x34],r8
80003244:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80003248:	8b e8       	st.w	r5[0x38],r8
8000324a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
8000324e:	8b f8       	st.w	r5[0x3c],r8
80003250:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
80003254:	30 2c       	mov	r12,2
    }
  }
#endif

  return SPI_OK;
}
80003256:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000325a:	00 00       	add	r0,r0
8000325c:	80 00       	ld.sh	r0,r0[0x0]
8000325e:	30 b4       	mov	r4,11

80003260 <spi_enable>:


void spi_enable(volatile avr32_spi_t *spi)
{
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003260:	30 18       	mov	r8,1
80003262:	99 08       	st.w	r12[0x0],r8
}
80003264:	5e fc       	retal	r12

80003266 <spi_write>:
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003266:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000326a:	c0 58       	rjmp	80003274 <spi_write+0xe>
    if (!timeout--) {
8000326c:	58 08       	cp.w	r8,0
8000326e:	c0 21       	brne	80003272 <spi_write+0xc>
80003270:	5e ff       	retal	1
80003272:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003274:	78 49       	ld.w	r9,r12[0x10]
80003276:	e2 19 00 02 	andl	r9,0x2,COH
8000327a:	cf 90       	breq	8000326c <spi_write+0x6>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000327c:	5c 7b       	castu.h	r11
8000327e:	99 3b       	st.w	r12[0xc],r11
80003280:	5e fd       	retal	0

80003282 <spi_read>:
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
80003282:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80003286:	c0 58       	rjmp	80003290 <spi_read+0xe>
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80003288:	58 08       	cp.w	r8,0
8000328a:	c0 21       	brne	8000328e <spi_read+0xc>
8000328c:	5e ff       	retal	1
8000328e:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
80003290:	78 49       	ld.w	r9,r12[0x10]
80003292:	e2 19 02 01 	andl	r9,0x201,COH
80003296:	e0 49 02 01 	cp.w	r9,513
8000329a:	cf 71       	brne	80003288 <spi_read+0x6>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
8000329c:	78 28       	ld.w	r8,r12[0x8]
8000329e:	b6 08       	st.h	r11[0x0],r8
800032a0:	5e fd       	retal	0

800032a2 <udd_set_address>:
}


void udd_set_address(uint8_t address)
{
	udd_disable_address();
800032a2:	fe 68 00 00 	mov	r8,-131072
800032a6:	70 09       	ld.w	r9,r8[0x0]
800032a8:	a7 d9       	cbr	r9,0x7
800032aa:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
800032ac:	70 09       	ld.w	r9,r8[0x0]
800032ae:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800032b2:	e0 19 ff 80 	andl	r9,0xff80
800032b6:	f9 e9 10 09 	or	r9,r12,r9
800032ba:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800032bc:	70 09       	ld.w	r9,r8[0x0]
800032be:	a7 b9       	sbr	r9,0x7
800032c0:	91 09       	st.w	r8[0x0],r9
}
800032c2:	5e fc       	retal	r12

800032c4 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800032c4:	fe 68 00 00 	mov	r8,-131072
800032c8:	70 0c       	ld.w	r12,r8[0x0]
}
800032ca:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800032ce:	5e fc       	retal	r12

800032d0 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
800032d0:	fe 68 00 00 	mov	r8,-131072
800032d4:	70 8c       	ld.w	r12,r8[0x20]
}
800032d6:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
800032da:	5e fc       	retal	r12

800032dc <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
800032dc:	48 28       	lddpc	r8,800032e4 <udd_set_setup_payload+0x8>
800032de:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
800032e0:	b0 6b       	st.h	r8[0xc],r11
}
800032e2:	5e fc       	retal	r12
800032e4:	00 00       	add	r0,r0
800032e6:	04 90       	mov	r0,r2

800032e8 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
800032e8:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800032ec:	a3 68       	lsl	r8,0x2
800032ee:	e0 38 fe 40 	sub	r8,130624
800032f2:	70 0c       	ld.w	r12,r8[0x0]
}
800032f4:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
800032f8:	5e fc       	retal	r12
800032fa:	d7 03       	nop

800032fc <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
800032fc:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
800032fe:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
80003302:	30 18       	mov	r8,1
80003304:	f0 0c 18 00 	cp.b	r12,r8
80003308:	e0 88 00 03 	brls	8000330e <udd_ep_clear_halt+0x12>
8000330c:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
8000330e:	f8 c8 00 01 	sub	r8,r12,1
80003312:	a5 68       	lsl	r8,0x4
80003314:	49 29       	lddpc	r9,8000335c <udd_ep_clear_halt+0x60>
80003316:	f2 08 00 08 	add	r8,r9,r8

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
8000331a:	a3 6c       	lsl	r12,0x2
8000331c:	fe 6a 01 c0 	mov	r10,-130624
80003320:	f8 0a 00 09 	add	r9,r12,r10
80003324:	72 09       	ld.w	r9,r9[0x0]
80003326:	e6 19 00 08 	andh	r9,0x8,COH
8000332a:	c0 51       	brne	80003334 <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
8000332c:	70 09       	ld.w	r9,r8[0x0]
8000332e:	e6 19 40 00 	andh	r9,0x4000,COH
80003332:	c1 40       	breq	8000335a <udd_ep_clear_halt+0x5e>
		// Remove request to stall
		ptr_job->stall_requested = false;
80003334:	70 09       	ld.w	r9,r8[0x0]
80003336:	30 0a       	mov	r10,0
80003338:	f3 da d3 c1 	bfins	r9,r10,0x1e,0x1
8000333c:	91 09       	st.w	r8[0x0],r9
		// Remove stall
		udd_disable_stall_handshake(ep);
8000333e:	e0 3c fd e0 	sub	r12,130528
80003342:	e8 69 00 00 	mov	r9,524288
80003346:	99 09       	st.w	r12[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80003348:	70 09       	ld.w	r9,r8[0x0]
8000334a:	58 09       	cp.w	r9,0
8000334c:	c0 74       	brge	8000335a <udd_ep_clear_halt+0x5e>
			ptr_job->busy = false;
8000334e:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
80003352:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
80003354:	70 38       	ld.w	r8,r8[0xc]
80003356:	5d 18       	icall	r8
80003358:	da 0a       	popm	pc,r12=1
8000335a:	da 0a       	popm	pc,r12=1
8000335c:	00 00       	add	r0,r0
8000335e:	01 ac       	ld.ub	r12,r0[0x2]

80003360 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80003360:	30 59       	mov	r9,5
80003362:	48 58       	lddpc	r8,80003374 <udd_ctrl_stall_data+0x14>
80003364:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80003366:	e8 69 00 00 	mov	r9,524288
8000336a:	fe 68 01 f0 	mov	r8,-130576
8000336e:	91 09       	st.w	r8[0x0],r9
}
80003370:	5e fc       	retal	r12
80003372:	00 00       	add	r0,r0
80003374:	00 00       	add	r0,r0
80003376:	01 c0       	ld.ub	r0,r0[0x4]

80003378 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80003378:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000337a:	48 48       	lddpc	r8,80003388 <udd_ctrl_endofrequest+0x10>
8000337c:	70 48       	ld.w	r8,r8[0x10]
8000337e:	58 08       	cp.w	r8,0
80003380:	c0 20       	breq	80003384 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
80003382:	5d 18       	icall	r8
80003384:	d8 02       	popm	pc
80003386:	00 00       	add	r0,r0
80003388:	00 00       	add	r0,r0
8000338a:	04 90       	mov	r0,r2

8000338c <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
8000338c:	d4 01       	pushm	lr
8000338e:	16 99       	mov	r9,r11
	if (ptr_job->busy == false)
80003390:	78 08       	ld.w	r8,r12[0x0]
80003392:	58 08       	cp.w	r8,0
80003394:	c0 b4       	brge	800033aa <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
80003396:	30 0a       	mov	r10,0
80003398:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
8000339c:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans)
8000339e:	78 38       	ld.w	r8,r12[0xc]
800033a0:	58 08       	cp.w	r8,0
800033a2:	c0 40       	breq	800033aa <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
800033a4:	78 2b       	ld.w	r11,r12[0x8]
800033a6:	12 9c       	mov	r12,r9
800033a8:	5d 18       	icall	r8
800033aa:	d8 02       	popm	pc

800033ac <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
800033ac:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
800033ae:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800033b2:	20 18       	sub	r8,1
800033b4:	a5 68       	lsl	r8,0x4
800033b6:	30 1b       	mov	r11,1
800033b8:	48 3c       	lddpc	r12,800033c4 <udd_ep_abort_job+0x18>
800033ba:	10 0c       	add	r12,r8
800033bc:	f0 1f 00 03 	mcall	800033c8 <udd_ep_abort_job+0x1c>
}
800033c0:	d8 02       	popm	pc
800033c2:	00 00       	add	r0,r0
800033c4:	00 00       	add	r0,r0
800033c6:	01 ac       	ld.ub	r12,r0[0x2]
800033c8:	80 00       	ld.sh	r0,r0[0x0]
800033ca:	33 8c       	mov	r12,56

800033cc <udd_ep_set_halt>:
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
}


bool udd_ep_set_halt(udd_ep_id_t ep)
{
800033cc:	d4 01       	pushm	lr
	uint8_t index = ep & USB_EP_ADDR_MASK;
800033ce:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
800033d2:	30 19       	mov	r9,1
800033d4:	f2 08 18 00 	cp.b	r8,r9
800033d8:	e0 88 00 03 	brls	800033de <udd_ep_set_halt+0x12>
800033dc:	d8 0a       	popm	pc,r12=0
		return false;
	if (Is_udd_bank_interrupt_enabled(index)) {
800033de:	f0 09 15 02 	lsl	r9,r8,0x2
800033e2:	fe 6b 01 c0 	mov	r11,-130624
800033e6:	f2 0b 00 0a 	add	r10,r9,r11
800033ea:	74 0a       	ld.w	r10,r10[0x0]
800033ec:	e2 1a 10 00 	andl	r10,0x1000,COH
800033f0:	c0 c0       	breq	80003408 <udd_ep_set_halt+0x3c>
		// Wait end of transfer (= no busy bank) before stall endpoint
		udd_ep_job[index - 1].stall_requested = true;
800033f2:	20 18       	sub	r8,1
800033f4:	a5 68       	lsl	r8,0x4
800033f6:	48 b9       	lddpc	r9,80003420 <udd_ep_set_halt+0x54>
800033f8:	f2 08 00 08 	add	r8,r9,r8
800033fc:	70 09       	ld.w	r9,r8[0x0]
800033fe:	30 1a       	mov	r10,1
80003400:	f3 da d3 c1 	bfins	r9,r10,0x1e,0x1
80003404:	91 09       	st.w	r8[0x0],r9
80003406:	c0 98       	rjmp	80003418 <udd_ep_set_halt+0x4c>
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(index);
80003408:	e0 39 fe 10 	sub	r9,130576
8000340c:	e8 68 00 00 	mov	r8,524288
80003410:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
80003412:	e4 68 00 00 	mov	r8,262144
80003416:	93 08       	st.w	r9[0x0],r8
	}
	udd_ep_abort_job(ep);
80003418:	f0 1f 00 03 	mcall	80003424 <udd_ep_set_halt+0x58>
8000341c:	da 0a       	popm	pc,r12=1
8000341e:	00 00       	add	r0,r0
80003420:	00 00       	add	r0,r0
80003422:	01 ac       	ld.ub	r12,r0[0x2]
80003424:	80 00       	ld.sh	r0,r0[0x0]
80003426:	33 ac       	mov	r12,58

80003428 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80003428:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
8000342a:	fe 69 00 00 	mov	r9,-131072
8000342e:	72 7b       	ld.w	r11,r9[0x1c]
80003430:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80003434:	30 1a       	mov	r10,1
80003436:	f4 08 09 4a 	lsl	r10,r10,r8
8000343a:	5c da       	com	r10
8000343c:	16 6a       	and	r10,r11
8000343e:	93 7a       	st.w	r9[0x1c],r10
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
80003440:	a3 68       	lsl	r8,0x2
80003442:	e0 38 ff 00 	sub	r8,130816
80003446:	70 09       	ld.w	r9,r8[0x0]
80003448:	a1 d9       	cbr	r9,0x1
8000344a:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
8000344c:	f0 1f 00 02 	mcall	80003454 <udd_ep_free+0x2c>
}
80003450:	d8 02       	popm	pc
80003452:	00 00       	add	r0,r0
80003454:	80 00       	ld.sh	r0,r0[0x0]
80003456:	33 ac       	mov	r12,58

80003458 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80003458:	eb cd 40 e0 	pushm	r5-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
8000345c:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP)
80003460:	30 19       	mov	r9,1
80003462:	f2 08 18 00 	cp.b	r8,r9
80003466:	e0 8b 00 78 	brhi	80003556 <udd_ep_alloc+0xfe>
		return false;
	if (Is_udd_endpoint_enabled(ep))
8000346a:	fe 69 00 00 	mov	r9,-131072
8000346e:	72 7e       	ld.w	lr,r9[0x1c]
80003470:	30 19       	mov	r9,1
80003472:	f2 08 09 49 	lsl	r9,r9,r8
80003476:	f3 ee 00 0e 	and	lr,r9,lr
8000347a:	c6 e1       	brne	80003556 <udd_ep_alloc+0xfe>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
8000347c:	fd db c0 02 	bfextu	lr,r11,0x0,0x2
80003480:	58 1e       	cp.w	lr,1
80003482:	c6 a5       	brlt	80003556 <udd_ep_alloc+0xfe>
80003484:	58 2e       	cp.w	lr,2
80003486:	e0 8a 00 06 	brle	80003492 <udd_ep_alloc+0x3a>
8000348a:	58 3e       	cp.w	lr,3
8000348c:	c6 51       	brne	80003556 <udd_ep_alloc+0xfe>
8000348e:	30 06       	mov	r6,0
80003490:	c0 28       	rjmp	80003494 <udd_ep_alloc+0x3c>
80003492:	30 16       	mov	r6,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80003494:	f0 0e 15 02 	lsl	lr,r8,0x2
80003498:	e0 3e ff 00 	sub	lr,130816
8000349c:	7c 07       	ld.w	r7,lr[0x0]
8000349e:	5c 7a       	castu.h	r10
800034a0:	30 85       	mov	r5,8
800034a2:	f4 05 0c 4a 	max	r10,r10,r5
800034a6:	e0 65 04 00 	mov	r5,1024
800034aa:	f4 05 0d 4a 	min	r10,r10,r5
800034ae:	a1 7a       	lsl	r10,0x1
800034b0:	20 1a       	sub	r10,1
800034b2:	f4 0a 12 00 	clz	r10,r10
800034b6:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
800034ba:	ab 7b       	lsl	r11,0xb
800034bc:	e2 1b 18 00 	andl	r11,0x1800,COH
800034c0:	f7 ec 10 8c 	or	r12,r11,r12<<0x8
800034c4:	f4 0b 11 1c 	rsub	r11,r10,28
800034c8:	f9 eb 10 4b 	or	r11,r12,r11<<0x4
800034cc:	f7 e6 10 2b 	or	r11,r11,r6<<0x2
800034d0:	e2 1b 19 7c 	andl	r11,0x197c,COH
800034d4:	0e 9a       	mov	r10,r7
800034d6:	e0 1a e6 83 	andl	r10,0xe683
800034da:	f7 ea 10 0a 	or	r10,r11,r10
800034de:	9d 0a       	st.w	lr[0x0],r10
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
800034e0:	f9 d9 b0 10 	bfexts	r12,r9,0x0,0x10

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800034e4:	58 08       	cp.w	r8,0
800034e6:	c1 21       	brne	8000350a <udd_ep_alloc+0xb2>
		if (Is_udd_endpoint_enabled(i)) {
800034e8:	fe 69 00 00 	mov	r9,-131072
800034ec:	72 79       	ld.w	r9,r9[0x1c]
800034ee:	e2 19 00 02 	andl	r9,0x2,COH
800034f2:	c0 c0       	breq	8000350a <udd_ep_alloc+0xb2>
			ep_allocated |= 1 << i;
800034f4:	a1 bc       	sbr	r12,0x1
			udd_disable_endpoint(i);
800034f6:	fe 69 00 00 	mov	r9,-131072
800034fa:	72 7a       	ld.w	r10,r9[0x1c]
800034fc:	a1 da       	cbr	r10,0x1
800034fe:	93 7a       	st.w	r9[0x1c],r10
			udd_unallocate_memory(i);
80003500:	fe 69 01 04 	mov	r9,-130812
80003504:	72 0a       	ld.w	r10,r9[0x0]
80003506:	a1 da       	cbr	r10,0x1
80003508:	93 0a       	st.w	r9[0x0],r10
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
8000350a:	5c 7c       	castu.h	r12
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
8000350c:	fe 6e 00 00 	mov	lr,-131072
80003510:	30 16       	mov	r6,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80003512:	30 17       	mov	r7,1
		if (ep_allocated & (1 << i)) {
80003514:	f8 08 08 49 	asr	r9,r12,r8
80003518:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8000351c:	c1 50       	breq	80003546 <udd_ep_alloc+0xee>
			udd_allocate_memory(i);
8000351e:	f0 09 15 02 	lsl	r9,r8,0x2
80003522:	fe 65 01 00 	mov	r5,-130816
80003526:	f2 05 00 0b 	add	r11,r9,r5
8000352a:	76 05       	ld.w	r5,r11[0x0]
8000352c:	a1 b5       	sbr	r5,0x1
8000352e:	97 05       	st.w	r11[0x0],r5
			udd_enable_endpoint(i);
80003530:	7c 7b       	ld.w	r11,lr[0x1c]
80003532:	ec 08 09 4a 	lsl	r10,r6,r8
80003536:	16 4a       	or	r10,r11
80003538:	9d 7a       	st.w	lr[0x1c],r10
			if (!Is_udd_endpoint_configured(i))
8000353a:	e0 39 fe d0 	sub	r9,130768
8000353e:	72 09       	ld.w	r9,r9[0x0]
80003540:	e6 19 00 04 	andh	r9,0x4,COH
80003544:	c0 90       	breq	80003556 <udd_ep_alloc+0xfe>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80003546:	2f f8       	sub	r8,-1
80003548:	5c 58       	castu.b	r8
8000354a:	ee 08 18 00 	cp.b	r8,r7
8000354e:	fe 98 ff e3 	brls	80003514 <udd_ep_alloc+0xbc>
80003552:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003556:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000355a:	d7 03       	nop

8000355c <udd_sleep_mode>:
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
8000355c:	58 0c       	cp.w	r12,0
8000355e:	c1 11       	brne	80003580 <udd_sleep_mode+0x24>
80003560:	49 18       	lddpc	r8,800035a4 <udd_sleep_mode+0x48>
80003562:	11 89       	ld.ub	r9,r8[0x0]
80003564:	30 08       	mov	r8,0
80003566:	f0 09 18 00 	cp.b	r9,r8
8000356a:	c1 a0       	breq	8000359e <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000356c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003570:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80003572:	48 e8       	lddpc	r8,800035a8 <udd_sleep_mode+0x4c>
80003574:	11 9a       	ld.ub	r10,r8[0x1]
80003576:	2f fa       	sub	r10,-1
80003578:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000357a:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
8000357e:	c1 08       	rjmp	8000359e <udd_sleep_mode+0x42>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80003580:	48 98       	lddpc	r8,800035a4 <udd_sleep_mode+0x48>
80003582:	11 89       	ld.ub	r9,r8[0x0]
80003584:	30 08       	mov	r8,0
80003586:	f0 09 18 00 	cp.b	r9,r8
8000358a:	c0 a1       	brne	8000359e <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000358c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003590:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80003592:	48 68       	lddpc	r8,800035a8 <udd_sleep_mode+0x4c>
80003594:	11 9a       	ld.ub	r10,r8[0x1]
80003596:	20 1a       	sub	r10,1
80003598:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000359a:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
8000359e:	48 28       	lddpc	r8,800035a4 <udd_sleep_mode+0x48>
800035a0:	b0 8c       	st.b	r8[0x0],r12
}
800035a2:	5e fc       	retal	r12
800035a4:	00 00       	add	r0,r0
800035a6:	01 bc       	ld.ub	r12,r0[0x3]
800035a8:	00 00       	add	r0,r0
800035aa:	07 b8       	ld.ub	r8,r3[0x3]

800035ac <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800035ac:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800035b0:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
800035b2:	30 1a       	mov	r10,1
800035b4:	fe 69 02 20 	mov	r9,-130528
800035b8:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800035ba:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
800035be:	30 29       	mov	r9,2
800035c0:	fe 68 01 60 	mov	r8,-130720
800035c4:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
800035c6:	48 59       	lddpc	r9,800035d8 <udd_ctrl_init+0x2c>
800035c8:	30 08       	mov	r8,0
800035ca:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
800035cc:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
800035ce:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
800035d0:	48 39       	lddpc	r9,800035dc <udd_ctrl_init+0x30>
800035d2:	93 08       	st.w	r9[0x0],r8
}
800035d4:	5e fc       	retal	r12
800035d6:	00 00       	add	r0,r0
800035d8:	00 00       	add	r0,r0
800035da:	04 90       	mov	r0,r2
800035dc:	00 00       	add	r0,r0
800035de:	01 c0       	ld.ub	r0,r0[0x4]

800035e0 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
800035e0:	30 39       	mov	r9,3
800035e2:	48 a8       	lddpc	r8,80003608 <udd_ctrl_send_zlp_in+0x28>
800035e4:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800035e6:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
800035ea:	d3 03       	ssrf	0x10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
800035ec:	fe 6a 01 60 	mov	r10,-130720
800035f0:	30 19       	mov	r9,1
800035f2:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
800035f4:	fe 68 01 f0 	mov	r8,-130576
800035f8:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
800035fa:	30 89       	mov	r9,8
800035fc:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
800035fe:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003600:	e3 bb 00 00 	mtsr	0x0,r11
	cpu_irq_restore(flags);
}
80003604:	5e fc       	retal	r12
80003606:	00 00       	add	r0,r0
80003608:	00 00       	add	r0,r0
8000360a:	01 c0       	ld.ub	r0,r0[0x4]

8000360c <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
8000360c:	fe 68 00 00 	mov	r8,-131072
80003610:	70 09       	ld.w	r9,r8[0x0]
80003612:	e0 19 ff 80 	andl	r9,0xff80
80003616:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80003618:	70 09       	ld.w	r9,r8[0x0]
8000361a:	a7 b9       	sbr	r9,0x7
8000361c:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
8000361e:	fe 69 01 00 	mov	r9,-130816
80003622:	72 0b       	ld.w	r11,r9[0x0]
80003624:	30 8a       	mov	r10,8
80003626:	f4 0a 0c 4a 	max	r10,r10,r10
8000362a:	e0 6c 04 00 	mov	r12,1024
8000362e:	f4 0c 0d 4a 	min	r10,r10,r12
80003632:	a1 7a       	lsl	r10,0x1
80003634:	20 1a       	sub	r10,1
80003636:	f4 0a 12 00 	clz	r10,r10
8000363a:	f4 0a 11 1c 	rsub	r10,r10,28
8000363e:	a5 6a       	lsl	r10,0x4
80003640:	e2 1a 19 7c 	andl	r10,0x197c,COH
80003644:	e0 1b e6 83 	andl	r11,0xe683
80003648:	16 4a       	or	r10,r11
8000364a:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
8000364c:	72 0a       	ld.w	r10,r9[0x0]
8000364e:	a1 ba       	sbr	r10,0x1
80003650:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80003652:	70 79       	ld.w	r9,r8[0x1c]
80003654:	a1 a9       	sbr	r9,0x0
80003656:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003658:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000365c:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
8000365e:	fe 69 01 f0 	mov	r9,-130576
80003662:	30 4b       	mov	r11,4
80003664:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80003666:	30 2b       	mov	r11,2
80003668:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
8000366a:	e0 69 10 00 	mov	r9,4096
8000366e:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003670:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}
80003674:	5e fc       	retal	r12
80003676:	d7 03       	nop

80003678 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80003678:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000367c:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80003680:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80003682:	30 1c       	mov	r12,1
80003684:	f0 1f 00 17 	mcall	800036e0 <udd_attach+0x68>
	otg_unfreeze_clock();
80003688:	fe 68 00 00 	mov	r8,-131072
8000368c:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003690:	af c9       	cbr	r9,0xe
80003692:	f1 49 08 00 	st.w	r8[2048],r9
	// and the UTMI clock is disabled in suspend mode. Thereby, the utmi clock
	// can't be checked when USB line is not attached or in suspend mode 
	// But it is not a issue, because the clock source is the OSC
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
80003696:	f0 f9 08 04 	ld.w	r9,r8[2052]
8000369a:	e2 19 40 00 	andl	r9,0x4000,COH
8000369e:	cf c0       	breq	80003696 <udd_attach+0x1e>
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
800036a0:	fe 67 00 00 	mov	r7,-131072
800036a4:	6e 08       	ld.w	r8,r7[0x0]
800036a6:	a9 c8       	cbr	r8,0x8
800036a8:	8f 08       	st.w	r7[0x0],r8

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
800036aa:	f0 1f 00 0f 	mcall	800036e4 <udd_attach+0x6c>
	udd_reset_ep_ctrl();	// Reset endpoint control
800036ae:	f0 1f 00 0f 	mcall	800036e8 <udd_attach+0x70>
	udd_ctrl_init();	// Reset endpoint control management
800036b2:	f0 1f 00 0f 	mcall	800036ec <udd_attach+0x74>

	// Enable USB line events
	udd_enable_reset_interrupt();
800036b6:	30 8b       	mov	r11,8
800036b8:	8f 6b       	st.w	r7[0x18],r11
	udd_enable_suspend_interrupt();
800036ba:	30 19       	mov	r9,1
800036bc:	8f 69       	st.w	r7[0x18],r9
	udd_enable_wake_up_interrupt();
800036be:	31 08       	mov	r8,16
800036c0:	8f 68       	st.w	r7[0x18],r8
#ifdef UDC_SOF_EVENT
	udd_enable_sof_interrupt();
800036c2:	30 4a       	mov	r10,4
800036c4:	8f 6a       	st.w	r7[0x18],r10
#endif
	// Reset following interupts flag
	udd_ack_reset();
800036c6:	8f 2b       	st.w	r7[0x8],r11
	udd_ack_sof();
800036c8:	8f 2a       	st.w	r7[0x8],r10
#if UC3A3
   // With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
   udd_ack_suspend();
#else
   // The first suspend interrupt is not detected else raise it
   udd_raise_suspend();
800036ca:	8f 39       	st.w	r7[0xc],r9
#endif
	udd_ack_wake_up();
800036cc:	8f 28       	st.w	r7[0x8],r8
	otg_freeze_clock();
800036ce:	ee f8 08 00 	ld.w	r8,r7[2048]
800036d2:	af a8       	sbr	r8,0xe
800036d4:	ef 48 08 00 	st.w	r7[2048],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800036d8:	e3 b6 00 00 	mtsr	0x0,r6
	cpu_irq_restore(flags);
}
800036dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800036e0:	80 00       	ld.sh	r0,r0[0x0]
800036e2:	35 5c       	mov	r12,85
800036e4:	80 00       	ld.sh	r0,r0[0x0]
800036e6:	73 64       	ld.w	r4,r9[0x58]
800036e8:	80 00       	ld.sh	r0,r0[0x0]
800036ea:	36 0c       	mov	r12,96
800036ec:	80 00       	ld.sh	r0,r0[0x0]
800036ee:	35 ac       	mov	r12,90

800036f0 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
800036f0:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800036f4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800036f8:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
800036fa:	30 1a       	mov	r10,1
800036fc:	fe 69 02 20 	mov	r9,-130528
80003700:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003702:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80003706:	4c 38       	lddpc	r8,80003810 <udd_ctrl_in_sent+0x120>
80003708:	70 08       	ld.w	r8,r8[0x0]
8000370a:	58 38       	cp.w	r8,3
8000370c:	c0 71       	brne	8000371a <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
8000370e:	f0 1f 00 42 	mcall	80003814 <udd_ctrl_in_sent+0x124>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80003712:	f0 1f 00 42 	mcall	80003818 <udd_ctrl_in_sent+0x128>
		return;
80003716:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000371a:	4c 18       	lddpc	r8,8000381c <udd_ctrl_in_sent+0x12c>
8000371c:	90 68       	ld.sh	r8,r8[0xc]
8000371e:	4c 19       	lddpc	r9,80003820 <udd_ctrl_in_sent+0x130>
80003720:	92 07       	ld.sh	r7,r9[0x0]
80003722:	f0 07 01 07 	sub	r7,r8,r7
80003726:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
80003728:	c3 b1       	brne	8000379e <udd_ctrl_in_sent+0xae>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
8000372a:	4b f9       	lddpc	r9,80003824 <udd_ctrl_in_sent+0x134>
8000372c:	13 8a       	ld.ub	r10,r9[0x0]
8000372e:	30 09       	mov	r9,0
80003730:	f2 0a 18 00 	cp.b	r10,r9
80003734:	c1 21       	brne	80003758 <udd_ctrl_in_sent+0x68>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80003736:	30 49       	mov	r9,4
80003738:	4b 68       	lddpc	r8,80003810 <udd_ctrl_in_sent+0x120>
8000373a:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000373c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003740:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80003742:	31 08       	mov	r8,16
80003744:	fe 6a 01 60 	mov	r10,-130720
80003748:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
8000374a:	fe 6a 01 f0 	mov	r10,-130576
8000374e:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003750:	e3 b9 00 00 	mtsr	0x0,r9
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80003754:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
80003758:	4b 19       	lddpc	r9,8000381c <udd_ctrl_in_sent+0x12c>
8000375a:	92 b9       	ld.uh	r9,r9[0x6]
8000375c:	5c 78       	castu.h	r8
8000375e:	4b 3a       	lddpc	r10,80003828 <udd_ctrl_in_sent+0x138>
80003760:	94 8a       	ld.uh	r10,r10[0x0]
80003762:	14 08       	add	r8,r10
80003764:	10 39       	cp.w	r9,r8
80003766:	e0 89 00 08 	brgt	80003776 <udd_ctrl_in_sent+0x86>
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
8000376a:	4a d8       	lddpc	r8,8000381c <udd_ctrl_in_sent+0x12c>
8000376c:	70 5c       	ld.w	r12,r8[0x14]
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000376e:	58 0c       	cp.w	r12,0
80003770:	c0 30       	breq	80003776 <udd_ctrl_in_sent+0x86>
80003772:	5d 1c       	icall	r12
80003774:	c0 51       	brne	8000377e <udd_ctrl_in_sent+0x8e>
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
80003776:	30 09       	mov	r9,0
80003778:	4a b8       	lddpc	r8,80003824 <udd_ctrl_in_sent+0x134>
8000377a:	b0 89       	st.b	r8[0x0],r9
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
8000377c:	c1 18       	rjmp	8000379e <udd_ctrl_in_sent+0xae>
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
8000377e:	4a b9       	lddpc	r9,80003828 <udd_ctrl_in_sent+0x138>
80003780:	4a 88       	lddpc	r8,80003820 <udd_ctrl_in_sent+0x130>
80003782:	90 0b       	ld.sh	r11,r8[0x0]
80003784:	92 0a       	ld.sh	r10,r9[0x0]
80003786:	f6 0a 00 0a 	add	r10,r11,r10
8000378a:	b2 0a       	st.h	r9[0x0],r10
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
8000378c:	30 09       	mov	r9,0
8000378e:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80003790:	4a 38       	lddpc	r8,8000381c <udd_ctrl_in_sent+0x12c>
80003792:	90 67       	ld.sh	r7,r8[0xc]
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
80003794:	f1 d7 c0 03 	bfextu	r8,r7,0x0,0x3
80003798:	5f 09       	sreq	r9
8000379a:	4a 38       	lddpc	r8,80003824 <udd_ctrl_in_sent+0x134>
8000379c:	b0 89       	st.b	r8[0x0],r9
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000379e:	4a 08       	lddpc	r8,8000381c <udd_ctrl_in_sent+0x12c>
800037a0:	70 2a       	ld.w	r10,r8[0x8]
800037a2:	4a 08       	lddpc	r8,80003820 <udd_ctrl_in_sent+0x130>
800037a4:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800037a6:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
800037aa:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
800037ac:	fe 68 01 30 	mov	r8,-130768
800037b0:	70 08       	ld.w	r8,r8[0x0]
800037b2:	e2 18 00 02 	andl	r8,0x2,COH
800037b6:	c0 91       	brne	800037c8 <udd_ctrl_in_sent+0xd8>
800037b8:	30 88       	mov	r8,8
800037ba:	f0 07 19 00 	cp.h	r7,r8
800037be:	f9 b7 0b 08 	movhi	r7,8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800037c2:	58 07       	cp.w	r7,0
800037c4:	c0 91       	brne	800037d6 <udd_ctrl_in_sent+0xe6>
800037c6:	c1 58       	rjmp	800037f0 <udd_ctrl_in_sent+0x100>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800037c8:	e3 bb 00 00 	mtsr	0x0,r11
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800037cc:	30 49       	mov	r9,4
800037ce:	49 18       	lddpc	r8,80003810 <udd_ctrl_in_sent+0x120>
800037d0:	91 09       	st.w	r8[0x0],r9
		return;	// Exit of IN DATA phase
800037d2:	e3 cd 80 80 	ldm	sp++,r7,pc
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800037d6:	5c 79       	castu.h	r9
800037d8:	f4 09 00 09 	add	r9,r10,r9
800037dc:	30 08       	mov	r8,0
800037de:	ea 18 d0 00 	orh	r8,0xd000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
800037e2:	13 3a       	ld.ub	r10,r9++
800037e4:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800037e6:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800037ea:	ee 0a 19 00 	cp.h	r10,r7
800037ee:	cf a3       	brcs	800037e2 <udd_ctrl_in_sent+0xf2>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
800037f0:	48 c8       	lddpc	r8,80003820 <udd_ctrl_in_sent+0x130>
800037f2:	90 09       	ld.sh	r9,r8[0x0]
800037f4:	f2 07 00 07 	add	r7,r9,r7
800037f8:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
800037fa:	30 18       	mov	r8,1
800037fc:	fe 69 01 60 	mov	r9,-130720
80003800:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
80003802:	fe 69 01 f0 	mov	r9,-130576
80003806:	93 08       	st.w	r9[0x0],r8
80003808:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
8000380c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003810:	00 00       	add	r0,r0
80003812:	01 c0       	ld.ub	r0,r0[0x4]
80003814:	80 00       	ld.sh	r0,r0[0x0]
80003816:	33 78       	mov	r8,55
80003818:	80 00       	ld.sh	r0,r0[0x0]
8000381a:	35 ac       	mov	r12,90
8000381c:	00 00       	add	r0,r0
8000381e:	04 90       	mov	r0,r2
80003820:	00 00       	add	r0,r0
80003822:	01 be       	ld.ub	lr,r0[0x3]
80003824:	00 00       	add	r0,r0
80003826:	01 c4       	ld.ub	r4,r0[0x4]
80003828:	00 00       	add	r0,r0
8000382a:	01 a8       	ld.ub	r8,r0[0x2]

8000382c <udd_enable>:
	return true;
}


void udd_enable(void)
{
8000382c:	eb cd 40 c0 	pushm	r6-r7,lr
	irqflags_t flags;
	sysclk_enable_usb();
80003830:	f0 1f 00 37 	mcall	8000390c <udd_enable+0xe0>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003834:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80003838:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
8000383a:	fe 67 00 00 	mov	r7,-131072
8000383e:	ee f8 08 00 	ld.w	r8,r7[2048]
80003842:	af d8       	cbr	r8,0xf
80003844:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_enabled();
80003848:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return FALSE;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
8000384c:	30 0a       	mov	r10,0
8000384e:	e0 6b 02 20 	mov	r11,544
80003852:	4b 0c       	lddpc	r12,80003910 <udd_enable+0xe4>
80003854:	f0 1f 00 30 	mcall	80003914 <udd_enable+0xe8>
	otg_force_device_mode();
80003858:	ee f8 08 00 	ld.w	r8,r7[2048]
8000385c:	b9 b8       	sbr	r8,0x19
8000385e:	ef 48 08 00 	st.w	r7[2048],r8
80003862:	ee f8 08 00 	ld.w	r8,r7[2048]
80003866:	b9 c8       	cbr	r8,0x18
80003868:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
8000386c:	ee f8 08 00 	ld.w	r8,r7[2048]
80003870:	ad c8       	cbr	r8,0xc
80003872:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
80003876:	ee f8 08 00 	ld.w	r8,r7[2048]
8000387a:	ad a8       	sbr	r8,0xc
8000387c:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
80003880:	ee f8 08 00 	ld.w	r8,r7[2048]
80003884:	af b8       	sbr	r8,0xf
80003886:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
8000388a:	ee f8 08 00 	ld.w	r8,r7[2048]
8000388e:	af c8       	cbr	r8,0xe
80003890:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
80003894:	ee f8 08 00 	ld.w	r8,r7[2048]
	// For parts with high speed feature, the "USABLE" clock is the UTMI clock,
	// and the UTMI clock is disabled in suspend mode. Thereby, the utmi clock
	// can't be checked when USB line is not attached or in suspend mode 
#else
	// Check USB clock
	while( !Is_clock_usable() );
80003898:	0e 99       	mov	r9,r7
8000389a:	f2 f8 08 04 	ld.w	r8,r9[2052]
8000389e:	e2 18 40 00 	andl	r8,0x4000,COH
800038a2:	cf c0       	breq	8000389a <udd_enable+0x6e>

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
800038a4:	49 d8       	lddpc	r8,80003918 <udd_enable+0xec>
800038a6:	70 0a       	ld.w	r10,r8[0x0]
800038a8:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
800038aa:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
800038ae:	f5 d9 d3 c1 	bfins	r10,r9,0x1e,0x1
800038b2:	91 0a       	st.w	r8[0x0],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
800038b4:	fe 68 00 00 	mov	r8,-131072
800038b8:	70 0a       	ld.w	r10,r8[0x0]
800038ba:	ad ca       	cbr	r10,0xc
800038bc:	91 0a       	st.w	r8[0x0],r10
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
800038be:	70 0a       	ld.w	r10,r8[0x0]
800038c0:	e8 1a 0c 00 	orl	r10,0xc00
800038c4:	91 0a       	st.w	r8[0x0],r10
#  endif
#endif
	udd_enable_vbus_interrupt();
800038c6:	f0 fa 08 00 	ld.w	r10,r8[2048]
800038ca:	a1 ba       	sbr	r10,0x1
800038cc:	f1 4a 08 00 	st.w	r8[2048],r10
	otg_freeze_clock();
800038d0:	f0 fa 08 00 	ld.w	r10,r8[2048]
800038d4:	af aa       	sbr	r10,0xe
800038d6:	f1 4a 08 00 	st.w	r8[2048],r10
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
800038da:	fe 78 0c 00 	mov	r8,-62464
800038de:	f0 fa 01 44 	ld.w	r10,r8[324]
800038e2:	30 1b       	mov	r11,1
800038e4:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
800038e8:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
800038ec:	48 c8       	lddpc	r8,8000391c <udd_enable+0xf0>
800038ee:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800038f0:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800038f4:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800038f6:	48 b8       	lddpc	r8,80003920 <udd_enable+0xf4>
800038f8:	11 ba       	ld.ub	r10,r8[0x3]
800038fa:	2f fa       	sub	r10,-1
800038fc:	b0 ba       	st.b	r8[0x3],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800038fe:	e3 b9 00 00 	mtsr	0x0,r9
80003902:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80003906:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000390a:	00 00       	add	r0,r0
8000390c:	80 00       	ld.sh	r0,r0[0x0]
8000390e:	6c a0       	ld.w	r0,r6[0x28]
80003910:	80 00       	ld.sh	r0,r0[0x0]
80003912:	3a 30       	mov	r0,-93
80003914:	80 00       	ld.sh	r0,r0[0x0]
80003916:	2f f8       	sub	r8,-1
80003918:	00 00       	add	r0,r0
8000391a:	01 ac       	ld.ub	r12,r0[0x2]
8000391c:	00 00       	add	r0,r0
8000391e:	01 bc       	ld.ub	r12,r0[0x3]
80003920:	00 00       	add	r0,r0
80003922:	07 b8       	ld.ub	r8,r3[0x3]

80003924 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80003924:	eb cd 40 fc 	pushm	r2-r7,lr
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
80003928:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
8000392c:	30 17       	mov	r7,1
8000392e:	ee 0e 18 00 	cp.b	lr,r7
80003932:	e0 8b 00 74 	brhi	80003a1a <udd_ep_run+0xf6>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80003936:	fe 67 00 00 	mov	r7,-131072
8000393a:	6e 76       	ld.w	r6,r7[0x1c]
8000393c:	1c 95       	mov	r5,lr
8000393e:	30 17       	mov	r7,1
80003940:	ee 0e 09 47 	lsl	r7,r7,lr
80003944:	0c 67       	and	r7,r6
80003946:	c6 a0       	breq	80003a1a <udd_ep_run+0xf6>
			|| Is_udd_endpoint_stall_requested(ep)
80003948:	fc 07 15 02 	lsl	r7,lr,0x2
8000394c:	fe 64 01 c0 	mov	r4,-130624
80003950:	ee 04 00 06 	add	r6,r7,r4
80003954:	6c 06       	ld.w	r6,r6[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80003956:	e6 16 00 08 	andh	r6,0x8,COH
8000395a:	c6 01       	brne	80003a1a <udd_ep_run+0xf6>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000395c:	fc c6 00 01 	sub	r6,lr,1
80003960:	a5 66       	lsl	r6,0x4
80003962:	4b 34       	lddpc	r4,80003a2c <udd_ep_run+0x108>
80003964:	e8 06 00 06 	add	r6,r4,r6

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
80003968:	6c 04       	ld.w	r4,r6[0x0]
8000396a:	e6 14 40 00 	andh	r4,0x4000,COH
8000396e:	c5 61       	brne	80003a1a <udd_ep_run+0xf6>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003970:	e1 b3 00 00 	mfsr	r3,0x0
	cpu_irq_disable();
80003974:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80003976:	6c 04       	ld.w	r4,r6[0x0]
80003978:	58 04       	cp.w	r4,0
8000397a:	c0 54       	brge	80003984 <udd_ep_run+0x60>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000397c:	e3 b3 00 00 	mtsr	0x0,r3
#endif
	barrier();
80003980:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
80003984:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
80003988:	6c 04       	ld.w	r4,r6[0x0]
8000398a:	30 12       	mov	r2,1
8000398c:	e9 d2 d3 e1 	bfins	r4,r2,0x1f,0x1
80003990:	8d 04       	st.w	r6[0x0],r4
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003992:	e3 b3 00 00 	mtsr	0x0,r3
	cpu_irq_restore(flags);

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
80003996:	e0 49 ff ff 	cp.w	r9,65535
8000399a:	e0 88 00 07 	brls	800039a8 <udd_ep_run+0x84>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
8000399e:	e0 79 00 00 	mov	r9,65536
800039a2:	8d 29       	st.w	r6[0x8],r9
800039a4:	30 09       	mov	r9,0
800039a6:	c1 18       	rjmp	800039c8 <udd_ep_run+0xa4>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
800039a8:	8d 29       	st.w	r6[0x8],r9
		if (b_dir_in && (0 != buf_size % udd_get_endpoint_size(ep))) {
800039aa:	58 0c       	cp.w	r12,0
800039ac:	c0 e0       	breq	800039c8 <udd_ep_run+0xa4>
800039ae:	fe 63 01 00 	mov	r3,-130816
800039b2:	ee 03 00 04 	add	r4,r7,r3
800039b6:	68 04       	ld.w	r4,r4[0x0]
800039b8:	e9 d4 c0 83 	bfextu	r4,r4,0x4,0x3
800039bc:	30 83       	mov	r3,8
800039be:	e6 04 09 44 	lsl	r4,r3,r4
800039c2:	20 14       	sub	r4,1
800039c4:	12 64       	and	r4,r9
800039c6:	c2 c1       	brne	80003a1e <udd_ep_run+0xfa>
			// Force short packet option to send a shortpacket on IN,
			// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
			b_shortpacket = true;
		}
	}
	ptr_job->buf = buf;
800039c8:	8d 1a       	st.w	r6[0x4],r10
	ptr_job->call_trans = callback;
800039ca:	8d 38       	st.w	r6[0xc],r8

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
800039cc:	a5 6e       	lsl	lr,0x4
800039ce:	e0 3e fd 00 	sub	lr,130304
800039d2:	9d 1a       	st.w	lr[0x4],r10
	if (b_shortpacket) {
800039d4:	58 0b       	cp.w	r11,0
800039d6:	c0 31       	brne	800039dc <udd_ep_run+0xb8>
800039d8:	30 08       	mov	r8,0
800039da:	c0 68       	rjmp	800039e6 <udd_ep_run+0xc2>
		if (b_dir_in) {
800039dc:	58 0c       	cp.w	r12,0
800039de:	c0 31       	brne	800039e4 <udd_ep_run+0xc0>
800039e0:	31 48       	mov	r8,20
800039e2:	c0 28       	rjmp	800039e6 <udd_ep_run+0xc2>
800039e4:	30 88       	mov	r8,8
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					|
					AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
800039e6:	e8 18 00 21 	orl	r8,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
800039ea:	f1 e9 11 09 	or	r9,r8,r9<<0x10
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_enable_endpoint_bank_autoswitch(ep);
800039ee:	e0 37 ff 00 	sub	r7,130816
800039f2:	6e 08       	ld.w	r8,r7[0x0]
800039f4:	a9 b8       	sbr	r8,0x9
800039f6:	8f 08       	st.w	r7[0x0],r8
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
800039f8:	9d 29       	st.w	lr[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800039fa:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800039fe:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
80003a00:	20 15       	sub	r5,1
80003a02:	30 09       	mov	r9,0
80003a04:	ea 19 02 00 	orh	r9,0x200
80003a08:	f2 05 09 45 	lsl	r5,r9,r5
80003a0c:	fe 69 00 00 	mov	r9,-131072
80003a10:	93 65       	st.w	r9[0x18],r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003a12:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
80003a16:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
	cpu_irq_restore(flags);

	return true;
80003a1a:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
			// Force short packet option to send a shortpacket on IN,
			// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
			b_shortpacket = true;
		}
	}
	ptr_job->buf = buf;
80003a1e:	8d 1a       	st.w	r6[0x4],r10
	ptr_job->call_trans = callback;
80003a20:	8d 38       	st.w	r6[0xc],r8

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
80003a22:	a5 6e       	lsl	lr,0x4
80003a24:	e0 3e fd 00 	sub	lr,130304
80003a28:	9d 1a       	st.w	lr[0x4],r10
80003a2a:	cd db       	rjmp	800039e4 <udd_ep_run+0xc0>
80003a2c:	00 00       	add	r0,r0
80003a2e:	01 ac       	ld.ub	r12,r0[0x2]

80003a30 <udd_interrupt>:
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
80003a30:	d4 01       	pushm	lr
#ifdef UDC_SOF_EVENT
	if (Is_udd_sof()) {
80003a32:	fe 68 00 00 	mov	r8,-131072
80003a36:	70 18       	ld.w	r8,r8[0x4]
80003a38:	e2 18 00 04 	andl	r8,0x4,COH
80003a3c:	c0 90       	breq	80003a4e <udd_interrupt+0x1e>
		udd_ack_sof();
80003a3e:	30 49       	mov	r9,4
80003a40:	fe 68 00 00 	mov	r8,-131072
80003a44:	91 29       	st.w	r8[0x8],r9
		UDC_SOF_EVENT();
80003a46:	f0 1f 01 3c 	mcall	80003f34 <udd_interrupt+0x504>
		goto udd_interrupt_end;
80003a4a:	e0 8f 02 63 	bral	80003f10 <udd_interrupt+0x4e0>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80003a4e:	fe 68 00 00 	mov	r8,-131072
80003a52:	70 18       	ld.w	r8,r8[0x4]
80003a54:	e2 18 10 00 	andl	r8,0x1000,COH
80003a58:	e0 80 01 80 	breq	80003d58 <udd_interrupt+0x328>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80003a5c:	fe 68 02 20 	mov	r8,-130528
80003a60:	31 09       	mov	r9,16
80003a62:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80003a64:	30 89       	mov	r9,8
80003a66:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80003a68:	fe 68 01 30 	mov	r8,-130768
80003a6c:	70 08       	ld.w	r8,r8[0x0]
80003a6e:	e2 18 00 04 	andl	r8,0x4,COH
80003a72:	c7 e0       	breq	80003b6e <udd_interrupt+0x13e>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80003a74:	fe f8 04 c4 	ld.w	r8,pc[1220]
80003a78:	70 08       	ld.w	r8,r8[0x0]
80003a7a:	58 08       	cp.w	r8,0
80003a7c:	c0 50       	breq	80003a86 <udd_interrupt+0x56>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80003a7e:	f0 1f 01 30 	mcall	80003f3c <udd_interrupt+0x50c>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80003a82:	f0 1f 01 30 	mcall	80003f40 <udd_interrupt+0x510>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80003a86:	fe 68 01 30 	mov	r8,-130768
80003a8a:	70 08       	ld.w	r8,r8[0x0]
80003a8c:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80003a90:	58 88       	cp.w	r8,8
80003a92:	c0 90       	breq	80003aa4 <udd_interrupt+0x74>
		udd_ctrl_stall_data();
80003a94:	f0 1f 01 2c 	mcall	80003f44 <udd_interrupt+0x514>
		udd_ack_setup_received(0);
80003a98:	30 49       	mov	r9,4
80003a9a:	fe 68 01 60 	mov	r8,-130720
80003a9e:	91 09       	st.w	r8[0x0],r9
80003aa0:	e0 8f 02 38 	bral	80003f10 <udd_interrupt+0x4e0>
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint32_t *ptr = (uint32_t *) & udd_get_endpoint_fifo_access(0, 32);
	for (i = 0; i < 8 / 4; i++) {
		((uint32_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
80003aa4:	fe f8 04 a4 	ld.w	r8,pc[1188]
80003aa8:	30 09       	mov	r9,0
80003aaa:	ea 19 d0 00 	orh	r9,0xd000
80003aae:	72 0a       	ld.w	r10,r9[0x0]
80003ab0:	91 0a       	st.w	r8[0x0],r10
80003ab2:	30 49       	mov	r9,4
80003ab4:	ea 19 d0 00 	orh	r9,0xd000
80003ab8:	72 09       	ld.w	r9,r9[0x0]
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80003aba:	5c ca       	swap.bh	r10
80003abc:	b0 1a       	st.h	r8[0x2],r10
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80003abe:	f2 0a 14 10 	asr	r10,r9,0x10
80003ac2:	5c ca       	swap.bh	r10
80003ac4:	b0 2a       	st.h	r8[0x4],r10
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80003ac6:	5c c9       	swap.bh	r9
80003ac8:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80003aca:	f0 1f 01 21 	mcall	80003f4c <udd_interrupt+0x51c>
80003ace:	c0 91       	brne	80003ae0 <udd_interrupt+0xb0>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
80003ad0:	f0 1f 01 1d 	mcall	80003f44 <udd_interrupt+0x514>
		udd_ack_setup_received(0);
80003ad4:	30 49       	mov	r9,4
80003ad6:	fe 68 01 60 	mov	r8,-130720
80003ada:	91 09       	st.w	r8[0x0],r9
80003adc:	e0 8f 02 1a 	bral	80003f10 <udd_interrupt+0x4e0>
		return;
	}
	udd_ack_setup_received(0);
80003ae0:	30 49       	mov	r9,4
80003ae2:	fe 68 01 60 	mov	r8,-130720
80003ae6:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80003ae8:	fe f8 04 60 	ld.w	r8,pc[1120]
80003aec:	11 89       	ld.ub	r9,r8[0x0]
80003aee:	30 08       	mov	r8,0
80003af0:	f0 09 18 00 	cp.b	r9,r8
80003af4:	c1 94       	brge	80003b26 <udd_interrupt+0xf6>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80003af6:	fe f8 04 52 	ld.w	r8,pc[1106]
80003afa:	90 e8       	ld.uh	r8,r8[0xc]
80003afc:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003b00:	5f 09       	sreq	r9
80003b02:	fe f8 04 4e 	ld.w	r8,pc[1102]
80003b06:	b0 89       	st.b	r8[0x0],r9
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80003b08:	30 08       	mov	r8,0
80003b0a:	fe f9 04 4a 	ld.w	r9,pc[1098]
80003b0e:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80003b10:	fe f9 04 48 	ld.w	r9,pc[1096]
80003b14:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80003b16:	30 29       	mov	r9,2
80003b18:	fe f8 04 20 	ld.w	r8,pc[1056]
80003b1c:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent();	// Send first data transfer
80003b1e:	f0 1f 01 10 	mcall	80003f5c <udd_interrupt+0x52c>
80003b22:	e0 8f 01 f7 	bral	80003f10 <udd_interrupt+0x4e0>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80003b26:	fe f8 04 22 	ld.w	r8,pc[1058]
80003b2a:	90 39       	ld.sh	r9,r8[0x6]
80003b2c:	30 08       	mov	r8,0
80003b2e:	f0 09 19 00 	cp.h	r9,r8
80003b32:	c0 51       	brne	80003b3c <udd_interrupt+0x10c>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80003b34:	f0 1f 01 0b 	mcall	80003f60 <udd_interrupt+0x530>
80003b38:	e0 8f 01 ec 	bral	80003f10 <udd_interrupt+0x4e0>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80003b3c:	30 08       	mov	r8,0
80003b3e:	fe f9 04 16 	ld.w	r9,pc[1046]
80003b42:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80003b44:	fe f9 04 14 	ld.w	r9,pc[1044]
80003b48:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80003b4a:	30 19       	mov	r9,1
80003b4c:	fe f8 03 ec 	ld.w	r8,pc[1004]
80003b50:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80003b52:	31 08       	mov	r8,16
80003b54:	fe 69 01 60 	mov	r9,-130720
80003b58:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003b5a:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003b5e:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80003b60:	fe 6a 01 f0 	mov	r10,-130576
80003b64:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003b66:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80003b6a:	e0 8f 01 d3 	bral	80003f10 <udd_interrupt+0x4e0>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80003b6e:	fe 68 01 30 	mov	r8,-130768
80003b72:	70 08       	ld.w	r8,r8[0x0]
80003b74:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003b78:	c0 b0       	breq	80003b8e <udd_interrupt+0x15e>
80003b7a:	fe 68 01 c0 	mov	r8,-130624
80003b7e:	70 08       	ld.w	r8,r8[0x0]
80003b80:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003b84:	c0 50       	breq	80003b8e <udd_interrupt+0x15e>
		// IN packet sent
		udd_ctrl_in_sent();
80003b86:	f0 1f 00 f6 	mcall	80003f5c <udd_interrupt+0x52c>
80003b8a:	e0 8f 01 c3 	bral	80003f10 <udd_interrupt+0x4e0>
		return true;
	}
	if (Is_udd_out_received(0)) {
80003b8e:	fe 68 01 30 	mov	r8,-130768
80003b92:	70 08       	ld.w	r8,r8[0x0]
80003b94:	e2 18 00 02 	andl	r8,0x2,COH
80003b98:	e0 80 00 a1 	breq	80003cda <udd_interrupt+0x2aa>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80003b9c:	fe f8 03 9c 	ld.w	r8,pc[924]
80003ba0:	70 08       	ld.w	r8,r8[0x0]
80003ba2:	58 18       	cp.w	r8,1
80003ba4:	c1 10       	breq	80003bc6 <udd_interrupt+0x196>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80003ba6:	58 28       	cp.w	r8,2
80003ba8:	5f 09       	sreq	r9
80003baa:	58 48       	cp.w	r8,4
80003bac:	5f 08       	sreq	r8
80003bae:	f3 e8 10 08 	or	r8,r9,r8
80003bb2:	c0 40       	breq	80003bba <udd_interrupt+0x18a>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
80003bb4:	f0 1f 00 e2 	mcall	80003f3c <udd_interrupt+0x50c>
80003bb8:	c0 38       	rjmp	80003bbe <udd_interrupt+0x18e>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80003bba:	f0 1f 00 e3 	mcall	80003f44 <udd_interrupt+0x514>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80003bbe:	f0 1f 00 e1 	mcall	80003f40 <udd_interrupt+0x510>
80003bc2:	e0 8f 01 a7 	bral	80003f10 <udd_interrupt+0x4e0>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80003bc6:	fe 68 01 30 	mov	r8,-130768
80003bca:	70 0b       	ld.w	r11,r8[0x0]
80003bcc:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80003bd0:	fe f8 03 78 	ld.w	r8,pc[888]
80003bd4:	90 69       	ld.sh	r9,r8[0xc]
80003bd6:	fe f8 03 82 	ld.w	r8,pc[898]
80003bda:	90 08       	ld.sh	r8,r8[0x0]
80003bdc:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80003be0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80003be4:	f6 0a 00 0a 	add	r10,r11,r10
80003be8:	14 3c       	cp.w	r12,r10
80003bea:	c0 44       	brge	80003bf2 <udd_interrupt+0x1c2>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80003bec:	10 19       	sub	r9,r8
80003bee:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80003bf2:	fe f9 03 56 	ld.w	r9,pc[854]
80003bf6:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
80003bf8:	58 0b       	cp.w	r11,0
80003bfa:	e0 80 01 91 	breq	80003f1c <udd_interrupt+0x4ec>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80003bfe:	5c 78       	castu.h	r8
80003c00:	10 09       	add	r9,r8
80003c02:	30 08       	mov	r8,0
80003c04:	ea 18 d0 00 	orh	r8,0xd000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80003c08:	11 3a       	ld.ub	r10,r8++
80003c0a:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80003c0c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80003c10:	f6 0a 19 00 	cp.h	r10,r11
80003c14:	cf a3       	brcs	80003c08 <udd_interrupt+0x1d8>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80003c16:	fe f9 03 42 	ld.w	r9,pc[834]
80003c1a:	92 08       	ld.sh	r8,r9[0x0]
80003c1c:	16 08       	add	r8,r11
80003c1e:	5c 88       	casts.h	r8
80003c20:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80003c22:	30 89       	mov	r9,8
80003c24:	f2 0b 19 00 	cp.h	r11,r9
80003c28:	c0 e1       	brne	80003c44 <udd_interrupt+0x214>
80003c2a:	fe f9 03 1e 	ld.w	r9,pc[798]
80003c2e:	92 ba       	ld.uh	r10,r9[0x6]
80003c30:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003c34:	fe f9 03 20 	ld.w	r9,pc[800]
80003c38:	92 89       	ld.uh	r9,r9[0x0]
80003c3a:	f6 09 00 09 	add	r9,r11,r9
80003c3e:	12 3a       	cp.w	r10,r9
80003c40:	e0 89 00 18 	brgt	80003c70 <udd_interrupt+0x240>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80003c44:	fe f9 03 04 	ld.w	r9,pc[772]
80003c48:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80003c4a:	72 5c       	ld.w	r12,r9[0x14]
80003c4c:	58 0c       	cp.w	r12,0
80003c4e:	c0 a0       	breq	80003c62 <udd_interrupt+0x232>
			if (!udd_g_ctrlreq.over_under_run()) {
80003c50:	5d 1c       	icall	r12
80003c52:	c0 81       	brne	80003c62 <udd_interrupt+0x232>
				// Stall ZLP
				udd_ctrl_stall_data();
80003c54:	f0 1f 00 bc 	mcall	80003f44 <udd_interrupt+0x514>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80003c58:	30 29       	mov	r9,2
80003c5a:	fe 68 01 60 	mov	r8,-130720
80003c5e:	91 09       	st.w	r8[0x0],r9
80003c60:	c5 89       	rjmp	80003f10 <udd_interrupt+0x4e0>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80003c62:	30 29       	mov	r9,2
80003c64:	fe 68 01 60 	mov	r8,-130720
80003c68:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80003c6a:	f0 1f 00 be 	mcall	80003f60 <udd_interrupt+0x530>
80003c6e:	c5 19       	rjmp	80003f10 <udd_interrupt+0x4e0>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80003c70:	fe f9 02 d8 	ld.w	r9,pc[728]
80003c74:	92 69       	ld.sh	r9,r9[0xc]
80003c76:	f0 09 19 00 	cp.h	r9,r8
80003c7a:	c2 11       	brne	80003cbc <udd_interrupt+0x28c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80003c7c:	fe f8 02 cc 	ld.w	r8,pc[716]
80003c80:	70 5c       	ld.w	r12,r8[0x14]
80003c82:	58 0c       	cp.w	r12,0
80003c84:	c0 81       	brne	80003c94 <udd_interrupt+0x264>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
80003c86:	f0 1f 00 b0 	mcall	80003f44 <udd_interrupt+0x514>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80003c8a:	30 29       	mov	r9,2
80003c8c:	fe 68 01 60 	mov	r8,-130720
80003c90:	91 09       	st.w	r8[0x0],r9
80003c92:	c3 f9       	rjmp	80003f10 <udd_interrupt+0x4e0>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80003c94:	5d 1c       	icall	r12
80003c96:	c0 81       	brne	80003ca6 <udd_interrupt+0x276>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80003c98:	f0 1f 00 ab 	mcall	80003f44 <udd_interrupt+0x514>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80003c9c:	30 29       	mov	r9,2
80003c9e:	fe 68 01 60 	mov	r8,-130720
80003ca2:	91 09       	st.w	r8[0x0],r9
80003ca4:	c3 69       	rjmp	80003f10 <udd_interrupt+0x4e0>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80003ca6:	fe f9 02 ae 	ld.w	r9,pc[686]
80003caa:	fe f8 02 ae 	ld.w	r8,pc[686]
80003cae:	90 0b       	ld.sh	r11,r8[0x0]
80003cb0:	92 0a       	ld.sh	r10,r9[0x0]
80003cb2:	f6 0a 00 0a 	add	r10,r11,r10
80003cb6:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80003cb8:	30 09       	mov	r9,0
80003cba:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80003cbc:	fe 69 01 60 	mov	r9,-130720
80003cc0:	30 28       	mov	r8,2
80003cc2:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80003cc4:	31 08       	mov	r8,16
80003cc6:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003cc8:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003ccc:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80003cce:	fe 6a 01 f0 	mov	r10,-130576
80003cd2:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003cd4:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80003cd8:	c1 c9       	rjmp	80003f10 <udd_interrupt+0x4e0>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80003cda:	fe 68 01 30 	mov	r8,-130768
80003cde:	70 08       	ld.w	r8,r8[0x0]
80003ce0:	e2 18 00 08 	andl	r8,0x8,COH
80003ce4:	c1 80       	breq	80003d14 <udd_interrupt+0x2e4>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80003ce6:	30 89       	mov	r9,8
80003ce8:	fe 68 01 60 	mov	r8,-130720
80003cec:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80003cee:	fe 68 01 30 	mov	r8,-130768
80003cf2:	70 08       	ld.w	r8,r8[0x0]
80003cf4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003cf8:	e0 81 01 0c 	brne	80003f10 <udd_interrupt+0x4e0>
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80003cfc:	fe f8 02 3c 	ld.w	r8,pc[572]
80003d00:	70 08       	ld.w	r8,r8[0x0]
80003d02:	58 38       	cp.w	r8,3
80003d04:	e0 81 01 06 	brne	80003f10 <udd_interrupt+0x4e0>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80003d08:	e8 69 00 00 	mov	r9,524288
80003d0c:	fe 68 01 f0 	mov	r8,-130576
80003d10:	91 09       	st.w	r8[0x0],r9
80003d12:	cf f8       	rjmp	80003f10 <udd_interrupt+0x4e0>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80003d14:	fe 68 01 30 	mov	r8,-130768
80003d18:	70 08       	ld.w	r8,r8[0x0]
80003d1a:	e2 18 00 10 	andl	r8,0x10,COH
80003d1e:	c1 d0       	breq	80003d58 <udd_interrupt+0x328>
		// Underflow on IN packet
		udd_ack_nak_in(0);
80003d20:	31 09       	mov	r9,16
80003d22:	fe 68 01 60 	mov	r8,-130720
80003d26:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80003d28:	fe 68 01 30 	mov	r8,-130768
80003d2c:	70 08       	ld.w	r8,r8[0x0]
80003d2e:	e2 18 00 02 	andl	r8,0x2,COH
80003d32:	e0 81 00 ef 	brne	80003f10 <udd_interrupt+0x4e0>
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80003d36:	fe f8 02 02 	ld.w	r8,pc[514]
80003d3a:	70 08       	ld.w	r8,r8[0x0]
80003d3c:	58 18       	cp.w	r8,1
80003d3e:	c0 41       	brne	80003d46 <udd_interrupt+0x316>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80003d40:	f0 1f 00 88 	mcall	80003f60 <udd_interrupt+0x530>
80003d44:	ce 68       	rjmp	80003f10 <udd_interrupt+0x4e0>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80003d46:	58 48       	cp.w	r8,4
80003d48:	e0 81 00 e4 	brne	80003f10 <udd_interrupt+0x4e0>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80003d4c:	e8 69 00 00 	mov	r9,524288
80003d50:	fe 68 01 f0 	mov	r8,-130576
80003d54:	91 09       	st.w	r8[0x0],r9
80003d56:	cd d8       	rjmp	80003f10 <udd_interrupt+0x4e0>
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80003d58:	fe 68 00 00 	mov	r8,-131072
80003d5c:	70 48       	ld.w	r8,r8[0x10]
80003d5e:	e6 18 02 00 	andh	r8,0x200,COH
80003d62:	c3 00       	breq	80003dc2 <udd_interrupt+0x392>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80003d64:	fe 68 00 00 	mov	r8,-131072
80003d68:	70 18       	ld.w	r8,r8[0x4]
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80003d6a:	e6 18 02 00 	andh	r8,0x200,COH
80003d6e:	c2 a0       	breq	80003dc2 <udd_interrupt+0x392>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80003d70:	30 09       	mov	r9,0
80003d72:	ea 19 02 00 	orh	r9,0x200
80003d76:	fe 68 00 00 	mov	r8,-131072
80003d7a:	91 59       	st.w	r8[0x14],r9
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
80003d7c:	fe 68 03 10 	mov	r8,-130288
80003d80:	70 39       	ld.w	r9,r8[0xc]
					>>
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			// Get job corresponding at endpoint
			ptr_job = &udd_ep_job[ep - 1];
			// Update number of data transfered
			ptr_job->buf_size -= nb_remaining;
80003d82:	4f 98       	lddpc	r8,80003f64 <udd_interrupt+0x534>
80003d84:	b1 89       	lsr	r9,0x10
80003d86:	70 2a       	ld.w	r10,r8[0x8]
80003d88:	12 1a       	sub	r10,r9
80003d8a:	91 2a       	st.w	r8[0x8],r10

			if (!Is_udd_endpoint_in(ep)) {
80003d8c:	fe 68 01 04 	mov	r8,-130812
80003d90:	70 08       	ld.w	r8,r8[0x0]
80003d92:	e2 18 01 00 	andl	r8,0x100,COH
80003d96:	c0 71       	brne	80003da4 <udd_interrupt+0x374>
				// Disable autoswitch bank on OUT
				udd_disable_endpoint_bank_autoswitch(ep);
80003d98:	fe 68 01 04 	mov	r8,-130812
80003d9c:	70 09       	ld.w	r9,r8[0x0]
80003d9e:	a9 d9       	cbr	r9,0x9
80003da0:	91 09       	st.w	r8[0x0],r9
80003da2:	c0 b8       	rjmp	80003db8 <udd_interrupt+0x388>
			} else {
				// Wait end of background transfer on IN endpoint before disabled autoswitch bank
				udd_enable_endpoint_interrupt(ep);
80003da4:	e0 69 20 00 	mov	r9,8192
80003da8:	fe 68 00 00 	mov	r8,-131072
80003dac:	91 69       	st.w	r8[0x18],r9
				udd_enable_bank_interrupt(ep);
80003dae:	e0 69 10 00 	mov	r9,4096
80003db2:	fe 68 01 f4 	mov	r8,-130572
80003db6:	91 09       	st.w	r8[0x0],r9
			}
			// Call callback to signal end of transfer
			udd_ep_finish_job(&udd_ep_job[ep - 1], false);
80003db8:	30 0b       	mov	r11,0
80003dba:	4e bc       	lddpc	r12,80003f64 <udd_interrupt+0x534>
80003dbc:	f0 1f 00 6b 	mcall	80003f68 <udd_interrupt+0x538>
80003dc0:	ca 88       	rjmp	80003f10 <udd_interrupt+0x4e0>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)
80003dc2:	fe 68 00 00 	mov	r8,-131072
80003dc6:	70 48       	ld.w	r8,r8[0x10]
80003dc8:	e2 18 20 00 	andl	r8,0x2000,COH
80003dcc:	e0 80 00 ac 	breq	80003f24 <udd_interrupt+0x4f4>
				&& (0 == udd_nb_busy_bank(ep))) {
80003dd0:	fe 68 01 34 	mov	r8,-130764
80003dd4:	70 08       	ld.w	r8,r8[0x0]
			// Call callback to signal end of transfer
			udd_ep_finish_job(&udd_ep_job[ep - 1], false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)
80003dd6:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80003dda:	e0 81 00 a5 	brne	80003f24 <udd_interrupt+0x4f4>
				&& (0 == udd_nb_busy_bank(ep))) {
			// End of background transfer on IN endpoint
			udd_disable_bank_interrupt(ep);
80003dde:	e0 69 10 00 	mov	r9,4096
80003de2:	fe 68 02 24 	mov	r8,-130524
80003de6:	91 09       	st.w	r8[0x0],r9
			udd_disable_endpoint_interrupt(ep);
80003de8:	e0 69 20 00 	mov	r9,8192
80003dec:	fe 68 00 00 	mov	r8,-131072
80003df0:	91 59       	st.w	r8[0x14],r9
			// If no new transfer running then disable autoswitch bank
			if (!udd_ep_job[ep - 1].busy) {
80003df2:	4d d8       	lddpc	r8,80003f64 <udd_interrupt+0x534>
80003df4:	70 08       	ld.w	r8,r8[0x0]
80003df6:	58 08       	cp.w	r8,0
80003df8:	c0 65       	brlt	80003e04 <udd_interrupt+0x3d4>
				udd_disable_endpoint_bank_autoswitch(ep);
80003dfa:	fe 68 01 04 	mov	r8,-130812
80003dfe:	70 09       	ld.w	r9,r8[0x0]
80003e00:	a9 d9       	cbr	r9,0x9
80003e02:	91 09       	st.w	r8[0x0],r9
			}
			// If a stall has been requested during backgound transfer then execute it
			if (udd_ep_job[ep - 1].stall_requested) {
80003e04:	4d 88       	lddpc	r8,80003f64 <udd_interrupt+0x534>
80003e06:	70 09       	ld.w	r9,r8[0x0]
80003e08:	f3 d9 c3 c1 	bfextu	r9,r9,0x1e,0x1
80003e0c:	30 08       	mov	r8,0
80003e0e:	f0 09 18 00 	cp.b	r9,r8
80003e12:	c7 f0       	breq	80003f10 <udd_interrupt+0x4e0>
				udd_ep_job[ep - 1].stall_requested = false;
80003e14:	4d 48       	lddpc	r8,80003f64 <udd_interrupt+0x534>
80003e16:	70 09       	ld.w	r9,r8[0x0]
80003e18:	30 0a       	mov	r10,0
80003e1a:	f3 da d3 c1 	bfins	r9,r10,0x1e,0x1
80003e1e:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
80003e20:	fe 68 01 f4 	mov	r8,-130572
80003e24:	e8 69 00 00 	mov	r9,524288
80003e28:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
80003e2a:	e4 69 00 00 	mov	r9,262144
80003e2e:	91 09       	st.w	r8[0x0],r9
80003e30:	c7 08       	rjmp	80003f10 <udd_interrupt+0x4e0>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
80003e32:	30 89       	mov	r9,8
80003e34:	fe 68 00 00 	mov	r8,-131072
80003e38:	91 29       	st.w	r8[0x8],r9
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
80003e3a:	30 1b       	mov	r11,1
80003e3c:	4c ac       	lddpc	r12,80003f64 <udd_interrupt+0x534>
80003e3e:	f0 1f 00 4b 	mcall	80003f68 <udd_interrupt+0x538>
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
80003e42:	f0 1f 00 4b 	mcall	80003f6c <udd_interrupt+0x53c>
		// Reset endpoint control
		udd_reset_ep_ctrl();
80003e46:	f0 1f 00 4b 	mcall	80003f70 <udd_interrupt+0x540>
		// Reset endpoint control management
		udd_ctrl_init();
80003e4a:	f0 1f 00 3e 	mcall	80003f40 <udd_interrupt+0x510>
		goto udd_interrupt_end;
80003e4e:	c6 18       	rjmp	80003f10 <udd_interrupt+0x4e0>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80003e50:	fe 68 00 00 	mov	r8,-131072
80003e54:	70 48       	ld.w	r8,r8[0x10]
80003e56:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003e5a:	c1 d0       	breq	80003e94 <udd_interrupt+0x464>
80003e5c:	fe 68 00 00 	mov	r8,-131072
80003e60:	70 18       	ld.w	r8,r8[0x4]
80003e62:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003e66:	c1 70       	breq	80003e94 <udd_interrupt+0x464>
		otg_unfreeze_clock();
80003e68:	fe 68 00 00 	mov	r8,-131072
80003e6c:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003e70:	af c9       	cbr	r9,0xe
80003e72:	f1 49 08 00 	st.w	r8[2048],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80003e76:	30 19       	mov	r9,1
80003e78:	91 59       	st.w	r8[0x14],r9
		udd_enable_wake_up_interrupt();
80003e7a:	31 09       	mov	r9,16
80003e7c:	91 69       	st.w	r8[0x18],r9
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
80003e7e:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003e82:	af a9       	sbr	r9,0xe
80003e84:	f1 49 08 00 	st.w	r8[2048],r9
		udd_sleep_mode(false);	// Enter in SUSPEND mode
80003e88:	30 0c       	mov	r12,0
80003e8a:	f0 1f 00 3b 	mcall	80003f74 <udd_interrupt+0x544>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
80003e8e:	f0 1f 00 3b 	mcall	80003f78 <udd_interrupt+0x548>
#endif
		goto udd_interrupt_end;
80003e92:	c3 f8       	rjmp	80003f10 <udd_interrupt+0x4e0>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80003e94:	fe 68 00 00 	mov	r8,-131072
80003e98:	70 48       	ld.w	r8,r8[0x10]
80003e9a:	e2 18 00 10 	andl	r8,0x10,COH
80003e9e:	c2 30       	breq	80003ee4 <udd_interrupt+0x4b4>
80003ea0:	fe 68 00 00 	mov	r8,-131072
80003ea4:	70 18       	ld.w	r8,r8[0x4]
80003ea6:	e2 18 00 10 	andl	r8,0x10,COH
80003eaa:	c1 d0       	breq	80003ee4 <udd_interrupt+0x4b4>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80003eac:	fe 68 00 00 	mov	r8,-131072
80003eb0:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003eb4:	af c9       	cbr	r9,0xe
80003eb6:	f1 49 08 00 	st.w	r8[2048],r9
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80003eba:	c0 58       	rjmp	80003ec4 <udd_interrupt+0x494>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
80003ebc:	70 19       	ld.w	r9,r8[0x4]
80003ebe:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003ec2:	c0 61       	brne	80003ece <udd_interrupt+0x49e>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80003ec4:	f0 f9 08 04 	ld.w	r9,r8[2052]
80003ec8:	e2 19 40 00 	andl	r9,0x4000,COH
80003ecc:	cf 80       	breq	80003ebc <udd_interrupt+0x48c>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80003ece:	fe 68 00 00 	mov	r8,-131072
80003ed2:	31 09       	mov	r9,16
80003ed4:	91 59       	st.w	r8[0x14],r9
		udd_enable_suspend_interrupt();
80003ed6:	30 1c       	mov	r12,1
80003ed8:	91 6c       	st.w	r8[0x18],r12
		udd_sleep_mode(true);	// Enter in IDLE mode
80003eda:	f0 1f 00 27 	mcall	80003f74 <udd_interrupt+0x544>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
80003ede:	f0 1f 00 28 	mcall	80003f7c <udd_interrupt+0x54c>
#endif
		goto udd_interrupt_end;
80003ee2:	c1 78       	rjmp	80003f10 <udd_interrupt+0x4e0>
	}

	if (Is_udd_vbus_transition()) {
80003ee4:	fe 68 00 00 	mov	r8,-131072
80003ee8:	f0 f8 08 04 	ld.w	r8,r8[2052]
80003eec:	e2 18 00 02 	andl	r8,0x2,COH
80003ef0:	c1 00       	breq	80003f10 <udd_interrupt+0x4e0>
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
80003ef2:	fe 68 00 00 	mov	r8,-131072
80003ef6:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003efa:	af c9       	cbr	r9,0xe
80003efc:	f1 49 08 00 	st.w	r8[2048],r9
		udd_ack_vbus_transition();
80003f00:	30 29       	mov	r9,2
80003f02:	f1 49 08 08 	st.w	r8[2056],r9
		otg_freeze_clock();
80003f06:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003f0a:	af a9       	sbr	r9,0xe
80003f0c:	f1 49 08 00 	st.w	r8[2048],r9
		UDC_VBUS_EVENT(Is_udd_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80003f10:	fe 68 00 00 	mov	r8,-131072
80003f14:	f0 f8 08 18 	ld.w	r8,r8[2072]
	return;
}
80003f18:	d4 02       	popm	lr
80003f1a:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80003f1c:	48 f9       	lddpc	r9,80003f58 <udd_interrupt+0x528>
80003f1e:	b2 08       	st.h	r9[0x0],r8
80003f20:	fe 9f fe 92 	bral	80003c44 <udd_interrupt+0x214>
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80003f24:	fe 68 00 00 	mov	r8,-131072
80003f28:	70 18       	ld.w	r8,r8[0x4]
80003f2a:	e2 18 00 08 	andl	r8,0x8,COH
80003f2e:	c9 10       	breq	80003e50 <udd_interrupt+0x420>
80003f30:	c8 1b       	rjmp	80003e32 <udd_interrupt+0x402>
80003f32:	00 00       	add	r0,r0
80003f34:	80 00       	ld.sh	r0,r0[0x0]
80003f36:	7c 40       	ld.w	r0,lr[0x10]
80003f38:	00 00       	add	r0,r0
80003f3a:	01 c0       	ld.ub	r0,r0[0x4]
80003f3c:	80 00       	ld.sh	r0,r0[0x0]
80003f3e:	33 78       	mov	r8,55
80003f40:	80 00       	ld.sh	r0,r0[0x0]
80003f42:	35 ac       	mov	r12,90
80003f44:	80 00       	ld.sh	r0,r0[0x0]
80003f46:	33 60       	mov	r0,54
80003f48:	00 00       	add	r0,r0
80003f4a:	04 90       	mov	r0,r2
80003f4c:	80 00       	ld.sh	r0,r0[0x0]
80003f4e:	73 d4       	ld.w	r4,r9[0x74]
80003f50:	00 00       	add	r0,r0
80003f52:	01 c4       	ld.ub	r4,r0[0x4]
80003f54:	00 00       	add	r0,r0
80003f56:	01 a8       	ld.ub	r8,r0[0x2]
80003f58:	00 00       	add	r0,r0
80003f5a:	01 be       	ld.ub	lr,r0[0x3]
80003f5c:	80 00       	ld.sh	r0,r0[0x0]
80003f5e:	36 f0       	mov	r0,111
80003f60:	80 00       	ld.sh	r0,r0[0x0]
80003f62:	35 e0       	mov	r0,94
80003f64:	00 00       	add	r0,r0
80003f66:	01 ac       	ld.ub	r12,r0[0x2]
80003f68:	80 00       	ld.sh	r0,r0[0x0]
80003f6a:	33 8c       	mov	r12,56
80003f6c:	80 00       	ld.sh	r0,r0[0x0]
80003f6e:	73 64       	ld.w	r4,r9[0x58]
80003f70:	80 00       	ld.sh	r0,r0[0x0]
80003f72:	36 0c       	mov	r12,96
80003f74:	80 00       	ld.sh	r0,r0[0x0]
80003f76:	35 5c       	mov	r12,85
80003f78:	80 00       	ld.sh	r0,r0[0x0]
80003f7a:	78 bc       	ld.w	r12,r12[0x2c]
80003f7c:	80 00       	ld.sh	r0,r0[0x0]
80003f7e:	78 b0       	ld.w	r0,r12[0x2c]

80003f80 <fat_check_open>:
//! @return    true  a file is opened
//! @return    false otherwise
//!
Bool  fat_check_open( void )
{
   if( Fat_file_isnot_open() )
80003f80:	48 68       	lddpc	r8,80003f98 <fat_check_open+0x18>
80003f82:	11 89       	ld.ub	r9,r8[0x0]
80003f84:	30 08       	mov	r8,0
80003f86:	f0 09 18 00 	cp.b	r9,r8
80003f8a:	c0 20       	breq	80003f8e <fat_check_open+0xe>
80003f8c:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
80003f8e:	31 79       	mov	r9,23
80003f90:	48 38       	lddpc	r8,80003f9c <fat_check_open+0x1c>
80003f92:	b0 89       	st.b	r8[0x0],r9
80003f94:	5e fd       	retal	0
80003f96:	00 00       	add	r0,r0
80003f98:	00 00       	add	r0,r0
80003f9a:	04 ac       	st.w	r2++,r12
80003f9c:	00 00       	add	r0,r0
80003f9e:	07 3c       	ld.ub	r12,r3++

80003fa0 <fat_check_select>:
//! @return    true  a file is selected
//! @return    false otherwise
//!
Bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
80003fa0:	48 68       	lddpc	r8,80003fb8 <fat_check_select+0x18>
80003fa2:	90 19       	ld.sh	r9,r8[0x2]
80003fa4:	3f f8       	mov	r8,-1
80003fa6:	f0 09 19 00 	cp.h	r9,r8
80003faa:	c0 20       	breq	80003fae <fat_check_select+0xe>
80003fac:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80003fae:	30 f9       	mov	r9,15
80003fb0:	48 38       	lddpc	r8,80003fbc <fat_check_select+0x1c>
80003fb2:	b0 89       	st.b	r8[0x0],r9
80003fb4:	5e fd       	retal	0
80003fb6:	00 00       	add	r0,r0
80003fb8:	00 00       	add	r0,r0
80003fba:	07 38       	ld.ub	r8,r3++
80003fbc:	00 00       	add	r0,r0
80003fbe:	07 3c       	ld.ub	r12,r3++

80003fc0 <fat_check_is_file>:
//! @return    true  It is a file and not a directory
//! @return    false otherwise
//!
Bool  fat_check_is_file( void )
{
   if( Fat_is_not_a_file )
80003fc0:	48 58       	lddpc	r8,80003fd4 <fat_check_is_file+0x14>
80003fc2:	11 a8       	ld.ub	r8,r8[0x2]
80003fc4:	e2 18 00 18 	andl	r8,0x18,COH
80003fc8:	c0 21       	brne	80003fcc <fat_check_is_file+0xc>
80003fca:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80003fcc:	31 39       	mov	r9,19
80003fce:	48 38       	lddpc	r8,80003fd8 <fat_check_is_file+0x18>
80003fd0:	b0 89       	st.b	r8[0x0],r9
80003fd2:	5e fd       	retal	0
80003fd4:	00 00       	add	r0,r0
80003fd6:	04 ac       	st.w	r2++,r12
80003fd8:	00 00       	add	r0,r0
80003fda:	07 3c       	ld.ub	r12,r3++

80003fdc <fat_checkcluster>:
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
  if ( !fs_g_cluster.u32_val )
80003fdc:	49 68       	lddpc	r8,80004034 <fat_checkcluster+0x58>
80003fde:	70 18       	ld.w	r8,r8[0x4]
80003fe0:	58 08       	cp.w	r8,0
80003fe2:	c0 21       	brne	80003fe6 <fat_checkcluster+0xa>
80003fe4:	5e ff       	retal	1
    return FS_CLUS_BAD;

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
80003fe6:	49 59       	lddpc	r9,80004038 <fat_checkcluster+0x5c>
80003fe8:	13 89       	ld.ub	r9,r9[0x0]
80003fea:	30 3a       	mov	r10,3
80003fec:	f4 09 18 00 	cp.b	r9,r10
80003ff0:	c0 a1       	brne	80004004 <fat_checkcluster+0x28>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
80003ff2:	e0 69 ff f7 	mov	r9,65527
80003ff6:	ea 19 0f ff 	orh	r9,0xfff
80003ffa:	12 38       	cp.w	r8,r9
80003ffc:	e0 8b 00 19 	brhi	8000402e <fat_checkcluster+0x52>
80004000:	5f 0c       	sreq	r12
80004002:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
80004004:	30 2a       	mov	r10,2
80004006:	f4 09 18 00 	cp.b	r9,r10
8000400a:	c0 71       	brne	80004018 <fat_checkcluster+0x3c>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
8000400c:	e0 48 ff f7 	cp.w	r8,65527
80004010:	e0 8b 00 0f 	brhi	8000402e <fat_checkcluster+0x52>
80004014:	5f 0c       	sreq	r12
80004016:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
80004018:	30 1a       	mov	r10,1
8000401a:	f4 09 18 00 	cp.b	r9,r10
8000401e:	c0 20       	breq	80004022 <fat_checkcluster+0x46>
80004020:	5e fd       	retal	0
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
80004022:	e0 48 0f f7 	cp.w	r8,4087
80004026:	e0 8b 00 04 	brhi	8000402e <fat_checkcluster+0x52>
8000402a:	5f 0c       	sreq	r12
8000402c:	5e fc       	retal	r12
8000402e:	30 2c       	mov	r12,2
    else if (fs_g_cluster.u32_val == 0xFF7)
      return FS_CLUS_BAD;
  }

  return FS_CLUS_OK;
}
80004030:	5e fc       	retal	r12
80004032:	00 00       	add	r0,r0
80004034:	00 00       	add	r0,r0
80004036:	07 8c       	ld.ub	r12,r3[0x0]
80004038:	00 00       	add	r0,r0
8000403a:	07 38       	ld.ub	r8,r3++

8000403c <fat_cache_clusterlist_reset>:
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
8000403c:	30 0a       	mov	r10,0
8000403e:	48 88       	lddpc	r8,8000405c <fat_cache_clusterlist_reset+0x20>
80004040:	b0 8a       	st.b	r8[0x0],r10
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80004042:	48 88       	lddpc	r8,80004060 <fat_cache_clusterlist_reset+0x24>
80004044:	30 19       	mov	r9,1
80004046:	b0 89       	st.b	r8[0x0],r9
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80004048:	3f f9       	mov	r9,-1
8000404a:	b0 a9       	st.b	r8[0x2],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
8000404c:	b0 99       	st.b	r8[0x1],r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
8000404e:	f1 6a 00 14 	st.b	r8[20],r10
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80004052:	f1 69 00 16 	st.b	r8[22],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80004056:	f1 69 00 15 	st.b	r8[21],r9
   }
}
8000405a:	5e fc       	retal	r12
8000405c:	00 00       	add	r0,r0
8000405e:	07 3e       	ld.ub	lr,r3++
80004060:	00 00       	add	r0,r0
80004062:	04 c0       	st.b	r2++,r0

80004064 <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( Bool b_for_file )
{
80004064:	48 c9       	lddpc	r9,80004094 <fat_cache_clusterlist_update_start+0x30>
80004066:	13 88       	ld.ub	r8,r9[0x0]
80004068:	f8 08 18 00 	cp.b	r8,r12
8000406c:	5f 18       	srne	r8
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
8000406e:	48 ba       	lddpc	r10,80004098 <fat_cache_clusterlist_update_start+0x34>
80004070:	b4 88       	st.b	r10[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
80004072:	f0 0a 15 02 	lsl	r10,r8,0x2
80004076:	10 0a       	add	r10,r8
80004078:	f2 0a 00 28 	add	r8,r9,r10<<0x2
8000407c:	b0 8c       	st.b	r8[0x0],r12
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
8000407e:	3f fb       	mov	r11,-1
80004080:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
80004082:	2f fa       	sub	r10,-1
80004084:	48 6b       	lddpc	r11,8000409c <fat_cache_clusterlist_update_start+0x38>
80004086:	76 0b       	ld.w	r11,r11[0x0]
80004088:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
8000408c:	48 59       	lddpc	r9,800040a0 <fat_cache_clusterlist_update_start+0x3c>
8000408e:	72 19       	ld.w	r9,r9[0x4]
80004090:	91 29       	st.w	r8[0x8],r9
}
80004092:	5e fc       	retal	r12
80004094:	00 00       	add	r0,r0
80004096:	04 c0       	st.b	r2++,r0
80004098:	00 00       	add	r0,r0
8000409a:	07 3e       	ld.ub	lr,r3++
8000409c:	00 00       	add	r0,r0
8000409e:	07 8c       	ld.ub	r12,r3[0x0]
800040a0:	00 00       	add	r0,r0
800040a2:	07 94       	ld.ub	r4,r3[0x1]

800040a4 <fat_cache_clusterlist_update_select>:
{
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   Bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
800040a4:	49 88       	lddpc	r8,80004104 <fat_cache_clusterlist_update_select+0x60>
800040a6:	11 88       	ld.ub	r8,r8[0x0]
800040a8:	49 8a       	lddpc	r10,80004108 <fat_cache_clusterlist_update_select+0x64>
800040aa:	f0 08 00 2b 	add	r11,r8,r8<<0x2
800040ae:	f4 0b 00 2b 	add	r11,r10,r11<<0x2
800040b2:	17 89       	ld.ub	r9,r11[0x0]
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
800040b4:	17 9b       	ld.ub	r11,r11[0x1]
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
800040b6:	15 8a       	ld.ub	r10,r10[0x0]
800040b8:	f2 0a 18 00 	cp.b	r10,r9
800040bc:	c0 a1       	brne	800040d0 <fat_cache_clusterlist_update_select+0x2c>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
800040be:	49 3a       	lddpc	r10,80004108 <fat_cache_clusterlist_update_select+0x64>
800040c0:	15 9a       	ld.ub	r10,r10[0x1]
800040c2:	f4 0b 18 00 	cp.b	r11,r10
800040c6:	e0 88 00 05 	brls	800040d0 <fat_cache_clusterlist_update_select+0x2c>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
800040ca:	2f fa       	sub	r10,-1
800040cc:	48 fc       	lddpc	r12,80004108 <fat_cache_clusterlist_update_select+0x64>
800040ce:	b8 9a       	st.b	r12[0x1],r10

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
800040d0:	48 ea       	lddpc	r10,80004108 <fat_cache_clusterlist_update_select+0x64>
800040d2:	f5 3a 00 14 	ld.ub	r10,r10[20]
800040d6:	f2 0a 18 00 	cp.b	r10,r9
800040da:	c0 c1       	brne	800040f2 <fat_cache_clusterlist_update_select+0x4e>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
800040dc:	48 b9       	lddpc	r9,80004108 <fat_cache_clusterlist_update_select+0x64>
800040de:	f3 39 00 15 	ld.ub	r9,r9[21]
800040e2:	f2 0b 18 00 	cp.b	r11,r9
800040e6:	e0 88 00 06 	brls	800040f2 <fat_cache_clusterlist_update_select+0x4e>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
800040ea:	2f f9       	sub	r9,-1
800040ec:	48 7a       	lddpc	r10,80004108 <fat_cache_clusterlist_update_select+0x64>
800040ee:	f5 69 00 15 	st.b	r10[21],r9
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
800040f2:	f0 08 00 28 	add	r8,r8,r8<<0x2
800040f6:	48 59       	lddpc	r9,80004108 <fat_cache_clusterlist_update_select+0x64>
800040f8:	f2 08 00 28 	add	r8,r9,r8<<0x2
800040fc:	30 09       	mov	r9,0
800040fe:	b0 99       	st.b	r8[0x1],r9
}
80004100:	5e fc       	retal	r12
80004102:	00 00       	add	r0,r0
80004104:	00 00       	add	r0,r0
80004106:	07 3e       	ld.ub	lr,r3++
80004108:	00 00       	add	r0,r0
8000410a:	04 c0       	st.b	r2++,r0

8000410c <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
8000410c:	eb cd 40 c0 	pushm	r6-r7,lr
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80004110:	49 08       	lddpc	r8,80004150 <fat_cache_clusterlist_update_finish+0x44>
80004112:	11 88       	ld.ub	r8,r8[0x0]
80004114:	f0 08 00 28 	add	r8,r8,r8<<0x2
80004118:	48 f9       	lddpc	r9,80004154 <fat_cache_clusterlist_update_finish+0x48>
8000411a:	f2 08 00 28 	add	r8,r9,r8<<0x2
8000411e:	f0 ca ff f8 	sub	r10,r8,-8
80004122:	48 eb       	lddpc	r11,80004158 <fat_cache_clusterlist_update_finish+0x4c>
80004124:	17 97       	ld.ub	r7,r11[0x1]
80004126:	74 09       	ld.w	r9,r10[0x0]
80004128:	f2 07 0d 06 	divu	r6,r9,r7
8000412c:	0e 99       	mov	r9,r7
8000412e:	5c 59       	castu.b	r9
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
80004130:	17 8b       	ld.ub	r11,r11[0x0]
80004132:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
80004134:	74 0b       	ld.w	r11,r10[0x0]
80004136:	12 1b       	sub	r11,r9
80004138:	95 0b       	st.w	r10[0x0],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
8000413a:	48 9a       	lddpc	r10,8000415c <fat_cache_clusterlist_update_finish+0x50>
8000413c:	74 0b       	ld.w	r11,r10[0x0]
8000413e:	12 1b       	sub	r11,r9
80004140:	91 3b       	st.w	r8[0xc],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
80004142:	74 1a       	ld.w	r10,r10[0x4]
80004144:	14 09       	add	r9,r10
80004146:	91 49       	st.w	r8[0x10],r9

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
80004148:	f0 1f 00 06 	mcall	80004160 <fat_cache_clusterlist_update_finish+0x54>
}
8000414c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004150:	00 00       	add	r0,r0
80004152:	07 3e       	ld.ub	lr,r3++
80004154:	00 00       	add	r0,r0
80004156:	04 c0       	st.b	r2++,r0
80004158:	00 00       	add	r0,r0
8000415a:	06 ec       	st.h	--r3,r12
8000415c:	00 00       	add	r0,r0
8000415e:	07 94       	ld.ub	r4,r3[0x1]
80004160:	80 00       	ld.sh	r0,r0[0x0]
80004162:	40 a4       	lddsp	r4,sp[0x28]

80004164 <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
Bool  fat_cache_clusterlist_update_read( Bool b_for_file )
{
80004164:	eb cd 40 c0 	pushm	r6-r7,lr
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
80004168:	4c 18       	lddpc	r8,8000426c <fat_cache_clusterlist_update_read+0x108>
8000416a:	11 89       	ld.ub	r9,r8[0x0]
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
8000416c:	4c 18       	lddpc	r8,80004270 <fat_cache_clusterlist_update_read+0x10c>
8000416e:	70 0a       	ld.w	r10,r8[0x0]
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80004170:	4c 18       	lddpc	r8,80004274 <fat_cache_clusterlist_update_read+0x110>
80004172:	70 1b       	ld.w	r11,r8[0x4]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80004174:	4c 18       	lddpc	r8,80004278 <fat_cache_clusterlist_update_read+0x114>
80004176:	11 88       	ld.ub	r8,r8[0x0]
80004178:	f8 08 18 00 	cp.b	r8,r12
8000417c:	c1 11       	brne	8000419e <fat_cache_clusterlist_update_read+0x3a>
8000417e:	4b f8       	lddpc	r8,80004278 <fat_cache_clusterlist_update_read+0x114>
80004180:	11 a8       	ld.ub	r8,r8[0x2]
80004182:	f2 08 18 00 	cp.b	r8,r9
80004186:	c0 c1       	brne	8000419e <fat_cache_clusterlist_update_read+0x3a>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80004188:	4b c8       	lddpc	r8,80004278 <fat_cache_clusterlist_update_read+0x114>
8000418a:	70 18       	ld.w	r8,r8[0x4]
8000418c:	14 38       	cp.w	r8,r10
8000418e:	c0 81       	brne	8000419e <fat_cache_clusterlist_update_read+0x3a>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80004190:	4b a8       	lddpc	r8,80004278 <fat_cache_clusterlist_update_read+0x114>
80004192:	70 28       	ld.w	r8,r8[0x8]
80004194:	10 3b       	cp.w	r11,r8
80004196:	c0 43       	brcs	8000419e <fat_cache_clusterlist_update_read+0x3a>
80004198:	30 0a       	mov	r10,0
8000419a:	14 99       	mov	r9,r10
8000419c:	c1 88       	rjmp	800041cc <fat_cache_clusterlist_update_read+0x68>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
8000419e:	4b 78       	lddpc	r8,80004278 <fat_cache_clusterlist_update_read+0x114>
800041a0:	f1 38 00 14 	ld.ub	r8,r8[20]
800041a4:	f8 08 18 00 	cp.b	r8,r12
800041a8:	c5 e1       	brne	80004264 <fat_cache_clusterlist_update_read+0x100>
800041aa:	4b 48       	lddpc	r8,80004278 <fat_cache_clusterlist_update_read+0x114>
800041ac:	f1 38 00 16 	ld.ub	r8,r8[22]
800041b0:	f2 08 18 00 	cp.b	r8,r9
800041b4:	c5 81       	brne	80004264 <fat_cache_clusterlist_update_read+0x100>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
800041b6:	4b 18       	lddpc	r8,80004278 <fat_cache_clusterlist_update_read+0x114>
800041b8:	70 68       	ld.w	r8,r8[0x18]
800041ba:	14 38       	cp.w	r8,r10
800041bc:	c5 41       	brne	80004264 <fat_cache_clusterlist_update_read+0x100>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
800041be:	4a f8       	lddpc	r8,80004278 <fat_cache_clusterlist_update_read+0x114>
800041c0:	70 78       	ld.w	r8,r8[0x1c]
800041c2:	16 38       	cp.w	r8,r11
800041c4:	e0 8b 00 50 	brhi	80004264 <fat_cache_clusterlist_update_read+0x100>
800041c8:	30 1a       	mov	r10,1
800041ca:	14 99       	mov	r9,r10
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
800041cc:	f2 0e 15 02 	lsl	lr,r9,0x2
800041d0:	12 0e       	add	lr,r9
800041d2:	4a ac       	lddpc	r12,80004278 <fat_cache_clusterlist_update_read+0x114>
800041d4:	f8 0e 00 2c 	add	r12,r12,lr<<0x2
800041d8:	78 4c       	ld.w	r12,r12[0x10]
800041da:	f6 08 01 08 	sub	r8,r11,r8
800041de:	10 3c       	cp.w	r12,r8
800041e0:	e0 88 00 16 	brls	8000420c <fat_cache_clusterlist_update_read+0xa8>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
800041e4:	4a 4b       	lddpc	r11,80004274 <fat_cache_clusterlist_update_read+0x110>
800041e6:	f2 0e 15 02 	lsl	lr,r9,0x2
800041ea:	fc 09 00 09 	add	r9,lr,r9
800041ee:	4a 3e       	lddpc	lr,80004278 <fat_cache_clusterlist_update_read+0x114>
800041f0:	fc 09 00 29 	add	r9,lr,r9<<0x2
800041f4:	72 39       	ld.w	r9,r9[0xc]
800041f6:	f0 09 00 09 	add	r9,r8,r9
800041fa:	97 09       	st.w	r11[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
800041fc:	10 1c       	sub	r12,r8
800041fe:	97 1c       	st.w	r11[0x4],r12
                  fs_g_u8_current_cache = u8_i;
80004200:	49 f8       	lddpc	r8,8000427c <fat_cache_clusterlist_update_read+0x118>
80004202:	b0 8a       	st.b	r8[0x0],r10
                  fat_cache_clusterlist_update_select();
80004204:	f0 1f 00 1f 	mcall	80004280 <fat_cache_clusterlist_update_read+0x11c>
80004208:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
                  return true;   // the segment is in cluster list cache
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the resultat in this cache
                  fs_g_u8_current_cache = u8_i;
8000420c:	49 c8       	lddpc	r8,8000427c <fat_cache_clusterlist_update_read+0x118>
8000420e:	b0 8a       	st.b	r8[0x0],r10
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // unvalid cache
80004210:	f2 08 15 02 	lsl	r8,r9,0x2
80004214:	f0 09 00 09 	add	r9,r8,r9
80004218:	49 88       	lddpc	r8,80004278 <fat_cache_clusterlist_update_read+0x114>
8000421a:	f0 09 00 28 	add	r8,r8,r9<<0x2
8000421e:	3f f9       	mov	r9,-1
80004220:	b0 a9       	st.b	r8[0x2],r9
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004222:	70 4c       	ld.w	r12,r8[0x10]
80004224:	49 2a       	lddpc	r10,8000426c <fat_cache_clusterlist_update_read+0x108>
80004226:	15 99       	ld.ub	r9,r10[0x1]
80004228:	70 3e       	ld.w	lr,r8[0xc]
8000422a:	f8 0e 00 0e 	add	lr,r12,lr
8000422e:	20 1e       	sub	lr,1
80004230:	74 57       	ld.w	r7,r10[0x14]
80004232:	fc 07 01 07 	sub	r7,lr,r7
80004236:	74 4a       	ld.w	r10,r10[0x10]
80004238:	14 17       	sub	r7,r10
8000423a:	ee 09 0d 06 	divu	r6,r7,r9
8000423e:	0c 97       	mov	r7,r6
80004240:	2f e7       	sub	r7,-2
80004242:	48 ca       	lddpc	r10,80004270 <fat_cache_clusterlist_update_read+0x10c>
80004244:	95 07       	st.w	r10[0x0],r7
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004246:	2f 88       	sub	r8,-8
80004248:	70 0a       	ld.w	r10,r8[0x0]
8000424a:	14 0c       	add	r12,r10
8000424c:	f8 c7 00 01 	sub	r7,r12,1
80004250:	ee 09 0d 06 	divu	r6,r7,r9
80004254:	ad 39       	mul	r9,r6
80004256:	48 8a       	lddpc	r10,80004274 <fat_cache_clusterlist_update_read+0x110>
80004258:	f6 09 01 09 	sub	r9,r11,r9
8000425c:	95 19       	st.w	r10[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
8000425e:	91 0b       	st.w	r8[0x0],r11
80004260:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
            }
         }
      }
   }
   // No found in cache then read FAT and store the resultat in cache
   fat_cache_clusterlist_update_start(b_for_file);
80004264:	f0 1f 00 08 	mcall	80004284 <fat_cache_clusterlist_update_read+0x120>
80004268:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8000426c:	00 00       	add	r0,r0
8000426e:	06 ec       	st.h	--r3,r12
80004270:	00 00       	add	r0,r0
80004272:	07 8c       	ld.ub	r12,r3[0x0]
80004274:	00 00       	add	r0,r0
80004276:	07 94       	ld.ub	r4,r3[0x1]
80004278:	00 00       	add	r0,r0
8000427a:	04 c0       	st.b	r2++,r0
8000427c:	00 00       	add	r0,r0
8000427e:	07 3e       	ld.ub	lr,r3++
80004280:	80 00       	ld.sh	r0,r0[0x0]
80004282:	40 a4       	lddsp	r4,sp[0x28]
80004284:	80 00       	ld.sh	r0,r0[0x0]
80004286:	40 64       	lddsp	r4,sp[0x18]

80004288 <fat_entry_is_dir>:
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
Bool  fat_entry_is_dir(void)
{
   fs_g_status = FS_ERR_NO_DIR;
80004288:	30 d9       	mov	r9,13
8000428a:	48 48       	lddpc	r8,80004298 <fat_entry_is_dir+0x10>
8000428c:	b0 89       	st.b	r8[0x0],r9
8000428e:	48 48       	lddpc	r8,8000429c <fat_entry_is_dir+0x14>
80004290:	11 ac       	ld.ub	r12,r8[0x2]
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
}
80004292:	e2 1c 00 10 	andl	r12,0x10,COH
80004296:	5e fc       	retal	r12
80004298:	00 00       	add	r0,r0
8000429a:	07 3c       	ld.ub	r12,r3++
8000429c:	00 00       	add	r0,r0
8000429e:	04 ac       	st.w	r2++,r12

800042a0 <fat_clear_entry_info_and_ptr>:

//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
800042a0:	3f f9       	mov	r9,-1
800042a2:	48 c8       	lddpc	r8,800042d0 <fat_clear_entry_info_and_ptr+0x30>
800042a4:	b0 19       	st.h	r8[0x2],r9
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
800042a6:	48 c8       	lddpc	r8,800042d4 <fat_clear_entry_info_and_ptr+0x34>
800042a8:	f1 59 00 24 	st.h	r8[36],r9
   if( !fs_g_nav.b_mode_nav_single )
800042ac:	f1 39 00 2d 	ld.ub	r9,r8[45]
800042b0:	30 08       	mov	r8,0
800042b2:	f0 09 18 00 	cp.b	r9,r8
800042b6:	c0 51       	brne	800042c0 <fat_clear_entry_info_and_ptr+0x20>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
800042b8:	10 99       	mov	r9,r8
800042ba:	48 78       	lddpc	r8,800042d4 <fat_clear_entry_info_and_ptr+0x34>
800042bc:	f1 69 00 2c 	st.b	r8[44],r9
   }
   fs_g_nav_entry.u8_attr     = 0;
800042c0:	48 68       	lddpc	r8,800042d8 <fat_clear_entry_info_and_ptr+0x38>
800042c2:	30 09       	mov	r9,0
800042c4:	b0 a9       	st.b	r8[0x2],r9
   fs_g_nav_entry.u32_cluster = 0;
800042c6:	30 0a       	mov	r10,0
800042c8:	91 1a       	st.w	r8[0x4],r10
   fs_g_nav_entry.u32_size    = 0;
800042ca:	91 2a       	st.w	r8[0x8],r10
   Fat_file_close();
800042cc:	b0 89       	st.b	r8[0x0],r9
}
800042ce:	5e fc       	retal	r12
800042d0:	00 00       	add	r0,r0
800042d2:	07 38       	ld.ub	r8,r3++
800042d4:	00 00       	add	r0,r0
800042d6:	06 ec       	st.h	--r3,r12
800042d8:	00 00       	add	r0,r0
800042da:	04 ac       	st.w	r2++,r12

800042dc <fat_check_eof_name>:
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
Bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
800042dc:	30 08       	mov	r8,0
800042de:	f0 0c 19 00 	cp.h	r12,r8
800042e2:	5f 0a       	sreq	r10
800042e4:	35 c9       	mov	r9,92
800042e6:	f2 0c 19 00 	cp.h	r12,r9
800042ea:	5f 09       	sreq	r9
800042ec:	f5 e9 10 09 	or	r9,r10,r9
800042f0:	f0 09 18 00 	cp.b	r9,r8
800042f4:	c0 20       	breq	800042f8 <fat_check_eof_name+0x1c>
800042f6:	5e ff       	retal	1
800042f8:	32 f8       	mov	r8,47
800042fa:	f0 0c 19 00 	cp.h	r12,r8
800042fe:	5f 0c       	sreq	r12
}
80004300:	5e fc       	retal	r12
80004302:	d7 03       	nop

80004304 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
80004304:	48 48       	lddpc	r8,80004314 <fat_get_ptr_entry+0x10>
80004306:	90 98       	ld.uh	r8,r8[0x2]
80004308:	a5 78       	lsl	r8,0x5
8000430a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
}
8000430e:	48 3c       	lddpc	r12,80004318 <fat_get_ptr_entry+0x14>
80004310:	10 0c       	add	r12,r8
80004312:	5e fc       	retal	r12
80004314:	00 00       	add	r0,r0
80004316:	07 38       	ld.ub	r8,r3++
80004318:	00 00       	add	r0,r0
8000431a:	04 ec       	st.h	--r2,r12

8000431c <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
Bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , Bool b_mode , Bool b_match_case )
{
8000431c:	d4 31       	pushm	r0-r7,lr
8000431e:	20 3d       	sub	sp,12
80004320:	18 97       	mov	r7,r12
80004322:	16 95       	mov	r5,r11
80004324:	14 96       	mov	r6,r10
80004326:	50 09       	stdsp	sp[0x0],r9
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
80004328:	f0 1f 00 65 	mcall	800044bc <fat_entry_longname+0x1a0>

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
8000432c:	19 88       	ld.ub	r8,r12[0x0]
8000432e:	30 09       	mov	r9,0
80004330:	f2 08 18 00 	cp.b	r8,r9
80004334:	5f 0b       	sreq	r11
80004336:	3e 5a       	mov	r10,-27
80004338:	f4 08 18 00 	cp.b	r8,r10
8000433c:	5f 0a       	sreq	r10
8000433e:	f7 ea 10 0a 	or	r10,r11,r10
80004342:	f2 0a 18 00 	cp.b	r10,r9
80004346:	c0 71       	brne	80004354 <fat_entry_longname+0x38>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
80004348:	f9 3a 00 0b 	ld.ub	r10,r12[11]
8000434c:	30 f9       	mov	r9,15
8000434e:	f2 0a 18 00 	cp.b	r10,r9
80004352:	c0 60       	breq	8000435e <fat_entry_longname+0x42>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80004354:	30 b9       	mov	r9,11
80004356:	4d b8       	lddpc	r8,800044c0 <fat_entry_longname+0x1a4>
80004358:	b0 89       	st.b	r8[0x0],r9
8000435a:	30 0c       	mov	r12,0
      return false;
8000435c:	ca 98       	rjmp	800044ae <fat_entry_longname+0x192>
   }

   if( g_b_string_length )
8000435e:	4d a9       	lddpc	r9,800044c4 <fat_entry_longname+0x1a8>
80004360:	13 8a       	ld.ub	r10,r9[0x0]
80004362:	30 09       	mov	r9,0
80004364:	f2 0a 18 00 	cp.b	r10,r9
80004368:	c0 90       	breq	8000437a <fat_entry_longname+0x5e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
8000436a:	e2 18 00 40 	andl	r8,0x40,COH
8000436e:	c0 61       	brne	8000437a <fat_entry_longname+0x5e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
80004370:	31 09       	mov	r9,16
80004372:	4d 48       	lddpc	r8,800044c0 <fat_entry_longname+0x1a4>
80004374:	b0 89       	st.b	r8[0x0],r9
80004376:	30 0c       	mov	r12,0
         return false;                          // Other entry long name
80004378:	c9 b8       	rjmp	800044ae <fat_entry_longname+0x192>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
8000437a:	2f fc       	sub	r12,-1
8000437c:	30 08       	mov	r8,0

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
8000437e:	fa cb ff f6 	sub	r11,sp,-10
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
80004382:	30 11       	mov	r1,1
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
80004384:	30 09       	mov	r9,0
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
80004386:	4d 02       	lddpc	r2,800044c4 <fat_entry_longname+0x1a8>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
80004388:	20 15       	sub	r5,1
8000438a:	50 15       	stdsp	sp[0x4],r5
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
8000438c:	19 8a       	ld.ub	r10,r12[0x0]
8000438e:	b6 9a       	st.b	r11[0x1],r10
      MSB(u16_unicode_entry) = ptr_entry[1];
80004390:	19 9a       	ld.ub	r10,r12[0x1]
80004392:	b6 8a       	st.b	r11[0x0],r10
      if( FS_NAME_GET == b_mode )
80004394:	e2 06 18 00 	cp.b	r6,r1
80004398:	c0 f1       	brne	800043b6 <fat_entry_longname+0x9a>
      {
         if( !g_b_string_length )
8000439a:	05 8a       	ld.ub	r10,r2[0x0]
8000439c:	f2 0a 18 00 	cp.b	r10,r9
800043a0:	c4 01       	brne	80004420 <fat_entry_longname+0x104>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
800043a2:	40 1e       	lddsp	lr,sp[0x4]
800043a4:	1c 38       	cp.w	r8,lr
800043a6:	c0 55       	brlt	800043b0 <fat_entry_longname+0x94>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
800043a8:	30 08       	mov	r8,0
800043aa:	ae 88       	st.b	r7[0x0],r8
800043ac:	30 1c       	mov	r12,1
               }
               return true;                     // the buffer is full
800043ae:	c8 08       	rjmp	800044ae <fat_entry_longname+0x192>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
800043b0:	9a 5a       	ld.sh	r10,sp[0xa]
800043b2:	ae 8a       	st.b	r7[0x0],r10
800043b4:	c3 68       	rjmp	80004420 <fat_entry_longname+0x104>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
800043b6:	0f 8a       	ld.ub	r10,r7[0x0]
         }
         // Check the name
         if( '*' == u16_unicode_szname )
800043b8:	32 a5       	mov	r5,42
800043ba:	ea 0a 19 00 	cp.h	r10,r5
800043be:	c7 70       	breq	800044ac <fat_entry_longname+0x190>
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800043c0:	9a 5e       	ld.sh	lr,sp[0xa]
800043c2:	58 0e       	cp.w	lr,0
800043c4:	c0 e1       	brne	800043e0 <fat_entry_longname+0xc4>
800043c6:	35 c5       	mov	r5,92
800043c8:	ea 0a 19 00 	cp.h	r10,r5
800043cc:	5f 14       	srne	r4
800043ce:	32 f5       	mov	r5,47
800043d0:	ea 0a 19 00 	cp.h	r10,r5
800043d4:	5f 15       	srne	r5
800043d6:	e9 e5 00 05 	and	r5,r4,r5
800043da:	f2 05 18 00 	cp.b	r5,r9
800043de:	c2 60       	breq	8000442a <fat_entry_longname+0x10e>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
800043e0:	e9 da c0 10 	bfextu	r4,r10,0x0,0x10
800043e4:	e7 de c0 10 	bfextu	r3,lr,0x0,0x10
800043e8:	40 05       	lddsp	r5,sp[0x0]
800043ea:	f2 05 18 00 	cp.b	r5,r9
800043ee:	5f 15       	srne	r5
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800043f0:	e6 c0 ff e0 	sub	r0,r3,-32
800043f4:	00 34       	cp.w	r4,r0
800043f6:	5f 10       	srne	r0
800043f8:	eb e0 10 00 	or	r0,r5,r0
800043fc:	f2 00 18 00 	cp.b	r0,r9
80004400:	c1 00       	breq	80004420 <fat_entry_longname+0x104>
80004402:	22 03       	sub	r3,32
80004404:	06 34       	cp.w	r4,r3
80004406:	5f 14       	srne	r4
80004408:	08 45       	or	r5,r4
8000440a:	f2 05 18 00 	cp.b	r5,r9
8000440e:	c0 90       	breq	80004420 <fat_entry_longname+0x104>
80004410:	fc 0a 19 00 	cp.h	r10,lr
80004414:	c0 60       	breq	80004420 <fat_entry_longname+0x104>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
80004416:	31 69       	mov	r9,22
80004418:	4a a8       	lddpc	r8,800044c0 <fat_entry_longname+0x1a4>
8000441a:	b0 89       	st.b	r8[0x0],r9
8000441c:	30 0c       	mov	r12,0
           return false;
8000441e:	c4 88       	rjmp	800044ae <fat_entry_longname+0x192>
         }
      }

      if( 0 == u16_unicode_entry)
80004420:	9a 5a       	ld.sh	r10,sp[0xa]
80004422:	30 0e       	mov	lr,0
80004424:	fc 0a 19 00 	cp.h	r10,lr
80004428:	c0 b1       	brne	8000443e <fat_entry_longname+0x122>
      {
         if( g_b_string_length )
8000442a:	4a 79       	lddpc	r9,800044c4 <fat_entry_longname+0x1a8>
8000442c:	13 8a       	ld.ub	r10,r9[0x0]
8000442e:	30 09       	mov	r9,0
80004430:	f2 0a 18 00 	cp.b	r10,r9
80004434:	c3 c0       	breq	800044ac <fat_entry_longname+0x190>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
80004436:	2f f8       	sub	r8,-1
80004438:	ae 08       	st.h	r7[0x0],r8
8000443a:	30 1c       	mov	r12,1
8000443c:	c3 98       	rjmp	800044ae <fat_entry_longname+0x192>
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
8000443e:	30 4a       	mov	r10,4
80004440:	f4 08 18 00 	cp.b	r8,r10
80004444:	c0 31       	brne	8000444a <fat_entry_longname+0x12e>
         ptr_entry += 3;                        // Go to second character
80004446:	2f dc       	sub	r12,-3
80004448:	c2 78       	rjmp	80004496 <fat_entry_longname+0x17a>

      if( 10 == u8_pos_name )
8000444a:	30 aa       	mov	r10,10
8000444c:	f4 08 18 00 	cp.b	r8,r10
80004450:	c0 31       	brne	80004456 <fat_entry_longname+0x13a>
         ptr_entry += 2;                        // Go to third character
80004452:	2f ec       	sub	r12,-2
80004454:	c2 18       	rjmp	80004496 <fat_entry_longname+0x17a>

      if( 12 == u8_pos_name )
80004456:	30 ca       	mov	r10,12
80004458:	f4 08 18 00 	cp.b	r8,r10
8000445c:	c1 d1       	brne	80004496 <fat_entry_longname+0x17a>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
8000445e:	f9 38 ff e2 	ld.ub	r8,r12[-30]
80004462:	e2 18 00 40 	andl	r8,0x40,COH
80004466:	c0 61       	brne	80004472 <fat_entry_longname+0x156>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
80004468:	31 09       	mov	r9,16
8000446a:	49 68       	lddpc	r8,800044c0 <fat_entry_longname+0x1a4>
8000446c:	b0 89       	st.b	r8[0x0],r9
8000446e:	30 0c       	mov	r12,0
            return false;                       // Other long name entry is present
80004470:	c1 f8       	rjmp	800044ae <fat_entry_longname+0x192>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
80004472:	30 18       	mov	r8,1
80004474:	f0 06 18 00 	cp.b	r6,r8
80004478:	c0 b1       	brne	8000448e <fat_entry_longname+0x172>
8000447a:	49 38       	lddpc	r8,800044c4 <fat_entry_longname+0x1a8>
8000447c:	11 89       	ld.ub	r9,r8[0x0]
8000447e:	30 08       	mov	r8,0
80004480:	f0 09 18 00 	cp.b	r9,r8
80004484:	c1 70       	breq	800044b2 <fat_entry_longname+0x196>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
80004486:	30 e8       	mov	r8,14
80004488:	ae 08       	st.h	r7[0x0],r8
8000448a:	30 1c       	mov	r12,1
               return true;
8000448c:	c1 18       	rjmp	800044ae <fat_entry_longname+0x192>
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
               }
               return fat_check_eof_name(u16_unicode_szname);
8000448e:	0f 9c       	ld.ub	r12,r7[0x1]
80004490:	f0 1f 00 0e 	mcall	800044c8 <fat_entry_longname+0x1ac>
80004494:	c0 d8       	rjmp	800044ae <fat_entry_longname+0x192>
            }
         }
      }

      if( !g_b_string_length )
80004496:	05 8a       	ld.ub	r10,r2[0x0]
      {
         sz_name += (Is_unicode? 2 : 1 );
80004498:	ee ce ff ff 	sub	lr,r7,-1
8000449c:	f2 0a 18 00 	cp.b	r10,r9
800044a0:	fc 07 17 00 	moveq	r7,lr
      }
      u8_pos_name++;
800044a4:	2f f8       	sub	r8,-1
800044a6:	5c 58       	castu.b	r8
      ptr_entry+=2;
800044a8:	2f ec       	sub	r12,-2
   }
800044aa:	c7 1b       	rjmp	8000438c <fat_entry_longname+0x70>
800044ac:	30 1c       	mov	r12,1
}
800044ae:	2f dd       	sub	sp,-12
800044b0:	d8 32       	popm	r0-r7,pc
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
800044b2:	30 08       	mov	r8,0
800044b4:	ae 98       	st.b	r7[0x1],r8
800044b6:	30 1c       	mov	r12,1
               }
               return true;
800044b8:	cf bb       	rjmp	800044ae <fat_entry_longname+0x192>
800044ba:	00 00       	add	r0,r0
800044bc:	80 00       	ld.sh	r0,r0[0x0]
800044be:	43 04       	lddsp	r4,sp[0xc0]
800044c0:	00 00       	add	r0,r0
800044c2:	07 3c       	ld.ub	r12,r3++
800044c4:	00 00       	add	r0,r0
800044c6:	07 3d       	ld.ub	sp,r3++
800044c8:	80 00       	ld.sh	r0,r0[0x0]
800044ca:	42 dc       	lddsp	r12,sp[0xb4]

800044cc <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
Bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , Bool b_mode )
{
800044cc:	d4 31       	pushm	r0-r7,lr
800044ce:	20 3d       	sub	sp,12
800044d0:	18 97       	mov	r7,r12
800044d2:	50 2b       	stdsp	sp[0x8],r11
800044d4:	14 96       	mov	r6,r10
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
800044d6:	31 69       	mov	r9,22
800044d8:	4c 08       	lddpc	r8,800045d8 <fat_entry_shortname+0x10c>
800044da:	b0 89       	st.b	r8[0x0],r9

   u8_pos_name = 0;
   u8_pos_entry = 0;
   ptr_entry = fat_get_ptr_entry();
800044dc:	f0 1f 00 40 	mcall	800045dc <fat_entry_shortname+0x110>
800044e0:	30 08       	mov	r8,0
800044e2:	10 9e       	mov	lr,r8
800044e4:	30 12       	mov	r2,1

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
800044e6:	30 b3       	mov	r3,11
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
800044e8:	30 85       	mov	r5,8
800044ea:	30 0a       	mov	r10,0
               u8_entry_char = 0;                                    // end of name
            }
         }
      }

      if( FS_NAME_GET == b_mode )
800044ec:	30 14       	mov	r4,1
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
800044ee:	e6 08 18 00 	cp.b	r8,r3
800044f2:	c2 00       	breq	80004532 <fat_entry_shortname+0x66>
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
800044f4:	f8 08 07 09 	ld.ub	r9,r12[r8]
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
800044f8:	ea 08 18 00 	cp.b	r8,r5
800044fc:	5f 00       	sreq	r0
800044fe:	f4 02 18 00 	cp.b	r2,r10
80004502:	5f 1b       	srne	r11
80004504:	e1 eb 00 0b 	and	r11,r0,r11
80004508:	f4 0b 18 00 	cp.b	r11,r10
8000450c:	c0 51       	brne	80004516 <fat_entry_shortname+0x4a>
8000450e:	32 0b       	mov	r11,32
80004510:	f6 09 18 00 	cp.b	r9,r11
80004514:	c1 01       	brne	80004534 <fat_entry_shortname+0x68>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
80004516:	ea 08 18 00 	cp.b	r8,r5
8000451a:	e0 8b 00 0c 	brhi	80004532 <fat_entry_shortname+0x66>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
8000451e:	f9 39 00 08 	ld.ub	r9,r12[8]
80004522:	32 01       	mov	r1,32
80004524:	e2 09 18 00 	cp.b	r9,r1
80004528:	c0 50       	breq	80004532 <fat_entry_shortname+0x66>
8000452a:	30 78       	mov	r8,7
8000452c:	32 e9       	mov	r9,46
8000452e:	30 02       	mov	r2,0
80004530:	c0 28       	rjmp	80004534 <fat_entry_shortname+0x68>
80004532:	30 09       	mov	r9,0
               u8_entry_char = 0;                                    // end of name
            }
         }
      }

      if( FS_NAME_GET == b_mode )
80004534:	e8 06 18 00 	cp.b	r6,r4
80004538:	c1 71       	brne	80004566 <fat_entry_shortname+0x9a>
      {
         if( !g_b_string_length )
8000453a:	4a ab       	lddpc	r11,800045e0 <fat_entry_shortname+0x114>
8000453c:	17 8b       	ld.ub	r11,r11[0x0]
8000453e:	f4 0b 18 00 	cp.b	r11,r10
80004542:	c2 e1       	brne	8000459e <fat_entry_shortname+0xd2>
         {
            if(u8_pos_name >= (u8_size_max-1))
80004544:	40 2b       	lddsp	r11,sp[0x8]
80004546:	20 1b       	sub	r11,1
80004548:	16 3e       	cp.w	lr,r11
8000454a:	c0 35       	brlt	80004550 <fat_entry_shortname+0x84>
8000454c:	30 09       	mov	r9,0
8000454e:	c0 a8       	rjmp	80004562 <fat_entry_shortname+0x96>
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
80004550:	f2 c0 00 41 	sub	r0,r9,65
80004554:	31 9b       	mov	r11,25
80004556:	f6 00 18 00 	cp.b	r0,r11
8000455a:	e0 8b 00 04 	brhi	80004562 <fat_entry_shortname+0x96>
               u8_entry_char += ('a'-'A');                           // display short name in down case
8000455e:	2e 09       	sub	r9,-32
80004560:	5c 59       	castu.b	r9

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
80004562:	ae 89       	st.b	r7[0x0],r9
80004564:	c1 d8       	rjmp	8000459e <fat_entry_shortname+0xd2>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
80004566:	0f 8b       	ld.ub	r11,r7[0x0]
         }
         if ('*' == u8_szname_char)
80004568:	32 a0       	mov	r0,42
8000456a:	e0 0b 18 00 	cp.b	r11,r0
8000456e:	c3 10       	breq	800045d0 <fat_entry_shortname+0x104>
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
80004570:	58 09       	cp.w	r9,0
80004572:	c0 d1       	brne	8000458c <fat_entry_shortname+0xc0>
80004574:	35 c0       	mov	r0,92
80004576:	e0 0b 18 00 	cp.b	r11,r0
8000457a:	5f 11       	srne	r1
8000457c:	32 f0       	mov	r0,47
8000457e:	e0 0b 18 00 	cp.b	r11,r0
80004582:	5f 10       	srne	r0
80004584:	00 61       	and	r1,r0
80004586:	f4 01 18 00 	cp.b	r1,r10
8000458a:	c0 c0       	breq	800045a2 <fat_entry_shortname+0xd6>
         {
            if((u8_szname_char != u8_entry_char)
8000458c:	f2 0b 18 00 	cp.b	r11,r9
80004590:	c0 70       	breq	8000459e <fat_entry_shortname+0xd2>
80004592:	f2 c0 ff e0 	sub	r0,r9,-32
80004596:	00 3b       	cp.w	r11,r0
80004598:	c0 30       	breq	8000459e <fat_entry_shortname+0xd2>
8000459a:	30 0c       	mov	r12,0
8000459c:	c1 b8       	rjmp	800045d2 <fat_entry_shortname+0x106>
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
8000459e:	58 09       	cp.w	r9,0
800045a0:	c0 b1       	brne	800045b6 <fat_entry_shortname+0xea>
      {
         if( g_b_string_length )
800045a2:	49 08       	lddpc	r8,800045e0 <fat_entry_shortname+0x114>
800045a4:	11 89       	ld.ub	r9,r8[0x0]
800045a6:	30 08       	mov	r8,0
800045a8:	f0 09 18 00 	cp.b	r9,r8
800045ac:	c1 20       	breq	800045d0 <fat_entry_shortname+0x104>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
800045ae:	2f fe       	sub	lr,-1
800045b0:	ae 0e       	st.h	r7[0x0],lr
800045b2:	30 1c       	mov	r12,1
800045b4:	c0 f8       	rjmp	800045d2 <fat_entry_shortname+0x106>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
800045b6:	48 b9       	lddpc	r9,800045e0 <fat_entry_shortname+0x114>
800045b8:	13 89       	ld.ub	r9,r9[0x0]
      {
         sz_name += (Is_unicode? 2 : 1 );
800045ba:	ee cb ff ff 	sub	r11,r7,-1
800045be:	f4 09 18 00 	cp.b	r9,r10
800045c2:	f6 07 17 00 	moveq	r7,r11
      }
      u8_pos_name++;
800045c6:	2f fe       	sub	lr,-1
800045c8:	5c 5e       	castu.b	lr
      u8_pos_entry++;
800045ca:	2f f8       	sub	r8,-1
800045cc:	5c 58       	castu.b	r8
   }
800045ce:	c9 0b       	rjmp	800044ee <fat_entry_shortname+0x22>
800045d0:	30 1c       	mov	r12,1
}
800045d2:	2f dd       	sub	sp,-12
800045d4:	d8 32       	popm	r0-r7,pc
800045d6:	00 00       	add	r0,r0
800045d8:	00 00       	add	r0,r0
800045da:	07 3c       	ld.ub	r12,r3++
800045dc:	80 00       	ld.sh	r0,r0[0x0]
800045de:	43 04       	lddsp	r4,sp[0xc0]
800045e0:	00 00       	add	r0,r0
800045e2:	07 3d       	ld.ub	sp,r3++

800045e4 <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
800045e4:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
800045e6:	f0 1f 00 10 	mcall	80004624 <fat_get_entry_info+0x40>

   // Get attribut
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];
800045ea:	49 08       	lddpc	r8,80004628 <fat_get_entry_info+0x44>
800045ec:	f9 39 00 0b 	ld.ub	r9,r12[11]
800045f0:	b0 a9       	st.b	r8[0x2],r9

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
800045f2:	f8 ca ff ec 	sub	r10,r12,-20
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
800045f6:	f0 c9 ff fc 	sub	r9,r8,-4
800045fa:	15 8b       	ld.ub	r11,r10[0x0]
800045fc:	b2 9b       	st.b	r9[0x1],r11
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
800045fe:	15 9a       	ld.ub	r10,r10[0x1]
80004600:	b2 8a       	st.b	r9[0x0],r10
   ptr_entry += (26-20);
80004602:	f8 ca ff e6 	sub	r10,r12,-26
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80004606:	15 8b       	ld.ub	r11,r10[0x0]
80004608:	b2 bb       	st.b	r9[0x3],r11
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000460a:	15 9a       	ld.ub	r10,r10[0x1]
8000460c:	b2 aa       	st.b	r9[0x2],r10

   // Get the size of file
   ptr_entry += (28-26);
8000460e:	2e 4c       	sub	r12,-28
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80004610:	2f 88       	sub	r8,-8
80004612:	19 89       	ld.ub	r9,r12[0x0]
80004614:	b0 b9       	st.b	r8[0x3],r9
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
80004616:	19 99       	ld.ub	r9,r12[0x1]
80004618:	b0 a9       	st.b	r8[0x2],r9
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
8000461a:	19 a9       	ld.ub	r9,r12[0x2]
8000461c:	b0 99       	st.b	r8[0x1],r9
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
8000461e:	19 b9       	ld.ub	r9,r12[0x3]
80004620:	b0 89       	st.b	r8[0x0],r9
}
80004622:	d8 02       	popm	pc
80004624:	80 00       	ld.sh	r0,r0[0x0]
80004626:	43 04       	lddsp	r4,sp[0xc0]
80004628:	00 00       	add	r0,r0
8000462a:	04 ac       	st.w	r2++,r12

8000462c <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
Bool  fat_entry_check( Bool b_type )
{
8000462c:	eb cd 40 80 	pushm	r7,lr
80004630:	18 97       	mov	r7,r12
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
80004632:	f0 1f 00 17 	mcall	8000468c <fat_entry_check+0x60>

   u8_first_byte = u8_ptr_entry[0];
80004636:	19 88       	ld.ub	r8,r12[0x0]
   if ( FS_ENTRY_END == u8_first_byte )
80004638:	58 08       	cp.w	r8,0
8000463a:	c0 61       	brne	80004646 <fat_entry_check+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
8000463c:	30 a9       	mov	r9,10
8000463e:	49 58       	lddpc	r8,80004690 <fat_entry_check+0x64>
80004640:	b0 89       	st.b	r8[0x0],r9
80004642:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
80004646:	30 ba       	mov	r10,11
80004648:	49 29       	lddpc	r9,80004690 <fat_entry_check+0x64>
8000464a:	b2 8a       	st.b	r9[0x0],r10
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
8000464c:	3e 59       	mov	r9,-27
8000464e:	f2 08 18 00 	cp.b	r8,r9
80004652:	c1 a0       	breq	80004686 <fat_entry_check+0x5a>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
80004654:	32 e9       	mov	r9,46
80004656:	f2 08 18 00 	cp.b	r8,r9
8000465a:	c1 60       	breq	80004686 <fat_entry_check+0x5a>
   if ( ('.'  == u8_first_byte)
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."

   // Check attribut
   u8_attribut = u8_ptr_entry[11];
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
8000465c:	f9 38 00 0b 	ld.ub	r8,r12[11]
80004660:	10 99       	mov	r9,r8
80004662:	e2 19 00 08 	andl	r9,0x8,COH
80004666:	c1 01       	brne	80004686 <fat_entry_check+0x5a>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
80004668:	e2 18 00 10 	andl	r8,0x10,COH
8000466c:	c0 70       	breq	8000467a <fat_entry_check+0x4e>
   {
      return (FS_DIR == b_type);
8000466e:	30 08       	mov	r8,0
80004670:	f0 07 18 00 	cp.b	r7,r8
80004674:	5f 0c       	sreq	r12
80004676:	e3 cd 80 80 	ldm	sp++,r7,pc
   }else{
      return (FS_FILE == b_type);
8000467a:	30 18       	mov	r8,1
8000467c:	f0 07 18 00 	cp.b	r7,r8
80004680:	5f 0c       	sreq	r12
80004682:	e3 cd 80 80 	ldm	sp++,r7,pc
80004686:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
8000468a:	00 00       	add	r0,r0
8000468c:	80 00       	ld.sh	r0,r0[0x0]
8000468e:	43 04       	lddsp	r4,sp[0xc0]
80004690:	00 00       	add	r0,r0
80004692:	07 3c       	ld.ub	r12,r3++

80004694 <fat_cache_reset>:

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80004694:	48 58       	lddpc	r8,800046a8 <fat_cache_reset+0x14>
80004696:	3f f9       	mov	r9,-1
80004698:	b0 89       	st.b	r8[0x0],r9
   fs_g_sectorcache.u8_dirty              = false;
8000469a:	30 09       	mov	r9,0
8000469c:	f1 69 00 08 	st.b	r8[8],r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
800046a0:	3f f9       	mov	r9,-1
800046a2:	91 39       	st.w	r8[0xc],r9
}
800046a4:	5e fc       	retal	r12
800046a6:	00 00       	add	r0,r0
800046a8:	00 00       	add	r0,r0
800046aa:	07 74       	ld.ub	r4,--r3

800046ac <fat_cache_mark_sector_as_dirty>:

//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
   fs_g_sectorcache.u8_dirty = true;
800046ac:	30 19       	mov	r9,1
800046ae:	48 38       	lddpc	r8,800046b8 <fat_cache_mark_sector_as_dirty+0xc>
800046b0:	f1 69 00 08 	st.b	r8[8],r9
}
800046b4:	5e fc       	retal	r12
800046b6:	00 00       	add	r0,r0
800046b8:	00 00       	add	r0,r0
800046ba:	07 74       	ld.ub	r4,--r3

800046bc <fat_write_entry_file>:
//! OUT:
//!   fs_g_sector    Updated
//! @endverbatim
//!
void  fat_write_entry_file( void )
{
800046bc:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   fat_cache_mark_sector_as_dirty();
800046be:	f0 1f 00 11 	mcall	80004700 <fat_write_entry_file+0x44>
   ptr_entry = fat_get_ptr_entry();
800046c2:	f0 1f 00 11 	mcall	80004704 <fat_write_entry_file+0x48>
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the attribut
   ptr_entry+= 11;
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
800046c6:	49 18       	lddpc	r8,80004708 <fat_write_entry_file+0x4c>
800046c8:	11 a9       	ld.ub	r9,r8[0x2]
800046ca:	f9 69 00 0b 	st.b	r12[11],r9

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
800046ce:	f8 ca ff ec 	sub	r10,r12,-20
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
800046d2:	f0 c9 ff fc 	sub	r9,r8,-4
800046d6:	13 9b       	ld.ub	r11,r9[0x1]
800046d8:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
800046da:	13 8b       	ld.ub	r11,r9[0x0]
800046dc:	b4 9b       	st.b	r10[0x1],r11
   ptr_entry += (26-20);
800046de:	f8 ca ff e6 	sub	r10,r12,-26
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
800046e2:	13 bb       	ld.ub	r11,r9[0x3]
800046e4:	b4 8b       	st.b	r10[0x0],r11
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
800046e6:	13 a9       	ld.ub	r9,r9[0x2]
800046e8:	b4 99       	st.b	r10[0x1],r9

   //! Write the size of file
   ptr_entry += (28-26);
800046ea:	2e 4c       	sub	r12,-28
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
800046ec:	2f 88       	sub	r8,-8
800046ee:	11 b9       	ld.ub	r9,r8[0x3]
800046f0:	b8 89       	st.b	r12[0x0],r9
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
800046f2:	11 a9       	ld.ub	r9,r8[0x2]
800046f4:	b8 99       	st.b	r12[0x1],r9
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
800046f6:	11 99       	ld.ub	r9,r8[0x1]
800046f8:	b8 a9       	st.b	r12[0x2],r9
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
800046fa:	11 88       	ld.ub	r8,r8[0x0]
800046fc:	b8 b8       	st.b	r12[0x3],r8
}
800046fe:	d8 02       	popm	pc
80004700:	80 00       	ld.sh	r0,r0[0x0]
80004702:	46 ac       	lddsp	r12,sp[0x1a8]
80004704:	80 00       	ld.sh	r0,r0[0x0]
80004706:	43 04       	lddsp	r4,sp[0xc0]
80004708:	00 00       	add	r0,r0
8000470a:	04 ac       	st.w	r2++,r12

8000470c <fat_check_nav_access_file>:

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
8000470c:	49 88       	lddpc	r8,8000476c <fat_check_nav_access_file+0x60>
8000470e:	11 89       	ld.ub	r9,r8[0x0]
80004710:	30 08       	mov	r8,0
80004712:	f0 09 18 00 	cp.b	r9,r8
80004716:	c2 a0       	breq	8000476a <fat_check_nav_access_file+0x5e>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80004718:	49 68       	lddpc	r8,80004770 <fat_check_nav_access_file+0x64>
8000471a:	11 89       	ld.ub	r9,r8[0x0]
8000471c:	49 68       	lddpc	r8,80004774 <fat_check_nav_access_file+0x68>
8000471e:	11 88       	ld.ub	r8,r8[0x0]
80004720:	f0 09 18 00 	cp.b	r9,r8
80004724:	c2 31       	brne	8000476a <fat_check_nav_access_file+0x5e>
#if (FS_MULTI_PARTITION == ENABLED)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
80004726:	49 38       	lddpc	r8,80004770 <fat_check_nav_access_file+0x64>
80004728:	70 89       	ld.w	r9,r8[0x20]
8000472a:	49 38       	lddpc	r8,80004774 <fat_check_nav_access_file+0x68>
8000472c:	70 88       	ld.w	r8,r8[0x20]
8000472e:	10 39       	cp.w	r9,r8
80004730:	c1 d1       	brne	8000476a <fat_check_nav_access_file+0x5e>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
80004732:	49 28       	lddpc	r8,80004778 <fat_check_nav_access_file+0x6c>
80004734:	90 19       	ld.sh	r9,r8[0x2]
80004736:	48 e8       	lddpc	r8,8000476c <fat_check_nav_access_file+0x60>
80004738:	90 18       	ld.sh	r8,r8[0x2]
8000473a:	f0 09 19 00 	cp.h	r9,r8
8000473e:	c1 61       	brne	8000476a <fat_check_nav_access_file+0x5e>
      {
         if( mode )
80004740:	58 0c       	cp.w	r12,0
80004742:	c0 b0       	breq	80004758 <fat_check_nav_access_file+0x4c>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
80004744:	48 e8       	lddpc	r8,8000477c <fat_check_nav_access_file+0x70>
80004746:	11 89       	ld.ub	r9,r8[0x0]
80004748:	30 08       	mov	r8,0
8000474a:	f0 09 18 00 	cp.b	r9,r8
8000474e:	c0 e0       	breq	8000476a <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
80004750:	32 89       	mov	r9,40
80004752:	48 c8       	lddpc	r8,80004780 <fat_check_nav_access_file+0x74>
80004754:	b0 89       	st.b	r8[0x0],r9
80004756:	5e fd       	retal	0
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
80004758:	48 98       	lddpc	r8,8000477c <fat_check_nav_access_file+0x70>
8000475a:	11 88       	ld.ub	r8,r8[0x0]
8000475c:	e2 18 00 02 	andl	r8,0x2,COH
80004760:	c0 50       	breq	8000476a <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
80004762:	32 99       	mov	r9,41
80004764:	48 78       	lddpc	r8,80004780 <fat_check_nav_access_file+0x74>
80004766:	b0 89       	st.b	r8[0x0],r9
80004768:	5e fd       	retal	0
               return false;  // File opened in write mode then read access not possibled
8000476a:	5e ff       	retal	1
8000476c:	00 00       	add	r0,r0
8000476e:	07 34       	ld.ub	r4,r3++
80004770:	00 00       	add	r0,r0
80004772:	06 ec       	st.h	--r3,r12
80004774:	00 00       	add	r0,r0
80004776:	07 40       	ld.w	r0,--r3
80004778:	00 00       	add	r0,r0
8000477a:	07 38       	ld.ub	r8,r3++
8000477c:	00 00       	add	r0,r0
8000477e:	07 24       	ld.uh	r4,r3++
80004780:	00 00       	add	r0,r0
80004782:	07 3c       	ld.ub	r12,r3++

80004784 <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
80004784:	d4 21       	pushm	r4-r7,lr
80004786:	20 dd       	sub	sp,52
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
80004788:	58 0c       	cp.w	r12,0
8000478a:	c5 a0       	breq	8000483e <fat_invert_nav+0xba>
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
8000478c:	1a 97       	mov	r7,sp
8000478e:	4a e8       	lddpc	r8,80004844 <fat_invert_nav+0xc0>
80004790:	f0 ea 00 00 	ld.d	r10,r8[0]
80004794:	fa eb 00 00 	st.d	sp[0],r10
80004798:	f0 ea 00 08 	ld.d	r10,r8[8]
8000479c:	fa eb 00 08 	st.d	sp[8],r10
800047a0:	f0 ea 00 10 	ld.d	r10,r8[16]
800047a4:	fa eb 00 10 	st.d	sp[16],r10
800047a8:	f0 ea 00 18 	ld.d	r10,r8[24]
800047ac:	fa eb 00 18 	st.d	sp[24],r10
800047b0:	f0 ea 00 20 	ld.d	r10,r8[32]
800047b4:	fa eb 00 20 	st.d	sp[32],r10
800047b8:	f0 ea 00 28 	ld.d	r10,r8[40]
800047bc:	fa eb 00 28 	st.d	sp[40],r10
800047c0:	70 c9       	ld.w	r9,r8[0x30]
800047c2:	50 c9       	stdsp	sp[0x30],r9
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
800047c4:	f8 c6 00 01 	sub	r6,r12,1
800047c8:	5c 56       	castu.b	r6
800047ca:	ec 04 10 34 	mul	r4,r6,52
800047ce:	49 f9       	lddpc	r9,80004848 <fat_invert_nav+0xc4>
800047d0:	12 04       	add	r4,r9
800047d2:	33 45       	mov	r5,52
800047d4:	0a 9a       	mov	r10,r5
800047d6:	08 9b       	mov	r11,r4
800047d8:	10 9c       	mov	r12,r8
800047da:	f0 1f 00 1d 	mcall	8000484c <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
800047de:	0a 9a       	mov	r10,r5
800047e0:	1a 9b       	mov	r11,sp
800047e2:	08 9c       	mov	r12,r4
800047e4:	f0 1f 00 1a 	mcall	8000484c <fat_invert_nav+0xc8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
800047e8:	49 ac       	lddpc	r12,80004850 <fat_invert_nav+0xcc>
800047ea:	f8 e8 00 00 	ld.d	r8,r12[0]
800047ee:	fa e9 00 00 	st.d	sp[0],r8
800047f2:	f8 e8 00 08 	ld.d	r8,r12[8]
800047f6:	fa e9 00 08 	st.d	sp[8],r8
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
800047fa:	ec 04 15 04 	lsl	r4,r6,0x4
800047fe:	49 68       	lddpc	r8,80004854 <fat_invert_nav+0xd0>
80004800:	10 04       	add	r4,r8
80004802:	31 05       	mov	r5,16
80004804:	0a 9a       	mov	r10,r5
80004806:	08 9b       	mov	r11,r4
80004808:	f0 1f 00 11 	mcall	8000484c <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
8000480c:	0a 9a       	mov	r10,r5
8000480e:	1a 9b       	mov	r11,sp
80004810:	08 9c       	mov	r12,r4
80004812:	f0 1f 00 0f 	mcall	8000484c <fat_invert_nav+0xc8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
80004816:	49 14       	lddpc	r4,80004858 <fat_invert_nav+0xd4>
80004818:	30 45       	mov	r5,4
8000481a:	0a 9a       	mov	r10,r5
8000481c:	08 9b       	mov	r11,r4
8000481e:	1a 9c       	mov	r12,sp
80004820:	f0 1f 00 0b 	mcall	8000484c <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
80004824:	48 e8       	lddpc	r8,8000485c <fat_invert_nav+0xd8>
80004826:	f0 06 00 26 	add	r6,r8,r6<<0x2
8000482a:	0a 9a       	mov	r10,r5
8000482c:	0c 9b       	mov	r11,r6
8000482e:	08 9c       	mov	r12,r4
80004830:	f0 1f 00 07 	mcall	8000484c <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
80004834:	0a 9a       	mov	r10,r5
80004836:	1a 9b       	mov	r11,sp
80004838:	0c 9c       	mov	r12,r6
8000483a:	f0 1f 00 05 	mcall	8000484c <fat_invert_nav+0xc8>
}
8000483e:	2f 3d       	sub	sp,-52
80004840:	d8 22       	popm	r4-r7,pc
80004842:	00 00       	add	r0,r0
80004844:	00 00       	add	r0,r0
80004846:	06 ec       	st.h	--r3,r12
80004848:	00 00       	add	r0,r0
8000484a:	07 40       	ld.w	r0,--r3
8000484c:	80 00       	ld.sh	r0,r0[0x0]
8000484e:	7c 7e       	ld.w	lr,lr[0x1c]
80004850:	00 00       	add	r0,r0
80004852:	04 ac       	st.w	r2++,r12
80004854:	00 00       	add	r0,r0
80004856:	07 24       	ld.uh	r4,r3++
80004858:	00 00       	add	r0,r0
8000485a:	07 38       	ld.ub	r8,r3++
8000485c:	00 00       	add	r0,r0
8000485e:	07 34       	ld.ub	r4,r3++

80004860 <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
Bool  fat_cache_flush( void )
{
80004860:	d4 01       	pushm	lr
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
80004862:	49 08       	lddpc	r8,800048a0 <fat_cache_flush+0x40>
80004864:	f1 39 00 08 	ld.ub	r9,r8[8]
80004868:	30 18       	mov	r8,1
8000486a:	f0 09 18 00 	cp.b	r9,r8
8000486e:	c1 81       	brne	8000489e <fat_cache_flush+0x3e>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
80004870:	48 c8       	lddpc	r8,800048a0 <fat_cache_flush+0x40>
80004872:	30 09       	mov	r9,0
80004874:	f1 69 00 08 	st.b	r8[8],r9
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80004878:	11 8c       	ld.ub	r12,r8[0x0]
8000487a:	f0 1f 00 0b 	mcall	800048a4 <fat_cache_flush+0x44>
8000487e:	c0 50       	breq	80004888 <fat_cache_flush+0x28>
      {
         fs_g_status = FS_LUN_WP;
80004880:	31 49       	mov	r9,20
80004882:	48 a8       	lddpc	r8,800048a8 <fat_cache_flush+0x48>
80004884:	b0 89       	st.b	r8[0x0],r9
80004886:	d8 0a       	popm	pc,r12=0
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
80004888:	48 68       	lddpc	r8,800048a0 <fat_cache_flush+0x40>
8000488a:	48 9a       	lddpc	r10,800048ac <fat_cache_flush+0x4c>
8000488c:	70 1b       	ld.w	r11,r8[0x4]
8000488e:	11 8c       	ld.ub	r12,r8[0x0]
80004890:	f0 1f 00 08 	mcall	800048b0 <fat_cache_flush+0x50>
80004894:	c0 50       	breq	8000489e <fat_cache_flush+0x3e>
      {
         fs_g_status = FS_ERR_HW;
80004896:	30 19       	mov	r9,1
80004898:	48 48       	lddpc	r8,800048a8 <fat_cache_flush+0x48>
8000489a:	b0 89       	st.b	r8[0x0],r9
8000489c:	d8 0a       	popm	pc,r12=0
         return false;
8000489e:	da 0a       	popm	pc,r12=1
800048a0:	00 00       	add	r0,r0
800048a2:	07 74       	ld.ub	r4,--r3
800048a4:	80 00       	ld.sh	r0,r0[0x0]
800048a6:	6d 44       	ld.w	r4,r6[0x50]
800048a8:	00 00       	add	r0,r0
800048aa:	07 3c       	ld.ub	r12,r3++
800048ac:	00 00       	add	r0,r0
800048ae:	04 ec       	st.h	--r2,r12
800048b0:	80 00       	ld.sh	r0,r0[0x0]
800048b2:	6d 58       	ld.w	r8,r6[0x54]

800048b4 <fat_cache_clear>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
800048b4:	d4 01       	pushm	lr
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
800048b6:	e0 6a 02 00 	mov	r10,512
800048ba:	30 0b       	mov	r11,0
800048bc:	48 2c       	lddpc	r12,800048c4 <fat_cache_clear+0x10>
800048be:	f0 1f 00 03 	mcall	800048c8 <fat_cache_clear+0x14>
}
800048c2:	d8 02       	popm	pc
800048c4:	00 00       	add	r0,r0
800048c6:	04 ec       	st.h	--r2,r12
800048c8:	80 00       	ld.sh	r0,r0[0x0]
800048ca:	7d c6       	ld.w	r6,lr[0x70]

800048cc <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
Bool  fat_cache_read_sector( Bool b_load )
{
800048cc:	eb cd 40 80 	pushm	r7,lr
800048d0:	18 97       	mov	r7,r12
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
800048d2:	49 78       	lddpc	r8,8000492c <fat_cache_read_sector+0x60>
800048d4:	11 89       	ld.ub	r9,r8[0x0]
800048d6:	49 78       	lddpc	r8,80004930 <fat_cache_read_sector+0x64>
800048d8:	11 88       	ld.ub	r8,r8[0x0]
800048da:	f0 09 18 00 	cp.b	r9,r8
800048de:	c0 91       	brne	800048f0 <fat_cache_read_sector+0x24>
800048e0:	49 38       	lddpc	r8,8000492c <fat_cache_read_sector+0x60>
800048e2:	70 19       	ld.w	r9,r8[0x4]
800048e4:	49 48       	lddpc	r8,80004934 <fat_cache_read_sector+0x68>
800048e6:	70 08       	ld.w	r8,r8[0x0]
800048e8:	10 39       	cp.w	r9,r8
800048ea:	c0 31       	brne	800048f0 <fat_cache_read_sector+0x24>
800048ec:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      return true;
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
800048f0:	f0 1f 00 12 	mcall	80004938 <fat_cache_read_sector+0x6c>
800048f4:	c1 90       	breq	80004926 <fat_cache_read_sector+0x5a>
      return false;

   // Delete informations about the caches
   fat_cache_reset();
800048f6:	f0 1f 00 12 	mcall	8000493c <fat_cache_read_sector+0x70>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
800048fa:	48 f8       	lddpc	r8,80004934 <fat_cache_read_sector+0x68>
800048fc:	70 0b       	ld.w	r11,r8[0x0]
800048fe:	48 c8       	lddpc	r8,8000492c <fat_cache_read_sector+0x60>
80004900:	91 1b       	st.w	r8[0x4],r11
   if( b_load )
80004902:	58 07       	cp.w	r7,0
80004904:	c0 c0       	breq	8000491c <fat_cache_read_sector+0x50>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80004906:	48 fa       	lddpc	r10,80004940 <fat_cache_read_sector+0x74>
80004908:	48 a8       	lddpc	r8,80004930 <fat_cache_read_sector+0x64>
8000490a:	11 8c       	ld.ub	r12,r8[0x0]
8000490c:	f0 1f 00 0e 	mcall	80004944 <fat_cache_read_sector+0x78>
80004910:	c0 60       	breq	8000491c <fat_cache_read_sector+0x50>
      {
         fs_g_status = FS_ERR_HW;
80004912:	30 19       	mov	r9,1
80004914:	48 d8       	lddpc	r8,80004948 <fat_cache_read_sector+0x7c>
80004916:	b0 89       	st.b	r8[0x0],r9
80004918:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
8000491c:	48 58       	lddpc	r8,80004930 <fat_cache_read_sector+0x64>
8000491e:	11 89       	ld.ub	r9,r8[0x0]
80004920:	48 38       	lddpc	r8,8000492c <fat_cache_read_sector+0x60>
80004922:	b0 89       	st.b	r8[0x0],r9
80004924:	30 1c       	mov	r12,1
   return true;
}
80004926:	e3 cd 80 80 	ldm	sp++,r7,pc
8000492a:	00 00       	add	r0,r0
8000492c:	00 00       	add	r0,r0
8000492e:	07 74       	ld.ub	r4,--r3
80004930:	00 00       	add	r0,r0
80004932:	06 ec       	st.h	--r3,r12
80004934:	00 00       	add	r0,r0
80004936:	04 a8       	st.w	r2++,r8
80004938:	80 00       	ld.sh	r0,r0[0x0]
8000493a:	48 60       	lddpc	r0,80004950 <fat_cluster_readnext+0x4>
8000493c:	80 00       	ld.sh	r0,r0[0x0]
8000493e:	46 94       	lddsp	r4,sp[0x1a4]
80004940:	00 00       	add	r0,r0
80004942:	04 ec       	st.h	--r2,r12
80004944:	80 00       	ld.sh	r0,r0[0x0]
80004946:	6d 94       	ld.w	r4,r6[0x64]
80004948:	00 00       	add	r0,r0
8000494a:	07 3c       	ld.ub	r12,r3++

8000494c <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        readed cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster readed
//! @endverbatim
//!
Bool  fat_cluster_readnext( void )
{
8000494c:	d4 01       	pushm	lr
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
8000494e:	49 f8       	lddpc	r8,800049c8 <fat_cluster_readnext+0x7c>
80004950:	11 89       	ld.ub	r9,r8[0x0]
80004952:	30 38       	mov	r8,3
80004954:	f0 09 18 00 	cp.b	r9,r8
80004958:	c0 61       	brne	80004964 <fat_cluster_readnext+0x18>
   {
      fs_g_u16_pos_fat += 4;
8000495a:	49 d8       	lddpc	r8,800049cc <fat_cluster_readnext+0x80>
8000495c:	90 09       	ld.sh	r9,r8[0x0]
8000495e:	2f c9       	sub	r9,-4
80004960:	b0 09       	st.h	r8[0x0],r9
80004962:	c0 58       	rjmp	8000496c <fat_cluster_readnext+0x20>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
80004964:	49 a8       	lddpc	r8,800049cc <fat_cluster_readnext+0x80>
80004966:	90 09       	ld.sh	r9,r8[0x0]
80004968:	2f e9       	sub	r9,-2
8000496a:	b0 09       	st.h	r8[0x0],r9
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
8000496c:	49 88       	lddpc	r8,800049cc <fat_cluster_readnext+0x80>
8000496e:	90 09       	ld.sh	r9,r8[0x0]
80004970:	e0 68 02 00 	mov	r8,512
80004974:	f0 09 19 00 	cp.h	r9,r8
80004978:	c0 c1       	brne	80004990 <fat_cluster_readnext+0x44>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
8000497a:	30 09       	mov	r9,0
8000497c:	49 48       	lddpc	r8,800049cc <fat_cluster_readnext+0x80>
8000497e:	b0 09       	st.h	r8[0x0],r9
      fs_gu32_addrsector++;
80004980:	49 48       	lddpc	r8,800049d0 <fat_cluster_readnext+0x84>
80004982:	70 09       	ld.w	r9,r8[0x0]
80004984:	2f f9       	sub	r9,-1
80004986:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
80004988:	30 1c       	mov	r12,1
8000498a:	f0 1f 00 13 	mcall	800049d4 <fat_cluster_readnext+0x88>
8000498e:	c1 b0       	breq	800049c4 <fat_cluster_readnext+0x78>
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
80004990:	49 28       	lddpc	r8,800049d8 <fat_cluster_readnext+0x8c>
80004992:	2f c8       	sub	r8,-4
80004994:	48 e9       	lddpc	r9,800049cc <fat_cluster_readnext+0x80>
80004996:	92 89       	ld.uh	r9,r9[0x0]
80004998:	49 1a       	lddpc	r10,800049dc <fat_cluster_readnext+0x90>
8000499a:	f4 09 07 0b 	ld.ub	r11,r10[r9]
8000499e:	b0 bb       	st.b	r8[0x3],r11
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
800049a0:	12 0a       	add	r10,r9
800049a2:	15 9a       	ld.ub	r10,r10[0x1]
800049a4:	b0 aa       	st.b	r8[0x2],r10

   if ( Is_fat32 )
800049a6:	48 9a       	lddpc	r10,800049c8 <fat_cluster_readnext+0x7c>
800049a8:	15 8b       	ld.ub	r11,r10[0x0]
800049aa:	30 3a       	mov	r10,3
800049ac:	f4 0b 18 00 	cp.b	r11,r10
800049b0:	c0 20       	breq	800049b4 <fat_cluster_readnext+0x68>
800049b2:	da 0a       	popm	pc,r12=1
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
800049b4:	48 aa       	lddpc	r10,800049dc <fat_cluster_readnext+0x90>
800049b6:	f4 09 00 09 	add	r9,r10,r9
800049ba:	13 aa       	ld.ub	r10,r9[0x2]
800049bc:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
800049be:	13 b9       	ld.ub	r9,r9[0x3]
800049c0:	b0 89       	st.b	r8[0x0],r9
800049c2:	30 1c       	mov	r12,1
   }
   return true;
}
800049c4:	d8 02       	popm	pc
800049c6:	00 00       	add	r0,r0
800049c8:	00 00       	add	r0,r0
800049ca:	07 38       	ld.ub	r8,r3++
800049cc:	00 00       	add	r0,r0
800049ce:	04 bc       	st.h	r2++,r12
800049d0:	00 00       	add	r0,r0
800049d2:	04 a8       	st.w	r2++,r8
800049d4:	80 00       	ld.sh	r0,r0[0x0]
800049d6:	48 cc       	lddpc	r12,80004a04 <fat_cluster_val+0x24>
800049d8:	00 00       	add	r0,r0
800049da:	07 8c       	ld.ub	r12,r3[0x0]
800049dc:	00 00       	add	r0,r0
800049de:	04 ec       	st.h	--r2,r12

800049e0 <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
Bool  fat_cluster_val( Bool b_mode )
{
800049e0:	d4 31       	pushm	r0-r7,lr
800049e2:	18 95       	mov	r5,r12
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
800049e4:	fe f8 02 18 	ld.w	r8,pc[536]
800049e8:	11 88       	ld.ub	r8,r8[0x0]
800049ea:	30 39       	mov	r9,3
800049ec:	f2 08 18 00 	cp.b	r8,r9
800049f0:	c0 d1       	brne	80004a0a <fat_cluster_val+0x2a>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
800049f2:	fe fa 02 0e 	ld.w	r10,pc[526]
800049f6:	74 09       	ld.w	r9,r10[0x0]
800049f8:	a7 99       	lsr	r9,0x7

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
800049fa:	15 bb       	ld.ub	r11,r10[0x3]
800049fc:	f7 db c0 07 	bfextu	r11,r11,0x0,0x7
80004a00:	a3 6b       	lsl	r11,0x2
80004a02:	fe fa 02 02 	ld.w	r10,pc[514]
80004a06:	b4 0b       	st.h	r10[0x0],r11
80004a08:	c2 08       	rjmp	80004a48 <fat_cluster_val+0x68>
   }
   else if ( Is_fat16 )
80004a0a:	30 29       	mov	r9,2
80004a0c:	f2 08 18 00 	cp.b	r8,r9
80004a10:	c0 81       	brne	80004a20 <fat_cluster_val+0x40>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
80004a12:	4f ca       	lddpc	r10,80004c00 <fat_cluster_val+0x220>
80004a14:	15 a9       	ld.ub	r9,r10[0x2]
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
80004a16:	15 bb       	ld.ub	r11,r10[0x3]
80004a18:	a1 7b       	lsl	r11,0x1
80004a1a:	4f ba       	lddpc	r10,80004c04 <fat_cluster_val+0x224>
80004a1c:	b4 0b       	st.h	r10[0x0],r11
80004a1e:	c1 58       	rjmp	80004a48 <fat_cluster_val+0x68>
   }
   else if ( Is_fat12 )
80004a20:	30 19       	mov	r9,1
80004a22:	f2 08 18 00 	cp.b	r8,r9
80004a26:	c0 30       	breq	80004a2c <fat_cluster_val+0x4c>
80004a28:	30 09       	mov	r9,0
80004a2a:	c0 f8       	rjmp	80004a48 <fat_cluster_val+0x68>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
80004a2c:	4f 59       	lddpc	r9,80004c00 <fat_cluster_val+0x220>
80004a2e:	72 09       	ld.w	r9,r9[0x0]
80004a30:	4f 5a       	lddpc	r10,80004c04 <fat_cluster_val+0x224>
80004a32:	f7 d9 c0 2f 	bfextu	r11,r9,0x1,0xf
80004a36:	12 0b       	add	r11,r9
80004a38:	b4 0b       	st.h	r10[0x0],r11
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
80004a3a:	f7 db c1 08 	bfextu	r11,r11,0x8,0x8
80004a3e:	f6 09 16 01 	lsr	r9,r11,0x1
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
80004a42:	f7 db c0 01 	bfextu	r11,r11,0x0,0x1
80004a46:	b4 8b       	st.b	r10[0x0],r11
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
80004a48:	58 05       	cp.w	r5,0
80004a4a:	c2 20       	breq	80004a8e <fat_cluster_val+0xae>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
80004a4c:	4e fa       	lddpc	r10,80004c08 <fat_cluster_val+0x228>
80004a4e:	74 0a       	ld.w	r10,r10[0x0]
80004a50:	14 39       	cp.w	r9,r10
80004a52:	c0 32       	brcc	80004a58 <fat_cluster_val+0x78>
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
80004a54:	4e da       	lddpc	r10,80004c08 <fat_cluster_val+0x228>
80004a56:	95 09       	st.w	r10[0x0],r9
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
80004a58:	4e da       	lddpc	r10,80004c0c <fat_cluster_val+0x22c>
80004a5a:	74 0a       	ld.w	r10,r10[0x0]
80004a5c:	14 39       	cp.w	r9,r10
80004a5e:	e0 88 00 04 	brls	80004a66 <fat_cluster_val+0x86>
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
80004a62:	4e ba       	lddpc	r10,80004c0c <fat_cluster_val+0x22c>
80004a64:	95 09       	st.w	r10[0x0],r9
      }
      if ( Is_fat12 )
80004a66:	30 1a       	mov	r10,1
80004a68:	f4 08 18 00 	cp.b	r8,r10
80004a6c:	c1 11       	brne	80004a8e <fat_cluster_val+0xae>
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004a6e:	4e 68       	lddpc	r8,80004c04 <fat_cluster_val+0x224>
80004a70:	90 0a       	ld.sh	r10,r8[0x0]
80004a72:	e0 68 01 ff 	mov	r8,511
80004a76:	f0 0a 19 00 	cp.h	r10,r8
80004a7a:	c0 a1       	brne	80004a8e <fat_cluster_val+0xae>
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
80004a7c:	f2 c8 ff ff 	sub	r8,r9,-1
80004a80:	4e 3a       	lddpc	r10,80004c0c <fat_cluster_val+0x22c>
80004a82:	74 0a       	ld.w	r10,r10[0x0]
80004a84:	14 38       	cp.w	r8,r10
80004a86:	e0 88 00 04 	brls	80004a8e <fat_cluster_val+0xae>
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
80004a8a:	4e 1a       	lddpc	r10,80004c0c <fat_cluster_val+0x22c>
80004a8c:	95 08       	st.w	r10[0x0],r8
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
80004a8e:	4e 18       	lddpc	r8,80004c10 <fat_cluster_val+0x230>
80004a90:	70 48       	ld.w	r8,r8[0x10]
80004a92:	10 09       	add	r9,r8
80004a94:	4e 08       	lddpc	r8,80004c14 <fat_cluster_val+0x234>
80004a96:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
80004a98:	30 1c       	mov	r12,1
80004a9a:	f0 1f 00 60 	mcall	80004c18 <fat_cluster_val+0x238>
80004a9e:	e0 80 00 ad 	breq	80004bf8 <fat_cluster_val+0x218>
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
80004aa2:	4d 98       	lddpc	r8,80004c04 <fat_cluster_val+0x224>
80004aa4:	90 08       	ld.sh	r8,r8[0x0]
80004aa6:	ed d8 c0 10 	bfextu	r6,r8,0x0,0x10
80004aaa:	4d d9       	lddpc	r9,80004c1c <fat_cluster_val+0x23c>
80004aac:	12 06       	add	r6,r9
   u8_data1 = u8_ptr_cluster[0];
80004aae:	0c 97       	mov	r7,r6
80004ab0:	0f 32       	ld.ub	r2,r7++
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
80004ab2:	0f 8b       	ld.ub	r11,r7[0x0]
   u8_data3 = u8_ptr_cluster[2];
80004ab4:	ec c4 ff fe 	sub	r4,r6,-2
80004ab8:	09 81       	ld.ub	r1,r4[0x0]
   u8_data4 = u8_ptr_cluster[3];
80004aba:	ec c3 ff fd 	sub	r3,r6,-3
80004abe:	07 80       	ld.ub	r0,r3[0x0]

   if ( Is_fat12 )
80004ac0:	4c f9       	lddpc	r9,80004bfc <fat_cluster_val+0x21c>
80004ac2:	13 8a       	ld.ub	r10,r9[0x0]
80004ac4:	30 19       	mov	r9,1
80004ac6:	f2 0a 18 00 	cp.b	r10,r9
80004aca:	c1 11       	brne	80004aec <fat_cluster_val+0x10c>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004acc:	e0 69 01 ff 	mov	r9,511
80004ad0:	f2 08 19 00 	cp.h	r8,r9
80004ad4:	c0 c1       	brne	80004aec <fat_cluster_val+0x10c>
      {  // Go to next sector
         fs_gu32_addrsector++;
80004ad6:	4d 08       	lddpc	r8,80004c14 <fat_cluster_val+0x234>
80004ad8:	70 09       	ld.w	r9,r8[0x0]
80004ada:	2f f9       	sub	r9,-1
80004adc:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
80004ade:	30 1c       	mov	r12,1
80004ae0:	f0 1f 00 4e 	mcall	80004c18 <fat_cluster_val+0x238>
80004ae4:	e0 80 00 8a 	breq	80004bf8 <fat_cluster_val+0x218>
           return false;
         u8_data2 = fs_g_sector[0];
80004ae8:	4c d8       	lddpc	r8,80004c1c <fat_cluster_val+0x23c>
80004aea:	11 8b       	ld.ub	r11,r8[0x0]
      }
   }

   if (false == b_mode)
80004aec:	58 05       	cp.w	r5,0
80004aee:	c3 11       	brne	80004b50 <fat_cluster_val+0x170>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80004af0:	4c 48       	lddpc	r8,80004c00 <fat_cluster_val+0x220>
80004af2:	f0 c9 ff fc 	sub	r9,r8,-4
80004af6:	f0 cc ff f9 	sub	r12,r8,-7
80004afa:	b8 82       	st.b	r12[0x0],r2
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
80004afc:	2f a8       	sub	r8,-6
80004afe:	b0 8b       	st.b	r8[0x0],r11

      if ( Is_fat32 )
80004b00:	4b fa       	lddpc	r10,80004bfc <fat_cluster_val+0x21c>
80004b02:	15 8a       	ld.ub	r10,r10[0x0]
80004b04:	30 3b       	mov	r11,3
80004b06:	f6 0a 18 00 	cp.b	r10,r11
80004b0a:	c0 61       	brne	80004b16 <fat_cluster_val+0x136>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
80004b0c:	b2 91       	st.b	r9[0x1],r1
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80004b0e:	e1 d0 c0 04 	bfextu	r0,r0,0x0,0x4
80004b12:	b2 80       	st.b	r9[0x0],r0
80004b14:	da 3a       	popm	r0-r7,pc,r12=1
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
80004b16:	30 0b       	mov	r11,0
80004b18:	b2 9b       	st.b	r9[0x1],r11
         LSB3( fs_g_cluster.u32_val ) = 0;
80004b1a:	b2 8b       	st.b	r9[0x0],r11

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
80004b1c:	30 19       	mov	r9,1
80004b1e:	f2 0a 18 00 	cp.b	r10,r9
80004b22:	c0 20       	breq	80004b26 <fat_cluster_val+0x146>
80004b24:	da 3a       	popm	r0-r7,pc,r12=1
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80004b26:	4b 79       	lddpc	r9,80004c00 <fat_cluster_val+0x220>
80004b28:	13 b9       	ld.ub	r9,r9[0x3]
80004b2a:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80004b2e:	c0 c0       	breq	80004b46 <fat_cluster_val+0x166>
            {  // Readed cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
80004b30:	19 8b       	ld.ub	r11,r12[0x0]
80004b32:	a5 8b       	lsr	r11,0x4
80004b34:	11 89       	ld.ub	r9,r8[0x0]
80004b36:	f2 0a 15 04 	lsl	r10,r9,0x4
80004b3a:	f6 0a 00 0a 	add	r10,r11,r10
80004b3e:	b8 8a       	st.b	r12[0x0],r10
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
80004b40:	a5 89       	lsr	r9,0x4
80004b42:	b0 89       	st.b	r8[0x0],r9
80004b44:	da 3a       	popm	r0-r7,pc,r12=1
            }
            else
            {  // Readed cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
80004b46:	11 89       	ld.ub	r9,r8[0x0]
80004b48:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80004b4c:	b0 89       	st.b	r8[0x0],r9
80004b4e:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
80004b50:	4a b8       	lddpc	r8,80004bfc <fat_cluster_val+0x21c>
80004b52:	11 88       	ld.ub	r8,r8[0x0]
80004b54:	30 19       	mov	r9,1
80004b56:	f2 08 18 00 	cp.b	r8,r9
80004b5a:	c3 a1       	brne	80004bce <fat_cluster_val+0x1ee>
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
80004b5c:	4a 98       	lddpc	r8,80004c00 <fat_cluster_val+0x220>
80004b5e:	11 b8       	ld.ub	r8,r8[0x3]
80004b60:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004b64:	c1 10       	breq	80004b86 <fat_cluster_val+0x1a6>
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
80004b66:	eb d2 c0 04 	bfextu	r5,r2,0x0,0x4
80004b6a:	4a 68       	lddpc	r8,80004c00 <fat_cluster_val+0x220>
80004b6c:	2f c8       	sub	r8,-4
80004b6e:	11 b9       	ld.ub	r9,r8[0x3]
80004b70:	f2 0a 15 04 	lsl	r10,r9,0x4
80004b74:	14 05       	add	r5,r10
80004b76:	5c 55       	castu.b	r5
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
80004b78:	a5 89       	lsr	r9,0x4
80004b7a:	11 a8       	ld.ub	r8,r8[0x2]
80004b7c:	a5 68       	lsl	r8,0x4
80004b7e:	f2 08 00 0a 	add	r10,r9,r8
80004b82:	5c 5a       	castu.b	r10
80004b84:	c0 c8       	rjmp	80004b9c <fat_cluster_val+0x1bc>
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
80004b86:	49 f8       	lddpc	r8,80004c00 <fat_cluster_val+0x220>
80004b88:	2f c8       	sub	r8,-4
80004b8a:	11 b5       	ld.ub	r5,r8[0x3]
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
80004b8c:	16 9a       	mov	r10,r11
80004b8e:	e2 1a 00 f0 	andl	r10,0xf0,COH
80004b92:	11 a8       	ld.ub	r8,r8[0x2]
80004b94:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004b98:	10 0a       	add	r10,r8
80004b9a:	5c 5a       	castu.b	r10
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004b9c:	49 a8       	lddpc	r8,80004c04 <fat_cluster_val+0x224>
80004b9e:	90 09       	ld.sh	r9,r8[0x0]
80004ba0:	e0 68 01 ff 	mov	r8,511
80004ba4:	f0 09 19 00 	cp.h	r9,r8
80004ba8:	c2 31       	brne	80004bee <fat_cluster_val+0x20e>
         {
            fs_g_sector[0] = u8_data2;
80004baa:	49 d8       	lddpc	r8,80004c1c <fat_cluster_val+0x23c>
80004bac:	b0 8a       	st.b	r8[0x0],r10
            fat_cache_mark_sector_as_dirty();
80004bae:	f0 1f 00 1d 	mcall	80004c20 <fat_cluster_val+0x240>
            // Go to previous sector
            fs_gu32_addrsector--;
80004bb2:	49 98       	lddpc	r8,80004c14 <fat_cluster_val+0x234>
80004bb4:	70 09       	ld.w	r9,r8[0x0]
80004bb6:	20 19       	sub	r9,1
80004bb8:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( true ))
80004bba:	30 1c       	mov	r12,1
80004bbc:	f0 1f 00 17 	mcall	80004c18 <fat_cluster_val+0x238>
80004bc0:	c1 c0       	breq	80004bf8 <fat_cluster_val+0x218>
              return false;
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
80004bc2:	49 78       	lddpc	r8,80004c1c <fat_cluster_val+0x23c>
80004bc4:	f1 65 01 ff 	st.b	r8[511],r5
            fat_cache_mark_sector_as_dirty();
80004bc8:	f0 1f 00 16 	mcall	80004c20 <fat_cluster_val+0x240>
80004bcc:	da 3a       	popm	r0-r7,pc,r12=1
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
80004bce:	48 d9       	lddpc	r9,80004c00 <fat_cluster_val+0x220>
80004bd0:	2f c9       	sub	r9,-4
80004bd2:	13 b5       	ld.ub	r5,r9[0x3]
         u8_data2 = LSB1( fs_g_cluster.u32_val );
80004bd4:	13 aa       	ld.ub	r10,r9[0x2]
         if ( Is_fat32 )
80004bd6:	30 3b       	mov	r11,3
80004bd8:	f6 08 18 00 	cp.b	r8,r11
80004bdc:	c0 91       	brne	80004bee <fat_cluster_val+0x20e>
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
80004bde:	13 98       	ld.ub	r8,r9[0x1]
80004be0:	a8 88       	st.b	r4[0x0],r8
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
80004be2:	e0 10 ff f0 	andl	r0,0xfff0
80004be6:	13 88       	ld.ub	r8,r9[0x0]
80004be8:	f0 00 00 00 	add	r0,r8,r0
80004bec:	a6 80       	st.b	r3[0x0],r0
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
80004bee:	ac 85       	st.b	r6[0x0],r5
      u8_ptr_cluster[1] = u8_data2;
80004bf0:	ae 8a       	st.b	r7[0x0],r10
      fat_cache_mark_sector_as_dirty();
80004bf2:	f0 1f 00 0c 	mcall	80004c20 <fat_cluster_val+0x240>
80004bf6:	da 3a       	popm	r0-r7,pc,r12=1
80004bf8:	d8 3a       	popm	r0-r7,pc,r12=0
80004bfa:	00 00       	add	r0,r0
80004bfc:	00 00       	add	r0,r0
80004bfe:	07 38       	ld.ub	r8,r3++
80004c00:	00 00       	add	r0,r0
80004c02:	07 8c       	ld.ub	r12,r3[0x0]
80004c04:	00 00       	add	r0,r0
80004c06:	04 bc       	st.h	r2++,r12
80004c08:	00 00       	add	r0,r0
80004c0a:	07 20       	ld.uh	r0,r3++
80004c0c:	00 00       	add	r0,r0
80004c0e:	04 e8       	st.h	--r2,r8
80004c10:	00 00       	add	r0,r0
80004c12:	06 ec       	st.h	--r3,r12
80004c14:	00 00       	add	r0,r0
80004c16:	04 a8       	st.w	r2++,r8
80004c18:	80 00       	ld.sh	r0,r0[0x0]
80004c1a:	48 cc       	lddpc	r12,80004c48 <fat_cluster_list+0x24>
80004c1c:	00 00       	add	r0,r0
80004c1e:	04 ec       	st.h	--r2,r12
80004c20:	80 00       	ld.sh	r0,r0[0x0]
80004c22:	46 ac       	lddsp	r12,sp[0x1a8]

80004c24 <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list readed or cleared (unit 512B)
//! @endverbatim
//!
Bool  fat_cluster_list( uint8_t opt_action, Bool b_for_file )
{
80004c24:	d4 31       	pushm	r0-r7,lr
80004c26:	20 2d       	sub	sp,8
80004c28:	18 93       	mov	r3,r12
80004c2a:	16 97       	mov	r7,r11
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80004c2c:	30 89       	mov	r9,8
80004c2e:	fe f8 02 8e 	ld.w	r8,pc[654]
80004c32:	b0 89       	st.b	r8[0x0],r9

   if(  Is_fat32
   &&  (FS_CLUST_ACT_CLR == opt_action) )
80004c34:	30 38       	mov	r8,3
80004c36:	f0 0c 18 00 	cp.b	r12,r8
80004c3a:	5f 0a       	sreq	r10
80004c3c:	50 0a       	stdsp	sp[0x0],r10
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80004c3e:	fe f9 02 82 	ld.w	r9,pc[642]
80004c42:	13 89       	ld.ub	r9,r9[0x0]
80004c44:	f0 09 18 00 	cp.b	r9,r8
80004c48:	5f 08       	sreq	r8
80004c4a:	f5 e8 00 08 	and	r8,r10,r8
80004c4e:	c0 60       	breq	80004c5a <fat_cluster_list+0x36>
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80004c50:	3f fc       	mov	r12,-1
80004c52:	f0 1f 00 9d 	mcall	80004ec4 <fat_cluster_list+0x2a0>
80004c56:	e0 80 01 2f 	breq	80004eb4 <fat_cluster_list+0x290>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
80004c5a:	fe f8 02 6e 	ld.w	r8,pc[622]
80004c5e:	70 08       	ld.w	r8,r8[0x0]
80004c60:	58 08       	cp.w	r8,0
80004c62:	c3 b1       	brne	80004cd8 <fat_cluster_list+0xb4>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80004c64:	40 09       	lddsp	r9,sp[0x0]
80004c66:	58 09       	cp.w	r9,0
80004c68:	e0 81 01 26 	brne	80004eb4 <fat_cluster_list+0x290>
         return false;           // Impossible to erase ROOT DIR

      if ( Is_fat12 || Is_fat16 )
80004c6c:	fe f8 02 54 	ld.w	r8,pc[596]
80004c70:	11 88       	ld.ub	r8,r8[0x0]
80004c72:	f0 ca 00 01 	sub	r10,r8,1
80004c76:	30 19       	mov	r9,1
80004c78:	f2 0a 18 00 	cp.b	r10,r9
80004c7c:	e0 8b 00 23 	brhi	80004cc2 <fat_cluster_list+0x9e>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
80004c80:	fe f8 02 48 	ld.w	r8,pc[584]
80004c84:	70 18       	ld.w	r8,r8[0x4]
80004c86:	fe f9 02 46 	ld.w	r9,pc[582]
80004c8a:	f3 19 00 1a 	ld.uh	r9,r9[26]
80004c8e:	12 38       	cp.w	r8,r9
80004c90:	c1 32       	brcc	80004cb6 <fat_cluster_list+0x92>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
80004c92:	fe f9 02 36 	ld.w	r9,pc[566]
80004c96:	fe fa 02 36 	ld.w	r10,pc[566]
80004c9a:	74 4b       	ld.w	r11,r10[0x10]
80004c9c:	16 08       	add	r8,r11
80004c9e:	f5 1b 00 18 	ld.uh	r11,r10[24]
80004ca2:	16 08       	add	r8,r11
80004ca4:	93 08       	st.w	r9[0x0],r8
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
80004ca6:	f5 1a 00 1a 	ld.uh	r10,r10[26]
80004caa:	72 18       	ld.w	r8,r9[0x4]
80004cac:	f4 08 01 08 	sub	r8,r10,r8
80004cb0:	93 18       	st.w	r9[0x4],r8
80004cb2:	30 1c       	mov	r12,1
            return true;
80004cb4:	c0 19       	rjmp	80004eb6 <fat_cluster_list+0x292>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
80004cb6:	31 a9       	mov	r9,26
80004cb8:	fe f8 02 04 	ld.w	r8,pc[516]
80004cbc:	b0 89       	st.b	r8[0x0],r9
80004cbe:	30 0c       	mov	r12,0
            return false;        // Position outside the root area
80004cc0:	cf b8       	rjmp	80004eb6 <fat_cluster_list+0x292>
         }
      }
      if ( Is_fat32 )
80004cc2:	30 39       	mov	r9,3
80004cc4:	f2 08 18 00 	cp.b	r8,r9
80004cc8:	c0 a1       	brne	80004cdc <fat_cluster_list+0xb8>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80004cca:	fe f8 02 02 	ld.w	r8,pc[514]
80004cce:	70 69       	ld.w	r9,r8[0x18]
80004cd0:	fe f8 02 00 	ld.w	r8,pc[512]
80004cd4:	91 09       	st.w	r8[0x0],r9
80004cd6:	c0 38       	rjmp	80004cdc <fat_cluster_list+0xb8>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80004cd8:	4f e9       	lddpc	r9,80004ed0 <fat_cluster_list+0x2ac>
80004cda:	93 08       	st.w	r9[0x0],r8
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80004cdc:	30 38       	mov	r8,3
80004cde:	f0 03 18 00 	cp.b	r3,r8
80004ce2:	c0 70       	breq	80004cf0 <fat_cluster_list+0xcc>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
80004ce4:	0e 9c       	mov	r12,r7
80004ce6:	f0 1f 00 7c 	mcall	80004ed4 <fat_cluster_list+0x2b0>
80004cea:	c0 70       	breq	80004cf8 <fat_cluster_list+0xd4>
80004cec:	30 1c       	mov	r12,1
80004cee:	ce 48       	rjmp	80004eb6 <fat_cluster_list+0x292>
         return true;            // Segment found in cache
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
80004cf0:	f0 1f 00 7a 	mcall	80004ed8 <fat_cluster_list+0x2b4>
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80004cf4:	f0 1f 00 7a 	mcall	80004edc <fat_cluster_list+0x2b8>
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
80004cf8:	4f 40       	lddpc	r0,80004ec8 <fat_cluster_list+0x2a4>
80004cfa:	3f f8       	mov	r8,-1
80004cfc:	a0 88       	st.b	r0[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004cfe:	00 96       	mov	r6,r0
80004d00:	4f 35       	lddpc	r5,80004ecc <fat_cluster_list+0x2a8>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004d02:	4f 47       	lddpc	r7,80004ed0 <fat_cluster_list+0x2ac>
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004d04:	30 21       	mov	r1,2
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80004d06:	e0 c8 ff f9 	sub	r8,r0,-7
80004d0a:	50 18       	stdsp	sp[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80004d0c:	30 12       	mov	r2,1
   MSB0( fs_g_seg.u32_addr ) = 0xFF;

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80004d0e:	6c 19       	ld.w	r9,r6[0x4]
80004d10:	0b 98       	ld.ub	r8,r5[0x1]
80004d12:	10 39       	cp.w	r9,r8
80004d14:	c4 32       	brcc	80004d9a <fat_cluster_list+0x176>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004d16:	6a 4a       	ld.w	r10,r5[0x10]
80004d18:	14 09       	add	r9,r10
80004d1a:	6a 5a       	ld.w	r10,r5[0x14]
80004d1c:	14 09       	add	r9,r10
80004d1e:	6e 0a       	ld.w	r10,r7[0x0]
80004d20:	20 2a       	sub	r10,2
80004d22:	f4 08 02 48 	mul	r8,r10,r8
80004d26:	f2 08 00 08 	add	r8,r9,r8
80004d2a:	8d 08       	st.w	r6[0x0],r8
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80004d2c:	e2 03 18 00 	cp.b	r3,r1
80004d30:	c0 d1       	brne	80004d4a <fat_cluster_list+0x126>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
80004d32:	4e 67       	lddpc	r7,80004ec8 <fat_cluster_list+0x2a4>
80004d34:	4e 68       	lddpc	r8,80004ecc <fat_cluster_list+0x2a8>
80004d36:	11 99       	ld.ub	r9,r8[0x1]
80004d38:	6e 18       	ld.w	r8,r7[0x4]
80004d3a:	f2 08 01 08 	sub	r8,r9,r8
80004d3e:	8f 18       	st.w	r7[0x4],r8
            fat_cache_clusterlist_update_finish();
80004d40:	f0 1f 00 68 	mcall	80004ee0 <fat_cluster_list+0x2bc>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80004d44:	30 1c       	mov	r12,1
80004d46:	8f 1c       	st.w	r7[0x4],r12
            return true;
80004d48:	cb 78       	rjmp	80004eb6 <fat_cluster_list+0x292>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80004d4a:	0b 99       	ld.ub	r9,r5[0x1]
80004d4c:	40 1a       	lddsp	r10,sp[0x4]
80004d4e:	15 88       	ld.ub	r8,r10[0x0]
80004d50:	f2 08 01 08 	sub	r8,r9,r8
80004d54:	8d 18       	st.w	r6[0x4],r8

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80004d56:	e4 03 18 00 	cp.b	r3,r2
80004d5a:	c2 01       	brne	80004d9a <fat_cluster_list+0x176>
80004d5c:	4d 99       	lddpc	r9,80004ec0 <fat_cluster_list+0x29c>
80004d5e:	13 88       	ld.ub	r8,r9[0x0]
80004d60:	e4 08 18 00 	cp.b	r8,r2
80004d64:	c1 b0       	breq	80004d9a <fat_cluster_list+0x176>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
80004d66:	6e 04       	ld.w	r4,r7[0x0]
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80004d68:	30 0c       	mov	r12,0
80004d6a:	f0 1f 00 5f 	mcall	80004ee4 <fat_cluster_list+0x2c0>
80004d6e:	e0 80 00 a3 	breq	80004eb4 <fat_cluster_list+0x290>
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80004d72:	6e 09       	ld.w	r9,r7[0x0]
80004d74:	f2 c8 ff ff 	sub	r8,r9,-1
80004d78:	8f 08       	st.w	r7[0x0],r8
80004d7a:	6e 1a       	ld.w	r10,r7[0x4]
80004d7c:	14 38       	cp.w	r8,r10
80004d7e:	c0 a0       	breq	80004d92 <fat_cluster_list+0x16e>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80004d80:	8f 09       	st.w	r7[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
80004d82:	08 19       	sub	r9,r4
80004d84:	0b 98       	ld.ub	r8,r5[0x1]
80004d86:	b1 39       	mul	r9,r8
80004d88:	6c 18       	ld.w	r8,r6[0x4]
80004d8a:	f2 08 00 08 	add	r8,r9,r8
80004d8e:	8d 18       	st.w	r6[0x4],r8
                  break;
80004d90:	c0 58       	rjmp	80004d9a <fat_cluster_list+0x176>
               }
               if( !fat_cluster_readnext() )
80004d92:	f0 1f 00 56 	mcall	80004ee8 <fat_cluster_list+0x2c4>
80004d96:	ce e1       	brne	80004d72 <fat_cluster_list+0x14e>
80004d98:	c8 e8       	rjmp	80004eb4 <fat_cluster_list+0x290>
                  return false;
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80004d9a:	30 0c       	mov	r12,0
80004d9c:	f0 1f 00 52 	mcall	80004ee4 <fat_cluster_list+0x2c0>
80004da0:	e0 80 00 8a 	breq	80004eb4 <fat_cluster_list+0x290>
         return false;

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
80004da4:	f0 1f 00 52 	mcall	80004eec <fat_cluster_list+0x2c8>
80004da8:	18 94       	mov	r4,r12
      if (FS_CLUS_BAD == u8_cluster_status)
80004daa:	e4 0c 18 00 	cp.b	r12,r2
80004dae:	e0 80 00 83 	breq	80004eb4 <fat_cluster_list+0x290>
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80004db2:	01 89       	ld.ub	r9,r0[0x0]
80004db4:	3f f8       	mov	r8,-1
80004db6:	f0 09 18 00 	cp.b	r9,r8
80004dba:	c4 61       	brne	80004e46 <fat_cluster_list+0x222>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
80004dbc:	e2 0c 18 00 	cp.b	r12,r1
80004dc0:	c2 b1       	brne	80004e16 <fat_cluster_list+0x1f2>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
80004dc2:	4c 28       	lddpc	r8,80004ec8 <fat_cluster_list+0x2a4>
80004dc4:	70 17       	ld.w	r7,r8[0x4]

            // Compute the sector address of this last cluster to take time during a futur request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
80004dc6:	4c b9       	lddpc	r9,80004ef0 <fat_cluster_list+0x2cc>
80004dc8:	13 89       	ld.ub	r9,r9[0x0]
80004dca:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004dce:	4c aa       	lddpc	r10,80004ef4 <fat_cluster_list+0x2d0>
80004dd0:	f4 09 00 29 	add	r9,r10,r9<<0x2
80004dd4:	72 2a       	ld.w	r10,r9[0x8]
80004dd6:	0e 1a       	sub	r10,r7
80004dd8:	93 2a       	st.w	r9[0x8],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004dda:	4b d9       	lddpc	r9,80004ecc <fat_cluster_list+0x2a8>
80004ddc:	72 5b       	ld.w	r11,r9[0x14]
80004dde:	72 4a       	ld.w	r10,r9[0x10]
80004de0:	14 0b       	add	r11,r10
80004de2:	13 99       	ld.ub	r9,r9[0x1]
80004de4:	4b ba       	lddpc	r10,80004ed0 <fat_cluster_list+0x2ac>
80004de6:	74 0a       	ld.w	r10,r10[0x0]
80004de8:	20 2a       	sub	r10,2
80004dea:	f2 0a 02 4a 	mul	r10,r9,r10
80004dee:	f6 0a 00 0a 	add	r10,r11,r10
80004df2:	91 0a       	st.w	r8[0x0],r10
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
80004df4:	91 19       	st.w	r8[0x4],r9
            if (FS_CLUST_ACT_CLR != opt_action)
80004df6:	30 38       	mov	r8,3
80004df8:	f0 03 18 00 	cp.b	r3,r8
80004dfc:	c0 30       	breq	80004e02 <fat_cluster_list+0x1de>
               fat_cache_clusterlist_update_finish();
80004dfe:	f0 1f 00 39 	mcall	80004ee0 <fat_cluster_list+0x2bc>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
80004e02:	4b 28       	lddpc	r8,80004ec8 <fat_cluster_list+0x2a4>
80004e04:	4b 39       	lddpc	r9,80004ed0 <fat_cluster_list+0x2ac>
80004e06:	72 09       	ld.w	r9,r9[0x0]
80004e08:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
80004e0a:	91 17       	st.w	r8[0x4],r7
            fs_g_status = FS_ERR_OUT_LIST;
80004e0c:	31 a9       	mov	r9,26
80004e0e:	4a c8       	lddpc	r8,80004ebc <fat_cluster_list+0x298>
80004e10:	b0 89       	st.b	r8[0x0],r9
80004e12:	30 0c       	mov	r12,0
            return false;
80004e14:	c5 18       	rjmp	80004eb6 <fat_cluster_list+0x292>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80004e16:	0b 98       	ld.ub	r8,r5[0x1]
80004e18:	6c 19       	ld.w	r9,r6[0x4]
80004e1a:	f2 08 01 08 	sub	r8,r9,r8
80004e1e:	8d 18       	st.w	r6[0x4],r8
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004e20:	40 0a       	lddsp	r10,sp[0x0]
80004e22:	58 0a       	cp.w	r10,0
80004e24:	c4 50       	breq	80004eae <fat_cluster_list+0x28a>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
80004e26:	58 08       	cp.w	r8,0
80004e28:	c4 31       	brne	80004eae <fat_cluster_list+0x28a>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
80004e2a:	6e 18       	ld.w	r8,r7[0x4]
80004e2c:	8d 08       	st.w	r6[0x0],r8
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80004e2e:	e0 68 ff ff 	mov	r8,65535
80004e32:	ea 18 0f ff 	orh	r8,0xfff
80004e36:	8f 18       	st.w	r7[0x4],r8
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80004e38:	30 1c       	mov	r12,1
80004e3a:	f0 1f 00 2b 	mcall	80004ee4 <fat_cluster_list+0x2c0>
80004e3e:	c3 b0       	breq	80004eb4 <fat_cluster_list+0x290>
                  return false;
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Resotre the next cluster
80004e40:	6c 08       	ld.w	r8,r6[0x0]
80004e42:	8f 18       	st.w	r7[0x4],r8
80004e44:	c3 58       	rjmp	80004eae <fat_cluster_list+0x28a>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
80004e46:	e4 03 18 00 	cp.b	r3,r2
80004e4a:	c0 a1       	brne	80004e5e <fat_cluster_list+0x23a>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
80004e4c:	6e 09       	ld.w	r9,r7[0x0]
80004e4e:	2f f9       	sub	r9,-1
80004e50:	6e 18       	ld.w	r8,r7[0x4]
80004e52:	10 39       	cp.w	r9,r8
80004e54:	c1 b0       	breq	80004e8a <fat_cluster_list+0x266>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
80004e56:	f0 1f 00 23 	mcall	80004ee0 <fat_cluster_list+0x2bc>
80004e5a:	30 1c       	mov	r12,1
               return true;                              // End of segment
80004e5c:	c2 d8       	rjmp	80004eb6 <fat_cluster_list+0x292>
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004e5e:	40 09       	lddsp	r9,sp[0x0]
80004e60:	58 09       	cp.w	r9,0
80004e62:	c1 40       	breq	80004e8a <fat_cluster_list+0x266>
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
80004e64:	6e 18       	ld.w	r8,r7[0x4]
80004e66:	8d 08       	st.w	r6[0x0],r8
            fs_g_cluster.u32_val = 0;                    // by default free cluster
80004e68:	30 08       	mov	r8,0
80004e6a:	8f 18       	st.w	r7[0x4],r8
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
80004e6c:	0b 98       	ld.ub	r8,r5[0x1]
80004e6e:	6c 19       	ld.w	r9,r6[0x4]
80004e70:	10 39       	cp.w	r9,r8
80004e72:	c0 62       	brcc	80004e7e <fat_cluster_list+0x25a>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
80004e74:	e0 68 ff ff 	mov	r8,65535
80004e78:	ea 18 0f ff 	orh	r8,0xfff
80004e7c:	8f 18       	st.w	r7[0x4],r8
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80004e7e:	30 1c       	mov	r12,1
80004e80:	f0 1f 00 19 	mcall	80004ee4 <fat_cluster_list+0x2c0>
80004e84:	c1 80       	breq	80004eb4 <fat_cluster_list+0x290>
               return false;
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Resotre the next cluster
80004e86:	6c 08       	ld.w	r8,r6[0x0]
80004e88:	8f 18       	st.w	r7[0x4],r8
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
80004e8a:	e2 04 18 00 	cp.b	r4,r1
80004e8e:	c0 b1       	brne	80004ea4 <fat_cluster_list+0x280>
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
80004e90:	40 0a       	lddsp	r10,sp[0x0]
80004e92:	58 0a       	cp.w	r10,0
80004e94:	c0 40       	breq	80004e9c <fat_cluster_list+0x278>
            {
               return fat_update_fat2();
80004e96:	f0 1f 00 19 	mcall	80004ef8 <fat_cluster_list+0x2d4>
80004e9a:	c0 e8       	rjmp	80004eb6 <fat_cluster_list+0x292>
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
80004e9c:	f0 1f 00 11 	mcall	80004ee0 <fat_cluster_list+0x2bc>
80004ea0:	30 1c       	mov	r12,1
            return true; // End of segment
80004ea2:	c0 a8       	rjmp	80004eb6 <fat_cluster_list+0x292>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
80004ea4:	0b 99       	ld.ub	r9,r5[0x1]
80004ea6:	6c 18       	ld.w	r8,r6[0x4]
80004ea8:	f2 08 00 08 	add	r8,r9,r8
80004eac:	8d 18       	st.w	r6[0x4],r8
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
80004eae:	6e 18       	ld.w	r8,r7[0x4]
80004eb0:	8f 08       	st.w	r7[0x0],r8
   }  // End of main loop
80004eb2:	c2 eb       	rjmp	80004d0e <fat_cluster_list+0xea>
80004eb4:	30 0c       	mov	r12,0
}
80004eb6:	2f ed       	sub	sp,-8
80004eb8:	d8 32       	popm	r0-r7,pc
80004eba:	00 00       	add	r0,r0
80004ebc:	00 00       	add	r0,r0
80004ebe:	07 3c       	ld.ub	r12,r3++
80004ec0:	00 00       	add	r0,r0
80004ec2:	07 38       	ld.ub	r8,r3++
80004ec4:	80 00       	ld.sh	r0,r0[0x0]
80004ec6:	56 08       	stdsp	sp[0x180],r8
80004ec8:	00 00       	add	r0,r0
80004eca:	07 94       	ld.ub	r4,r3[0x1]
80004ecc:	00 00       	add	r0,r0
80004ece:	06 ec       	st.h	--r3,r12
80004ed0:	00 00       	add	r0,r0
80004ed2:	07 8c       	ld.ub	r12,r3[0x0]
80004ed4:	80 00       	ld.sh	r0,r0[0x0]
80004ed6:	41 64       	lddsp	r4,sp[0x58]
80004ed8:	80 00       	ld.sh	r0,r0[0x0]
80004eda:	40 3c       	lddsp	r12,sp[0xc]
80004edc:	80 00       	ld.sh	r0,r0[0x0]
80004ede:	52 4c       	stdsp	sp[0x90],r12
80004ee0:	80 00       	ld.sh	r0,r0[0x0]
80004ee2:	41 0c       	lddsp	r12,sp[0x40]
80004ee4:	80 00       	ld.sh	r0,r0[0x0]
80004ee6:	49 e0       	lddpc	r0,80004f5c <fat_read_dir+0x60>
80004ee8:	80 00       	ld.sh	r0,r0[0x0]
80004eea:	49 4c       	lddpc	r12,80004f38 <fat_read_dir+0x3c>
80004eec:	80 00       	ld.sh	r0,r0[0x0]
80004eee:	3f dc       	mov	r12,-3
80004ef0:	00 00       	add	r0,r0
80004ef2:	07 3e       	ld.ub	lr,r3++
80004ef4:	00 00       	add	r0,r0
80004ef6:	04 c0       	st.b	r2++,r0
80004ef8:	80 00       	ld.sh	r0,r0[0x0]
80004efa:	52 d8       	stdsp	sp[0xb4],r8

80004efc <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
Bool  fat_read_dir( void )
{
80004efc:	eb cd 40 80 	pushm	r7,lr
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
80004f00:	49 98       	lddpc	r8,80004f64 <fat_read_dir+0x68>
80004f02:	90 97       	ld.uh	r7,r8[0x2]
80004f04:	a5 87       	lsr	r7,0x4

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004f06:	49 98       	lddpc	r8,80004f68 <fat_read_dir+0x6c>
80004f08:	11 89       	ld.ub	r9,r8[0x0]
80004f0a:	49 98       	lddpc	r8,80004f6c <fat_read_dir+0x70>
80004f0c:	11 88       	ld.ub	r8,r8[0x0]
80004f0e:	f0 09 18 00 	cp.b	r9,r8
80004f12:	c0 d1       	brne	80004f2c <fat_read_dir+0x30>
80004f14:	49 58       	lddpc	r8,80004f68 <fat_read_dir+0x6c>
80004f16:	70 39       	ld.w	r9,r8[0xc]
80004f18:	49 58       	lddpc	r8,80004f6c <fat_read_dir+0x70>
80004f1a:	70 88       	ld.w	r8,r8[0x20]
80004f1c:	10 39       	cp.w	r9,r8
80004f1e:	c0 71       	brne	80004f2c <fat_read_dir+0x30>
80004f20:	49 28       	lddpc	r8,80004f68 <fat_read_dir+0x6c>
80004f22:	70 48       	ld.w	r8,r8[0x10]
80004f24:	0e 38       	cp.w	r8,r7
80004f26:	c0 31       	brne	80004f2c <fat_read_dir+0x30>
80004f28:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
         return true;      // The internal cache contains the sector ascked
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
80004f2c:	49 18       	lddpc	r8,80004f70 <fat_read_dir+0x74>
80004f2e:	49 09       	lddpc	r9,80004f6c <fat_read_dir+0x70>
80004f30:	72 89       	ld.w	r9,r9[0x20]
80004f32:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
80004f34:	91 17       	st.w	r8[0x4],r7
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
80004f36:	30 0b       	mov	r11,0
80004f38:	30 2c       	mov	r12,2
80004f3a:	f0 1f 00 0f 	mcall	80004f74 <fat_read_dir+0x78>
80004f3e:	c1 00       	breq	80004f5e <fat_read_dir+0x62>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
80004f40:	48 c8       	lddpc	r8,80004f70 <fat_read_dir+0x74>
80004f42:	70 09       	ld.w	r9,r8[0x0]
80004f44:	48 d8       	lddpc	r8,80004f78 <fat_read_dir+0x7c>
80004f46:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
80004f48:	30 1c       	mov	r12,1
80004f4a:	f0 1f 00 0d 	mcall	80004f7c <fat_read_dir+0x80>
80004f4e:	c0 80       	breq	80004f5e <fat_read_dir+0x62>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
80004f50:	48 68       	lddpc	r8,80004f68 <fat_read_dir+0x6c>
80004f52:	48 79       	lddpc	r9,80004f6c <fat_read_dir+0x70>
80004f54:	72 89       	ld.w	r9,r9[0x20]
80004f56:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
80004f58:	91 47       	st.w	r8[0x10],r7
80004f5a:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
         return true;
80004f5e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80004f62:	00 00       	add	r0,r0
80004f64:	00 00       	add	r0,r0
80004f66:	07 38       	ld.ub	r8,r3++
80004f68:	00 00       	add	r0,r0
80004f6a:	07 74       	ld.ub	r4,--r3
80004f6c:	00 00       	add	r0,r0
80004f6e:	06 ec       	st.h	--r3,r12
80004f70:	00 00       	add	r0,r0
80004f72:	07 94       	ld.ub	r4,r3[0x1]
80004f74:	80 00       	ld.sh	r0,r0[0x0]
80004f76:	4c 24       	lddpc	r4,8000507c <fat_check_device+0x20>
80004f78:	00 00       	add	r0,r0
80004f7a:	04 a8       	st.w	r2++,r8
80004f7c:	80 00       	ld.sh	r0,r0[0x0]
80004f7e:	48 cc       	lddpc	r12,80004fac <fat_read_file+0x2c>

80004f80 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
Bool  fat_read_file( uint8_t mode )
{
80004f80:	eb cd 40 c0 	pushm	r6-r7,lr
80004f84:	18 97       	mov	r7,r12
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
80004f86:	4a e8       	lddpc	r8,8000503c <fat_read_file+0xbc>
80004f88:	70 38       	ld.w	r8,r8[0xc]
80004f8a:	f0 06 16 09 	lsr	r6,r8,0x9

   if(FS_CLUST_ACT_ONE  == mode)
80004f8e:	30 29       	mov	r9,2
80004f90:	f2 0c 18 00 	cp.b	r12,r9
80004f94:	c1 31       	brne	80004fba <fat_read_file+0x3a>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004f96:	4a b8       	lddpc	r8,80005040 <fat_read_file+0xc0>
80004f98:	11 89       	ld.ub	r9,r8[0x0]
80004f9a:	4a b8       	lddpc	r8,80005044 <fat_read_file+0xc4>
80004f9c:	11 88       	ld.ub	r8,r8[0x0]
80004f9e:	f0 09 18 00 	cp.b	r9,r8
80004fa2:	c1 91       	brne	80004fd4 <fat_read_file+0x54>
80004fa4:	4a 78       	lddpc	r8,80005040 <fat_read_file+0xc0>
80004fa6:	70 39       	ld.w	r9,r8[0xc]
80004fa8:	4a 58       	lddpc	r8,8000503c <fat_read_file+0xbc>
80004faa:	70 18       	ld.w	r8,r8[0x4]
80004fac:	10 39       	cp.w	r9,r8
80004fae:	c1 31       	brne	80004fd4 <fat_read_file+0x54>
80004fb0:	4a 48       	lddpc	r8,80005040 <fat_read_file+0xc0>
80004fb2:	70 48       	ld.w	r8,r8[0x10]
80004fb4:	0c 38       	cp.w	r8,r6
80004fb6:	c0 f1       	brne	80004fd4 <fat_read_file+0x54>
80004fb8:	c3 38       	rjmp	8000501e <fat_read_file+0x9e>
         return true;      // The internal cache contains the sector ascked
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
80004fba:	30 39       	mov	r9,3
80004fbc:	f2 0c 18 00 	cp.b	r12,r9
80004fc0:	c3 31       	brne	80005026 <fat_read_file+0xa6>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
80004fc2:	49 f9       	lddpc	r9,8000503c <fat_read_file+0xbc>
80004fc4:	72 19       	ld.w	r9,r9[0x4]
80004fc6:	58 09       	cp.w	r9,0
80004fc8:	c2 b0       	breq	8000501e <fat_read_file+0x9e>
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
80004fca:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004fce:	c2 c0       	breq	80005026 <fat_read_file+0xa6>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80004fd0:	2f f6       	sub	r6,-1
80004fd2:	c2 a8       	rjmp	80005026 <fat_read_file+0xa6>
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80004fd4:	49 d8       	lddpc	r8,80005048 <fat_read_file+0xc8>
80004fd6:	49 a9       	lddpc	r9,8000503c <fat_read_file+0xbc>
80004fd8:	72 19       	ld.w	r9,r9[0x4]
80004fda:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80004fdc:	91 16       	st.w	r8[0x4],r6
      if( fat_cluster_list( mode, true ) )
         return true;      // Get or clear segment OK
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
80004fde:	30 1b       	mov	r11,1
80004fe0:	16 9c       	mov	r12,r11
80004fe2:	f0 1f 00 1b 	mcall	8000504c <fat_read_file+0xcc>
80004fe6:	c1 e0       	breq	80005022 <fat_read_file+0xa2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
80004fe8:	49 88       	lddpc	r8,80005048 <fat_read_file+0xc8>
80004fea:	70 09       	ld.w	r9,r8[0x0]
80004fec:	49 98       	lddpc	r8,80005050 <fat_read_file+0xd0>
80004fee:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( true ) )
80004ff0:	30 1c       	mov	r12,1
80004ff2:	f0 1f 00 19 	mcall	80005054 <fat_read_file+0xd4>
80004ff6:	c1 60       	breq	80005022 <fat_read_file+0xa2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
80004ff8:	49 28       	lddpc	r8,80005040 <fat_read_file+0xc0>
80004ffa:	49 19       	lddpc	r9,8000503c <fat_read_file+0xbc>
80004ffc:	72 19       	ld.w	r9,r9[0x4]
80004ffe:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
80005000:	91 46       	st.w	r8[0x10],r6
80005002:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
80005006:	30 38       	mov	r8,3
80005008:	f0 07 18 00 	cp.b	r7,r8
8000500c:	c0 b1       	brne	80005022 <fat_read_file+0xa2>
8000500e:	49 38       	lddpc	r8,80005058 <fat_read_file+0xd8>
80005010:	11 89       	ld.ub	r9,r8[0x0]
80005012:	31 a8       	mov	r8,26
80005014:	f0 09 18 00 	cp.b	r9,r8
80005018:	5f 0c       	sreq	r12
8000501a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000501e:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80005022:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80005026:	48 98       	lddpc	r8,80005048 <fat_read_file+0xc8>
80005028:	48 59       	lddpc	r9,8000503c <fat_read_file+0xbc>
8000502a:	72 19       	ld.w	r9,r9[0x4]
8000502c:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
8000502e:	91 16       	st.w	r8[0x4],r6
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
80005030:	30 1b       	mov	r11,1
80005032:	0e 9c       	mov	r12,r7
80005034:	f0 1f 00 06 	mcall	8000504c <fat_read_file+0xcc>
80005038:	ce 70       	breq	80005006 <fat_read_file+0x86>
8000503a:	cf 2b       	rjmp	8000501e <fat_read_file+0x9e>
8000503c:	00 00       	add	r0,r0
8000503e:	04 ac       	st.w	r2++,r12
80005040:	00 00       	add	r0,r0
80005042:	07 74       	ld.ub	r4,--r3
80005044:	00 00       	add	r0,r0
80005046:	06 ec       	st.h	--r3,r12
80005048:	00 00       	add	r0,r0
8000504a:	07 94       	ld.ub	r4,r3[0x1]
8000504c:	80 00       	ld.sh	r0,r0[0x0]
8000504e:	4c 24       	lddpc	r4,80005154 <fat_check_mount+0x4>
80005050:	00 00       	add	r0,r0
80005052:	04 a8       	st.w	r2++,r8
80005054:	80 00       	ld.sh	r0,r0[0x0]
80005056:	48 cc       	lddpc	r12,80005084 <fat_check_device+0x28>
80005058:	00 00       	add	r0,r0
8000505a:	07 3c       	ld.ub	r12,r3++

8000505c <fat_check_device>:
//! @verbatim
//! This function updates all navigator datas when the device state change.
//! @endverbatim
//!
Bool  fat_check_device( void )
{
8000505c:	d4 31       	pushm	r0-r7,lr
   uint8_t i;
#endif
   Ctrl_status status;
   
   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
8000505e:	4a 28       	lddpc	r8,800050e4 <fat_check_device+0x88>
80005060:	11 89       	ld.ub	r9,r8[0x0]
80005062:	30 08       	mov	r8,0
80005064:	f0 09 18 00 	cp.b	r9,r8
80005068:	c3 c1       	brne	800050e0 <fat_check_device+0x84>
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
8000506a:	4a 08       	lddpc	r8,800050e8 <fat_check_device+0x8c>
8000506c:	11 89       	ld.ub	r9,r8[0x0]
8000506e:	3f f8       	mov	r8,-1
80005070:	f0 09 18 00 	cp.b	r9,r8
80005074:	c0 51       	brne	8000507e <fat_check_device+0x22>
   {
      fs_g_status = FS_ERR_HW;
80005076:	30 19       	mov	r9,1
80005078:	49 d8       	lddpc	r8,800050ec <fat_check_device+0x90>
8000507a:	b0 89       	st.b	r8[0x0],r9
8000507c:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;                                // No device selected
8000507e:	30 02       	mov	r2,0
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80005080:	49 a5       	lddpc	r5,800050e8 <fat_check_device+0x8c>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80005082:	49 c1       	lddpc	r1,800050f0 <fat_check_device+0x94>
80005084:	30 06       	mov	r6,0
      Fat_file_close();                            // By default the file is not open
80005086:	49 c0       	lddpc	r0,800050f4 <fat_check_device+0x98>
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80005088:	49 c4       	lddpc	r4,800050f8 <fat_check_device+0x9c>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
8000508a:	49 d3       	lddpc	r3,800050fc <fat_check_device+0xa0>
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
8000508c:	0b 8c       	ld.ub	r12,r5[0x0]
8000508e:	f0 1f 00 1d 	mcall	80005100 <fat_check_device+0xa4>
80005092:	18 97       	mov	r7,r12
      if( CTRL_GOOD       == status )
80005094:	c2 60       	breq	800050e0 <fat_check_device+0x84>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80005096:	a2 86       	st.b	r1[0x0],r6
      Fat_file_close();                            // By default the file is not open
80005098:	a0 86       	st.b	r0[0x0],r6
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
8000509a:	0b 88       	ld.ub	r8,r5[0x0]
8000509c:	09 89       	ld.ub	r9,r4[0x0]
8000509e:	f0 09 18 00 	cp.b	r9,r8
800050a2:	c0 51       	brne	800050ac <fat_check_device+0x50>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
800050a4:	49 89       	lddpc	r9,80005104 <fat_check_device+0xa8>
800050a6:	b2 86       	st.b	r9[0x0],r6
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
800050a8:	49 89       	lddpc	r9,80005108 <fat_check_device+0xac>
800050aa:	b2 86       	st.b	r9[0x0],r6
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
800050ac:	07 89       	ld.ub	r9,r3[0x0]
800050ae:	f0 09 18 00 	cp.b	r9,r8
800050b2:	c0 31       	brne	800050b8 <fat_check_device+0x5c>
      {
         fat_cache_reset();
800050b4:	f0 1f 00 16 	mcall	8000510c <fat_check_device+0xb0>
      }
      fat_cache_clusterlist_reset();
800050b8:	f0 1f 00 16 	mcall	80005110 <fat_check_device+0xb4>

      fs_g_status = FS_ERR_HW;                     // By default HW error
800050bc:	30 18       	mov	r8,1
800050be:	48 c9       	lddpc	r9,800050ec <fat_check_device+0x90>
800050c0:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
800050c2:	58 37       	cp.w	r7,3
800050c4:	c0 81       	brne	800050d4 <fat_check_device+0x78>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
800050c6:	10 02       	add	r2,r8
800050c8:	5c 52       	castu.b	r2
800050ca:	36 48       	mov	r8,100
800050cc:	f0 02 18 00 	cp.b	r2,r8
800050d0:	cd e1       	brne	8000508c <fat_check_device+0x30>
800050d2:	c0 88       	rjmp	800050e2 <fat_check_device+0x86>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
800050d4:	58 27       	cp.w	r7,2
800050d6:	c0 61       	brne	800050e2 <fat_check_device+0x86>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
800050d8:	31 89       	mov	r9,24
800050da:	48 58       	lddpc	r8,800050ec <fat_check_device+0x90>
800050dc:	b0 89       	st.b	r8[0x0],r9
800050de:	d8 3a       	popm	r0-r7,pc,r12=0
800050e0:	da 3a       	popm	r0-r7,pc,r12=1
800050e2:	d8 3a       	popm	r0-r7,pc,r12=0
800050e4:	00 00       	add	r0,r0
800050e6:	04 be       	st.h	r2++,lr
800050e8:	00 00       	add	r0,r0
800050ea:	06 ec       	st.h	--r3,r12
800050ec:	00 00       	add	r0,r0
800050ee:	07 3c       	ld.ub	r12,r3++
800050f0:	00 00       	add	r0,r0
800050f2:	07 38       	ld.ub	r8,r3++
800050f4:	00 00       	add	r0,r0
800050f6:	04 ac       	st.w	r2++,r12
800050f8:	00 00       	add	r0,r0
800050fa:	07 40       	ld.w	r0,--r3
800050fc:	00 00       	add	r0,r0
800050fe:	07 74       	ld.ub	r4,--r3
80005100:	80 00       	ld.sh	r0,r0[0x0]
80005102:	6d 10       	ld.w	r0,r6[0x44]
80005104:	00 00       	add	r0,r0
80005106:	07 34       	ld.ub	r4,r3++
80005108:	00 00       	add	r0,r0
8000510a:	07 24       	ld.uh	r4,r3++
8000510c:	80 00       	ld.sh	r0,r0[0x0]
8000510e:	46 94       	lddsp	r4,sp[0x1a4]
80005110:	80 00       	ld.sh	r0,r0[0x0]
80005112:	40 3c       	lddsp	r12,sp[0xc]

80005114 <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
Bool  fat_check_noopen( void )
{
80005114:	d4 01       	pushm	lr
   if( !fat_check_device() )
80005116:	f0 1f 00 0b 	mcall	80005140 <fat_check_noopen+0x2c>
8000511a:	c1 10       	breq	8000513c <fat_check_noopen+0x28>
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
8000511c:	48 a8       	lddpc	r8,80005144 <fat_check_noopen+0x30>
8000511e:	11 89       	ld.ub	r9,r8[0x0]
80005120:	30 08       	mov	r8,0
80005122:	f0 09 18 00 	cp.b	r9,r8
80005126:	c0 b0       	breq	8000513c <fat_check_noopen+0x28>
      return true;
   if( Fat_file_is_open() )
80005128:	48 88       	lddpc	r8,80005148 <fat_check_noopen+0x34>
8000512a:	11 89       	ld.ub	r9,r8[0x0]
8000512c:	30 08       	mov	r8,0
8000512e:	f0 09 18 00 	cp.b	r9,r8
80005132:	c0 50       	breq	8000513c <fat_check_noopen+0x28>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80005134:	30 59       	mov	r9,5
80005136:	48 68       	lddpc	r8,8000514c <fat_check_noopen+0x38>
80005138:	b0 89       	st.b	r8[0x0],r9
8000513a:	d8 0a       	popm	pc,r12=0
      return false;
8000513c:	da 0a       	popm	pc,r12=1
8000513e:	00 00       	add	r0,r0
80005140:	80 00       	ld.sh	r0,r0[0x0]
80005142:	50 5c       	stdsp	sp[0x14],r12
80005144:	00 00       	add	r0,r0
80005146:	07 38       	ld.ub	r8,r3++
80005148:	00 00       	add	r0,r0
8000514a:	04 ac       	st.w	r2++,r12
8000514c:	00 00       	add	r0,r0
8000514e:	07 3c       	ld.ub	r12,r3++

80005150 <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
Bool  fat_check_mount( void )
{
80005150:	d4 01       	pushm	lr
   if( !fat_check_device() )
80005152:	f0 1f 00 0a 	mcall	80005178 <fat_check_mount+0x28>
80005156:	c0 f0       	breq	80005174 <fat_check_mount+0x24>
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80005158:	48 98       	lddpc	r8,8000517c <fat_check_mount+0x2c>
8000515a:	11 89       	ld.ub	r9,r8[0x0]
8000515c:	30 08       	mov	r8,0
8000515e:	f0 09 18 00 	cp.b	r9,r8
80005162:	c0 81       	brne	80005172 <fat_check_mount+0x22>
   {
      if( !fat_mount() )
80005164:	f0 1f 00 07 	mcall	80005180 <fat_check_mount+0x30>
80005168:	c0 51       	brne	80005172 <fat_check_mount+0x22>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
8000516a:	30 e9       	mov	r9,14
8000516c:	48 68       	lddpc	r8,80005184 <fat_check_mount+0x34>
8000516e:	b0 89       	st.b	r8[0x0],r9
         return false;
80005170:	d8 02       	popm	pc
80005172:	30 1c       	mov	r12,1
      }
   }
   return true;
}
80005174:	d8 02       	popm	pc
80005176:	00 00       	add	r0,r0
80005178:	80 00       	ld.sh	r0,r0[0x0]
8000517a:	50 5c       	stdsp	sp[0x14],r12
8000517c:	00 00       	add	r0,r0
8000517e:	07 38       	ld.ub	r8,r3++
80005180:	80 00       	ld.sh	r0,r0[0x0]
80005182:	5c 58       	castu.b	r8
80005184:	00 00       	add	r0,r0
80005186:	07 3c       	ld.ub	r12,r3++

80005188 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
Bool  fat_check_mount_select( void )
{
80005188:	d4 01       	pushm	lr
   if( !fat_check_mount() )
8000518a:	f0 1f 00 04 	mcall	80005198 <fat_check_mount_select+0x10>
8000518e:	c0 30       	breq	80005194 <fat_check_mount_select+0xc>
      return false;
   return fat_check_select();
80005190:	f0 1f 00 03 	mcall	8000519c <fat_check_mount_select+0x14>
}
80005194:	d8 02       	popm	pc
80005196:	00 00       	add	r0,r0
80005198:	80 00       	ld.sh	r0,r0[0x0]
8000519a:	51 50       	stdsp	sp[0x54],r0
8000519c:	80 00       	ld.sh	r0,r0[0x0]
8000519e:	3f a0       	mov	r0,-6

800051a0 <fat_check_mount_select_open>:
//!
//! @return    true  partition mounted and a file is opened
//! @return    false otherwise
//!
Bool  fat_check_mount_select_open( void )
{
800051a0:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800051a2:	f0 1f 00 06 	mcall	800051b8 <fat_check_mount_select_open+0x18>
800051a6:	c0 70       	breq	800051b4 <fat_check_mount_select_open+0x14>
      return false;
   if( !fat_check_select() )
800051a8:	f0 1f 00 05 	mcall	800051bc <fat_check_mount_select_open+0x1c>
800051ac:	c0 40       	breq	800051b4 <fat_check_mount_select_open+0x14>
      return false;
   return fat_check_open();
800051ae:	f0 1f 00 05 	mcall	800051c0 <fat_check_mount_select_open+0x20>
800051b2:	d8 02       	popm	pc
800051b4:	d8 0a       	popm	pc,r12=0
800051b6:	00 00       	add	r0,r0
800051b8:	80 00       	ld.sh	r0,r0[0x0]
800051ba:	51 50       	stdsp	sp[0x54],r0
800051bc:	80 00       	ld.sh	r0,r0[0x0]
800051be:	3f a0       	mov	r0,-6
800051c0:	80 00       	ld.sh	r0,r0[0x0]
800051c2:	3f 80       	mov	r0,-8

800051c4 <fat_check_mount_select_noopen>:
//!
//! @return    true  partition mounted and no file is opened and a file is selected
//! @return    false otherwise
//!
Bool  fat_check_mount_select_noopen( void )
{
800051c4:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800051c6:	f0 1f 00 06 	mcall	800051dc <fat_check_mount_select_noopen+0x18>
800051ca:	c0 70       	breq	800051d8 <fat_check_mount_select_noopen+0x14>
      return false;
   if( !fat_check_select() )
800051cc:	f0 1f 00 05 	mcall	800051e0 <fat_check_mount_select_noopen+0x1c>
800051d0:	c0 40       	breq	800051d8 <fat_check_mount_select_noopen+0x14>
      return false;
   return fat_check_noopen();
800051d2:	f0 1f 00 05 	mcall	800051e4 <fat_check_mount_select_noopen+0x20>
800051d6:	d8 02       	popm	pc
800051d8:	d8 0a       	popm	pc,r12=0
800051da:	00 00       	add	r0,r0
800051dc:	80 00       	ld.sh	r0,r0[0x0]
800051de:	51 50       	stdsp	sp[0x54],r0
800051e0:	80 00       	ld.sh	r0,r0[0x0]
800051e2:	3f a0       	mov	r0,-6
800051e4:	80 00       	ld.sh	r0,r0[0x0]
800051e6:	51 14       	stdsp	sp[0x44],r4

800051e8 <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
Bool  fat_check_mount_noopen( void )
{
800051e8:	d4 01       	pushm	lr
   if( !fat_check_mount() )
800051ea:	f0 1f 00 04 	mcall	800051f8 <fat_check_mount_noopen+0x10>
800051ee:	c0 30       	breq	800051f4 <fat_check_mount_noopen+0xc>
      return false;
   return fat_check_noopen();
800051f0:	f0 1f 00 03 	mcall	800051fc <fat_check_mount_noopen+0x14>
}
800051f4:	d8 02       	popm	pc
800051f6:	00 00       	add	r0,r0
800051f8:	80 00       	ld.sh	r0,r0[0x0]
800051fa:	51 50       	stdsp	sp[0x54],r0
800051fc:	80 00       	ld.sh	r0,r0[0x0]
800051fe:	51 14       	stdsp	sp[0x44],r4

80005200 <fat_translate_char_shortname>:
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
80005200:	f8 c9 00 21 	sub	r9,r12,33
80005204:	35 d8       	mov	r8,93
80005206:	f0 09 18 00 	cp.b	r9,r8
8000520a:	e0 8b 00 1d 	brhi	80005244 <fat_translate_char_shortname+0x44>
      return 0;
   if( ('a'<=character) && (character<='z') )
8000520e:	f8 c9 00 61 	sub	r9,r12,97
80005212:	31 98       	mov	r8,25
80005214:	f0 09 18 00 	cp.b	r9,r8
80005218:	e0 88 00 07 	brls	80005226 <fat_translate_char_shortname+0x26>
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
8000521c:	32 b8       	mov	r8,43
8000521e:	f0 0c 18 00 	cp.b	r12,r8
80005222:	c0 51       	brne	8000522c <fat_translate_char_shortname+0x2c>
80005224:	c1 08       	rjmp	80005244 <fat_translate_char_shortname+0x44>

   if( (character<=' ') || ('~'<character) )
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
80005226:	22 0c       	sub	r12,32
80005228:	5c 5c       	castu.b	r12
8000522a:	5e fc       	retal	r12
8000522c:	48 7a       	lddpc	r10,80005248 <fat_translate_char_shortname+0x48>
8000522e:	f4 c8 ff ff 	sub	r8,r10,-1
//! @param     character   character to translate
//!
//! @return    character translated <br>
//!            if no supported then 0
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
80005232:	2f 9a       	sub	r10,-7
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
   {
      if( character == fs_s_execption_char[u8_j] )
80005234:	11 89       	ld.ub	r9,r8[0x0]
80005236:	f8 09 18 00 	cp.b	r9,r12
8000523a:	c0 50       	breq	80005244 <fat_translate_char_shortname+0x44>
8000523c:	2f f8       	sub	r8,-1
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
8000523e:	14 38       	cp.w	r8,r10
80005240:	cf a1       	brne	80005234 <fat_translate_char_shortname+0x34>
80005242:	5e fc       	retal	r12
80005244:	5e fd       	retal	0
80005246:	00 00       	add	r0,r0
80005248:	80 00       	ld.sh	r0,r0[0x0]
8000524a:	80 dc       	ld.uh	r12,r0[0xa]

8000524c <fat_clear_info_fat_mod>:
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
8000524c:	3f f9       	mov	r9,-1
8000524e:	48 48       	lddpc	r8,8000525c <fat_clear_info_fat_mod+0x10>
80005250:	91 09       	st.w	r8[0x0],r9
   fs_g_u32_last_mod_fat = 0;
80005252:	30 09       	mov	r9,0
80005254:	48 38       	lddpc	r8,80005260 <fat_clear_info_fat_mod+0x14>
80005256:	91 09       	st.w	r8[0x0],r9
}
80005258:	5e fc       	retal	r12
8000525a:	00 00       	add	r0,r0
8000525c:	00 00       	add	r0,r0
8000525e:	07 20       	ld.uh	r0,r3++
80005260:	00 00       	add	r0,r0
80005262:	04 e8       	st.h	--r2,r8

80005264 <fat_clear_cluster>:
//! IN :
//!   fs_g_seg.u32_addr          Cluster value to clear
//! @endverbatim
//!
Bool  fat_clear_cluster( void )
{
80005264:	d4 21       	pushm	r4-r7,lr
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
80005266:	30 0b       	mov	r11,0
80005268:	49 58       	lddpc	r8,800052bc <fat_clear_cluster+0x58>
8000526a:	91 1b       	st.w	r8[0x4],r11
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
8000526c:	30 2c       	mov	r12,2
8000526e:	f0 1f 00 15 	mcall	800052c0 <fat_clear_cluster+0x5c>
80005272:	c2 30       	breq	800052b8 <fat_clear_cluster+0x54>
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
80005274:	49 48       	lddpc	r8,800052c4 <fat_clear_cluster+0x60>
80005276:	11 98       	ld.ub	r8,r8[0x1]
80005278:	49 19       	lddpc	r9,800052bc <fat_clear_cluster+0x58>
8000527a:	72 0a       	ld.w	r10,r9[0x0]
8000527c:	20 1a       	sub	r10,1
8000527e:	10 0a       	add	r10,r8
80005280:	49 29       	lddpc	r9,800052c8 <fat_clear_cluster+0x64>
80005282:	93 0a       	st.w	r9[0x0],r10
   for(  u8_loop = 0
80005284:	58 08       	cp.w	r8,0
80005286:	c1 a0       	breq	800052ba <fat_clear_cluster+0x56>
80005288:	30 07       	mov	r7,0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector inforamtion but don't read data from memory
      if( !fat_cache_read_sector( false ))
8000528a:	0e 94       	mov	r4,r7
      if(0 == u8_loop)
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
      fs_gu32_addrsector--;         // go to previous sector
8000528c:	12 96       	mov	r6,r9
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
8000528e:	48 e5       	lddpc	r5,800052c4 <fat_clear_cluster+0x60>
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector inforamtion but don't read data from memory
      if( !fat_cache_read_sector( false ))
80005290:	08 9c       	mov	r12,r4
80005292:	f0 1f 00 0f 	mcall	800052cc <fat_clear_cluster+0x68>
80005296:	c1 10       	breq	800052b8 <fat_clear_cluster+0x54>
         return false;

      if(0 == u8_loop)
80005298:	58 07       	cp.w	r7,0
8000529a:	c0 31       	brne	800052a0 <fat_clear_cluster+0x3c>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
8000529c:	f0 1f 00 0d 	mcall	800052d0 <fat_clear_cluster+0x6c>
      }
      fat_cache_mark_sector_as_dirty();
800052a0:	f0 1f 00 0d 	mcall	800052d4 <fat_clear_cluster+0x70>
      fs_gu32_addrsector--;         // go to previous sector
800052a4:	6c 08       	ld.w	r8,r6[0x0]
800052a6:	20 18       	sub	r8,1
800052a8:	8d 08       	st.w	r6[0x0],r8

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
800052aa:	2f f7       	sub	r7,-1
800052ac:	5c 57       	castu.b	r7
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
800052ae:	0b 98       	ld.ub	r8,r5[0x1]
800052b0:	ee 08 18 00 	cp.b	r8,r7
800052b4:	ce e1       	brne	80005290 <fat_clear_cluster+0x2c>
800052b6:	c0 28       	rjmp	800052ba <fat_clear_cluster+0x56>
800052b8:	d8 2a       	popm	r4-r7,pc,r12=0
800052ba:	da 2a       	popm	r4-r7,pc,r12=1
800052bc:	00 00       	add	r0,r0
800052be:	07 94       	ld.ub	r4,r3[0x1]
800052c0:	80 00       	ld.sh	r0,r0[0x0]
800052c2:	4c 24       	lddpc	r4,800053c8 <fat_initialize_dir+0x7c>
800052c4:	00 00       	add	r0,r0
800052c6:	06 ec       	st.h	--r3,r12
800052c8:	00 00       	add	r0,r0
800052ca:	04 a8       	st.w	r2++,r8
800052cc:	80 00       	ld.sh	r0,r0[0x0]
800052ce:	48 cc       	lddpc	r12,800052fc <fat_update_fat2+0x24>
800052d0:	80 00       	ld.sh	r0,r0[0x0]
800052d2:	48 b4       	lddpc	r4,800052fc <fat_update_fat2+0x24>
800052d4:	80 00       	ld.sh	r0,r0[0x0]
800052d6:	46 ac       	lddsp	r12,sp[0x1a8]

800052d8 <fat_update_fat2>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
Bool  fat_update_fat2( void )
{
800052d8:	eb cd 40 fc 	pushm	r2-r7,lr
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
800052dc:	49 68       	lddpc	r8,80005334 <fat_update_fat2+0x5c>
800052de:	70 08       	ld.w	r8,r8[0x0]
800052e0:	49 69       	lddpc	r9,80005338 <fat_update_fat2+0x60>
800052e2:	72 09       	ld.w	r9,r9[0x0]
800052e4:	12 38       	cp.w	r8,r9
800052e6:	e0 8b 00 25 	brhi	80005330 <fat_update_fat2+0x58>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
800052ea:	49 55       	lddpc	r5,8000533c <fat_update_fat2+0x64>
800052ec:	49 57       	lddpc	r7,80005340 <fat_update_fat2+0x68>
     // Read FAT1
      if( !fat_cache_read_sector( true ))
800052ee:	30 13       	mov	r3,1
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
800052f0:	49 16       	lddpc	r6,80005334 <fat_update_fat2+0x5c>
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
800052f2:	30 02       	mov	r2,0
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
Bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
800052f4:	49 14       	lddpc	r4,80005338 <fat_update_fat2+0x60>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
800052f6:	6e 49       	ld.w	r9,r7[0x10]
800052f8:	12 08       	add	r8,r9
800052fa:	8b 08       	st.w	r5[0x0],r8
     // Read FAT1
      if( !fat_cache_read_sector( true ))
800052fc:	06 9c       	mov	r12,r3
800052fe:	f0 1f 00 12 	mcall	80005344 <fat_update_fat2+0x6c>
80005302:	c1 50       	breq	8000532c <fat_update_fat2+0x54>
         return false;
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
80005304:	6e 19       	ld.w	r9,r7[0x4]
80005306:	6e 48       	ld.w	r8,r7[0x10]
80005308:	f2 08 00 08 	add	r8,r9,r8
8000530c:	6c 09       	ld.w	r9,r6[0x0]
8000530e:	12 08       	add	r8,r9
80005310:	8b 08       	st.w	r5[0x0],r8
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
80005312:	04 9c       	mov	r12,r2
80005314:	f0 1f 00 0c 	mcall	80005344 <fat_update_fat2+0x6c>
80005318:	c0 a0       	breq	8000532c <fat_update_fat2+0x54>
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
8000531a:	f0 1f 00 0c 	mcall	80005348 <fat_update_fat2+0x70>
     fs_g_u32_first_mod_fat++;
8000531e:	6c 08       	ld.w	r8,r6[0x0]
80005320:	2f f8       	sub	r8,-1
80005322:	8d 08       	st.w	r6[0x0],r8
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
Bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80005324:	68 09       	ld.w	r9,r4[0x0]
80005326:	10 39       	cp.w	r9,r8
80005328:	ce 72       	brcc	800052f6 <fat_update_fat2+0x1e>
8000532a:	c0 38       	rjmp	80005330 <fat_update_fat2+0x58>
8000532c:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80005330:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
80005334:	00 00       	add	r0,r0
80005336:	07 20       	ld.uh	r0,r3++
80005338:	00 00       	add	r0,r0
8000533a:	04 e8       	st.h	--r2,r8
8000533c:	00 00       	add	r0,r0
8000533e:	04 a8       	st.w	r2++,r8
80005340:	00 00       	add	r0,r0
80005342:	06 ec       	st.h	--r3,r12
80005344:	80 00       	ld.sh	r0,r0[0x0]
80005346:	48 cc       	lddpc	r12,80005374 <fat_initialize_dir+0x28>
80005348:	80 00       	ld.sh	r0,r0[0x0]
8000534a:	46 ac       	lddsp	r12,sp[0x1a8]

8000534c <fat_initialize_dir>:
//! OUT:
//!   update the sector cache with init directory datas
//! @endverbatim
//!
Bool  fat_initialize_dir( void )
{
8000534c:	d4 01       	pushm	lr
   uint8_t u8_i;

   // Clear the cluster corresponding at directory
   if( !fat_clear_cluster())
8000534e:	f0 1f 00 21 	mcall	800053d0 <fat_initialize_dir+0x84>
80005352:	c3 e0       	breq	800053ce <fat_initialize_dir+0x82>
      return false;
   fat_cache_mark_sector_as_dirty();
80005354:	f0 1f 00 20 	mcall	800053d4 <fat_initialize_dir+0x88>
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
80005358:	4a 0b       	lddpc	r11,800053d8 <fat_initialize_dir+0x8c>
8000535a:	16 98       	mov	r8,r11
8000535c:	32 e9       	mov	r9,46
8000535e:	10 c9       	st.b	r8++,r9
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory datas
//! @endverbatim
//!
Bool  fat_initialize_dir( void )
80005360:	f6 ca ff f5 	sub	r10,r11,-11
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
      fs_g_sector[u8_i]=' ';
80005364:	32 09       	mov	r9,32
80005366:	10 c9       	st.b	r8++,r9
   fat_cache_mark_sector_as_dirty();
   // here, the internal cache is the first sector of the cluster

   // Create the dot "." entry, this one is a directory that points to itself
   fs_g_sector[0]='.';
   for( u8_i=1 ; u8_i<11 ; u8_i++ )
80005368:	14 38       	cp.w	r8,r10
8000536a:	cf e1       	brne	80005366 <fat_initialize_dir+0x1a>
      fs_g_sector[u8_i]=' ';
   fs_g_sector[11]=FS_ATTR_DIRECTORY;
8000536c:	49 b8       	lddpc	r8,800053d8 <fat_initialize_dir+0x8c>
8000536e:	31 09       	mov	r9,16
80005370:	f1 69 00 0b 	st.b	r8[11],r9
   fs_g_sector[26]= LSB0( fs_g_nav_entry.u32_cluster );
80005374:	49 a9       	lddpc	r9,800053dc <fat_initialize_dir+0x90>
80005376:	2f c9       	sub	r9,-4
80005378:	13 ba       	ld.ub	r10,r9[0x3]
8000537a:	f1 6a 00 1a 	st.b	r8[26],r10
   fs_g_sector[27]= LSB1( fs_g_nav_entry.u32_cluster );
8000537e:	13 aa       	ld.ub	r10,r9[0x2]
80005380:	f1 6a 00 1b 	st.b	r8[27],r10
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
80005384:	13 9a       	ld.ub	r10,r9[0x1]
80005386:	f1 6a 00 14 	st.b	r8[20],r10
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
8000538a:	13 89       	ld.ub	r9,r9[0x0]
8000538c:	f1 69 00 15 	st.b	r8[21],r9
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
80005390:	32 e9       	mov	r9,46
80005392:	f1 69 00 20 	st.b	r8[32],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
80005396:	f1 69 00 21 	st.b	r8[33],r9
8000539a:	2d e8       	sub	r8,-34
//!   fs_g_seg.u32_addr          cluster value of a directory
//! OUT:
//!   update the sector cache with init directory datas
//! @endverbatim
//!
Bool  fat_initialize_dir( void )
8000539c:	f6 ca ff d5 	sub	r10,r11,-43
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
800053a0:	32 09       	mov	r9,32
800053a2:	10 c9       	st.b	r8++,r9
   fs_g_sector[20]= LSB2( fs_g_nav_entry.u32_cluster );
   fs_g_sector[21]= LSB3( fs_g_nav_entry.u32_cluster );
   // Create the dotdot ".." entry, this one points to the starting cluster of the parent directory
   fs_g_sector[FS_SIZE_FILE_ENTRY+0]='.';
   fs_g_sector[FS_SIZE_FILE_ENTRY+1]='.';
   for( u8_i=2 ; u8_i<11 ; u8_i++ )
800053a4:	14 38       	cp.w	r8,r10
800053a6:	cf e1       	brne	800053a2 <fat_initialize_dir+0x56>
      fs_g_sector[FS_SIZE_FILE_ENTRY+u8_i]=' ';
   fs_g_sector[FS_SIZE_FILE_ENTRY+11]=FS_ATTR_DIRECTORY;
800053a8:	48 c8       	lddpc	r8,800053d8 <fat_initialize_dir+0x8c>
800053aa:	31 09       	mov	r9,16
800053ac:	f1 69 00 2b 	st.b	r8[43],r9
   fs_g_sector[FS_SIZE_FILE_ENTRY+26]= LSB0( fs_g_nav.u32_cluster_sel_dir );
800053b0:	48 c9       	lddpc	r9,800053e0 <fat_initialize_dir+0x94>
800053b2:	2e 09       	sub	r9,-32
800053b4:	13 ba       	ld.ub	r10,r9[0x3]
800053b6:	f1 6a 00 3a 	st.b	r8[58],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+27]= LSB1( fs_g_nav.u32_cluster_sel_dir );
800053ba:	13 aa       	ld.ub	r10,r9[0x2]
800053bc:	f1 6a 00 3b 	st.b	r8[59],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+20]= LSB2( fs_g_nav.u32_cluster_sel_dir );
800053c0:	13 9a       	ld.ub	r10,r9[0x1]
800053c2:	f1 6a 00 34 	st.b	r8[52],r10
   fs_g_sector[FS_SIZE_FILE_ENTRY+21]= LSB3( fs_g_nav.u32_cluster_sel_dir );
800053c6:	13 89       	ld.ub	r9,r9[0x0]
800053c8:	f1 69 00 35 	st.b	r8[53],r9
800053cc:	30 1c       	mov	r12,1

   return true;
}
800053ce:	d8 02       	popm	pc
800053d0:	80 00       	ld.sh	r0,r0[0x0]
800053d2:	52 64       	stdsp	sp[0x98],r4
800053d4:	80 00       	ld.sh	r0,r0[0x0]
800053d6:	46 ac       	lddsp	r12,sp[0x1a8]
800053d8:	00 00       	add	r0,r0
800053da:	04 ec       	st.h	--r2,r12
800053dc:	00 00       	add	r0,r0
800053de:	04 ac       	st.w	r2++,r12
800053e0:	00 00       	add	r0,r0
800053e2:	06 ec       	st.h	--r3,r12

800053e4 <fat_create_long_name_entry>:
//! @verbatim
//! OUT: Update the entry in internal cache sector with a new long name entry
//! @endverbatim
//!
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
800053e4:	d4 31       	pushm	r0-r7,lr
800053e6:	20 5d       	sub	sp,20
800053e8:	18 97       	mov	r7,r12
800053ea:	50 3b       	stdsp	sp[0xc],r11
800053ec:	14 96       	mov	r6,r10
   PTR_CACHE ptr_entry;
   Bool b_end_of_name = false;

   fat_cache_mark_sector_as_dirty();
800053ee:	f0 1f 00 30 	mcall	800054ac <fat_create_long_name_entry+0xc8>
   ptr_entry = fat_get_ptr_entry();
800053f2:	f0 1f 00 30 	mcall	800054b0 <fat_create_long_name_entry+0xcc>
   *ptr_entry = u8_id;
800053f6:	18 c6       	st.b	r12++,r6
   ptr_entry++;   // The long name start at offset 1 of the entry file
800053f8:	30 01       	mov	r1,0
800053fa:	30 18       	mov	r8,1

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
800053fc:	30 b9       	mov	r9,11
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
800053fe:	30 f3       	mov	r3,15
         continue;
      }
      if( (12 == u8_id)
80005400:	30 c6       	mov	r6,12
80005402:	31 ab       	mov	r11,26
80005404:	30 0a       	mov	r10,0
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80005406:	31 fe       	mov	lr,31
      if( 11 == u8_id)
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
         continue;
      }
      if( (12 == u8_id)
80005408:	31 b5       	mov	r5,27
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
8000540a:	30 d2       	mov	r2,13
         u8_id++;
         sz_name += (Is_unicode? 2 : 1 );
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
8000540c:	50 01       	stdsp	sp[0x0],r1
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
   {
      // fields with no character
      if( 11 == u8_id)
8000540e:	f2 08 18 00 	cp.b	r8,r9
80005412:	c0 31       	brne	80005418 <fat_create_long_name_entry+0x34>
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // attribut field
80005414:	b8 83       	st.b	r12[0x0],r3
         continue;
80005416:	c4 58       	rjmp	800054a0 <fat_create_long_name_entry+0xbc>
      }
      if( (12 == u8_id)
80005418:	ec 08 18 00 	cp.b	r8,r6
8000541c:	5f 00       	sreq	r0
8000541e:	f6 08 18 00 	cp.b	r8,r11
80005422:	5f 04       	sreq	r4
80005424:	08 40       	or	r0,r4
80005426:	00 94       	mov	r4,r0
80005428:	f4 00 18 00 	cp.b	r0,r10
8000542c:	c3 21       	brne	80005490 <fat_create_long_name_entry+0xac>
8000542e:	ea 08 18 00 	cp.b	r8,r5
80005432:	c3 70       	breq	800054a0 <fat_create_long_name_entry+0xbc>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80005434:	e4 08 18 00 	cp.b	r8,r2
80005438:	c0 41       	brne	80005440 <fat_create_long_name_entry+0x5c>
      {
         *ptr_entry = u8_crc;             // CRC field
8000543a:	40 34       	lddsp	r4,sp[0xc]
8000543c:	b8 84       	st.b	r12[0x0],r4
         continue;
8000543e:	c3 18       	rjmp	800054a0 <fat_create_long_name_entry+0xbc>
      }

      // fields with a character
      if( !b_end_of_name )
80005440:	40 01       	lddsp	r1,sp[0x0]
80005442:	58 01       	cp.w	r1,0
80005444:	c2 41       	brne	8000548c <fat_create_long_name_entry+0xa8>
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
80005446:	0f 84       	ld.ub	r4,r7[0x0]
80005448:	fb 54 00 12 	st.h	sp[18],r4
         }
         if(('\\' == u16_tmp )
8000544c:	35 c1       	mov	r1,92
8000544e:	e2 04 19 00 	cp.h	r4,r1
80005452:	5f 00       	sreq	r0
80005454:	50 20       	stdsp	sp[0x8],r0
80005456:	32 f0       	mov	r0,47
80005458:	e0 04 19 00 	cp.h	r4,r0
8000545c:	5f 01       	sreq	r1
8000545e:	40 20       	lddsp	r0,sp[0x8]
80005460:	02 40       	or	r0,r1
80005462:	f4 00 18 00 	cp.b	r0,r10
80005466:	c0 50       	breq	80005470 <fat_create_long_name_entry+0x8c>
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
80005468:	30 04       	mov	r4,0
8000546a:	fb 54 00 12 	st.h	sp[18],r4
8000546e:	c0 38       	rjmp	80005474 <fat_create_long_name_entry+0x90>
         }
         if( 0 == u16_tmp )
80005470:	58 04       	cp.w	r4,0
80005472:	c0 31       	brne	80005478 <fat_create_long_name_entry+0x94>
80005474:	30 14       	mov	r4,1
80005476:	50 04       	stdsp	sp[0x0],r4
         {
            b_end_of_name = true;
         }
         *ptr_entry = LSB(u16_tmp);
80005478:	fa c4 ff ee 	sub	r4,sp,-18
8000547c:	09 90       	ld.ub	r0,r4[0x1]
8000547e:	18 c0       	st.b	r12++,r0
         ptr_entry++;
         *ptr_entry = MSB(u16_tmp);
80005480:	09 84       	ld.ub	r4,r4[0x0]
80005482:	b8 84       	st.b	r12[0x0],r4
         u8_id++;
80005484:	2f f8       	sub	r8,-1
80005486:	5c 58       	castu.b	r8
         sz_name += (Is_unicode? 2 : 1 );
80005488:	2f f7       	sub	r7,-1
8000548a:	c0 38       	rjmp	80005490 <fat_create_long_name_entry+0xac>
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
8000548c:	3f f1       	mov	r1,-1
8000548e:	b8 81       	st.b	r12[0x0],r1
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80005490:	2f f8       	sub	r8,-1
80005492:	5c 58       	castu.b	r8
80005494:	fc 08 18 00 	cp.b	r8,lr
80005498:	e0 8b 00 08 	brhi	800054a8 <fat_create_long_name_entry+0xc4>
8000549c:	2f fc       	sub	r12,-1
8000549e:	cb 8b       	rjmp	8000540e <fat_create_long_name_entry+0x2a>
800054a0:	2f f8       	sub	r8,-1
800054a2:	5c 58       	castu.b	r8
800054a4:	2f fc       	sub	r12,-1
800054a6:	cb 4b       	rjmp	8000540e <fat_create_long_name_entry+0x2a>
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
      }
   } // end of loop
}
800054a8:	2f bd       	sub	sp,-20
800054aa:	d8 32       	popm	r0-r7,pc
800054ac:	80 00       	ld.sh	r0,r0[0x0]
800054ae:	46 ac       	lddsp	r12,sp[0x1a8]
800054b0:	80 00       	ld.sh	r0,r0[0x0]
800054b2:	43 04       	lddsp	r4,sp[0xc0]

800054b4 <fat_delete_file>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
Bool  fat_delete_file( Bool b_cluster_list )
{
800054b4:	d4 31       	pushm	r0-r7,lr
800054b6:	20 1d       	sub	sp,4
800054b8:	50 0c       	stdsp	sp[0x0],r12
800054ba:	30 03       	mov	r3,0

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
      u8_tmp = ptr_entry[0];

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
800054bc:	30 f4       	mov	r4,15
800054be:	30 05       	mov	r5,0
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
800054c0:	3e 52       	mov	r2,-27
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
800054c2:	49 a6       	lddpc	r6,80005528 <fat_delete_file+0x74>
800054c4:	30 10       	mov	r0,1

   // loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
800054c6:	f0 1f 00 1a 	mcall	8000552c <fat_delete_file+0x78>
800054ca:	c2 d0       	breq	80005524 <fat_delete_file+0x70>
         return false;

      // Get pointer on the current entry
      ptr_entry = fat_get_ptr_entry();
800054cc:	f0 1f 00 19 	mcall	80005530 <fat_delete_file+0x7c>
      u8_tmp = ptr_entry[0];
800054d0:	19 81       	ld.ub	r1,r12[0x0]

      if( (FS_ATTR_LFN_ENTRY != ptr_entry[11])
800054d2:	f8 c7 ff f5 	sub	r7,r12,-11
800054d6:	0f 88       	ld.ub	r8,r7[0x0]
800054d8:	e8 08 18 00 	cp.b	r8,r4
800054dc:	5f 19       	srne	r9
800054de:	ea 03 18 00 	cp.b	r3,r5
800054e2:	5f 18       	srne	r8
800054e4:	f3 e8 00 08 	and	r8,r9,r8
800054e8:	ea 08 18 00 	cp.b	r8,r5
800054ec:	c1 01       	brne	8000550c <fat_delete_file+0x58>
         break;   // Go to delete cluster list
      }

      // Delete entry
      b_short_del = true;
      ptr_entry[0] = FS_ENTRY_DEL;
800054ee:	b8 82       	st.b	r12[0x0],r2
      fat_cache_mark_sector_as_dirty();
800054f0:	f0 1f 00 11 	mcall	80005534 <fat_delete_file+0x80>

      if( (FS_ATTR_LFN_ENTRY == ptr_entry[11])
800054f4:	0f 88       	ld.ub	r8,r7[0x0]
800054f6:	e8 08 18 00 	cp.b	r8,r4
800054fa:	c0 41       	brne	80005502 <fat_delete_file+0x4e>
800054fc:	e2 11 00 40 	andl	r1,0x40,COH
80005500:	c0 61       	brne	8000550c <fat_delete_file+0x58>
         // It is the last entry of long name
         break;   // Go to delete cluster list
      }

      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005502:	8c 18       	ld.sh	r8,r6[0x2]
80005504:	20 18       	sub	r8,1
80005506:	ac 18       	st.h	r6[0x2],r8
80005508:	00 93       	mov	r3,r0
   }  // end of while(1)
8000550a:	cd eb       	rjmp	800054c6 <fat_delete_file+0x12>

   if( b_cluster_list )
8000550c:	40 08       	lddsp	r8,sp[0x0]
8000550e:	58 08       	cp.w	r8,0
80005510:	c0 31       	brne	80005516 <fat_delete_file+0x62>
80005512:	30 1c       	mov	r12,1
80005514:	c0 88       	rjmp	80005524 <fat_delete_file+0x70>
   {
      // Delete cluster list
      fs_g_nav_entry.u32_pos_in_file=0;      // Delete ALL list (start at begining)
80005516:	30 09       	mov	r9,0
80005518:	48 88       	lddpc	r8,80005538 <fat_delete_file+0x84>
8000551a:	91 39       	st.w	r8[0xc],r9
      if( !fat_read_file( FS_CLUST_ACT_CLR ))
8000551c:	30 3c       	mov	r12,3
8000551e:	f0 1f 00 08 	mcall	8000553c <fat_delete_file+0x88>
80005522:	5f 1c       	srne	r12
         return false;
   }

   return true;
}
80005524:	2f fd       	sub	sp,-4
80005526:	d8 32       	popm	r0-r7,pc
80005528:	00 00       	add	r0,r0
8000552a:	07 38       	ld.ub	r8,r3++
8000552c:	80 00       	ld.sh	r0,r0[0x0]
8000552e:	4e fc       	lddpc	r12,800056e8 <fat_allocfreespace+0x40>
80005530:	80 00       	ld.sh	r0,r0[0x0]
80005532:	43 04       	lddsp	r4,sp[0xc0]
80005534:	80 00       	ld.sh	r0,r0[0x0]
80005536:	46 ac       	lddsp	r12,sp[0x1a8]
80005538:	00 00       	add	r0,r0
8000553a:	04 ac       	st.w	r2++,r12
8000553c:	80 00       	ld.sh	r0,r0[0x0]
8000553e:	4f 80       	lddpc	r0,8000571c <fat_allocfreespace+0x74>

80005540 <fat_garbage_collector_entry>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
Bool fat_garbage_collector_entry( void )
{
80005540:	eb cd 40 fc 	pushm	r2-r7,lr
80005544:	20 8d       	sub	sp,32
80005546:	30 06       	mov	r6,0
80005548:	0c 97       	mov	r7,r6

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
8000554a:	4a 95       	lddpc	r5,800055ec <fat_garbage_collector_entry+0xac>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
8000554c:	3e 54       	mov	r4,-27
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
8000554e:	1a 93       	mov	r3,sp
80005550:	32 02       	mov	r2,32

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80005552:	aa 17       	st.h	r5[0x2],r7
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80005554:	f0 1f 00 27 	mcall	800055f0 <fat_garbage_collector_entry+0xb0>
80005558:	c0 81       	brne	80005568 <fat_garbage_collector_entry+0x28>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
8000555a:	4a 78       	lddpc	r8,800055f4 <fat_garbage_collector_entry+0xb4>
8000555c:	11 89       	ld.ub	r9,r8[0x0]
8000555e:	31 a8       	mov	r8,26
80005560:	f0 09 18 00 	cp.b	r9,r8
80005564:	c3 d1       	brne	800055de <fat_garbage_collector_entry+0x9e>
80005566:	c0 68       	rjmp	80005572 <fat_garbage_collector_entry+0x32>
            return false;
         goto fat_garbage_collector_entry_endofdir;
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80005568:	f0 1f 00 24 	mcall	800055f8 <fat_garbage_collector_entry+0xb8>

      if ( FS_ENTRY_END == *ptr_entry )
8000556c:	19 88       	ld.ub	r8,r12[0x0]
8000556e:	58 08       	cp.w	r8,0
80005570:	c1 b1       	brne	800055a6 <fat_garbage_collector_entry+0x66>
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
80005572:	49 f8       	lddpc	r8,800055ec <fat_garbage_collector_entry+0xac>
80005574:	b0 16       	st.h	r8[0x2],r6
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
80005576:	ec 07 19 00 	cp.h	r7,r6
8000557a:	c3 40       	breq	800055e2 <fat_garbage_collector_entry+0xa2>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
8000557c:	32 05       	mov	r5,32
8000557e:	30 04       	mov	r4,0
            fat_cache_mark_sector_as_dirty();
            fs_g_nav_fast.u16_entry_pos_sel_file++;
80005580:	49 b6       	lddpc	r6,800055ec <fat_garbage_collector_entry+0xac>
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
80005582:	f0 1f 00 1c 	mcall	800055f0 <fat_garbage_collector_entry+0xb0>
80005586:	c2 c0       	breq	800055de <fat_garbage_collector_entry+0x9e>
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
80005588:	f0 1f 00 1c 	mcall	800055f8 <fat_garbage_collector_entry+0xb8>
8000558c:	0a 9a       	mov	r10,r5
8000558e:	08 9b       	mov	r11,r4
80005590:	f0 1f 00 1b 	mcall	800055fc <fat_garbage_collector_entry+0xbc>
            fat_cache_mark_sector_as_dirty();
80005594:	f0 1f 00 1b 	mcall	80005600 <fat_garbage_collector_entry+0xc0>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
80005598:	8c 18       	ld.sh	r8,r6[0x2]
8000559a:	2f f8       	sub	r8,-1
8000559c:	ac 18       	st.h	r6[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
8000559e:	f0 07 19 00 	cp.h	r7,r8
800055a2:	cf 01       	brne	80005582 <fat_garbage_collector_entry+0x42>
800055a4:	c1 f8       	rjmp	800055e2 <fat_garbage_collector_entry+0xa2>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
800055a6:	e8 08 18 00 	cp.b	r8,r4
800055aa:	c1 70       	breq	800055d8 <fat_garbage_collector_entry+0x98>
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
800055ac:	ec 07 19 00 	cp.h	r7,r6
800055b0:	c1 20       	breq	800055d4 <fat_garbage_collector_entry+0x94>
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
800055b2:	04 9a       	mov	r10,r2
800055b4:	18 9b       	mov	r11,r12
800055b6:	1a 9c       	mov	r12,sp
800055b8:	f0 1f 00 13 	mcall	80005604 <fat_garbage_collector_entry+0xc4>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
800055bc:	aa 16       	st.h	r5[0x2],r6
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
800055be:	f0 1f 00 0d 	mcall	800055f0 <fat_garbage_collector_entry+0xb0>
800055c2:	c0 e0       	breq	800055de <fat_garbage_collector_entry+0x9e>
               return false;
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
800055c4:	f0 1f 00 0d 	mcall	800055f8 <fat_garbage_collector_entry+0xb8>
800055c8:	04 9a       	mov	r10,r2
800055ca:	1a 9b       	mov	r11,sp
800055cc:	f0 1f 00 0e 	mcall	80005604 <fat_garbage_collector_entry+0xc4>
            fat_cache_mark_sector_as_dirty();
800055d0:	f0 1f 00 0c 	mcall	80005600 <fat_garbage_collector_entry+0xc0>
         }
         u16_pos_new++;
800055d4:	2f f6       	sub	r6,-1
800055d6:	5c 86       	casts.h	r6
      }
      u16_pos_old++;
800055d8:	2f f7       	sub	r7,-1
800055da:	5c 87       	casts.h	r7
   }  // end of while(1)
800055dc:	cb bb       	rjmp	80005552 <fat_garbage_collector_entry+0x12>
800055de:	30 0c       	mov	r12,0
800055e0:	c0 28       	rjmp	800055e4 <fat_garbage_collector_entry+0xa4>
800055e2:	30 1c       	mov	r12,1
}
800055e4:	2f 8d       	sub	sp,-32
800055e6:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800055ea:	00 00       	add	r0,r0
800055ec:	00 00       	add	r0,r0
800055ee:	07 38       	ld.ub	r8,r3++
800055f0:	80 00       	ld.sh	r0,r0[0x0]
800055f2:	4e fc       	lddpc	r12,800057ac <fat_allocfreespace+0x104>
800055f4:	00 00       	add	r0,r0
800055f6:	07 3c       	ld.ub	r12,r3++
800055f8:	80 00       	ld.sh	r0,r0[0x0]
800055fa:	43 04       	lddsp	r4,sp[0xc0]
800055fc:	80 00       	ld.sh	r0,r0[0x0]
800055fe:	7d c6       	ld.w	r6,lr[0x70]
80005600:	80 00       	ld.sh	r0,r0[0x0]
80005602:	46 ac       	lddsp	r12,sp[0x1a8]
80005604:	80 00       	ld.sh	r0,r0[0x0]
80005606:	7c 7e       	ld.w	lr,lr[0x1c]

80005608 <fat_write_fat32_FSInfo>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
Bool  fat_write_fat32_FSInfo( uint32_t u32_nb_free_cluster )
{
80005608:	eb cd 40 c0 	pushm	r6-r7,lr
8000560c:	20 1d       	sub	sp,4
8000560e:	50 0c       	stdsp	sp[0x0],r12
   // Init sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
80005610:	49 c8       	lddpc	r8,80005680 <fat_write_fat32_FSInfo+0x78>
80005612:	90 c9       	ld.uh	r9,r8[0x8]
80005614:	70 4a       	ld.w	r10,r8[0x10]
80005616:	49 c8       	lddpc	r8,80005684 <fat_write_fat32_FSInfo+0x7c>
80005618:	12 1a       	sub	r10,r9
8000561a:	91 0a       	st.w	r8[0x0],r10

   if( !fat_cache_read_sector( false ))
8000561c:	30 0c       	mov	r12,0
8000561e:	f0 1f 00 1b 	mcall	80005688 <fat_write_fat32_FSInfo+0x80>
80005622:	c2 c0       	breq	8000567a <fat_write_fat32_FSInfo+0x72>
      return false;
   fat_cache_mark_sector_as_dirty();
80005624:	f0 1f 00 1a 	mcall	8000568c <fat_write_fat32_FSInfo+0x84>
   fat_cache_clear();
80005628:	f0 1f 00 1a 	mcall	80005690 <fat_write_fat32_FSInfo+0x88>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
8000562c:	49 a7       	lddpc	r7,80005694 <fat_write_fat32_FSInfo+0x8c>
8000562e:	30 46       	mov	r6,4
80005630:	0c 9a       	mov	r10,r6
80005632:	49 ab       	lddpc	r11,80005698 <fat_write_fat32_FSInfo+0x90>
80005634:	0e 9c       	mov	r12,r7
80005636:	f0 1f 00 1a 	mcall	8000569c <fat_write_fat32_FSInfo+0x94>
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
8000563a:	0c 9a       	mov	r10,r6
8000563c:	49 9b       	lddpc	r11,800056a0 <fat_write_fat32_FSInfo+0x98>
8000563e:	ee cc fe 1c 	sub	r12,r7,-484
80005642:	f0 1f 00 17 	mcall	8000569c <fat_write_fat32_FSInfo+0x94>
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
80005646:	1b b9       	ld.ub	r9,sp[0x3]
80005648:	ef 69 01 e8 	st.b	r7[488],r9
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
8000564c:	1b a9       	ld.ub	r9,sp[0x2]
8000564e:	ef 69 01 e9 	st.b	r7[489],r9
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
80005652:	1b 99       	ld.ub	r9,sp[0x1]
80005654:	ef 69 01 ea 	st.b	r7[490],r9
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
80005658:	1b 88       	ld.ub	r8,sp[0x0]
8000565a:	ef 68 01 eb 	st.b	r7[491],r8
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
8000565e:	0c 9a       	mov	r10,r6
80005660:	e0 6b 00 ff 	mov	r11,255
80005664:	ee cc fe 14 	sub	r12,r7,-492
80005668:	f0 1f 00 0f 	mcall	800056a4 <fat_write_fat32_FSInfo+0x9c>
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
8000566c:	35 58       	mov	r8,85
8000566e:	ef 68 01 fe 	st.b	r7[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
80005672:	3a a8       	mov	r8,-86
80005674:	ef 68 01 ff 	st.b	r7[511],r8
80005678:	30 1c       	mov	r12,1
   return true;
}
8000567a:	2f fd       	sub	sp,-4
8000567c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005680:	00 00       	add	r0,r0
80005682:	06 ec       	st.h	--r3,r12
80005684:	00 00       	add	r0,r0
80005686:	04 a8       	st.w	r2++,r8
80005688:	80 00       	ld.sh	r0,r0[0x0]
8000568a:	48 cc       	lddpc	r12,800056b8 <fat_allocfreespace+0x10>
8000568c:	80 00       	ld.sh	r0,r0[0x0]
8000568e:	46 ac       	lddsp	r12,sp[0x1a8]
80005690:	80 00       	ld.sh	r0,r0[0x0]
80005692:	48 b4       	lddpc	r4,800056bc <fat_allocfreespace+0x14>
80005694:	00 00       	add	r0,r0
80005696:	04 ec       	st.h	--r2,r12
80005698:	80 00       	ld.sh	r0,r0[0x0]
8000569a:	80 d0       	ld.uh	r0,r0[0xa]
8000569c:	80 00       	ld.sh	r0,r0[0x0]
8000569e:	7c 7e       	ld.w	lr,lr[0x1c]
800056a0:	80 00       	ld.sh	r0,r0[0x0]
800056a2:	80 e4       	ld.uh	r4,r0[0xc]
800056a4:	80 00       	ld.sh	r0,r0[0x0]
800056a6:	7d c6       	ld.w	r6,lr[0x70]

800056a8 <fat_allocfreespace>:
//!   fs_g_seg.u32_addr          Return the first cluster value of the new cluster list
//!   fs_g_seg.u32_size_or_pos   The number of sector remainning (no allocated sectors, because disk fragmented or disk full)
//! @endverbatim
//!
Bool  fat_allocfreespace( void )
{
800056a8:	d4 31       	pushm	r0-r7,lr
800056aa:	20 1d       	sub	sp,4
   // Flag to signal the first step which search the first free cluster of the new list
   Bool first_cluster_free_is_found = false;
   // If true then use a quick procedure but don't scan all FAT else use a slow proceudre but scan all FAT
   Bool b_quick_find = true;

   if( Is_fat32 )
800056ac:	4c d8       	lddpc	r8,800057e0 <fat_allocfreespace+0x138>
800056ae:	11 89       	ld.ub	r9,r8[0x0]
800056b0:	30 38       	mov	r8,3
800056b2:	f0 09 18 00 	cp.b	r9,r8
800056b6:	c0 61       	brne	800056c2 <fat_allocfreespace+0x1a>
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
800056b8:	3f fc       	mov	r12,-1
800056ba:	f0 1f 00 4b 	mcall	800057e4 <fat_allocfreespace+0x13c>
800056be:	e0 80 00 8d 	breq	800057d8 <fat_allocfreespace+0x130>
         return false;
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
800056c2:	4c a1       	lddpc	r1,800057e8 <fat_allocfreespace+0x140>
800056c4:	03 89       	ld.ub	r9,r1[0x0]
800056c6:	3f f8       	mov	r8,-1
800056c8:	f0 09 18 00 	cp.b	r9,r8
800056cc:	c0 71       	brne	800056da <fat_allocfreespace+0x32>
800056ce:	30 19       	mov	r9,1
800056d0:	50 09       	stdsp	sp[0x0],r9
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
800056d2:	30 29       	mov	r9,2
800056d4:	4c 68       	lddpc	r8,800057ec <fat_allocfreespace+0x144>
800056d6:	91 09       	st.w	r8[0x0],r9
800056d8:	c0 88       	rjmp	800056e8 <fat_allocfreespace+0x40>
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
800056da:	4c 48       	lddpc	r8,800057e8 <fat_allocfreespace+0x140>
800056dc:	70 09       	ld.w	r9,r8[0x0]
800056de:	2f f9       	sub	r9,-1
800056e0:	4c 38       	lddpc	r8,800057ec <fat_allocfreespace+0x144>
800056e2:	91 09       	st.w	r8[0x0],r9
800056e4:	30 18       	mov	r8,1
800056e6:	50 08       	stdsp	sp[0x0],r8
   }

   fat_clear_info_fat_mod();
800056e8:	f0 1f 00 42 	mcall	800057f0 <fat_allocfreespace+0x148>

   // Read ALL FAT1
   for(
800056ec:	4c 08       	lddpc	r8,800057ec <fat_allocfreespace+0x144>
800056ee:	70 09       	ld.w	r9,r8[0x0]
800056f0:	4c 18       	lddpc	r8,800057f4 <fat_allocfreespace+0x14c>
800056f2:	70 38       	ld.w	r8,r8[0xc]
800056f4:	10 39       	cp.w	r9,r8
800056f6:	c6 32       	brcc	800057bc <fat_allocfreespace+0x114>
800056f8:	30 05       	mov	r5,0
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
800056fa:	0a 90       	mov	r0,r5
         return false;

      if ( 0 == fs_g_cluster.u32_val )
800056fc:	4b c7       	lddpc	r7,800057ec <fat_allocfreespace+0x144>
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
800056fe:	30 12       	mov	r2,1
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80005700:	30 13       	mov	r3,1
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
80005702:	4b a4       	lddpc	r4,800057e8 <fat_allocfreespace+0x140>
80005704:	4b c6       	lddpc	r6,800057f4 <fat_allocfreespace+0x14c>
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80005706:	00 9c       	mov	r12,r0
80005708:	f0 1f 00 3c 	mcall	800057f8 <fat_allocfreespace+0x150>
8000570c:	c6 60       	breq	800057d8 <fat_allocfreespace+0x130>
         return false;

      if ( 0 == fs_g_cluster.u32_val )
8000570e:	6e 18       	ld.w	r8,r7[0x4]
80005710:	58 08       	cp.w	r8,0
80005712:	c4 21       	brne	80005796 <fat_allocfreespace+0xee>
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
80005714:	6e 08       	ld.w	r8,r7[0x0]
80005716:	8f 18       	st.w	r7[0x4],r8
         if( true == first_cluster_free_is_found )
80005718:	e4 05 18 00 	cp.b	r5,r2
8000571c:	c0 81       	brne	8000572c <fat_allocfreespace+0x84>
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
8000571e:	20 18       	sub	r8,1
80005720:	8f 08       	st.w	r7[0x0],r8
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80005722:	06 9c       	mov	r12,r3
80005724:	f0 1f 00 35 	mcall	800057f8 <fat_allocfreespace+0x150>
80005728:	c1 f1       	brne	80005766 <fat_allocfreespace+0xbe>
8000572a:	c5 78       	rjmp	800057d8 <fat_allocfreespace+0x130>
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
8000572c:	03 88       	ld.ub	r8,r1[0x0]
8000572e:	3f f9       	mov	r9,-1
80005730:	f2 08 18 00 	cp.b	r8,r9
80005734:	c1 70       	breq	80005762 <fat_allocfreespace+0xba>
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
80005736:	68 08       	ld.w	r8,r4[0x0]
80005738:	58 08       	cp.w	r8,0
8000573a:	c0 f1       	brne	80005758 <fat_allocfreespace+0xb0>
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
8000573c:	4a 98       	lddpc	r8,800057e0 <fat_allocfreespace+0x138>
8000573e:	11 89       	ld.ub	r9,r8[0x0]
80005740:	30 38       	mov	r8,3
80005742:	f0 09 18 00 	cp.b	r9,r8
80005746:	c0 60       	breq	80005752 <fat_allocfreespace+0xaa>
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
80005748:	31 b9       	mov	r9,27
8000574a:	4a d8       	lddpc	r8,800057fc <fat_allocfreespace+0x154>
8000574c:	b0 89       	st.b	r8[0x0],r9
8000574e:	30 0c       	mov	r12,0
                     return false;
80005750:	c4 58       	rjmp	800057da <fat_allocfreespace+0x132>
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80005752:	6c 68       	ld.w	r8,r6[0x18]
80005754:	8f 08       	st.w	r7[0x0],r8
80005756:	c0 28       	rjmp	8000575a <fat_allocfreespace+0xb2>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80005758:	8f 08       	st.w	r7[0x0],r8
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
8000575a:	06 9c       	mov	r12,r3
8000575c:	f0 1f 00 27 	mcall	800057f8 <fat_allocfreespace+0x150>
80005760:	c3 c0       	breq	800057d8 <fat_allocfreespace+0x130>
                  return false;
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
80005762:	6e 18       	ld.w	r8,r7[0x4]
80005764:	89 08       	st.w	r4[0x0],r8
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
80005766:	6e 18       	ld.w	r8,r7[0x4]
80005768:	8f 08       	st.w	r7[0x0],r8
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
8000576a:	e0 69 ff ff 	mov	r9,65535
8000576e:	ea 19 0f ff 	orh	r9,0xfff
80005772:	8f 19       	st.w	r7[0x4],r9
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80005774:	06 9c       	mov	r12,r3
80005776:	f0 1f 00 21 	mcall	800057f8 <fat_allocfreespace+0x150>
8000577a:	c2 f0       	breq	800057d8 <fat_allocfreespace+0x130>
            return false;

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
8000577c:	68 19       	ld.w	r9,r4[0x4]
8000577e:	0d 98       	ld.ub	r8,r6[0x1]
80005780:	10 39       	cp.w	r9,r8
80005782:	e0 8b 00 06 	brhi	8000578e <fat_allocfreespace+0xe6>
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
80005786:	30 09       	mov	r9,0
80005788:	49 88       	lddpc	r8,800057e8 <fat_allocfreespace+0x140>
8000578a:	91 19       	st.w	r8[0x4],r9
            break;                        // Stop loop
8000578c:	c2 38       	rjmp	800057d2 <fat_allocfreespace+0x12a>
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
8000578e:	10 19       	sub	r9,r8
80005790:	89 19       	st.w	r4[0x4],r9
80005792:	06 95       	mov	r5,r3
80005794:	c0 b8       	rjmp	800057aa <fat_allocfreespace+0x102>
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
80005796:	e4 05 18 00 	cp.b	r5,r2
8000579a:	c1 c0       	breq	800057d2 <fat_allocfreespace+0x12a>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
8000579c:	40 08       	lddsp	r8,sp[0x0]
8000579e:	58 08       	cp.w	r8,0
800057a0:	c0 50       	breq	800057aa <fat_allocfreespace+0x102>
            {
               fs_g_cluster.u32_pos += 500;
800057a2:	6e 08       	ld.w	r8,r7[0x0]
800057a4:	f0 c8 fe 0c 	sub	r8,r8,-500
800057a8:	8f 08       	st.w	r7[0x0],r8
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
800057aa:	6e 08       	ld.w	r8,r7[0x0]
800057ac:	2f f8       	sub	r8,-1
800057ae:	8f 08       	st.w	r7[0x0],r8
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
800057b0:	6c 39       	ld.w	r9,r6[0xc]
800057b2:	10 39       	cp.w	r9,r8
800057b4:	fe 9b ff a9 	brhi	80005706 <fat_allocfreespace+0x5e>
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
800057b8:	58 05       	cp.w	r5,0
800057ba:	c0 c1       	brne	800057d2 <fat_allocfreespace+0x12a>
   {
      if( b_quick_find )
800057bc:	40 09       	lddsp	r9,sp[0x0]
800057be:	58 09       	cp.w	r9,0
800057c0:	c0 40       	breq	800057c8 <fat_allocfreespace+0x120>
800057c2:	30 08       	mov	r8,0
800057c4:	50 08       	stdsp	sp[0x0],r8
800057c6:	c8 6b       	rjmp	800056d2 <fat_allocfreespace+0x2a>
      {
         // Retry in normal mode to scann all FAT (= no quick mode)
         b_quick_find = false;
         goto fat_allocfreespace_start;
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
800057c8:	31 b9       	mov	r9,27
800057ca:	48 d8       	lddpc	r8,800057fc <fat_allocfreespace+0x154>
800057cc:	b0 89       	st.b	r8[0x0],r9
800057ce:	30 0c       	mov	r12,0
      return false;
800057d0:	c0 58       	rjmp	800057da <fat_allocfreespace+0x132>
   }

   return fat_update_fat2();
800057d2:	f0 1f 00 0c 	mcall	80005800 <fat_allocfreespace+0x158>
800057d6:	c0 28       	rjmp	800057da <fat_allocfreespace+0x132>
800057d8:	30 0c       	mov	r12,0
}
800057da:	2f fd       	sub	sp,-4
800057dc:	d8 32       	popm	r0-r7,pc
800057de:	00 00       	add	r0,r0
800057e0:	00 00       	add	r0,r0
800057e2:	07 38       	ld.ub	r8,r3++
800057e4:	80 00       	ld.sh	r0,r0[0x0]
800057e6:	56 08       	stdsp	sp[0x180],r8
800057e8:	00 00       	add	r0,r0
800057ea:	07 94       	ld.ub	r4,r3[0x1]
800057ec:	00 00       	add	r0,r0
800057ee:	07 8c       	ld.ub	r12,r3[0x0]
800057f0:	80 00       	ld.sh	r0,r0[0x0]
800057f2:	52 4c       	stdsp	sp[0x90],r12
800057f4:	00 00       	add	r0,r0
800057f6:	06 ec       	st.h	--r3,r12
800057f8:	80 00       	ld.sh	r0,r0[0x0]
800057fa:	49 e0       	lddpc	r0,80005870 <fat_alloc_entry_free+0x6c>
800057fc:	00 00       	add	r0,r0
800057fe:	07 3c       	ld.ub	r12,r3++
80005800:	80 00       	ld.sh	r0,r0[0x0]
80005802:	52 d8       	stdsp	sp[0xb4],r8

80005804 <fat_alloc_entry_free>:
//! @verbatim
//! OUT: Initialise the system on the last alloced free entry
//! @endverbatim
//!
Bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
80005804:	d4 31       	pushm	r0-r7,lr
80005806:	20 1d       	sub	sp,4
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005808:	30 09       	mov	r9,0
8000580a:	4a 38       	lddpc	r8,80005894 <fat_alloc_entry_free+0x90>
8000580c:	b0 19       	st.h	r8[0x2],r9
8000580e:	18 92       	mov	r2,r12
80005810:	30 04       	mov	r4,0
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80005812:	4a 26       	lddpc	r6,80005898 <fat_alloc_entry_free+0x94>
80005814:	31 a3       	mov	r3,26
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
80005816:	4a 21       	lddpc	r1,8000589c <fat_alloc_entry_free+0x98>
80005818:	30 15       	mov	r5,1
            if( b_garbage_collector_used )
               return false;
            if( !fat_garbage_collector_entry())
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
8000581a:	10 97       	mov	r7,r8
8000581c:	12 90       	mov	r0,r9
8000581e:	50 0c       	stdsp	sp[0x0],r12
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80005820:	f0 1f 00 20 	mcall	800058a0 <fat_alloc_entry_free+0x9c>
80005824:	c1 61       	brne	80005850 <fat_alloc_entry_free+0x4c>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80005826:	0d 88       	ld.ub	r8,r6[0x0]
80005828:	e6 08 18 00 	cp.b	r8,r3
8000582c:	c3 11       	brne	8000588e <fat_alloc_entry_free+0x8a>
            return false;

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
8000582e:	83 15       	st.w	r1[0x4],r5
         if( !fat_allocfreespace())
80005830:	f0 1f 00 1d 	mcall	800058a4 <fat_alloc_entry_free+0xa0>
80005834:	c0 a1       	brne	80005848 <fat_alloc_entry_free+0x44>
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
80005836:	58 04       	cp.w	r4,0
80005838:	c2 b1       	brne	8000588e <fat_alloc_entry_free+0x8a>
               return false;
            if( !fat_garbage_collector_entry())
8000583a:	f0 1f 00 1c 	mcall	800058a8 <fat_alloc_entry_free+0xa4>
8000583e:	c2 80       	breq	8000588e <fat_alloc_entry_free+0x8a>
               return false;
            b_garbage_collector_used = true;
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005840:	ae 10       	st.h	r7[0x2],r0
80005842:	40 02       	lddsp	r2,sp[0x0]
80005844:	0a 94       	mov	r4,r5
            u8_nb_entry = u8_nb_entry_save;
            continue;
80005846:	ce db       	rjmp	80005820 <fat_alloc_entry_free+0x1c>
         }

         // Clean this new cluster
         // Remark: The fs_g_seg.u32_addr contains the new cluster value
         if( !fat_clear_cluster())
80005848:	f0 1f 00 19 	mcall	800058ac <fat_alloc_entry_free+0xa8>
8000584c:	ce a1       	brne	80005820 <fat_alloc_entry_free+0x1c>
8000584e:	c2 08       	rjmp	8000588e <fat_alloc_entry_free+0x8a>

         continue;  // Rescan the directory list to find the new allocated sector
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80005850:	f0 1f 00 18 	mcall	800058b0 <fat_alloc_entry_free+0xac>
      if ( FS_ENTRY_END == *ptr_entry )
80005854:	19 88       	ld.ub	r8,r12[0x0]
80005856:	30 09       	mov	r9,0
80005858:	f2 08 18 00 	cp.b	r8,r9
8000585c:	c0 61       	brne	80005868 <fat_alloc_entry_free+0x64>
      {  // The entry is free
         u8_nb_entry--;
8000585e:	20 12       	sub	r2,1
80005860:	5c 52       	castu.b	r2
         if( 0 == u8_nb_entry )
80005862:	c0 31       	brne	80005868 <fat_alloc_entry_free+0x64>
80005864:	30 1c       	mov	r12,1
80005866:	c1 58       	rjmp	80005890 <fat_alloc_entry_free+0x8c>
            return true;  // All free entry is found
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
80005868:	8e 18       	ld.sh	r8,r7[0x2]
8000586a:	2f f8       	sub	r8,-1
8000586c:	5c 88       	casts.h	r8
8000586e:	ae 18       	st.h	r7[0x2],r8
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80005870:	cd 81       	brne	80005820 <fat_alloc_entry_free+0x1c>
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
80005872:	58 04       	cp.w	r4,0
80005874:	c0 60       	breq	80005880 <fat_alloc_entry_free+0x7c>
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
80005876:	31 b9       	mov	r9,27
80005878:	48 88       	lddpc	r8,80005898 <fat_alloc_entry_free+0x94>
8000587a:	b0 89       	st.b	r8[0x0],r9
8000587c:	30 0c       	mov	r12,0
            return false;
8000587e:	c0 98       	rjmp	80005890 <fat_alloc_entry_free+0x8c>
         }
         if( !fat_garbage_collector_entry())
80005880:	f0 1f 00 0a 	mcall	800058a8 <fat_alloc_entry_free+0xa4>
80005884:	c0 50       	breq	8000588e <fat_alloc_entry_free+0x8a>
            return false;
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
80005886:	ae 10       	st.h	r7[0x2],r0
80005888:	40 02       	lddsp	r2,sp[0x0]
8000588a:	0a 94       	mov	r4,r5
8000588c:	cc ab       	rjmp	80005820 <fat_alloc_entry_free+0x1c>
8000588e:	30 0c       	mov	r12,0
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
}
80005890:	2f fd       	sub	sp,-4
80005892:	d8 32       	popm	r0-r7,pc
80005894:	00 00       	add	r0,r0
80005896:	07 38       	ld.ub	r8,r3++
80005898:	00 00       	add	r0,r0
8000589a:	07 3c       	ld.ub	r12,r3++
8000589c:	00 00       	add	r0,r0
8000589e:	07 94       	ld.ub	r4,r3[0x1]
800058a0:	80 00       	ld.sh	r0,r0[0x0]
800058a2:	4e fc       	lddpc	r12,80005a5c <fat_create_short_entry_name+0x134>
800058a4:	80 00       	ld.sh	r0,r0[0x0]
800058a6:	56 a8       	stdsp	sp[0x1a8],r8
800058a8:	80 00       	ld.sh	r0,r0[0x0]
800058aa:	55 40       	stdsp	sp[0x150],r0
800058ac:	80 00       	ld.sh	r0,r0[0x0]
800058ae:	52 64       	stdsp	sp[0x98],r4
800058b0:	80 00       	ld.sh	r0,r0[0x0]
800058b2:	43 04       	lddsp	r4,sp[0xc0]

800058b4 <fat_check_name>:
//!
//! @return    number of entry file to strore the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
{
800058b4:	d4 31       	pushm	r0-r7,lr
800058b6:	18 94       	mov	r4,r12
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800058b8:	33 a2       	mov	r2,58
800058ba:	30 23       	mov	r3,2
800058bc:	30 d5       	mov	r5,13
800058be:	49 86       	lddpc	r6,8000591c <fat_check_name+0x68>
800058c0:	ec c1 ff ff 	sub	r1,r6,-1
//! @param     sz_name     original name to create
//!
//! @return    number of entry file to strore the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
800058c4:	2f 96       	sub	r6,-7
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
      {
         u8_nb_entry++;
800058c6:	0a 90       	mov	r0,r5
   {
      if( Is_unicode )
      {
         u16_character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         u16_character = sz_name[0];
800058c8:	09 87       	ld.ub	r7,r4[0x0]
      }
      if( fat_check_eof_name( u16_character ) )
800058ca:	0e 9c       	mov	r12,r7
800058cc:	f0 1f 00 15 	mcall	80005920 <fat_check_name+0x6c>
800058d0:	c1 a1       	brne	80005904 <fat_check_name+0x50>
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
800058d2:	ee 02 19 00 	cp.h	r2,r7
800058d6:	c0 60       	breq	800058e2 <fat_check_name+0x2e>
800058d8:	02 98       	mov	r8,r1
800058da:	11 89       	ld.ub	r9,r8[0x0]
800058dc:	ee 09 19 00 	cp.h	r9,r7
800058e0:	c0 61       	brne	800058ec <fat_check_name+0x38>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
800058e2:	31 c9       	mov	r9,28
800058e4:	49 08       	lddpc	r8,80005924 <fat_check_name+0x70>
800058e6:	b0 89       	st.b	r8[0x0],r9
800058e8:	30 03       	mov	r3,0
            return 0;      // incorrect character
800058ea:	c1 68       	rjmp	80005916 <fat_check_name+0x62>
800058ec:	2f f8       	sub	r8,-1
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
800058ee:	0c 38       	cp.w	r8,r6
800058f0:	cf 51       	brne	800058da <fat_check_name+0x26>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
800058f2:	58 05       	cp.w	r5,0
800058f4:	c0 41       	brne	800058fc <fat_check_name+0x48>
      {
         u8_nb_entry++;
800058f6:	2f f3       	sub	r3,-1
800058f8:	5c 53       	castu.b	r3
800058fa:	00 95       	mov	r5,r0
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
800058fc:	20 15       	sub	r5,1
800058fe:	5c 55       	castu.b	r5
      sz_name += (Is_unicode? 2 : 1 );
80005900:	2f f4       	sub	r4,-1
   }
80005902:	ce 3b       	rjmp	800058c8 <fat_check_name+0x14>
   if( 0x14 < u8_nb_entry )
80005904:	31 48       	mov	r8,20
80005906:	f0 03 18 00 	cp.b	r3,r8
8000590a:	e0 88 00 06 	brls	80005916 <fat_check_name+0x62>
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
8000590e:	32 b9       	mov	r9,43
80005910:	48 58       	lddpc	r8,80005924 <fat_check_name+0x70>
80005912:	b0 89       	st.b	r8[0x0],r9
80005914:	30 03       	mov	r3,0
      return 0;            // Name too large
   }
   return u8_nb_entry;
}
80005916:	06 9c       	mov	r12,r3
80005918:	d8 32       	popm	r0-r7,pc
8000591a:	00 00       	add	r0,r0
8000591c:	80 00       	ld.sh	r0,r0[0x0]
8000591e:	80 d4       	ld.uh	r4,r0[0xa]
80005920:	80 00       	ld.sh	r0,r0[0x0]
80005922:	42 dc       	lddsp	r12,sp[0xb4]
80005924:	00 00       	add	r0,r0
80005926:	07 3c       	ld.ub	r12,r3++

80005928 <fat_create_short_entry_name>:
//!                           false to write in internal cache
//!
//! @return    short name CRC
//!
uint8_t    fat_create_short_entry_name( FS_STRING sz_name , FS_STRING short_name , uint8_t nb , Bool mode  )
{
80005928:	d4 31       	pushm	r0-r7,lr
8000592a:	20 8d       	sub	sp,32
8000592c:	18 94       	mov	r4,r12
8000592e:	50 2b       	stdsp	sp[0x8],r11
80005930:	14 97       	mov	r7,r10
80005932:	50 09       	stdsp	sp[0x0],r9
   PTR_CACHE ptr_entry = 0;
   uint8_t u8_i, u8_step, character;
   uint8_t crc;
   uint8_t nb_digit;

   if( !mode )
80005934:	58 09       	cp.w	r9,0
80005936:	c0 40       	breq	8000593e <fat_create_short_entry_name+0x16>
80005938:	30 0a       	mov	r10,0
8000593a:	50 1a       	stdsp	sp[0x4],r10
8000593c:	c0 68       	rjmp	80005948 <fat_create_short_entry_name+0x20>
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
8000593e:	f0 1f 00 65 	mcall	80005ad0 <fat_create_short_entry_name+0x1a8>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
80005942:	f0 1f 00 65 	mcall	80005ad4 <fat_create_short_entry_name+0x1ac>
80005946:	50 1c       	stdsp	sp[0x4],r12
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
80005948:	30 98       	mov	r8,9
8000594a:	f0 07 18 00 	cp.b	r7,r8
8000594e:	e0 8b 00 04 	brhi	80005956 <fat_create_short_entry_name+0x2e>
80005952:	30 18       	mov	r8,1
80005954:	c0 88       	rjmp	80005964 <fat_create_short_entry_name+0x3c>
   else if( nb < 100 )  nb_digit = 2;
80005956:	36 38       	mov	r8,99
80005958:	ee 08 18 00 	cp.b	r8,r7
8000595c:	f9 b8 02 02 	movhs	r8,2
80005960:	f9 b8 03 03 	movlo	r8,3
         }
         character = ' ';
      }
      if( 5 == u8_step )
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
80005964:	e0 6a cc cd 	mov	r10,52429
80005968:	ea 1a cc cc 	orh	r10,0xcccc
8000596c:	ee 0a 06 42 	mulu.d	r2,r7,r10
80005970:	e6 09 16 03 	lsr	r9,r3,0x3
80005974:	f2 09 00 29 	add	r9,r9,r9<<0x2
80005978:	ee 09 01 19 	sub	r9,r7,r9<<0x1
8000597c:	2d 09       	sub	r9,-48
8000597e:	5c 59       	castu.b	r9
80005980:	50 79       	stdsp	sp[0x1c],r9
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
80005982:	e0 63 85 1f 	mov	r3,34079
80005986:	ea 13 51 eb 	orh	r3,0x51eb
8000598a:	ee 03 06 42 	mulu.d	r2,r7,r3
8000598e:	e6 09 16 05 	lsr	r9,r3,0x5
80005992:	f2 0b 10 64 	mul	r11,r9,100
80005996:	ee 0b 01 0b 	sub	r11,r7,r11
8000599a:	5c 5b       	castu.b	r11
8000599c:	f6 0a 06 4a 	mulu.d	r10,r11,r10
800059a0:	f6 0a 16 03 	lsr	r10,r11,0x3
800059a4:	2d 0a       	sub	r10,-48
800059a6:	5c 5a       	castu.b	r10
800059a8:	50 6a       	stdsp	sp[0x18],r10
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
800059aa:	2d 09       	sub	r9,-48
800059ac:	5c 59       	castu.b	r9
800059ae:	50 59       	stdsp	sp[0x14],r9
800059b0:	30 01       	mov	r1,0
800059b2:	30 17       	mov	r7,1
800059b4:	02 95       	mov	r5,r1
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
      }

      if( 1 == u8_step )
800059b6:	30 13       	mov	r3,1
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
800059b8:	f0 09 11 ff 	rsub	r9,r8,-1
800059bc:	2f 89       	sub	r9,-8
800059be:	50 39       	stdsp	sp[0xc],r9
800059c0:	32 e0       	mov	r0,46
         {
            u8_step++;                                   // go to next step
            continue;
         }
      }
      if( 8 == u8_step )
800059c2:	30 82       	mov	r2,8
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
800059c4:	f0 08 11 06 	rsub	r8,r8,6
800059c8:	5c 58       	castu.b	r8
800059ca:	50 48       	stdsp	sp[0x10],r8
800059cc:	c0 28       	rjmp	800059d0 <fat_create_short_entry_name+0xa8>
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
800059ce:	30 77       	mov	r7,7
   {
      if( Is_unicode )
      {
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
800059d0:	09 86       	ld.ub	r6,r4[0x0]
      }

      if( 1 == u8_step )
800059d2:	e6 07 18 00 	cp.b	r7,r3
800059d6:	c1 41       	brne	800059fe <fat_create_short_entry_name+0xd6>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
800059d8:	40 38       	lddsp	r8,sp[0xc]
800059da:	0a 38       	cp.w	r8,r5
800059dc:	5f 09       	sreq	r9
800059de:	e0 06 18 00 	cp.b	r6,r0
800059e2:	5f 08       	sreq	r8
800059e4:	f3 e8 10 08 	or	r8,r9,r8
800059e8:	30 0a       	mov	r10,0
800059ea:	f4 08 18 00 	cp.b	r8,r10
800059ee:	c0 51       	brne	800059f8 <fat_create_short_entry_name+0xd0>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
800059f0:	0c 9c       	mov	r12,r6
800059f2:	f0 1f 00 3a 	mcall	80005ad8 <fat_create_short_entry_name+0x1b0>
         character = sz_name[0];
      }

      if( 1 == u8_step )
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
800059f6:	c1 10       	breq	80005a18 <fat_create_short_entry_name+0xf0>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
800059f8:	2f f7       	sub	r7,-1
800059fa:	5c 57       	castu.b	r7
            continue;
800059fc:	ce ab       	rjmp	800059d0 <fat_create_short_entry_name+0xa8>
         }
      }
      if( 8 == u8_step )
800059fe:	e4 07 18 00 	cp.b	r7,r2
80005a02:	c1 21       	brne	80005a26 <fat_create_short_entry_name+0xfe>
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
80005a04:	30 b8       	mov	r8,11
80005a06:	f0 05 18 00 	cp.b	r5,r8
80005a0a:	c0 50       	breq	80005a14 <fat_create_short_entry_name+0xec>
         ||  fat_check_eof_name(character)            )  // is the end of name
80005a0c:	0c 9c       	mov	r12,r6
80005a0e:	f0 1f 00 33 	mcall	80005ad8 <fat_create_short_entry_name+0x1b0>
            continue;
         }
      }
      if( 8 == u8_step )
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
80005a12:	c0 30       	breq	80005a18 <fat_create_short_entry_name+0xf0>
80005a14:	30 97       	mov	r7,9
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
            continue;
80005a16:	cd db       	rjmp	800059d0 <fat_create_short_entry_name+0xa8>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
80005a18:	0c 9c       	mov	r12,r6
80005a1a:	f0 1f 00 31 	mcall	80005adc <fat_create_short_entry_name+0x1b4>
80005a1e:	18 96       	mov	r6,r12
         sz_name += (Is_unicode? 2 : 1 );
80005a20:	2f f4       	sub	r4,-1
         if( 0 == character )
80005a22:	58 0c       	cp.w	r12,0
80005a24:	cd 60       	breq	800059d0 <fat_create_short_entry_name+0xa8>
         {
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
80005a26:	30 78       	mov	r8,7
80005a28:	f0 07 18 00 	cp.b	r7,r8
80005a2c:	c0 c1       	brne	80005a44 <fat_create_short_entry_name+0x11c>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
80005a2e:	e0 06 18 00 	cp.b	r6,r0
80005a32:	c0 50       	breq	80005a3c <fat_create_short_entry_name+0x114>
         ||  fat_check_eof_name(character)            )  // is the end of name
80005a34:	0c 9c       	mov	r12,r6
80005a36:	f0 1f 00 29 	mcall	80005ad8 <fat_create_short_entry_name+0x1b0>
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
80005a3a:	c0 30       	breq	80005a40 <fat_create_short_entry_name+0x118>
80005a3c:	30 87       	mov	r7,8
80005a3e:	cc 9b       	rjmp	800059d0 <fat_create_short_entry_name+0xa8>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
         } else {
            sz_name += (Is_unicode? 2 : 1 );
80005a40:	2f f4       	sub	r4,-1
80005a42:	cc 7b       	rjmp	800059d0 <fat_create_short_entry_name+0xa8>
         }
         continue;                                       // this step don't add a character in the short name
      }
      if( 6 == u8_step )
80005a44:	30 68       	mov	r8,6
80005a46:	f0 07 18 00 	cp.b	r7,r8
80005a4a:	c0 61       	brne	80005a56 <fat_create_short_entry_name+0x12e>
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
80005a4c:	e4 05 18 00 	cp.b	r5,r2
80005a50:	cb f0       	breq	800059ce <fat_create_short_entry_name+0xa6>
80005a52:	32 06       	mov	r6,32
80005a54:	c1 28       	rjmp	80005a78 <fat_create_short_entry_name+0x150>
            u8_step++;                                   // go to next step
            continue;
         }
         character = ' ';
      }
      if( 9 == u8_step )
80005a56:	30 98       	mov	r8,9
80005a58:	f0 07 18 00 	cp.b	r7,r8
80005a5c:	c0 71       	brne	80005a6a <fat_create_short_entry_name+0x142>
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
80005a5e:	30 b9       	mov	r9,11
80005a60:	f2 05 18 00 	cp.b	r5,r9
80005a64:	c3 20       	breq	80005ac8 <fat_create_short_entry_name+0x1a0>
80005a66:	32 06       	mov	r6,32
80005a68:	c0 f8       	rjmp	80005a86 <fat_create_short_entry_name+0x15e>
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
      }
      if( 5 == u8_step )
80005a6a:	30 58       	mov	r8,5
80005a6c:	f0 07 18 00 	cp.b	r7,r8
80005a70:	c0 41       	brne	80005a78 <fat_create_short_entry_name+0x150>
80005a72:	40 76       	lddsp	r6,sp[0x1c]
80005a74:	30 67       	mov	r7,6
80005a76:	c0 f8       	rjmp	80005a94 <fat_create_short_entry_name+0x16c>
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
         u8_step++;                                      // go to next step
      }
      if( 4 == u8_step )
80005a78:	30 48       	mov	r8,4
80005a7a:	f0 07 18 00 	cp.b	r7,r8
80005a7e:	c0 41       	brne	80005a86 <fat_create_short_entry_name+0x15e>
80005a80:	40 66       	lddsp	r6,sp[0x18]
80005a82:	30 57       	mov	r7,5
80005a84:	c0 f8       	rjmp	80005aa2 <fat_create_short_entry_name+0x17a>
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
         u8_step++;                                      // go to next step
      }
      if( 3 == u8_step )
80005a86:	30 38       	mov	r8,3
80005a88:	f0 07 18 00 	cp.b	r7,r8
80005a8c:	c0 41       	brne	80005a94 <fat_create_short_entry_name+0x16c>
80005a8e:	40 56       	lddsp	r6,sp[0x14]
80005a90:	30 47       	mov	r7,4
80005a92:	c0 88       	rjmp	80005aa2 <fat_create_short_entry_name+0x17a>
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
80005a94:	40 49       	lddsp	r9,sp[0x10]
      if( 3 == u8_step )
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
         u8_step++;                                      // go to next step
      }
      if( 2 == u8_step )
80005a96:	30 28       	mov	r8,2
80005a98:	f0 07 18 00 	cp.b	r7,r8
80005a9c:	c0 31       	brne	80005aa2 <fat_create_short_entry_name+0x17a>
      {  // step 2 = add character '~'
         character = '~';
         u8_step+=(4-nb_digit);                          // go to next step
80005a9e:	12 97       	mov	r7,r9
80005aa0:	37 e6       	mov	r6,126
      }

      if( mode )
80005aa2:	40 09       	lddsp	r9,sp[0x0]
80005aa4:	58 09       	cp.w	r9,0
80005aa6:	c0 50       	breq	80005ab0 <fat_create_short_entry_name+0x188>
      {
         // Record the short name in buffer
         *short_name = character;
80005aa8:	40 28       	lddsp	r8,sp[0x8]
80005aaa:	10 c6       	st.b	r8++,r6
80005aac:	50 28       	stdsp	sp[0x8],r8
80005aae:	c0 48       	rjmp	80005ab6 <fat_create_short_entry_name+0x18e>
         short_name++;
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
80005ab0:	40 1a       	lddsp	r10,sp[0x4]
80005ab2:	14 c6       	st.b	r10++,r6
80005ab4:	50 1a       	stdsp	sp[0x4],r10
         ptr_entry++;
      }
      u8_i++;
80005ab6:	2f f5       	sub	r5,-1
80005ab8:	5c 55       	castu.b	r5

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
80005aba:	e2 08 16 01 	lsr	r8,r1,0x1
80005abe:	a7 71       	lsl	r1,0x7
80005ac0:	10 01       	add	r1,r8
      crc += character;                                  // add next char
80005ac2:	0c 01       	add	r1,r6
80005ac4:	5c 51       	castu.b	r1
80005ac6:	c8 5b       	rjmp	800059d0 <fat_create_short_entry_name+0xa8>
   } // End of loop while
   return crc;
}
80005ac8:	02 9c       	mov	r12,r1
80005aca:	2f 8d       	sub	sp,-32
80005acc:	d8 32       	popm	r0-r7,pc
80005ace:	00 00       	add	r0,r0
80005ad0:	80 00       	ld.sh	r0,r0[0x0]
80005ad2:	46 ac       	lddsp	r12,sp[0x1a8]
80005ad4:	80 00       	ld.sh	r0,r0[0x0]
80005ad6:	43 04       	lddsp	r4,sp[0xc0]
80005ad8:	80 00       	ld.sh	r0,r0[0x0]
80005ada:	42 dc       	lddsp	r12,sp[0xb4]
80005adc:	80 00       	ld.sh	r0,r0[0x0]
80005ade:	52 00       	stdsp	sp[0x80],r0

80005ae0 <fat_entry_shortname_compare>:
//!
//! @return    true it is the same
//! @return    false in case of error, see global value "fs_g_status" for more detail
//!
Bool  fat_entry_shortname_compare( FS_STRING short_name )
{
80005ae0:	eb cd 40 80 	pushm	r7,lr
80005ae4:	18 97       	mov	r7,r12
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80005ae6:	f0 1f 00 12 	mcall	80005b2c <fat_entry_shortname_compare+0x4c>
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
80005aea:	19 88       	ld.ub	r8,r12[0x0]
80005aec:	58 08       	cp.w	r8,0
80005aee:	c0 61       	brne	80005afa <fat_entry_shortname_compare+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
80005af0:	30 a9       	mov	r9,10
80005af2:	49 08       	lddpc	r8,80005b30 <fat_entry_shortname_compare+0x50>
80005af4:	b0 89       	st.b	r8[0x0],r9
80005af6:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
80005afa:	3e 59       	mov	r9,-27
80005afc:	f2 08 18 00 	cp.b	r8,r9
80005b00:	c0 70       	breq	80005b0e <fat_entry_shortname_compare+0x2e>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
80005b02:	f9 39 00 0b 	ld.ub	r9,r12[11]
80005b06:	30 f8       	mov	r8,15
80005b08:	f0 09 18 00 	cp.b	r9,r8
80005b0c:	c0 61       	brne	80005b18 <fat_entry_shortname_compare+0x38>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80005b0e:	30 b9       	mov	r9,11
80005b10:	48 88       	lddpc	r8,80005b30 <fat_entry_shortname_compare+0x50>
80005b12:	b0 89       	st.b	r8[0x0],r9
80005b14:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
80005b18:	30 b9       	mov	r9,11
80005b1a:	48 68       	lddpc	r8,80005b30 <fat_entry_shortname_compare+0x50>
80005b1c:	b0 89       	st.b	r8[0x0],r9
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
80005b1e:	30 ba       	mov	r10,11
80005b20:	0e 9b       	mov	r11,r7
80005b22:	f0 1f 00 05 	mcall	80005b34 <fat_entry_shortname_compare+0x54>
80005b26:	5f 0c       	sreq	r12
}
80005b28:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b2c:	80 00       	ld.sh	r0,r0[0x0]
80005b2e:	43 04       	lddsp	r4,sp[0xc0]
80005b30:	00 00       	add	r0,r0
80005b32:	07 3c       	ld.ub	r12,r3++
80005b34:	80 00       	ld.sh	r0,r0[0x0]
80005b36:	7c 58       	ld.w	r8,lr[0x14]

80005b38 <fat_find_short_entry_name>:
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
80005b38:	d4 31       	pushm	r0-r7,lr
80005b3a:	20 3d       	sub	sp,12
80005b3c:	18 93       	mov	r3,r12
80005b3e:	30 07       	mov	r7,0
   {
      if( 0xFF == u8_nb )
         return 0;                                       // All short name exist
         
      u8_nb++;                                           // Try next short name
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80005b40:	1a 96       	mov	r6,sp
80005b42:	30 12       	mov	r2,1
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80005b44:	49 65       	lddpc	r5,80005b9c <fat_find_short_entry_name+0x64>
80005b46:	30 04       	mov	r4,0
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005b48:	49 61       	lddpc	r1,80005ba0 <fat_find_short_entry_name+0x68>
80005b4a:	30 a0       	mov	r0,10
80005b4c:	c0 58       	rjmp	80005b56 <fat_find_short_entry_name+0x1e>
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
80005b4e:	3f f8       	mov	r8,-1
80005b50:	f0 07 18 00 	cp.b	r7,r8
80005b54:	c2 00       	breq	80005b94 <fat_find_short_entry_name+0x5c>
         return 0;                                       // All short name exist
         
      u8_nb++;                                           // Try next short name
80005b56:	2f f7       	sub	r7,-1
80005b58:	5c 57       	castu.b	r7
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80005b5a:	04 99       	mov	r9,r2
80005b5c:	0e 9a       	mov	r10,r7
80005b5e:	1a 9b       	mov	r11,sp
80005b60:	06 9c       	mov	r12,r3
80005b62:	f0 1f 00 11 	mcall	80005ba4 <fat_find_short_entry_name+0x6c>
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
80005b66:	aa 14       	st.h	r5[0x2],r4
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
80005b68:	f0 1f 00 10 	mcall	80005ba8 <fat_find_short_entry_name+0x70>
80005b6c:	c0 81       	brne	80005b7c <fat_find_short_entry_name+0x44>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
80005b6e:	48 d8       	lddpc	r8,80005ba0 <fat_find_short_entry_name+0x68>
80005b70:	11 89       	ld.ub	r9,r8[0x0]
80005b72:	31 a8       	mov	r8,26
80005b74:	f0 09 18 00 	cp.b	r9,r8
80005b78:	c0 e1       	brne	80005b94 <fat_find_short_entry_name+0x5c>
80005b7a:	c0 e8       	rjmp	80005b96 <fat_find_short_entry_name+0x5e>
               return u8_nb;                             // short name don't exist, then good number
            return 0;                                    // System or Disk Error
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
80005b7c:	1a 9c       	mov	r12,sp
80005b7e:	f0 1f 00 0c 	mcall	80005bac <fat_find_short_entry_name+0x74>
80005b82:	ce 61       	brne	80005b4e <fat_find_short_entry_name+0x16>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
80005b84:	03 88       	ld.ub	r8,r1[0x0]
80005b86:	e0 08 18 00 	cp.b	r8,r0
80005b8a:	c0 60       	breq	80005b96 <fat_find_short_entry_name+0x5e>
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
80005b8c:	8a 18       	ld.sh	r8,r5[0x2]
80005b8e:	2f f8       	sub	r8,-1
80005b90:	aa 18       	st.h	r5[0x2],r8
      }
80005b92:	ce bb       	rjmp	80005b68 <fat_find_short_entry_name+0x30>
80005b94:	30 07       	mov	r7,0
   }
}
80005b96:	0e 9c       	mov	r12,r7
80005b98:	2f dd       	sub	sp,-12
80005b9a:	d8 32       	popm	r0-r7,pc
80005b9c:	00 00       	add	r0,r0
80005b9e:	07 38       	ld.ub	r8,r3++
80005ba0:	00 00       	add	r0,r0
80005ba2:	07 3c       	ld.ub	r12,r3++
80005ba4:	80 00       	ld.sh	r0,r0[0x0]
80005ba6:	59 28       	cp.w	r8,18
80005ba8:	80 00       	ld.sh	r0,r0[0x0]
80005baa:	4e fc       	lddpc	r12,80005d64 <fat_mount+0x10c>
80005bac:	80 00       	ld.sh	r0,r0[0x0]
80005bae:	5a e0       	cp.w	r0,-18

80005bb0 <fat_create_entry_file_name>:
//! b_unicode is a global flag to select UNICODE or ASCII
//! The name must be terminated by NULL and it can't have two dot characters.
//! @endverbatim
//!
Bool  fat_create_entry_file_name( FS_STRING sz_name )
{
80005bb0:	eb cd 40 fc 	pushm	r2-r7,lr
80005bb4:	18 96       	mov	r6,r12
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
80005bb6:	f0 1f 00 21 	mcall	80005c38 <fat_create_entry_file_name+0x88>
80005bba:	18 95       	mov	r5,r12
   if( 0 == u8_nb_entry )
80005bbc:	c3 b0       	breq	80005c32 <fat_create_entry_file_name+0x82>
      return false;

   // Search a unik short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
80005bbe:	0c 9c       	mov	r12,r6
80005bc0:	f0 1f 00 1f 	mcall	80005c3c <fat_create_entry_file_name+0x8c>
80005bc4:	18 97       	mov	r7,r12
   if( 0 == u8_nb )
80005bc6:	c0 61       	brne	80005bd2 <fat_create_entry_file_name+0x22>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
80005bc8:	32 a9       	mov	r9,42
80005bca:	49 e8       	lddpc	r8,80005c40 <fat_create_entry_file_name+0x90>
80005bcc:	b0 89       	st.b	r8[0x0],r9
80005bce:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
      return false;  // All short name exist
   }
   
   // Alloc a space for entrys
   if( !fat_alloc_entry_free( u8_nb_entry ))
80005bd2:	0a 9c       	mov	r12,r5
80005bd4:	f0 1f 00 1c 	mcall	80005c44 <fat_create_entry_file_name+0x94>
80005bd8:	c2 d0       	breq	80005c32 <fat_create_entry_file_name+0x82>
      return false;
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
80005bda:	30 09       	mov	r9,0
80005bdc:	0e 9a       	mov	r10,r7
80005bde:	12 9b       	mov	r11,r9
80005be0:	0c 9c       	mov	r12,r6
80005be2:	f0 1f 00 1a 	mcall	80005c48 <fat_create_entry_file_name+0x98>
80005be6:	18 92       	mov	r2,r12
   u8_nb_entry--;
80005be8:	20 15       	sub	r5,1
80005bea:	5c 55       	castu.b	r5

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005bec:	c1 c0       	breq	80005c24 <fat_create_entry_file_name+0x74>
80005bee:	30 17       	mov	r7,1
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005bf0:	49 74       	lddpc	r4,80005c4c <fat_create_entry_file_name+0x9c>
      if( !fat_read_dir())
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005bf2:	ea c3 ff c0 	sub	r3,r5,-64
80005bf6:	5c 53       	castu.b	r3

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80005bf8:	88 18       	ld.sh	r8,r4[0x2]
80005bfa:	20 18       	sub	r8,1
80005bfc:	a8 18       	st.h	r4[0x2],r8
      if( !fat_read_dir())
80005bfe:	f0 1f 00 15 	mcall	80005c50 <fat_create_entry_file_name+0xa0>
80005c02:	c1 80       	breq	80005c32 <fat_create_entry_file_name+0x82>
         return false;
      // Write a long name entry
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
80005c04:	ea 07 18 00 	cp.b	r7,r5
80005c08:	e6 07 17 00 	moveq	r7,r3
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
80005c0c:	0e 9a       	mov	r10,r7
80005c0e:	04 9b       	mov	r11,r2
80005c10:	0c 9c       	mov	r12,r6
80005c12:	f0 1f 00 11 	mcall	80005c54 <fat_create_entry_file_name+0xa4>
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80005c16:	2f f7       	sub	r7,-1
80005c18:	5c 57       	castu.b	r7
80005c1a:	ee 05 18 00 	cp.b	r5,r7
80005c1e:	c0 33       	brcs	80005c24 <fat_create_entry_file_name+0x74>
      if( u8_i == u8_nb_entry )
      {
         u8_i += FS_ENTRY_LFN_LAST;
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
80005c20:	2f 36       	sub	r6,-13
80005c22:	ce bb       	rjmp	80005bf8 <fat_create_entry_file_name+0x48>
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
80005c24:	48 a8       	lddpc	r8,80005c4c <fat_create_entry_file_name+0x9c>
80005c26:	90 19       	ld.sh	r9,r8[0x2]
80005c28:	f2 05 00 05 	add	r5,r9,r5
80005c2c:	b0 15       	st.h	r8[0x2],r5
80005c2e:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
  return true;
80005c32:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
80005c36:	00 00       	add	r0,r0
80005c38:	80 00       	ld.sh	r0,r0[0x0]
80005c3a:	58 b4       	cp.w	r4,11
80005c3c:	80 00       	ld.sh	r0,r0[0x0]
80005c3e:	5b 38       	cp.w	r8,-13
80005c40:	00 00       	add	r0,r0
80005c42:	07 3c       	ld.ub	r12,r3++
80005c44:	80 00       	ld.sh	r0,r0[0x0]
80005c46:	58 04       	cp.w	r4,0
80005c48:	80 00       	ld.sh	r0,r0[0x0]
80005c4a:	59 28       	cp.w	r8,18
80005c4c:	00 00       	add	r0,r0
80005c4e:	07 38       	ld.ub	r8,r3++
80005c50:	80 00       	ld.sh	r0,r0[0x0]
80005c52:	4e fc       	lddpc	r12,80005e0c <fat_mount+0x1b4>
80005c54:	80 00       	ld.sh	r0,r0[0x0]
80005c56:	53 e4       	stdsp	sp[0xf8],r4

80005c58 <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
Bool  fat_mount( void )
{
80005c58:	d4 31       	pushm	r0-r7,lr
80005c5a:	20 3d       	sub	sp,12
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
80005c5c:	30 07       	mov	r7,0
80005c5e:	fe f8 02 d2 	ld.w	r8,pc[722]
80005c62:	91 87       	st.w	r8[0x20],r7
   // No selected file
   fat_clear_entry_info_and_ptr();
80005c64:	f0 1f 00 b4 	mcall	80005f34 <fat_mount+0x2dc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80005c68:	fe f8 02 d0 	ld.w	r8,pc[720]
80005c6c:	b0 87       	st.b	r8[0x0],r7
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80005c6e:	fe f8 02 ce 	ld.w	r8,pc[718]
80005c72:	91 07       	st.w	r8[0x0],r7

   // Check if the drive is availabled
   if( !fat_check_device() )
80005c74:	f0 1f 00 b3 	mcall	80005f40 <fat_mount+0x2e8>
80005c78:	e0 80 01 58 	breq	80005f28 <fat_mount+0x2d0>
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005c7c:	fe f5 02 c8 	ld.w	r5,pc[712]
      {
         fs_g_status = FS_ERR_NO_FORMAT;
         return false;
      }

      if ( 0 == fs_gu32_addrsector )
80005c80:	ea c8 fe 42 	sub	r8,r5,-446
80005c84:	50 08       	stdsp	sp[0x0],r8
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005c86:	38 04       	mov	r4,-128
80005c88:	30 46       	mov	r6,4
      return false;

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
80005c8a:	30 1c       	mov	r12,1
80005c8c:	f0 1f 00 af 	mcall	80005f48 <fat_mount+0x2f0>
80005c90:	e0 80 01 4c 	breq	80005f28 <fat_mount+0x2d0>
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005c94:	eb 39 01 fe 	ld.ub	r9,r5[510]
80005c98:	35 58       	mov	r8,85
80005c9a:	f0 09 18 00 	cp.b	r9,r8
80005c9e:	c0 d0       	breq	80005cb8 <fat_mount+0x60>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
80005ca0:	eb 39 01 ff 	ld.ub	r9,r5[511]
80005ca4:	3a a8       	mov	r8,-86
80005ca6:	f0 09 18 00 	cp.b	r9,r8
80005caa:	c0 70       	breq	80005cb8 <fat_mount+0x60>
      {
         fs_g_status = FS_ERR_NO_FORMAT;
80005cac:	30 29       	mov	r9,2
80005cae:	fe f8 02 9e 	ld.w	r8,pc[670]
80005cb2:	b0 89       	st.b	r8[0x0],r9
80005cb4:	30 0c       	mov	r12,0
         return false;
80005cb6:	c3 a9       	rjmp	80005f2a <fat_mount+0x2d2>
      }

      if ( 0 == fs_gu32_addrsector )
80005cb8:	fe f8 02 84 	ld.w	r8,pc[644]
80005cbc:	70 08       	ld.w	r8,r8[0x0]
80005cbe:	58 08       	cp.w	r8,0
80005cc0:	c5 21       	brne	80005d64 <fat_mount+0x10c>
80005cc2:	40 08       	lddsp	r8,sp[0x0]
80005cc4:	30 0a       	mov	r10,0
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005cc6:	30 1e       	mov	lr,1
80005cc8:	30 63       	mov	r3,6
80005cca:	30 e2       	mov	r2,14
80005ccc:	30 b1       	mov	r1,11
80005cce:	30 c0       	mov	r0,12
80005cd0:	11 89       	ld.ub	r9,r8[0x0]
80005cd2:	e8 09 18 00 	cp.b	r9,r4
80005cd6:	5f 0b       	sreq	r11
80005cd8:	ee 09 18 00 	cp.b	r9,r7
80005cdc:	5f 09       	sreq	r9
80005cde:	f7 e9 10 09 	or	r9,r11,r9
80005ce2:	ee 09 18 00 	cp.b	r9,r7
80005ce6:	c1 90       	breq	80005d18 <fat_mount+0xc0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
80005ce8:	11 c9       	ld.ub	r9,r8[0x4]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005cea:	fc 09 18 00 	cp.b	r9,lr
80005cee:	5f 0c       	sreq	r12
80005cf0:	ec 09 18 00 	cp.b	r9,r6
80005cf4:	5f 0b       	sreq	r11
80005cf6:	f9 eb 10 0b 	or	r11,r12,r11
80005cfa:	ee 0b 18 00 	cp.b	r11,r7
80005cfe:	c1 41       	brne	80005d26 <fat_mount+0xce>
80005d00:	e6 09 18 00 	cp.b	r9,r3
80005d04:	c1 10       	breq	80005d26 <fat_mount+0xce>
80005d06:	e4 09 18 00 	cp.b	r9,r2
80005d0a:	c0 e0       	breq	80005d26 <fat_mount+0xce>
80005d0c:	e2 09 18 00 	cp.b	r9,r1
80005d10:	c0 b0       	breq	80005d26 <fat_mount+0xce>
80005d12:	e0 09 18 00 	cp.b	r9,r0
80005d16:	c0 80       	breq	80005d26 <fat_mount+0xce>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == ENABLED)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
80005d18:	2f fa       	sub	r10,-1
80005d1a:	5c 5a       	castu.b	r10
80005d1c:	2f 08       	sub	r8,-16
80005d1e:	ec 0a 18 00 	cp.b	r10,r6
80005d22:	cd 71       	brne	80005cd0 <fat_mount+0x78>
80005d24:	c2 08       	rjmp	80005d64 <fat_mount+0x10c>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
80005d26:	ec 0a 18 00 	cp.b	r10,r6
80005d2a:	c1 d0       	breq	80005d64 <fat_mount+0x10c>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80005d2c:	fe f3 02 10 	ld.w	r3,pc[528]
80005d30:	a5 6a       	lsl	r10,0x4
80005d32:	f4 ca fe 42 	sub	r10,r10,-446
80005d36:	ea 0a 00 0a 	add	r10,r5,r10
80005d3a:	f5 38 00 08 	ld.ub	r8,r10[8]
80005d3e:	a6 b8       	st.b	r3[0x3],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
80005d40:	f5 38 00 09 	ld.ub	r8,r10[9]
80005d44:	a6 a8       	st.b	r3[0x2],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
80005d46:	f5 38 00 0a 	ld.ub	r8,r10[10]
80005d4a:	a6 98       	st.b	r3[0x1],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80005d4c:	f5 38 00 0b 	ld.ub	r8,r10[11]
80005d50:	a6 88       	st.b	r3[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
80005d52:	4f 88       	lddpc	r8,80005f30 <fat_mount+0x2d8>
80005d54:	11 8c       	ld.ub	r12,r8[0x0]
80005d56:	f0 1f 00 7f 	mcall	80005f50 <fat_mount+0x2f8>
80005d5a:	66 08       	ld.w	r8,r3[0x0]
80005d5c:	f8 08 02 48 	mul	r8,r12,r8
80005d60:	87 08       	st.w	r3[0x0],r8
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
80005d62:	c9 4b       	rjmp	80005c8a <fat_mount+0x32>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80005d64:	4f 88       	lddpc	r8,80005f44 <fat_mount+0x2ec>
80005d66:	11 89       	ld.ub	r9,r8[0x0]
80005d68:	3e b8       	mov	r8,-21
80005d6a:	f0 09 18 00 	cp.b	r9,r8
80005d6e:	c0 f1       	brne	80005d8c <fat_mount+0x134>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
80005d70:	4f 58       	lddpc	r8,80005f44 <fat_mount+0x2ec>
80005d72:	11 a9       	ld.ub	r9,r8[0x2]
80005d74:	39 08       	mov	r8,-112
80005d76:	f0 09 18 00 	cp.b	r9,r8
80005d7a:	c0 91       	brne	80005d8c <fat_mount+0x134>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
80005d7c:	4f 28       	lddpc	r8,80005f44 <fat_mount+0x2ec>
80005d7e:	f1 38 00 15 	ld.ub	r8,r8[21]
80005d82:	e2 18 00 f0 	andl	r8,0xf0,COH
80005d86:	e0 48 00 f0 	cp.w	r8,240
80005d8a:	c0 60       	breq	80005d96 <fat_mount+0x13e>
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80005d8c:	30 39       	mov	r9,3
80005d8e:	4f 08       	lddpc	r8,80005f4c <fat_mount+0x2f4>
80005d90:	b0 89       	st.b	r8[0x0],r9
80005d92:	30 0c       	mov	r12,0
      return false;
80005d94:	cc b8       	rjmp	80005f2a <fat_mount+0x2d2>
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80005d96:	30 49       	mov	r9,4
80005d98:	4e d8       	lddpc	r8,80005f4c <fat_mount+0x2f4>
80005d9a:	b0 89       	st.b	r8[0x0],r9

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80005d9c:	4e aa       	lddpc	r10,80005f44 <fat_mount+0x2ec>
80005d9e:	f5 39 00 0c 	ld.ub	r9,r10[12]
80005da2:	a1 99       	lsr	r9,0x1

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
80005da4:	f5 38 00 0d 	ld.ub	r8,r10[13]
80005da8:	b3 38       	mul	r8,r9
80005daa:	5c 58       	castu.b	r8
80005dac:	4e 1b       	lddpc	r11,80005f30 <fat_mount+0x2d8>
80005dae:	b6 98       	st.b	r11[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
80005db0:	30 0b       	mov	r11,0
80005db2:	50 1b       	stdsp	sp[0x4],r11
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
80005db4:	fa cb ff fc 	sub	r11,sp,-4
80005db8:	fa c7 ff f9 	sub	r7,sp,-7
80005dbc:	f5 3c 00 16 	ld.ub	r12,r10[22]
80005dc0:	ae 8c       	st.b	r7[0x0],r12
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
80005dc2:	fa ce ff fa 	sub	lr,sp,-6
80005dc6:	f5 3a 00 17 	ld.ub	r10,r10[23]
80005dca:	bc 8a       	st.b	lr[0x0],r10
   if ( 0==u32_tmp )
80005dcc:	40 1a       	lddsp	r10,sp[0x4]
80005dce:	58 0a       	cp.w	r10,0
80005dd0:	c0 e1       	brne	80005dec <fat_mount+0x194>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
80005dd2:	4d da       	lddpc	r10,80005f44 <fat_mount+0x2ec>
80005dd4:	f5 3c 00 24 	ld.ub	r12,r10[36]
80005dd8:	ae 8c       	st.b	r7[0x0],r12
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
80005dda:	f5 3c 00 25 	ld.ub	r12,r10[37]
80005dde:	bc 8c       	st.b	lr[0x0],r12
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
80005de0:	f5 3c 00 26 	ld.ub	r12,r10[38]
80005de4:	b6 9c       	st.b	r11[0x1],r12
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
80005de6:	f5 3a 00 27 	ld.ub	r10,r10[39]
80005dea:	b6 8a       	st.b	r11[0x0],r10
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
80005dec:	12 95       	mov	r5,r9
80005dee:	40 1c       	lddsp	r12,sp[0x4]
80005df0:	f2 0c 02 4c 	mul	r12,r9,r12
80005df4:	4c fa       	lddpc	r10,80005f30 <fat_mount+0x2d8>
80005df6:	95 1c       	st.w	r10[0x4],r12

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80005df8:	4d 3a       	lddpc	r10,80005f44 <fat_mount+0x2ec>
80005dfa:	f5 3a 00 13 	ld.ub	r10,r10[19]
80005dfe:	58 0a       	cp.w	r10,0
80005e00:	c1 61       	brne	80005e2c <fat_mount+0x1d4>
80005e02:	4d 16       	lddpc	r6,80005f44 <fat_mount+0x2ec>
80005e04:	ed 34 00 14 	ld.ub	r4,r6[20]
80005e08:	30 06       	mov	r6,0
80005e0a:	ec 04 18 00 	cp.b	r4,r6
80005e0e:	c0 f1       	brne	80005e2c <fat_mount+0x1d4>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
80005e10:	4c da       	lddpc	r10,80005f44 <fat_mount+0x2ec>
80005e12:	f5 36 00 20 	ld.ub	r6,r10[32]
80005e16:	ae 86       	st.b	r7[0x0],r6
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
80005e18:	f5 37 00 21 	ld.ub	r7,r10[33]
80005e1c:	bc 87       	st.b	lr[0x0],r7
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
80005e1e:	f5 3e 00 22 	ld.ub	lr,r10[34]
80005e22:	b6 9e       	st.b	r11[0x1],lr
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
80005e24:	f5 3a 00 23 	ld.ub	r10,r10[35]
80005e28:	b6 8a       	st.b	r11[0x0],r10
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80005e2a:	c0 98       	rjmp	80005e3c <fat_mount+0x1e4>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
80005e2c:	ae 8a       	st.b	r7[0x0],r10
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
80005e2e:	4c 6a       	lddpc	r10,80005f44 <fat_mount+0x2ec>
80005e30:	f5 3a 00 14 	ld.ub	r10,r10[20]
80005e34:	bc 8a       	st.b	lr[0x0],r10
      LSB2( u32_tmp ) = 0;
80005e36:	30 0a       	mov	r10,0
80005e38:	b6 9a       	st.b	r11[0x1],r10
      LSB3( u32_tmp ) = 0;
80005e3a:	b6 8a       	st.b	r11[0x0],r10
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
80005e3c:	40 14       	lddsp	r4,sp[0x4]

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
80005e3e:	4b da       	lddpc	r10,80005f30 <fat_mount+0x2d8>
80005e40:	f8 0b 15 01 	lsl	r11,r12,0x1
80005e44:	f5 5b 00 18 	st.h	r10[24],r11

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80005e48:	fa c6 ff f6 	sub	r6,sp,-10
80005e4c:	fa c7 ff f4 	sub	r7,sp,-12
80005e50:	4b db       	lddpc	r11,80005f44 <fat_mount+0x2ec>
80005e52:	f7 3e 00 11 	ld.ub	lr,r11[17]
80005e56:	0e fe       	st.b	--r7,lr
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80005e58:	f7 3e 00 12 	ld.ub	lr,r11[18]
80005e5c:	ac 8e       	st.b	r6[0x0],lr
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80005e5e:	f2 03 15 04 	lsl	r3,r9,0x4
80005e62:	9a de       	ld.uh	lr,sp[0xa]
80005e64:	e6 0e 00 0e 	add	lr,r3,lr
80005e68:	a5 7e       	lsl	lr,0x5
80005e6a:	20 1e       	sub	lr,1
80005e6c:	f2 03 15 09 	lsl	r3,r9,0x9
80005e70:	fc 03 0c 02 	divs	r2,lr,r3
80005e74:	e4 09 02 4e 	mul	lr,r2,r9
80005e78:	f5 5e 00 1a 	st.h	r10[26],lr

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80005e7c:	f7 33 00 0e 	ld.ub	r3,r11[14]
80005e80:	ae 83       	st.b	r7[0x0],r3
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
80005e82:	f7 37 00 0f 	ld.ub	r7,r11[15]
80005e86:	ac 87       	st.b	r6[0x0],r7
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80005e88:	9a 57       	ld.sh	r7,sp[0xa]
80005e8a:	f7 3b 00 30 	ld.ub	r11,r11[48]
80005e8e:	0e 96       	mov	r6,r7
80005e90:	ee 0b 01 0b 	sub	r11,r7,r11
80005e94:	b3 3b       	mul	r11,r9
80005e96:	b4 4b       	st.h	r10[0x8],r11
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
80005e98:	ee 09 02 49 	mul	r9,r7,r9
80005e9c:	5c 79       	castu.h	r9
80005e9e:	4a 8b       	lddpc	r11,80005f3c <fat_mount+0x2e4>
80005ea0:	76 0b       	ld.w	r11,r11[0x0]
80005ea2:	f2 0b 00 0b 	add	r11,r9,r11
80005ea6:	95 4b       	st.w	r10[0x10],r11

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
80005ea8:	5c 7e       	castu.h	lr
80005eaa:	fc 0c 00 1c 	add	r12,lr,r12<<0x1
80005eae:	95 5c       	st.w	r10[0x14],r12
   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
80005eb0:	58 08       	cp.w	r8,0
80005eb2:	c3 b0       	breq	80005f28 <fat_mount+0x2d0>

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80005eb4:	a9 35       	mul	r5,r4
80005eb6:	ea 09 01 09 	sub	r9,r5,r9
80005eba:	18 19       	sub	r9,r12
80005ebc:	50 19       	stdsp	sp[0x4],r9

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80005ebe:	30 1a       	mov	r10,1
80005ec0:	f4 08 18 00 	cp.b	r8,r10
80005ec4:	c0 70       	breq	80005ed2 <fat_mount+0x27a>
   {
     u32_tmp  >>= 1;   // This computation round down
80005ec6:	a1 99       	lsr	r9,0x1

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80005ec8:	a1 98       	lsr	r8,0x1
80005eca:	f4 08 18 00 	cp.b	r8,r10
80005ece:	cf c1       	brne	80005ec6 <fat_mount+0x26e>
80005ed0:	50 19       	stdsp	sp[0x4],r9
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
80005ed2:	40 18       	lddsp	r8,sp[0x4]
80005ed4:	f0 ca ff fe 	sub	r10,r8,-2
80005ed8:	49 69       	lddpc	r9,80005f30 <fat_mount+0x2d8>
80005eda:	93 3a       	st.w	r9[0xc],r10

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
80005edc:	e0 48 0f f4 	cp.w	r8,4084
80005ee0:	e0 8b 00 07 	brhi	80005eee <fat_mount+0x296>
   {
      // Is FAT 12
#if (FS_FAT_12 == DISABLED)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
80005ee4:	30 19       	mov	r9,1
80005ee6:	49 58       	lddpc	r8,80005f38 <fat_mount+0x2e0>
80005ee8:	b0 89       	st.b	r8[0x0],r9
80005eea:	30 1c       	mov	r12,1
80005eec:	c1 f8       	rjmp	80005f2a <fat_mount+0x2d2>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
80005eee:	e0 48 ff f4 	cp.w	r8,65524
80005ef2:	e0 8b 00 07 	brhi	80005f00 <fat_mount+0x2a8>
   {
      // Is FAT 16
#if (FS_FAT_16 == DISABLED)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80005ef6:	30 29       	mov	r9,2
80005ef8:	49 08       	lddpc	r8,80005f38 <fat_mount+0x2e0>
80005efa:	b0 89       	st.b	r8[0x0],r9
80005efc:	30 1c       	mov	r12,1
80005efe:	c1 68       	rjmp	80005f2a <fat_mount+0x2d2>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == DISABLED)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
80005f00:	30 39       	mov	r9,3
80005f02:	48 e8       	lddpc	r8,80005f38 <fat_mount+0x2e0>
80005f04:	b0 89       	st.b	r8[0x0],r9
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80005f06:	48 b8       	lddpc	r8,80005f30 <fat_mount+0x2d8>
80005f08:	2e 88       	sub	r8,-24
80005f0a:	48 f9       	lddpc	r9,80005f44 <fat_mount+0x2ec>
80005f0c:	f3 3a 00 2c 	ld.ub	r10,r9[44]
80005f10:	b0 ba       	st.b	r8[0x3],r10
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
80005f12:	f3 3a 00 2d 	ld.ub	r10,r9[45]
80005f16:	b0 aa       	st.b	r8[0x2],r10
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80005f18:	f3 3a 00 2e 	ld.ub	r10,r9[46]
80005f1c:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80005f1e:	f3 39 00 2f 	ld.ub	r9,r9[47]
80005f22:	b0 89       	st.b	r8[0x0],r9
80005f24:	30 1c       	mov	r12,1
80005f26:	c0 28       	rjmp	80005f2a <fat_mount+0x2d2>
80005f28:	30 0c       	mov	r12,0
   }
   }

   return true;
}
80005f2a:	2f dd       	sub	sp,-12
80005f2c:	d8 32       	popm	r0-r7,pc
80005f2e:	00 00       	add	r0,r0
80005f30:	00 00       	add	r0,r0
80005f32:	06 ec       	st.h	--r3,r12
80005f34:	80 00       	ld.sh	r0,r0[0x0]
80005f36:	42 a0       	lddsp	r0,sp[0xa8]
80005f38:	00 00       	add	r0,r0
80005f3a:	07 38       	ld.ub	r8,r3++
80005f3c:	00 00       	add	r0,r0
80005f3e:	04 a8       	st.w	r2++,r8
80005f40:	80 00       	ld.sh	r0,r0[0x0]
80005f42:	50 5c       	stdsp	sp[0x14],r12
80005f44:	00 00       	add	r0,r0
80005f46:	04 ec       	st.h	--r2,r12
80005f48:	80 00       	ld.sh	r0,r0[0x0]
80005f4a:	48 cc       	lddpc	r12,80005f78 <file_bof>
80005f4c:	00 00       	add	r0,r0
80005f4e:	07 3c       	ld.ub	r12,r3++
80005f50:	80 00       	ld.sh	r0,r0[0x0]
80005f52:	6d 3c       	ld.w	r12,r6[0x4c]

80005f54 <file_eof>:
//! @return    1     the position is at the end of file
//! @return    0     the position isn't at the end of file
//! @return    FFh   error
//!
uint8_t    file_eof( void )
{
80005f54:	d4 01       	pushm	lr
   if( !fat_check_mount_select_open() )
80005f56:	f0 1f 00 07 	mcall	80005f70 <file_eof+0x1c>
80005f5a:	c0 41       	brne	80005f62 <file_eof+0xe>
80005f5c:	e0 6c 00 ff 	mov	r12,255
80005f60:	d8 02       	popm	pc
      return 0xFF;
   return (fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file );
80005f62:	48 58       	lddpc	r8,80005f74 <file_eof+0x20>
80005f64:	70 29       	ld.w	r9,r8[0x8]
80005f66:	70 38       	ld.w	r8,r8[0xc]
80005f68:	10 39       	cp.w	r9,r8
80005f6a:	5f 8c       	srls	r12
}
80005f6c:	d8 02       	popm	pc
80005f6e:	00 00       	add	r0,r0
80005f70:	80 00       	ld.sh	r0,r0[0x0]
80005f72:	51 a0       	stdsp	sp[0x68],r0
80005f74:	00 00       	add	r0,r0
80005f76:	04 ac       	st.w	r2++,r12

80005f78 <file_bof>:
//! @return    1     the position is at the beginning of file
//! @return    0     the position isn't at the beginning of file
//! @return    FFh   error
//!
uint8_t    file_bof( void )
{
80005f78:	d4 01       	pushm	lr
   if( !fat_check_mount_select_open() )
80005f7a:	f0 1f 00 06 	mcall	80005f90 <file_bof+0x18>
80005f7e:	c0 41       	brne	80005f86 <file_bof+0xe>
80005f80:	e0 6c 00 ff 	mov	r12,255
80005f84:	d8 02       	popm	pc
      return 0xFF;

   return (0 == fs_g_nav_entry.u32_pos_in_file );
80005f86:	48 48       	lddpc	r8,80005f94 <file_bof+0x1c>
80005f88:	70 38       	ld.w	r8,r8[0xc]
80005f8a:	58 08       	cp.w	r8,0
80005f8c:	5f 0c       	sreq	r12
}
80005f8e:	d8 02       	popm	pc
80005f90:	80 00       	ld.sh	r0,r0[0x0]
80005f92:	51 a0       	stdsp	sp[0x68],r0
80005f94:	00 00       	add	r0,r0
80005f96:	04 ac       	st.w	r2++,r12

80005f98 <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
80005f98:	d4 01       	pushm	lr
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
80005f9a:	f0 1f 00 0a 	mcall	80005fc0 <file_close+0x28>
80005f9e:	c1 00       	breq	80005fbe <file_close+0x26>
   {

#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
80005fa0:	48 98       	lddpc	r8,80005fc4 <file_close+0x2c>
80005fa2:	11 88       	ld.ub	r8,r8[0x0]
80005fa4:	e2 18 00 02 	andl	r8,0x2,COH
80005fa8:	c0 80       	breq	80005fb8 <file_close+0x20>
      {
         // Write file information
         if( !fat_read_dir() )
80005faa:	f0 1f 00 08 	mcall	80005fc8 <file_close+0x30>
80005fae:	c0 80       	breq	80005fbe <file_close+0x26>
            return;           // error
         fat_write_entry_file();
80005fb0:	f0 1f 00 07 	mcall	80005fcc <file_close+0x34>
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
80005fb4:	f0 1f 00 07 	mcall	80005fd0 <file_close+0x38>
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
80005fb8:	30 09       	mov	r9,0
80005fba:	48 38       	lddpc	r8,80005fc4 <file_close+0x2c>
80005fbc:	b0 89       	st.b	r8[0x0],r9
80005fbe:	d8 02       	popm	pc
80005fc0:	80 00       	ld.sh	r0,r0[0x0]
80005fc2:	51 a0       	stdsp	sp[0x68],r0
80005fc4:	00 00       	add	r0,r0
80005fc6:	04 ac       	st.w	r2++,r12
80005fc8:	80 00       	ld.sh	r0,r0[0x0]
80005fca:	4e fc       	lddpc	r12,80006184 <file_read_buf+0x144>
80005fcc:	80 00       	ld.sh	r0,r0[0x0]
80005fce:	46 bc       	lddsp	r12,sp[0x1ac]
80005fd0:	80 00       	ld.sh	r0,r0[0x0]
80005fd2:	48 60       	lddpc	r0,80005fe8 <file_getc+0x14>

80005fd4 <file_getc>:
//!
//! @return    The byte readed
//! @return    EOF, in case of error or end of file
//!
uint16_t   file_getc( void )
{
80005fd4:	d4 01       	pushm	lr
   uint16_t   u16_byte;

   while(1)
   {
      if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
80005fd6:	49 78       	lddpc	r8,80006030 <file_getc+0x5c>
80005fd8:	11 88       	ld.ub	r8,r8[0x0]
80005fda:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005fde:	c0 51       	brne	80005fe8 <file_getc+0x14>
      {
         fs_g_status = FS_ERR_WRITE_ONLY;
80005fe0:	31 e9       	mov	r9,30
80005fe2:	49 58       	lddpc	r8,80006034 <file_getc+0x60>
80005fe4:	b0 89       	st.b	r8[0x0],r9
80005fe6:	dc 0a       	popm	pc,r12=-1
         break;
      }
      if( fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file )
80005fe8:	49 28       	lddpc	r8,80006030 <file_getc+0x5c>
80005fea:	70 29       	ld.w	r9,r8[0x8]
80005fec:	70 38       	ld.w	r8,r8[0xc]
80005fee:	10 39       	cp.w	r9,r8
80005ff0:	e0 8b 00 06 	brhi	80005ffc <file_getc+0x28>
      {
         fs_g_status = FS_ERR_EOF;
80005ff4:	32 09       	mov	r9,32
80005ff6:	49 08       	lddpc	r8,80006034 <file_getc+0x60>
80005ff8:	b0 89       	st.b	r8[0x0],r9
80005ffa:	dc 0a       	popm	pc,r12=-1
         break;
      }

      if( !fat_read_file( FS_CLUST_ACT_ONE ))
80005ffc:	30 2c       	mov	r12,2
80005ffe:	f0 1f 00 0f 	mcall	80006038 <file_getc+0x64>
80006002:	c0 c1       	brne	8000601a <file_getc+0x46>
      {
         if( FS_ERR_OUT_LIST == fs_g_status )
80006004:	48 c8       	lddpc	r8,80006034 <file_getc+0x60>
80006006:	11 89       	ld.ub	r9,r8[0x0]
80006008:	31 a8       	mov	r8,26
8000600a:	f0 09 18 00 	cp.b	r9,r8
8000600e:	c0 20       	breq	80006012 <file_getc+0x3e>
80006010:	dc 0a       	popm	pc,r12=-1
         {  // Translate the error
            fs_g_status = FS_ERR_EOF;   // End of file
80006012:	32 09       	mov	r9,32
80006014:	48 88       	lddpc	r8,80006034 <file_getc+0x60>
80006016:	b0 89       	st.b	r8[0x0],r9
80006018:	dc 0a       	popm	pc,r12=-1
         }
         break;
      }

      u16_byte = fs_g_sector[ fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK ];
8000601a:	48 68       	lddpc	r8,80006030 <file_getc+0x5c>
8000601c:	70 39       	ld.w	r9,r8[0xc]
8000601e:	f5 d9 c0 09 	bfextu	r10,r9,0x0,0x9
80006022:	48 7b       	lddpc	r11,8000603c <file_getc+0x68>
80006024:	f6 0a 07 0c 	ld.ub	r12,r11[r10]
      fs_g_nav_entry.u32_pos_in_file++;
80006028:	2f f9       	sub	r9,-1
8000602a:	91 39       	st.w	r8[0xc],r9
      return u16_byte;
   }
   return FS_EOF;   // No data readed
}
8000602c:	d8 02       	popm	pc
8000602e:	00 00       	add	r0,r0
80006030:	00 00       	add	r0,r0
80006032:	04 ac       	st.w	r2++,r12
80006034:	00 00       	add	r0,r0
80006036:	07 3c       	ld.ub	r12,r3++
80006038:	80 00       	ld.sh	r0,r0[0x0]
8000603a:	4f 80       	lddpc	r0,80006218 <file_open+0x44>
8000603c:	00 00       	add	r0,r0
8000603e:	04 ec       	st.h	--r2,r12

80006040 <file_read_buf>:
//!
//! @return    number of byte read
//! @return    0, in case of error
//!
uint16_t   file_read_buf( uint8_t _MEM_TYPE_SLOW_ *buffer , uint16_t u16_buf_size )
{
80006040:	d4 31       	pushm	r0-r7,lr
80006042:	20 1d       	sub	sp,4
80006044:	18 95       	mov	r5,r12
80006046:	16 94       	mov	r4,r11
   _MEM_TYPE_FAST_ uint16_t u16_nb_read_tmp;
   _MEM_TYPE_FAST_ uint16_t u16_nb_read;
   _MEM_TYPE_FAST_ uint16_t u16_pos_in_sector;
   _MEM_TYPE_FAST_ uint32_t u32_byte_remaining;

   if( !fat_check_mount_select_open())
80006048:	f0 1f 00 59 	mcall	800061ac <file_read_buf+0x16c>
8000604c:	e0 80 00 ac 	breq	800061a4 <file_read_buf+0x164>
      return false;

   if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
80006050:	4d 88       	lddpc	r8,800061b0 <file_read_buf+0x170>
80006052:	11 88       	ld.ub	r8,r8[0x0]
80006054:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006058:	c0 40       	breq	80006060 <file_read_buf+0x20>
      return false;
   }

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
8000605a:	58 04       	cp.w	r4,0
8000605c:	c0 71       	brne	8000606a <file_read_buf+0x2a>
8000605e:	ca 38       	rjmp	800061a4 <file_read_buf+0x164>
   if( !fat_check_mount_select_open())
      return false;

   if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
   {
      fs_g_status = FS_ERR_WRITE_ONLY;
80006060:	31 e9       	mov	r9,30
80006062:	4d 58       	lddpc	r8,800061b4 <file_read_buf+0x174>
80006064:	b0 89       	st.b	r8[0x0],r9
80006066:	30 00       	mov	r0,0
      return false;
80006068:	c9 f8       	rjmp	800061a6 <file_read_buf+0x166>
8000606a:	30 00       	mov	r0,0
      if ( file_eof() )
      {
         fs_g_status = FS_ERR_EOF;
         return u16_nb_read;     // End of the file
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
8000606c:	4d 13       	lddpc	r3,800061b0 <file_read_buf+0x170>
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;

      if( (0== u16_pos_in_sector)
8000606e:	30 0a       	mov	r10,0
80006070:	ba ba       	st.b	sp[0x3],r10
            if( FS_ERR_OUT_LIST == fs_g_status )
               fs_g_status = FS_ERR_EOF;  // translate the error
            return u16_nb_read;
         }
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
80006072:	4d 27       	lddpc	r7,800061b8 <file_read_buf+0x178>

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
   {
      if ( file_eof() )
80006074:	f0 1f 00 52 	mcall	800061bc <file_read_buf+0x17c>
80006078:	c0 50       	breq	80006082 <file_read_buf+0x42>
      {
         fs_g_status = FS_ERR_EOF;
8000607a:	32 09       	mov	r9,32
8000607c:	4c e8       	lddpc	r8,800061b4 <file_read_buf+0x174>
8000607e:	b0 89       	st.b	r8[0x0],r9
         return u16_nb_read;     // End of the file
80006080:	c9 38       	rjmp	800061a6 <file_read_buf+0x166>
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
80006082:	66 31       	ld.w	r1,r3[0xc]
80006084:	66 22       	ld.w	r2,r3[0x8]
80006086:	02 12       	sub	r2,r1
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
80006088:	e3 d1 c0 09 	bfextu	r1,r1,0x0,0x9

      if( (0== u16_pos_in_sector)
8000608c:	30 09       	mov	r9,0
8000608e:	f2 01 19 00 	cp.h	r1,r9
80006092:	5f 09       	sreq	r9
80006094:	e0 42 01 ff 	cp.w	r2,511
80006098:	5f b8       	srhi	r8
8000609a:	f3 e8 00 08 	and	r8,r9,r8
8000609e:	1b ba       	ld.ub	r10,sp[0x3]
800060a0:	f4 08 18 00 	cp.b	r8,r10
800060a4:	c4 a0       	breq	80006138 <file_read_buf+0xf8>
800060a6:	e0 68 01 ff 	mov	r8,511
800060aa:	08 99       	mov	r9,r4
800060ac:	f0 04 19 00 	cp.h	r4,r8
800060b0:	e0 88 00 44 	brls	80006138 <file_read_buf+0xf8>
800060b4:	f1 d5 c0 02 	bfextu	r8,r5,0x0,0x2
800060b8:	c4 01       	brne	80006138 <file_read_buf+0xf8>
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
#endif
      )
      {
         // The file data sector can been directly transfer from memory to buffer (don't use internal cache)
         if( u16_buf_size <= u32_byte_remaining)
800060ba:	08 98       	mov	r8,r4
800060bc:	5c 78       	castu.h	r8
800060be:	5c 89       	casts.h	r9
         {
            u16_nb_read_tmp = u16_buf_size;
         }else{
            u16_nb_read_tmp = u32_byte_remaining;
800060c0:	ed d2 b0 10 	bfexts	r6,r2,0x0,0x10
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
#endif
      )
      {
         // The file data sector can been directly transfer from memory to buffer (don't use internal cache)
         if( u16_buf_size <= u32_byte_remaining)
800060c4:	10 32       	cp.w	r2,r8
800060c6:	f2 06 17 20 	movhs	r6,r9
            u16_nb_read_tmp = u32_byte_remaining;
         }
         u16_nb_read_tmp = u16_nb_read_tmp / FS_512B;  // read a modulo sector size

         // Get following sector segment of file
         if( !fat_read_file(FS_CLUST_ACT_SEG))
800060ca:	30 1c       	mov	r12,1
800060cc:	f0 1f 00 3d 	mcall	800061c0 <file_read_buf+0x180>
800060d0:	c0 b1       	brne	800060e6 <file_read_buf+0xa6>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
800060d2:	4b 98       	lddpc	r8,800061b4 <file_read_buf+0x174>
800060d4:	11 89       	ld.ub	r9,r8[0x0]
800060d6:	31 a8       	mov	r8,26
800060d8:	f0 09 18 00 	cp.b	r9,r8
800060dc:	c6 51       	brne	800061a6 <file_read_buf+0x166>
               fs_g_status = FS_ERR_EOF;  // translate the error
800060de:	32 09       	mov	r9,32
800060e0:	4b 58       	lddpc	r8,800061b4 <file_read_buf+0x174>
800060e2:	b0 89       	st.b	r8[0x0],r9
800060e4:	c6 18       	rjmp	800061a6 <file_read_buf+0x166>
         {
            u16_nb_read_tmp = u16_buf_size;
         }else{
            u16_nb_read_tmp = u32_byte_remaining;
         }
         u16_nb_read_tmp = u16_nb_read_tmp / FS_512B;  // read a modulo sector size
800060e6:	ed d6 c1 27 	bfextu	r6,r6,0x9,0x7
            if( FS_ERR_OUT_LIST == fs_g_status )
               fs_g_status = FS_ERR_EOF;  // translate the error
            return u16_nb_read;
         }
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
800060ea:	f1 d6 c0 10 	bfextu	r8,r6,0x0,0x10
800060ee:	6e 19       	ld.w	r9,r7[0x4]
800060f0:	12 38       	cp.w	r8,r9
800060f2:	e0 88 00 08 	brls	80006102 <file_read_buf+0xc2>
         {
            u16_nb_read_tmp = fs_g_seg.u32_size_or_pos;
800060f6:	ed d9 b0 10 	bfexts	r6,r9,0x0,0x10
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
         }

         // Directly data tranfert from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
800060fa:	6e 18       	ld.w	r8,r7[0x4]
800060fc:	58 08       	cp.w	r8,0
800060fe:	c0 41       	brne	80006106 <file_read_buf+0xc6>
80006100:	c1 88       	rjmp	80006130 <file_read_buf+0xf0>
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
         {
            u16_nb_read_tmp = fs_g_seg.u32_size_or_pos;
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
80006102:	8f 18       	st.w	r7[0x4],r8
80006104:	cf bb       	rjmp	800060fa <file_read_buf+0xba>
         }

         // Directly data tranfert from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
         {
            if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_seg.u32_addr, buffer))
80006106:	0a 9a       	mov	r10,r5
80006108:	6e 0b       	ld.w	r11,r7[0x0]
8000610a:	4a f8       	lddpc	r8,800061c4 <file_read_buf+0x184>
8000610c:	11 8c       	ld.ub	r12,r8[0x0]
8000610e:	f0 1f 00 2f 	mcall	800061c8 <file_read_buf+0x188>
80006112:	c0 50       	breq	8000611c <file_read_buf+0xdc>
            {
               fs_g_status = FS_ERR_HW;
80006114:	30 19       	mov	r9,1
80006116:	4a 88       	lddpc	r8,800061b4 <file_read_buf+0x174>
80006118:	b0 89       	st.b	r8[0x0],r9
               return u16_nb_read;
8000611a:	c4 68       	rjmp	800061a6 <file_read_buf+0x166>
            }
            fs_g_seg.u32_size_or_pos--;
8000611c:	6e 18       	ld.w	r8,r7[0x4]
8000611e:	20 18       	sub	r8,1
80006120:	8f 18       	st.w	r7[0x4],r8
            fs_g_seg.u32_addr++;
80006122:	6e 09       	ld.w	r9,r7[0x0]
80006124:	2f f9       	sub	r9,-1
80006126:	8f 09       	st.w	r7[0x0],r9
            buffer += FS_512B;
80006128:	ea c5 fe 00 	sub	r5,r5,-512
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
         }

         // Directly data tranfert from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
8000612c:	58 08       	cp.w	r8,0
8000612e:	ce c1       	brne	80006106 <file_read_buf+0xc6>
            fs_g_seg.u32_size_or_pos--;
            fs_g_seg.u32_addr++;
            buffer += FS_512B;
         }
         // Translate from sector unit to byte unit
         u16_nb_read_tmp *= FS_512B;
80006130:	a9 76       	lsl	r6,0x9
80006132:	e5 d6 b0 10 	bfexts	r2,r6,0x0,0x10
         return u16_nb_read;     // End of the file
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;

      if( (0== u16_pos_in_sector)
80006136:	c2 98       	rjmp	80006188 <file_read_buf+0x148>
      else
      {
         // The file data can't been directly transfer from memory to buffer, the internal cache must be used

         // Tranfer data from memory to internal cache
         if( !fat_read_file( FS_CLUST_ACT_ONE ))
80006138:	30 2c       	mov	r12,2
8000613a:	f0 1f 00 22 	mcall	800061c0 <file_read_buf+0x180>
8000613e:	c0 b1       	brne	80006154 <file_read_buf+0x114>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
80006140:	49 d8       	lddpc	r8,800061b4 <file_read_buf+0x174>
80006142:	11 89       	ld.ub	r9,r8[0x0]
80006144:	31 a8       	mov	r8,26
80006146:	f0 09 18 00 	cp.b	r9,r8
8000614a:	c2 e1       	brne	800061a6 <file_read_buf+0x166>
            {  // Translate the error
               fs_g_status = FS_ERR_EOF;   // End of file
8000614c:	32 09       	mov	r9,32
8000614e:	49 a8       	lddpc	r8,800061b4 <file_read_buf+0x174>
80006150:	b0 89       	st.b	r8[0x0],r9
80006152:	c2 a8       	rjmp	800061a6 <file_read_buf+0x166>
            }
            return u16_nb_read;
         }

         // Compute the number of data to transfer
         u16_nb_read_tmp = FS_512B - u16_pos_in_sector;  // The number is limited at sector size
80006154:	e0 68 02 00 	mov	r8,512
80006158:	02 18       	sub	r8,r1
8000615a:	5c 88       	casts.h	r8
         if( u16_nb_read_tmp > u32_byte_remaining )
8000615c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
            u16_nb_read_tmp = u32_byte_remaining;
80006160:	f5 d2 b0 10 	bfexts	r10,r2,0x0,0x10
80006164:	12 32       	cp.w	r2,r9
80006166:	f4 08 17 30 	movlo	r8,r10
8000616a:	f0 04 19 00 	cp.h	r4,r8
8000616e:	e8 08 17 30 	movlo	r8,r4
80006172:	e5 d8 b0 10 	bfexts	r2,r8,0x0,0x10
         if( u16_nb_read_tmp > u16_buf_size )
            u16_nb_read_tmp = u16_buf_size;

         // Tranfer data from internal cache to buffer
         memcpy_ram2ram( buffer , &fs_g_sector[ u16_pos_in_sector ], u16_nb_read_tmp );
80006176:	ed d2 c0 10 	bfextu	r6,r2,0x0,0x10
8000617a:	0c 9a       	mov	r10,r6
8000617c:	49 4b       	lddpc	r11,800061cc <file_read_buf+0x18c>
8000617e:	02 0b       	add	r11,r1
80006180:	0a 9c       	mov	r12,r5
80006182:	f0 1f 00 14 	mcall	800061d0 <file_read_buf+0x190>
         buffer += u16_nb_read_tmp;
80006186:	0c 05       	add	r5,r6
      }
      // Update positions
      fs_g_nav_entry.u32_pos_in_file   += u16_nb_read_tmp;
80006188:	f3 d2 c0 10 	bfextu	r9,r2,0x0,0x10
8000618c:	66 38       	ld.w	r8,r3[0xc]
8000618e:	f2 08 00 08 	add	r8,r9,r8
80006192:	87 38       	st.w	r3[0xc],r8
      u16_nb_read                      += u16_nb_read_tmp;
80006194:	e4 00 00 00 	add	r0,r2,r0
80006198:	5c 80       	casts.h	r0
      u16_buf_size                     -= u16_nb_read_tmp;
8000619a:	04 14       	sub	r4,r2
8000619c:	5c 84       	casts.h	r4
      return false;
   }

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
8000619e:	fe 91 ff 6b 	brne	80006074 <file_read_buf+0x34>
800061a2:	c0 28       	rjmp	800061a6 <file_read_buf+0x166>
800061a4:	30 00       	mov	r0,0
      fs_g_nav_entry.u32_pos_in_file   += u16_nb_read_tmp;
      u16_nb_read                      += u16_nb_read_tmp;
      u16_buf_size                     -= u16_nb_read_tmp;
   }
   return u16_nb_read;  // Buffer is full
}
800061a6:	00 9c       	mov	r12,r0
800061a8:	2f fd       	sub	sp,-4
800061aa:	d8 32       	popm	r0-r7,pc
800061ac:	80 00       	ld.sh	r0,r0[0x0]
800061ae:	51 a0       	stdsp	sp[0x68],r0
800061b0:	00 00       	add	r0,r0
800061b2:	04 ac       	st.w	r2++,r12
800061b4:	00 00       	add	r0,r0
800061b6:	07 3c       	ld.ub	r12,r3++
800061b8:	00 00       	add	r0,r0
800061ba:	07 94       	ld.ub	r4,r3[0x1]
800061bc:	80 00       	ld.sh	r0,r0[0x0]
800061be:	5f 54       	srlt	r4
800061c0:	80 00       	ld.sh	r0,r0[0x0]
800061c2:	4f 80       	lddpc	r0,800063a0 <nav_filelist_set+0x1c>
800061c4:	00 00       	add	r0,r0
800061c6:	06 ec       	st.h	--r3,r12
800061c8:	80 00       	ld.sh	r0,r0[0x0]
800061ca:	6d 94       	ld.w	r4,r6[0x64]
800061cc:	00 00       	add	r0,r0
800061ce:	04 ec       	st.h	--r2,r12
800061d0:	80 00       	ld.sh	r0,r0[0x0]
800061d2:	7c 7e       	ld.w	lr,lr[0x1c]

800061d4 <file_open>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
Bool  file_open( uint8_t fopen_mode )
{
800061d4:	eb cd 40 c0 	pushm	r6-r7,lr
800061d8:	18 97       	mov	r7,r12
   if( !fat_check_mount_select_noopen())
800061da:	f0 1f 00 20 	mcall	80006258 <file_open+0x84>
800061de:	c3 a0       	breq	80006252 <file_open+0x7e>
      return false;

   if( !fat_check_is_file())
800061e0:	f0 1f 00 1f 	mcall	8000625c <file_open+0x88>
800061e4:	c3 70       	breq	80006252 <file_open+0x7e>
      return false;

   if(FOPEN_WRITE_ACCESS & fopen_mode)
800061e6:	0e 96       	mov	r6,r7
800061e8:	0e 98       	mov	r8,r7
800061ea:	e2 18 00 02 	andl	r8,0x2,COH
800061ee:	c1 90       	breq	80006220 <file_open+0x4c>
   {
      if( !fat_check_nav_access_file( true ) )
800061f0:	30 1c       	mov	r12,1
800061f2:	f0 1f 00 1c 	mcall	80006260 <file_open+0x8c>
800061f6:	c2 e0       	breq	80006252 <file_open+0x7e>
         return false;
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if (FS_ATTR_READ_ONLY & fs_g_nav_entry.u8_attr)
800061f8:	49 b8       	lddpc	r8,80006264 <file_open+0x90>
800061fa:	11 a8       	ld.ub	r8,r8[0x2]
800061fc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006200:	c0 60       	breq	8000620c <file_open+0x38>
      {
         fs_g_status = FS_ERR_READ_ONLY;  // File is read only
80006202:	31 59       	mov	r9,21
80006204:	49 98       	lddpc	r8,80006268 <file_open+0x94>
80006206:	b0 89       	st.b	r8[0x0],r9
80006208:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      if( mem_wr_protect( fs_g_nav.u8_lun  ))
8000620c:	49 88       	lddpc	r8,8000626c <file_open+0x98>
8000620e:	11 8c       	ld.ub	r12,r8[0x0]
80006210:	f0 1f 00 18 	mcall	80006270 <file_open+0x9c>
80006214:	c0 a0       	breq	80006228 <file_open+0x54>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
80006216:	31 49       	mov	r9,20
80006218:	49 48       	lddpc	r8,80006268 <file_open+0x94>
8000621a:	b0 89       	st.b	r8[0x0],r9
8000621c:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( false ) )
80006220:	30 0c       	mov	r12,0
80006222:	f0 1f 00 10 	mcall	80006260 <file_open+0x8c>
80006226:	c1 60       	breq	80006252 <file_open+0x7e>
         return false;
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
80006228:	0c 98       	mov	r8,r6
8000622a:	e2 18 00 04 	andl	r8,0x4,COH
8000622e:	c0 40       	breq	80006236 <file_open+0x62>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
80006230:	30 09       	mov	r9,0
80006232:	48 d8       	lddpc	r8,80006264 <file_open+0x90>
80006234:	91 29       	st.w	r8[0x8],r9
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
80006236:	e2 16 00 08 	andl	r6,0x8,COH
8000623a:	c0 50       	breq	80006244 <file_open+0x70>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
8000623c:	30 09       	mov	r9,0
8000623e:	48 a8       	lddpc	r8,80006264 <file_open+0x90>
80006240:	91 39       	st.w	r8[0xc],r9
80006242:	c0 48       	rjmp	8000624a <file_open+0x76>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
80006244:	48 88       	lddpc	r8,80006264 <file_open+0x90>
80006246:	70 29       	ld.w	r9,r8[0x8]
80006248:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
8000624a:	48 78       	lddpc	r8,80006264 <file_open+0x90>
8000624c:	b0 87       	st.b	r8[0x0],r7
8000624e:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
   return true;
80006252:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80006256:	00 00       	add	r0,r0
80006258:	80 00       	ld.sh	r0,r0[0x0]
8000625a:	51 c4       	stdsp	sp[0x70],r4
8000625c:	80 00       	ld.sh	r0,r0[0x0]
8000625e:	3f c0       	mov	r0,-4
80006260:	80 00       	ld.sh	r0,r0[0x0]
80006262:	47 0c       	lddsp	r12,sp[0x1c0]
80006264:	00 00       	add	r0,r0
80006266:	04 ac       	st.w	r2++,r12
80006268:	00 00       	add	r0,r0
8000626a:	07 3c       	ld.ub	r12,r3++
8000626c:	00 00       	add	r0,r0
8000626e:	06 ec       	st.h	--r3,r12
80006270:	80 00       	ld.sh	r0,r0[0x0]
80006272:	6d 44       	ld.w	r4,r6[0x50]

80006274 <nav_getindex>:
//! This routine is interresting to save a file position in small variable.
//! This pointer allow to reinit a navigator quickly with nav_gotoindex() routine.
//! @endverbatim
//!
Fs_index nav_getindex( void )
{
80006274:	20 3d       	sub	sp,12
   // Fill index structure
   index.u8_lun                  = fs_g_nav.u8_lun;
#if (FS_MULTI_PARTITION  ==  ENABLED)
   index.u8_partition            = fs_g_nav.u8_partition;
#endif
   index.u32_cluster_sel_dir     = fs_g_nav.u32_cluster_sel_dir;
80006276:	48 69       	lddpc	r9,8000628c <nav_getindex+0x18>
80006278:	72 8b       	ld.w	r11,r9[0x20]
   index.u16_entry_pos_sel_file  = fs_g_nav_fast.u16_entry_pos_sel_file;
8000627a:	48 6a       	lddpc	r10,80006290 <nav_getindex+0x1c>
8000627c:	94 1a       	ld.sh	r10,r10[0x2]
   return index;
8000627e:	13 89       	ld.ub	r9,r9[0x0]
80006280:	b8 89       	st.b	r12[0x0],r9
80006282:	99 1b       	st.w	r12[0x4],r11
80006284:	b8 4a       	st.h	r12[0x8],r10
}
80006286:	2f dd       	sub	sp,-12
80006288:	5e fc       	retal	r12
8000628a:	00 00       	add	r0,r0
8000628c:	00 00       	add	r0,r0
8000628e:	06 ec       	st.h	--r3,r12
80006290:	00 00       	add	r0,r0
80006292:	07 38       	ld.ub	r8,r3++

80006294 <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
Bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , Bool b_mode , Bool b_match_case  )
{
80006294:	d4 31       	pushm	r0-r7,lr
80006296:	20 1d       	sub	sp,4
80006298:	18 95       	mov	r5,r12
8000629a:	16 97       	mov	r7,r11
8000629c:	14 96       	mov	r6,r10
8000629e:	12 94       	mov	r4,r9
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   Bool  b_readshortname = false;

   if ( !fat_check_mount_select())
800062a0:	f0 1f 00 32 	mcall	80006368 <nav_file_name+0xd4>
800062a4:	c5 e0       	breq	80006360 <nav_file_name+0xcc>
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
800062a6:	30 18       	mov	r8,1
800062a8:	f0 06 18 00 	cp.b	r6,r8
800062ac:	5f 0a       	sreq	r10
800062ae:	30 08       	mov	r8,0
800062b0:	f0 07 18 00 	cp.b	r7,r8
800062b4:	5f 09       	sreq	r9
800062b6:	f5 e9 00 09 	and	r9,r10,r9
800062ba:	f0 09 18 00 	cp.b	r9,r8
800062be:	c0 30       	breq	800062c4 <nav_file_name+0x30>
800062c0:	30 1c       	mov	r12,1
800062c2:	c5 08       	rjmp	80006362 <nav_file_name+0xce>
   {
      return true;
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
800062c4:	4a a8       	lddpc	r8,8000636c <nav_file_name+0xd8>
800062c6:	90 13       	ld.sh	r3,r8[0x2]
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
800062c8:	58 03       	cp.w	r3,0
800062ca:	c0 31       	brne	800062d0 <nav_file_name+0x3c>
800062cc:	30 10       	mov	r0,1
800062ce:	c0 68       	rjmp	800062da <nav_file_name+0x46>
   {
      b_readshortname = true;                   // It isn't possibled to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
800062d0:	e6 c9 00 01 	sub	r9,r3,1
800062d4:	4a 68       	lddpc	r8,8000636c <nav_file_name+0xd8>
800062d6:	b0 19       	st.h	r8[0x2],r9
800062d8:	30 00       	mov	r0,0
800062da:	30 08       	mov	r8,0
800062dc:	50 08       	stdsp	sp[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
800062de:	31 01       	mov	r1,16
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
800062e0:	4a 32       	lddpc	r2,8000636c <nav_file_name+0xd8>
800062e2:	c0 28       	rjmp	800062e6 <nav_file_name+0x52>
   {
      b_readshortname = true;                   // It isn't possibled to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
800062e4:	30 10       	mov	r0,1

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
800062e6:	f0 1f 00 23 	mcall	80006370 <nav_file_name+0xdc>
800062ea:	c3 b0       	breq	80006360 <nav_file_name+0xcc>
         break; // error

      if ( b_readshortname )
800062ec:	58 00       	cp.w	r0,0
800062ee:	c0 70       	breq	800062fc <nav_file_name+0x68>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
800062f0:	0c 9a       	mov	r10,r6
800062f2:	0e 9b       	mov	r11,r7
800062f4:	0a 9c       	mov	r12,r5
800062f6:	f0 1f 00 20 	mcall	80006374 <nav_file_name+0xe0>
800062fa:	c3 48       	rjmp	80006362 <nav_file_name+0xce>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
800062fc:	08 99       	mov	r9,r4
800062fe:	0c 9a       	mov	r10,r6
80006300:	0e 9b       	mov	r11,r7
80006302:	0a 9c       	mov	r12,r5
80006304:	f0 1f 00 1d 	mcall	80006378 <nav_file_name+0xe4>
80006308:	c0 f0       	breq	80006326 <nav_file_name+0x92>
      {
         if( g_b_string_length )
8000630a:	49 d8       	lddpc	r8,8000637c <nav_file_name+0xe8>
8000630c:	11 89       	ld.ub	r9,r8[0x0]
8000630e:	30 08       	mov	r8,0
80006310:	f0 09 18 00 	cp.b	r9,r8
80006314:	c0 50       	breq	8000631e <nav_file_name+0x8a>
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
80006316:	8a 08       	ld.sh	r8,r5[0x0]
80006318:	40 09       	lddsp	r9,sp[0x0]
8000631a:	12 08       	add	r8,r9
8000631c:	aa 08       	st.h	r5[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000631e:	49 48       	lddpc	r8,8000636c <nav_file_name+0xd8>
80006320:	b0 13       	st.h	r8[0x2],r3
80006322:	30 1c       	mov	r12,1
         return true;
80006324:	c1 f8       	rjmp	80006362 <nav_file_name+0xce>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80006326:	49 79       	lddpc	r9,80006380 <nav_file_name+0xec>
80006328:	13 88       	ld.ub	r8,r9[0x0]
8000632a:	e2 08 18 00 	cp.b	r8,r1
8000632e:	c0 70       	breq	8000633c <nav_file_name+0xa8>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
80006330:	a4 13       	st.h	r2[0x2],r3

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
80006332:	30 b9       	mov	r9,11
80006334:	f2 08 18 00 	cp.b	r8,r9
80006338:	c1 41       	brne	80006360 <nav_file_name+0xcc>
8000633a:	cd 5b       	rjmp	800062e4 <nav_file_name+0x50>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
8000633c:	49 09       	lddpc	r9,8000637c <nav_file_name+0xe8>
8000633e:	13 88       	ld.ub	r8,r9[0x0]
80006340:	30 09       	mov	r9,0
80006342:	f2 08 18 00 	cp.b	r8,r9
80006346:	c0 60       	breq	80006352 <nav_file_name+0xbe>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
80006348:	40 08       	lddsp	r8,sp[0x0]
8000634a:	2f 38       	sub	r8,-13
8000634c:	5c 88       	casts.h	r8
8000634e:	50 08       	stdsp	sp[0x0],r8
80006350:	c0 48       	rjmp	80006358 <nav_file_name+0xc4>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
80006352:	2f 35       	sub	r5,-13
         u8_size_max -= FS_SIZE_LFN_ENTRY;
80006354:	20 d7       	sub	r7,13
80006356:	5c 57       	castu.b	r7
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80006358:	84 18       	ld.sh	r8,r2[0x2]
8000635a:	20 18       	sub	r8,1
8000635c:	a4 18       	st.h	r2[0x2],r8
8000635e:	cc 4b       	rjmp	800062e6 <nav_file_name+0x52>
80006360:	30 0c       	mov	r12,0

   }  // end of loop while(1)
   return false;
}
80006362:	2f fd       	sub	sp,-4
80006364:	d8 32       	popm	r0-r7,pc
80006366:	00 00       	add	r0,r0
80006368:	80 00       	ld.sh	r0,r0[0x0]
8000636a:	51 88       	stdsp	sp[0x60],r8
8000636c:	00 00       	add	r0,r0
8000636e:	07 38       	ld.ub	r8,r3++
80006370:	80 00       	ld.sh	r0,r0[0x0]
80006372:	4e fc       	lddpc	r12,8000652c <nav_filelist_reset+0x8>
80006374:	80 00       	ld.sh	r0,r0[0x0]
80006376:	44 cc       	lddsp	r12,sp[0x130]
80006378:	80 00       	ld.sh	r0,r0[0x0]
8000637a:	43 1c       	lddsp	r12,sp[0xc4]
8000637c:	00 00       	add	r0,r0
8000637e:	07 3d       	ld.ub	sp,r3++
80006380:	00 00       	add	r0,r0
80006382:	07 3c       	ld.ub	r12,r3++

80006384 <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
Bool  nav_filelist_set( uint16_t u16_nb , Bool b_direction )
{
80006384:	d4 31       	pushm	r0-r7,lr
80006386:	20 4d       	sub	sp,16
80006388:	50 0c       	stdsp	sp[0x0],r12
8000638a:	16 90       	mov	r0,r11
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   Bool  b_save_entry_type;
   Bool  b_find_last_entry = false;

   if ( !fat_check_mount_noopen())
8000638c:	f0 1f 00 53 	mcall	800064d8 <nav_filelist_set+0x154>
80006390:	e0 80 00 a1 	breq	800064d2 <nav_filelist_set+0x14e>
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
80006394:	4d 28       	lddpc	r8,800064dc <nav_filelist_set+0x158>
80006396:	90 18       	ld.sh	r8,r8[0x2]
80006398:	50 38       	stdsp	sp[0xc],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
8000639a:	4d 28       	lddpc	r8,800064e0 <nav_filelist_set+0x15c>
8000639c:	f1 0a 00 24 	ld.sh	r10,r8[36]
800063a0:	50 2a       	stdsp	sp[0x8],r10
   b_save_entry_type       = fs_g_nav.b_mode_nav;
800063a2:	f1 38 00 2c 	ld.ub	r8,r8[44]
800063a6:	50 18       	stdsp	sp[0x4],r8
800063a8:	30 05       	mov	r5,0

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
800063aa:	30 12       	mov	r2,1
800063ac:	30 07       	mov	r7,0
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
800063ae:	4c c3       	lddpc	r3,800064dc <nav_filelist_set+0x158>
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
800063b0:	4c c6       	lddpc	r6,800064e0 <nav_filelist_set+0x15c>
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
800063b2:	4c d1       	lddpc	r1,800064e4 <nav_filelist_set+0x160>
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
800063b4:	e4 00 18 00 	cp.b	r0,r2
800063b8:	5f 04       	sreq	r4
800063ba:	ee 05 18 00 	cp.b	r5,r7
800063be:	5f 18       	srne	r8
800063c0:	e9 e8 10 08 	or	r8,r4,r8
800063c4:	ee 08 18 00 	cp.b	r8,r7
800063c8:	c0 d0       	breq	800063e2 <nav_filelist_set+0x5e>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
800063ca:	86 18       	ld.sh	r8,r3[0x2]
800063cc:	3f e9       	mov	r9,-2
800063ce:	f2 08 19 00 	cp.h	r8,r9
800063d2:	c0 51       	brne	800063dc <nav_filelist_set+0x58>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
800063d4:	30 89       	mov	r9,8
800063d6:	4c 48       	lddpc	r8,800064e4 <nav_filelist_set+0x160>
800063d8:	b0 89       	st.b	r8[0x0],r9
            break;
800063da:	c7 18       	rjmp	800064bc <nav_filelist_set+0x138>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
800063dc:	2f f8       	sub	r8,-1
800063de:	a6 18       	st.h	r3[0x2],r8
800063e0:	c1 e8       	rjmp	8000641c <nav_filelist_set+0x98>
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
800063e2:	86 18       	ld.sh	r8,r3[0x2]
800063e4:	3f fa       	mov	r10,-1
800063e6:	f4 08 19 00 	cp.h	r8,r10
800063ea:	c0 51       	brne	800063f4 <nav_filelist_set+0x70>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
800063ec:	30 99       	mov	r9,9
800063ee:	4b e8       	lddpc	r8,800064e4 <nav_filelist_set+0x160>
800063f0:	b0 89       	st.b	r8[0x0],r9
            break;
800063f2:	c6 58       	rjmp	800064bc <nav_filelist_set+0x138>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
800063f4:	58 08       	cp.w	r8,0
800063f6:	c1 11       	brne	80006418 <nav_filelist_set+0x94>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
800063f8:	ed 38 00 2c 	ld.ub	r8,r6[44]
800063fc:	ee 08 18 00 	cp.b	r8,r7
80006400:	c0 80       	breq	80006410 <nav_filelist_set+0x8c>
80006402:	ed 38 00 2d 	ld.ub	r8,r6[45]
80006406:	ee 08 18 00 	cp.b	r8,r7
8000640a:	c0 31       	brne	80006410 <nav_filelist_set+0x8c>
8000640c:	30 15       	mov	r5,1
8000640e:	c0 78       	rjmp	8000641c <nav_filelist_set+0x98>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
80006410:	30 99       	mov	r9,9
80006412:	4b 58       	lddpc	r8,800064e4 <nav_filelist_set+0x160>
80006414:	b0 89       	st.b	r8[0x0],r9
               break;
80006416:	c5 38       	rjmp	800064bc <nav_filelist_set+0x138>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
80006418:	20 18       	sub	r8,1
8000641a:	a6 18       	st.h	r3[0x2],r8
         }
      }

      if( !fat_read_dir())
8000641c:	f0 1f 00 33 	mcall	800064e8 <nav_filelist_set+0x164>
80006420:	c0 71       	brne	8000642e <nav_filelist_set+0xaa>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80006422:	03 89       	ld.ub	r9,r1[0x0]
80006424:	31 a8       	mov	r8,26
80006426:	f0 09 18 00 	cp.b	r9,r8
8000642a:	c3 00       	breq	8000648a <nav_filelist_set+0x106>
8000642c:	c4 88       	rjmp	800064bc <nav_filelist_set+0x138>
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
8000642e:	ed 3c 00 2c 	ld.ub	r12,r6[44]
80006432:	f0 1f 00 2f 	mcall	800064ec <nav_filelist_set+0x168>
80006436:	c1 c0       	breq	8000646e <nav_filelist_set+0xea>
         {
           // HERE, the file entry match with the type seached

           if( b_find_last_entry )
80006438:	58 05       	cp.w	r5,0
8000643a:	cb d1       	brne	800063b4 <nav_filelist_set+0x30>
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
8000643c:	58 04       	cp.w	r4,0
8000643e:	c0 70       	breq	8000644c <nav_filelist_set+0xc8>
              fs_g_nav.u16_pos_sel_file++;
80006440:	ed 08 00 24 	ld.sh	r8,r6[36]
80006444:	2f f8       	sub	r8,-1
80006446:	ed 58 00 24 	st.h	r6[36],r8
8000644a:	c0 68       	rjmp	80006456 <nav_filelist_set+0xd2>
           else
              fs_g_nav.u16_pos_sel_file--;
8000644c:	ed 08 00 24 	ld.sh	r8,r6[36]
80006450:	20 18       	sub	r8,1
80006452:	ed 58 00 24 	st.h	r6[36],r8

           if (0 == u16_nb)
80006456:	40 09       	lddsp	r9,sp[0x0]
80006458:	58 09       	cp.w	r9,0
8000645a:	c0 51       	brne	80006464 <nav_filelist_set+0xe0>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
8000645c:	f0 1f 00 25 	mcall	800064f0 <nav_filelist_set+0x16c>
80006460:	30 1c       	mov	r12,1
              return true;         // NB FILE FIND
80006462:	c3 88       	rjmp	800064d2 <nav_filelist_set+0x14e>
           }
           u16_nb--;
80006464:	40 08       	lddsp	r8,sp[0x0]
80006466:	20 18       	sub	r8,1
80006468:	5c 88       	casts.h	r8
8000646a:	50 08       	stdsp	sp[0x0],r8
           continue;
8000646c:	ca 4b       	rjmp	800063b4 <nav_filelist_set+0x30>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000646e:	03 88       	ld.ub	r8,r1[0x0]
80006470:	30 a9       	mov	r9,10
80006472:	f2 08 18 00 	cp.b	r8,r9
80006476:	5f 09       	sreq	r9
80006478:	31 aa       	mov	r10,26
8000647a:	f4 08 18 00 	cp.b	r8,r10
8000647e:	5f 08       	sreq	r8
80006480:	f3 e8 10 08 	or	r8,r9,r8
80006484:	ee 08 18 00 	cp.b	r8,r7
80006488:	c9 60       	breq	800063b4 <nav_filelist_set+0x30>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
8000648a:	58 05       	cp.w	r5,0
8000648c:	c0 50       	breq	80006496 <nav_filelist_set+0x112>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
8000648e:	ed 67 00 2c 	st.b	r6[44],r7
80006492:	30 05       	mov	r5,0
            continue;
80006494:	c9 0b       	rjmp	800063b4 <nav_filelist_set+0x30>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
80006496:	ed 38 00 2c 	ld.ub	r8,r6[44]
8000649a:	e4 08 18 00 	cp.b	r8,r2
8000649e:	c0 60       	breq	800064aa <nav_filelist_set+0x126>
800064a0:	ed 38 00 2d 	ld.ub	r8,r6[45]
800064a4:	ee 08 18 00 	cp.b	r8,r7
800064a8:	c0 50       	breq	800064b2 <nav_filelist_set+0x12e>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
800064aa:	30 99       	mov	r9,9
800064ac:	48 e8       	lddpc	r8,800064e4 <nav_filelist_set+0x160>
800064ae:	b0 89       	st.b	r8[0x0],r9
            break;                        // end of search
800064b0:	c0 68       	rjmp	800064bc <nav_filelist_set+0x138>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
800064b2:	3f f8       	mov	r8,-1
800064b4:	a6 18       	st.h	r3[0x2],r8
            fs_g_nav.b_mode_nav = FS_FILE;
800064b6:	ed 62 00 2c 	st.b	r6[44],r2
800064ba:	c7 db       	rjmp	800063b4 <nav_filelist_set+0x30>
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
800064bc:	48 98       	lddpc	r8,800064e0 <nav_filelist_set+0x15c>
800064be:	40 1a       	lddsp	r10,sp[0x4]
800064c0:	f1 6a 00 2c 	st.b	r8[44],r10
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
800064c4:	48 69       	lddpc	r9,800064dc <nav_filelist_set+0x158>
800064c6:	40 3a       	lddsp	r10,sp[0xc]
800064c8:	b2 1a       	st.h	r9[0x2],r10
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
800064ca:	40 29       	lddsp	r9,sp[0x8]
800064cc:	f1 59 00 24 	st.h	r8[36],r9
800064d0:	30 0c       	mov	r12,0
   return false;
}
800064d2:	2f cd       	sub	sp,-16
800064d4:	d8 32       	popm	r0-r7,pc
800064d6:	00 00       	add	r0,r0
800064d8:	80 00       	ld.sh	r0,r0[0x0]
800064da:	51 e8       	stdsp	sp[0x78],r8
800064dc:	00 00       	add	r0,r0
800064de:	07 38       	ld.ub	r8,r3++
800064e0:	00 00       	add	r0,r0
800064e2:	06 ec       	st.h	--r3,r12
800064e4:	00 00       	add	r0,r0
800064e6:	07 3c       	ld.ub	r12,r3++
800064e8:	80 00       	ld.sh	r0,r0[0x0]
800064ea:	4e fc       	lddpc	r12,800066a4 <nav_filelist_first+0x1c>
800064ec:	80 00       	ld.sh	r0,r0[0x0]
800064ee:	46 2c       	lddsp	r12,sp[0x188]
800064f0:	80 00       	ld.sh	r0,r0[0x0]
800064f2:	45 e4       	lddsp	r4,sp[0x178]

800064f4 <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
Bool  nav_filelist_findname( const FS_STRING sz_name , Bool b_match_case )
{
800064f4:	d4 21       	pushm	r4-r7,lr
800064f6:	18 95       	mov	r5,r12
800064f8:	16 94       	mov	r4,r11
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
800064fa:	30 16       	mov	r6,1
800064fc:	30 07       	mov	r7,0
800064fe:	0c 9b       	mov	r11,r6
80006500:	0e 9c       	mov	r12,r7
80006502:	f0 1f 00 07 	mcall	8000651c <nav_filelist_findname+0x28>
80006506:	c0 90       	breq	80006518 <nav_filelist_findname+0x24>
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
80006508:	08 99       	mov	r9,r4
8000650a:	0e 9a       	mov	r10,r7
8000650c:	0e 9b       	mov	r11,r7
8000650e:	0a 9c       	mov	r12,r5
80006510:	f0 1f 00 04 	mcall	80006520 <nav_filelist_findname+0x2c>
80006514:	cf 50       	breq	800064fe <nav_filelist_findname+0xa>
80006516:	30 1c       	mov	r12,1
         return true;
   }
}
80006518:	d8 22       	popm	r4-r7,pc
8000651a:	00 00       	add	r0,r0
8000651c:	80 00       	ld.sh	r0,r0[0x0]
8000651e:	63 84       	ld.w	r4,r1[0x60]
80006520:	80 00       	ld.sh	r0,r0[0x0]
80006522:	62 94       	ld.w	r4,r1[0x24]

80006524 <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
Bool  nav_filelist_reset( void )
{
80006524:	d4 01       	pushm	lr
   if ( !fat_check_mount_noopen())
80006526:	f0 1f 00 04 	mcall	80006534 <nav_filelist_reset+0x10>
8000652a:	c0 40       	breq	80006532 <nav_filelist_reset+0xe>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
8000652c:	f0 1f 00 03 	mcall	80006538 <nav_filelist_reset+0x14>
80006530:	30 1c       	mov	r12,1
   return true;
}
80006532:	d8 02       	popm	pc
80006534:	80 00       	ld.sh	r0,r0[0x0]
80006536:	51 e8       	stdsp	sp[0x78],r8
80006538:	80 00       	ld.sh	r0,r0[0x0]
8000653a:	42 a0       	lddsp	r0,sp[0xa8]

8000653c <nav_file_create>:
//! @verbatim
//! If you ues this routine to create a file, then you must called file_open() to open this new file
//! @endverbatim
//!
Bool  nav_file_create( const FS_STRING sz_name  )
{
8000653c:	eb cd 40 80 	pushm	r7,lr
80006540:	18 97       	mov	r7,r12
   // Check if the name already exists
   if (!nav_filelist_reset())
80006542:	f0 1f 00 13 	mcall	8000658c <nav_file_create+0x50>
80006546:	c2 10       	breq	80006588 <nav_file_create+0x4c>
      return false;
   if (nav_filelist_findname(sz_name , false))
80006548:	30 0b       	mov	r11,0
8000654a:	0e 9c       	mov	r12,r7
8000654c:	f0 1f 00 11 	mcall	80006590 <nav_file_create+0x54>
80006550:	c0 60       	breq	8000655c <nav_file_create+0x20>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
80006552:	32 a9       	mov	r9,42
80006554:	49 08       	lddpc	r8,80006594 <nav_file_create+0x58>
80006556:	b0 89       	st.b	r8[0x0],r9
80006558:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;  // File exist -> it is not possible to create this name
   }
   // FYC: here, the selection is at the end of the list
   // Create name entrys
   if ( !fat_create_entry_file_name( sz_name ))
8000655c:	0e 9c       	mov	r12,r7
8000655e:	f0 1f 00 0f 	mcall	80006598 <nav_file_create+0x5c>
80006562:	c1 30       	breq	80006588 <nav_file_create+0x4c>
      return false; // error
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
80006564:	48 e8       	lddpc	r8,8000659c <nav_file_create+0x60>
80006566:	30 09       	mov	r9,0
80006568:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;     // The size is null
8000656a:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = 0;     // Attribut is a file
8000656c:	b0 a9       	st.b	r8[0x2],r9

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
8000656e:	48 d8       	lddpc	r8,800065a0 <nav_file_create+0x64>
80006570:	f1 09 00 24 	ld.sh	r9,r8[36]
80006574:	2f f9       	sub	r9,-1
80006576:	f1 59 00 24 	st.h	r8[36],r9
   fs_g_nav.b_mode_nav = FS_FILE;
8000657a:	30 19       	mov	r9,1
8000657c:	f1 69 00 2c 	st.b	r8[44],r9
   return fat_cache_flush();
80006580:	f0 1f 00 09 	mcall	800065a4 <nav_file_create+0x68>
80006584:	e3 cd 80 80 	ldm	sp++,r7,pc
80006588:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
8000658c:	80 00       	ld.sh	r0,r0[0x0]
8000658e:	65 24       	ld.w	r4,r2[0x48]
80006590:	80 00       	ld.sh	r0,r0[0x0]
80006592:	64 f4       	ld.w	r4,r2[0x3c]
80006594:	00 00       	add	r0,r0
80006596:	07 3c       	ld.ub	r12,r3++
80006598:	80 00       	ld.sh	r0,r0[0x0]
8000659a:	5b b0       	cp.w	r0,-5
8000659c:	00 00       	add	r0,r0
8000659e:	04 ac       	st.w	r2++,r12
800065a0:	00 00       	add	r0,r0
800065a2:	06 ec       	st.h	--r3,r12
800065a4:	80 00       	ld.sh	r0,r0[0x0]
800065a6:	48 60       	lddpc	r0,800065bc <nav_dir_gotoparent+0x14>

800065a8 <nav_dir_gotoparent>:
//! After, the file list changes and contains the files and directories of the new directory.
//! By default, the file selected in file list is the previous (children) directory.
//! @endverbatim
//!
Bool  nav_dir_gotoparent( void )
{
800065a8:	d4 21       	pushm	r4-r7,lr
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
800065aa:	f0 1f 00 1f 	mcall	80006624 <nav_dir_gotoparent+0x7c>
800065ae:	c3 80       	breq	8000661e <nav_dir_gotoparent+0x76>
      return false;

   if (0 == fs_g_nav.u32_cluster_sel_dir)
800065b0:	49 e8       	lddpc	r8,80006628 <nav_dir_gotoparent+0x80>
800065b2:	70 88       	ld.w	r8,r8[0x20]
800065b4:	58 08       	cp.w	r8,0
800065b6:	c0 51       	brne	800065c0 <nav_dir_gotoparent+0x18>
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
800065b8:	31 99       	mov	r9,25
800065ba:	49 d8       	lddpc	r8,8000662c <nav_dir_gotoparent+0x84>
800065bc:	b0 89       	st.b	r8[0x0],r9
800065be:	d8 2a       	popm	r4-r7,pc,r12=0
      return false;
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
800065c0:	30 19       	mov	r9,1
800065c2:	49 c8       	lddpc	r8,80006630 <nav_dir_gotoparent+0x88>
800065c4:	b0 19       	st.h	r8[0x2],r9
   if ( !fat_read_dir())
800065c6:	f0 1f 00 1c 	mcall	80006634 <nav_dir_gotoparent+0x8c>
800065ca:	c2 a0       	breq	8000661e <nav_dir_gotoparent+0x76>
      return false;
   fat_get_entry_info();
800065cc:	f0 1f 00 1b 	mcall	80006638 <nav_dir_gotoparent+0x90>
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;
800065d0:	49 68       	lddpc	r8,80006628 <nav_dir_gotoparent+0x80>
800065d2:	70 87       	ld.w	r7,r8[0x20]

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
800065d4:	49 a9       	lddpc	r9,8000663c <nav_dir_gotoparent+0x94>
800065d6:	72 19       	ld.w	r9,r9[0x4]
800065d8:	91 89       	st.w	r8[0x20],r9

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
800065da:	f0 1f 00 1a 	mcall	80006640 <nav_dir_gotoparent+0x98>
800065de:	c2 00       	breq	8000661e <nav_dir_gotoparent+0x76>
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
800065e0:	49 28       	lddpc	r8,80006628 <nav_dir_gotoparent+0x80>
800065e2:	f1 39 00 2d 	ld.ub	r9,r8[45]
800065e6:	30 08       	mov	r8,0
800065e8:	f0 09 18 00 	cp.b	r9,r8
800065ec:	c0 d0       	breq	80006606 <nav_dir_gotoparent+0x5e>
800065ee:	48 f8       	lddpc	r8,80006628 <nav_dir_gotoparent+0x80>
800065f0:	f1 39 00 2c 	ld.ub	r9,r8[44]
800065f4:	30 08       	mov	r8,0
800065f6:	f0 09 18 00 	cp.b	r9,r8
800065fa:	c0 60       	breq	80006606 <nav_dir_gotoparent+0x5e>
800065fc:	c1 28       	rjmp	80006620 <nav_dir_gotoparent+0x78>
      return true;
   
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
800065fe:	6c 18       	ld.w	r8,r6[0x4]
80006600:	0e 38       	cp.w	r8,r7
80006602:	c0 51       	brne	8000660c <nav_dir_gotoparent+0x64>
80006604:	c0 e8       	rjmp	80006620 <nav_dir_gotoparent+0x78>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;
   
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80006606:	30 15       	mov	r5,1
80006608:	30 04       	mov	r4,0
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
8000660a:	48 d6       	lddpc	r6,8000663c <nav_dir_gotoparent+0x94>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;
   
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000660c:	0a 9b       	mov	r11,r5
8000660e:	08 9c       	mov	r12,r4
80006610:	f0 1f 00 0d 	mcall	80006644 <nav_dir_gotoparent+0x9c>
80006614:	cf 51       	brne	800065fe <nav_dir_gotoparent+0x56>
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
80006616:	30 89       	mov	r9,8
80006618:	48 58       	lddpc	r8,8000662c <nav_dir_gotoparent+0x84>
8000661a:	b0 89       	st.b	r8[0x0],r9
   return false;
8000661c:	d8 22       	popm	r4-r7,pc
8000661e:	d8 2a       	popm	r4-r7,pc,r12=0
80006620:	da 2a       	popm	r4-r7,pc,r12=1
80006622:	00 00       	add	r0,r0
80006624:	80 00       	ld.sh	r0,r0[0x0]
80006626:	51 e8       	stdsp	sp[0x78],r8
80006628:	00 00       	add	r0,r0
8000662a:	06 ec       	st.h	--r3,r12
8000662c:	00 00       	add	r0,r0
8000662e:	07 3c       	ld.ub	r12,r3++
80006630:	00 00       	add	r0,r0
80006632:	07 38       	ld.ub	r8,r3++
80006634:	80 00       	ld.sh	r0,r0[0x0]
80006636:	4e fc       	lddpc	r12,800067f0 <nav_dir_make+0x64>
80006638:	80 00       	ld.sh	r0,r0[0x0]
8000663a:	45 e4       	lddsp	r4,sp[0x178]
8000663c:	00 00       	add	r0,r0
8000663e:	04 ac       	st.w	r2++,r12
80006640:	80 00       	ld.sh	r0,r0[0x0]
80006642:	65 24       	ld.w	r4,r2[0x48]
80006644:	80 00       	ld.sh	r0,r0[0x0]
80006646:	63 84       	ld.w	r4,r1[0x60]

80006648 <nav_dir_cd>:
//! After this routine the file list changes and contains the files and directories of the new directory.
//! By default no file is selected.
//! @endverbatim
//!
Bool  nav_dir_cd( void )
{
80006648:	d4 01       	pushm	lr
   if ( !fat_check_mount_select_noopen())
8000664a:	f0 1f 00 0a 	mcall	80006670 <nav_dir_cd+0x28>
8000664e:	c1 00       	breq	8000666e <nav_dir_cd+0x26>
      return false;

   // The current selection, is it a directory ?
   if ( !fat_entry_is_dir())
80006650:	f0 1f 00 09 	mcall	80006674 <nav_dir_cd+0x2c>
80006654:	c0 d0       	breq	8000666e <nav_dir_cd+0x26>
      return false;

   // Select the current directory
   fs_g_nav.u16_entry_pos_sel_dir = fs_g_nav_fast.u16_entry_pos_sel_file;
80006656:	48 98       	lddpc	r8,80006678 <nav_dir_cd+0x30>
80006658:	48 99       	lddpc	r9,8000667c <nav_dir_cd+0x34>
8000665a:	92 19       	ld.sh	r9,r9[0x2]
8000665c:	f1 59 00 1c 	st.h	r8[28],r9
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
80006660:	48 89       	lddpc	r9,80006680 <nav_dir_cd+0x38>
80006662:	72 19       	ld.w	r9,r9[0x4]
80006664:	91 89       	st.w	r8[0x20],r9

   // Reset file list
   if( false == nav_filelist_reset())
80006666:	f0 1f 00 08 	mcall	80006684 <nav_dir_cd+0x3c>
8000666a:	5f 1c       	srne	r12
8000666c:	d8 02       	popm	pc
8000666e:	d8 0a       	popm	pc,r12=0
80006670:	80 00       	ld.sh	r0,r0[0x0]
80006672:	51 c4       	stdsp	sp[0x70],r4
80006674:	80 00       	ld.sh	r0,r0[0x0]
80006676:	42 88       	lddsp	r8,sp[0xa0]
80006678:	00 00       	add	r0,r0
8000667a:	06 ec       	st.h	--r3,r12
8000667c:	00 00       	add	r0,r0
8000667e:	07 38       	ld.ub	r8,r3++
80006680:	00 00       	add	r0,r0
80006682:	04 ac       	st.w	r2++,r12
80006684:	80 00       	ld.sh	r0,r0[0x0]
80006686:	65 24       	ld.w	r4,r2[0x48]

80006688 <nav_filelist_first>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
Bool  nav_filelist_first( Bool b_type )
{
80006688:	d4 21       	pushm	r4-r7,lr
8000668a:	18 97       	mov	r7,r12
   // Reset position
   if ( !nav_filelist_reset())
8000668c:	f0 1f 00 0b 	mcall	800066b8 <nav_filelist_first+0x30>
80006690:	c0 81       	brne	800066a0 <nav_filelist_first+0x18>
80006692:	d8 22       	popm	r4-r7,pc
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if( b_type == fs_g_nav.b_mode_nav )
80006694:	ed 38 00 2c 	ld.ub	r8,r6[44]
80006698:	ee 08 18 00 	cp.b	r8,r7
8000669c:	c0 51       	brne	800066a6 <nav_filelist_first+0x1e>
8000669e:	da 2a       	popm	r4-r7,pc,r12=1
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800066a0:	30 15       	mov	r5,1
800066a2:	30 04       	mov	r4,0
   {
      if( b_type == fs_g_nav.b_mode_nav )
800066a4:	48 66       	lddpc	r6,800066bc <nav_filelist_first+0x34>
{
   // Reset position
   if ( !nav_filelist_reset())
      return false;
   // Find the first file or directory
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800066a6:	0a 9b       	mov	r11,r5
800066a8:	08 9c       	mov	r12,r4
800066aa:	f0 1f 00 06 	mcall	800066c0 <nav_filelist_first+0x38>
800066ae:	cf 31       	brne	80006694 <nav_filelist_first+0xc>
   {
      if( b_type == fs_g_nav.b_mode_nav )
         return true;   // First file or directory found
   }
   fs_g_status = FS_ERR_NO_FIND;
800066b0:	30 99       	mov	r9,9
800066b2:	48 58       	lddpc	r8,800066c4 <nav_filelist_first+0x3c>
800066b4:	b0 89       	st.b	r8[0x0],r9
   return false;
}
800066b6:	d8 22       	popm	r4-r7,pc
800066b8:	80 00       	ld.sh	r0,r0[0x0]
800066ba:	65 24       	ld.w	r4,r2[0x48]
800066bc:	00 00       	add	r0,r0
800066be:	06 ec       	st.h	--r3,r12
800066c0:	80 00       	ld.sh	r0,r0[0x0]
800066c2:	63 84       	ld.w	r4,r1[0x60]
800066c4:	00 00       	add	r0,r0
800066c6:	07 3c       	ld.ub	r12,r3++

800066c8 <nav_filelist_nb>:
//!                     FS_FILE to compute the number of files <br>
//!
//! @return    number of files or directories in file list
//!
uint16_t   nav_filelist_nb( Bool b_type )
{
800066c8:	d4 31       	pushm	r0-r7,lr
800066ca:	18 91       	mov	r1,r12
   uint16_t   u16_save_position;
   uint16_t   u16_save_number_dir;
   uint16_t   u16_save_number_file;

   // Save current position
   u16_save_position = fs_g_nav.u16_pos_sel_file;
800066cc:	49 98       	lddpc	r8,80006730 <nav_filelist_nb+0x68>
800066ce:	f1 00 00 24 	ld.sh	r0,r8[36]
   // Reset position
   if ( !nav_filelist_reset())
800066d2:	f0 1f 00 19 	mcall	80006734 <nav_filelist_nb+0x6c>
800066d6:	c0 31       	brne	800066dc <nav_filelist_nb+0x14>
800066d8:	30 04       	mov	r4,0
800066da:	c2 88       	rjmp	8000672a <nav_filelist_nb+0x62>
800066dc:	30 04       	mov	r4,0
800066de:	08 97       	mov	r7,r4
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800066e0:	30 13       	mov	r3,1
800066e2:	08 92       	mov	r2,r4
   {
      if( FS_FILE == fs_g_nav.b_mode_nav )
800066e4:	49 36       	lddpc	r6,80006730 <nav_filelist_nb+0x68>
800066e6:	30 15       	mov	r5,1
800066e8:	c0 b8       	rjmp	800066fe <nav_filelist_nb+0x36>
800066ea:	ed 38 00 2c 	ld.ub	r8,r6[44]
800066ee:	ea 08 18 00 	cp.b	r8,r5
800066f2:	c0 41       	brne	800066fa <nav_filelist_nb+0x32>
         u16_save_number_file++;    // It is a file
800066f4:	2f f4       	sub	r4,-1
800066f6:	5c 84       	casts.h	r4
800066f8:	c0 38       	rjmp	800066fe <nav_filelist_nb+0x36>
      else
         u16_save_number_dir++;     // It is a directory
800066fa:	2f f7       	sub	r7,-1
800066fc:	5c 87       	casts.h	r7
   if ( !nav_filelist_reset())
      return 0;
   // Scan all directory
   u16_save_number_dir  = 0;
   u16_save_number_file = 0;
   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
800066fe:	06 9b       	mov	r11,r3
80006700:	04 9c       	mov	r12,r2
80006702:	f0 1f 00 0e 	mcall	80006738 <nav_filelist_nb+0x70>
80006706:	cf 21       	brne	800066ea <nav_filelist_nb+0x22>
         u16_save_number_file++;    // It is a file
      else
         u16_save_number_dir++;     // It is a directory
   }
   // Restore previous position
   nav_filelist_reset();
80006708:	f0 1f 00 0b 	mcall	80006734 <nav_filelist_nb+0x6c>
   if ( u16_save_position != FS_NO_SEL )
8000670c:	3f f8       	mov	r8,-1
8000670e:	f0 00 19 00 	cp.h	r0,r8
80006712:	c0 60       	breq	8000671e <nav_filelist_nb+0x56>
   {
      nav_filelist_set( u16_save_position , FS_FIND_NEXT );
80006714:	30 1b       	mov	r11,1
80006716:	f9 d0 c0 10 	bfextu	r12,r0,0x0,0x10
8000671a:	f0 1f 00 08 	mcall	80006738 <nav_filelist_nb+0x70>
   }
   // Return the value asked
   if( FS_FILE == b_type )
8000671e:	30 18       	mov	r8,1
80006720:	5c 87       	casts.h	r7
80006722:	e2 08 18 00 	cp.b	r8,r1
80006726:	ee 04 17 10 	movne	r4,r7
      return u16_save_number_file;
   else
      return u16_save_number_dir;
}
8000672a:	08 9c       	mov	r12,r4
8000672c:	d8 32       	popm	r0-r7,pc
8000672e:	00 00       	add	r0,r0
80006730:	00 00       	add	r0,r0
80006732:	06 ec       	st.h	--r3,r12
80006734:	80 00       	ld.sh	r0,r0[0x0]
80006736:	65 24       	ld.w	r4,r2[0x48]
80006738:	80 00       	ld.sh	r0,r0[0x0]
8000673a:	63 84       	ld.w	r4,r1[0x60]

8000673c <nav_filelist_last>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
Bool  nav_filelist_last( Bool b_type )
{
8000673c:	eb cd 40 c0 	pushm	r6-r7,lr
80006740:	18 96       	mov	r6,r12
   uint16_t u16_nb;

   // Get number of file or directory
   u16_nb = nav_filelist_nb( b_type  );
80006742:	f0 1f 00 0f 	mcall	8000677c <nav_filelist_last+0x40>
80006746:	ef dc b0 10 	bfexts	r7,r12,0x0,0x10
   if( 0 == u16_nb )
8000674a:	c0 61       	brne	80006756 <nav_filelist_last+0x1a>
   {
      fs_g_status = FS_ERR_NO_FIND;
8000674c:	30 99       	mov	r9,9
8000674e:	48 d8       	lddpc	r8,80006780 <nav_filelist_last+0x44>
80006750:	b0 89       	st.b	r8[0x0],r9
80006752:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;  // NO FILE FOUND
   }
   // Go to the first file or directory
   if ( !nav_filelist_first( b_type ))
80006756:	0c 9c       	mov	r12,r6
80006758:	f0 1f 00 0b 	mcall	80006784 <nav_filelist_last+0x48>
8000675c:	c0 d0       	breq	80006776 <nav_filelist_last+0x3a>
      return false;
   // If there are more one file or directory, then go to at the last of list
   if( 1 == u16_nb )
8000675e:	30 18       	mov	r8,1
80006760:	f0 07 19 00 	cp.h	r7,r8
80006764:	c0 31       	brne	8000676a <nav_filelist_last+0x2e>
80006766:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      return true;
   u16_nb -= 2;
   return nav_filelist_set( u16_nb , FS_FIND_NEXT );
8000676a:	0e 9c       	mov	r12,r7
8000676c:	20 2c       	sub	r12,2
8000676e:	30 1b       	mov	r11,1
80006770:	5c 7c       	castu.h	r12
80006772:	f0 1f 00 06 	mcall	80006788 <nav_filelist_last+0x4c>
}
80006776:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000677a:	00 00       	add	r0,r0
8000677c:	80 00       	ld.sh	r0,r0[0x0]
8000677e:	66 c8       	ld.w	r8,r3[0x30]
80006780:	00 00       	add	r0,r0
80006782:	07 3c       	ld.ub	r12,r3++
80006784:	80 00       	ld.sh	r0,r0[0x0]
80006786:	66 88       	ld.w	r8,r3[0x20]
80006788:	80 00       	ld.sh	r0,r0[0x0]
8000678a:	63 84       	ld.w	r4,r1[0x60]

8000678c <nav_dir_make>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
Bool  nav_dir_make( const FS_STRING sz_name  )
{
8000678c:	eb cd 40 80 	pushm	r7,lr
80006790:	18 97       	mov	r7,r12
   if ( !fat_check_mount_noopen())
80006792:	f0 1f 00 18 	mcall	800067f0 <nav_dir_make+0x64>
80006796:	c2 b0       	breq	800067ec <nav_dir_make+0x60>
      return false;

   // Create an entry file
   if ( !nav_file_create( sz_name ))
80006798:	0e 9c       	mov	r12,r7
8000679a:	f0 1f 00 17 	mcall	800067f4 <nav_dir_make+0x68>
8000679e:	c2 70       	breq	800067ec <nav_dir_make+0x60>
      return false;

   // Allocate one cluster for the new directory
   MSB0(fs_g_seg.u32_addr)=0xFF;    // It is a new cluster list
800067a0:	49 68       	lddpc	r8,800067f8 <nav_dir_make+0x6c>
800067a2:	3f f9       	mov	r9,-1
800067a4:	b0 89       	st.b	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = 1;    // Only one sector (= one cluster)
800067a6:	30 19       	mov	r9,1
800067a8:	91 19       	st.w	r8[0x4],r9
   if ( !fat_allocfreespace())
800067aa:	f0 1f 00 15 	mcall	800067fc <nav_dir_make+0x70>
800067ae:	c0 71       	brne	800067bc <nav_dir_make+0x30>
   {
      fat_delete_file( false );
800067b0:	f0 1f 00 14 	mcall	80006800 <nav_dir_make+0x74>
      fat_cache_flush();
800067b4:	f0 1f 00 14 	mcall	80006804 <nav_dir_make+0x78>
800067b8:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
   
   // Save information about the new directory
   fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr; // First cluster of the directory returned by alloc_free_space
800067bc:	49 38       	lddpc	r8,80006808 <nav_dir_make+0x7c>
800067be:	48 f9       	lddpc	r9,800067f8 <nav_dir_make+0x6c>
800067c0:	72 09       	ld.w	r9,r9[0x0]
800067c2:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;                 // The directory size is null
800067c4:	30 09       	mov	r9,0
800067c6:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = FS_ATTR_DIRECTORY; // Directory attribut
800067c8:	31 09       	mov	r9,16
800067ca:	b0 a9       	st.b	r8[0x2],r9

   // Initialize the values in the new directory
   if ( !fat_initialize_dir())
800067cc:	f0 1f 00 10 	mcall	8000680c <nav_dir_make+0x80>
800067d0:	c0 e0       	breq	800067ec <nav_dir_make+0x60>
      return false;

   // Write directory information in her entry file
   if ( !fat_read_dir())
800067d2:	f0 1f 00 10 	mcall	80006810 <nav_dir_make+0x84>
800067d6:	c0 b0       	breq	800067ec <nav_dir_make+0x60>
      return false;
   fat_write_entry_file();
800067d8:	f0 1f 00 0f 	mcall	80006814 <nav_dir_make+0x88>
   if( !fat_cache_flush())
800067dc:	f0 1f 00 0a 	mcall	80006804 <nav_dir_make+0x78>
800067e0:	c0 60       	breq	800067ec <nav_dir_make+0x60>
      return false;

   // Go to position of new directory (it is the last directory)
   return nav_filelist_last( FS_DIR );
800067e2:	30 0c       	mov	r12,0
800067e4:	f0 1f 00 0d 	mcall	80006818 <nav_dir_make+0x8c>
800067e8:	e3 cd 80 80 	ldm	sp++,r7,pc
800067ec:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800067f0:	80 00       	ld.sh	r0,r0[0x0]
800067f2:	51 e8       	stdsp	sp[0x78],r8
800067f4:	80 00       	ld.sh	r0,r0[0x0]
800067f6:	65 3c       	ld.w	r12,r2[0x4c]
800067f8:	00 00       	add	r0,r0
800067fa:	07 94       	ld.ub	r4,r3[0x1]
800067fc:	80 00       	ld.sh	r0,r0[0x0]
800067fe:	56 a8       	stdsp	sp[0x1a8],r8
80006800:	80 00       	ld.sh	r0,r0[0x0]
80006802:	54 b4       	stdsp	sp[0x12c],r4
80006804:	80 00       	ld.sh	r0,r0[0x0]
80006806:	48 60       	lddpc	r0,8000681c <nav_partition_mount>
80006808:	00 00       	add	r0,r0
8000680a:	04 ac       	st.w	r2++,r12
8000680c:	80 00       	ld.sh	r0,r0[0x0]
8000680e:	53 4c       	stdsp	sp[0xd0],r12
80006810:	80 00       	ld.sh	r0,r0[0x0]
80006812:	4e fc       	lddpc	r12,800069cc <nav_setcwd+0xb8>
80006814:	80 00       	ld.sh	r0,r0[0x0]
80006816:	46 bc       	lddsp	r12,sp[0x1ac]
80006818:	80 00       	ld.sh	r0,r0[0x0]
8000681a:	67 3c       	ld.w	r12,r3[0x4c]

8000681c <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
Bool  nav_partition_mount( void )
{
8000681c:	d4 01       	pushm	lr
   if ( !fat_check_noopen() )
8000681e:	f0 1f 00 0a 	mcall	80006844 <nav_partition_mount+0x28>
80006822:	c0 f0       	breq	80006840 <nav_partition_mount+0x24>
      return false;

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
80006824:	48 98       	lddpc	r8,80006848 <nav_partition_mount+0x2c>
80006826:	11 89       	ld.ub	r9,r8[0x0]
80006828:	30 08       	mov	r8,0
8000682a:	f0 09 18 00 	cp.b	r9,r8
8000682e:	c0 70       	breq	8000683c <nav_partition_mount+0x20>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
80006830:	30 09       	mov	r9,0
80006832:	48 78       	lddpc	r8,8000684c <nav_partition_mount+0x30>
80006834:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
80006836:	f0 1f 00 07 	mcall	80006850 <nav_partition_mount+0x34>
8000683a:	da 0a       	popm	pc,r12=1
      return true;
   }

   return fat_mount();
8000683c:	f0 1f 00 06 	mcall	80006854 <nav_partition_mount+0x38>
}
80006840:	d8 02       	popm	pc
80006842:	00 00       	add	r0,r0
80006844:	80 00       	ld.sh	r0,r0[0x0]
80006846:	51 14       	stdsp	sp[0x44],r4
80006848:	00 00       	add	r0,r0
8000684a:	07 38       	ld.ub	r8,r3++
8000684c:	00 00       	add	r0,r0
8000684e:	06 ec       	st.h	--r3,r12
80006850:	80 00       	ld.sh	r0,r0[0x0]
80006852:	42 a0       	lddsp	r0,sp[0xa8]
80006854:	80 00       	ld.sh	r0,r0[0x0]
80006856:	5c 58       	castu.b	r8

80006858 <nav_dir_root>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
Bool  nav_dir_root( void )
{
80006858:	d4 01       	pushm	lr
   return nav_partition_mount();
8000685a:	f0 1f 00 02 	mcall	80006860 <nav_dir_root+0x8>
}
8000685e:	d8 02       	popm	pc
80006860:	80 00       	ld.sh	r0,r0[0x0]
80006862:	68 1c       	ld.w	r12,r4[0x4]

80006864 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
Bool  nav_drive_set( uint8_t u8_number )
{
80006864:	eb cd 40 80 	pushm	r7,lr
80006868:	18 97       	mov	r7,r12
   if ( !fat_check_noopen() )
8000686a:	f0 1f 00 0f 	mcall	800068a4 <nav_drive_set+0x40>
8000686e:	c1 90       	breq	800068a0 <nav_drive_set+0x3c>
      return false;

   if (u8_number >= get_nb_lun() )
80006870:	f0 1f 00 0e 	mcall	800068a8 <nav_drive_set+0x44>
80006874:	ee 0c 18 00 	cp.b	r12,r7
80006878:	e0 8b 00 07 	brhi	80006886 <nav_drive_set+0x22>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
8000687c:	30 69       	mov	r9,6
8000687e:	48 c8       	lddpc	r8,800068ac <nav_drive_set+0x48>
80006880:	b0 89       	st.b	r8[0x0],r9
80006882:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   if ( fs_g_nav.u8_lun == u8_number)
80006886:	48 b8       	lddpc	r8,800068b0 <nav_drive_set+0x4c>
80006888:	11 88       	ld.ub	r8,r8[0x0]
8000688a:	ee 08 18 00 	cp.b	r8,r7
8000688e:	c0 31       	brne	80006894 <nav_drive_set+0x30>
80006890:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
      return true;   // It is the same drive number

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
80006894:	48 78       	lddpc	r8,800068b0 <nav_drive_set+0x4c>
80006896:	b0 87       	st.b	r8[0x0],r7
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80006898:	30 09       	mov	r9,0
8000689a:	48 78       	lddpc	r8,800068b4 <nav_drive_set+0x50>
8000689c:	b0 89       	st.b	r8[0x0],r9
8000689e:	30 1c       	mov	r12,1
#if (FS_MULTI_PARTITION  ==  ENABLED)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
}
800068a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800068a4:	80 00       	ld.sh	r0,r0[0x0]
800068a6:	51 14       	stdsp	sp[0x44],r4
800068a8:	80 00       	ld.sh	r0,r0[0x0]
800068aa:	6d 0c       	ld.w	r12,r6[0x40]
800068ac:	00 00       	add	r0,r0
800068ae:	07 3c       	ld.ub	r12,r3++
800068b0:	00 00       	add	r0,r0
800068b2:	06 ec       	st.h	--r3,r12
800068b4:	00 00       	add	r0,r0
800068b6:	07 38       	ld.ub	r8,r3++

800068b8 <nav_gotoindex>:
//! This routine allow to reinit a navigator quickly via a file index (disk, partition, dir, file/dir selected )
//! To get a file index, you shall used the routine nav_getindex().
//! @endverbatim
//!
Bool  nav_gotoindex( const Fs_index _MEM_TYPE_SLOW_ *index )
{
800068b8:	d4 21       	pushm	r4-r7,lr
800068ba:	18 97       	mov	r7,r12
   // Select the drive and partition corresponding at file index
   if( !nav_drive_set( index->u8_lun ))
800068bc:	19 8c       	ld.ub	r12,r12[0x0]
800068be:	f0 1f 00 10 	mcall	800068fc <nav_gotoindex+0x44>
800068c2:	c1 c0       	breq	800068fa <nav_gotoindex+0x42>
      return false;
#if (FS_MULTI_PARTITION  ==  ENABLED)
   if( !nav_partition_set(index->u8_partition))
      return false;
#endif
   if( !nav_partition_mount())
800068c4:	f0 1f 00 0f 	mcall	80006900 <nav_gotoindex+0x48>
800068c8:	c1 90       	breq	800068fa <nav_gotoindex+0x42>
      return false;

   // Select the directory corresponding at file index
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;
800068ca:	6e 19       	ld.w	r9,r7[0x4]
800068cc:	48 e8       	lddpc	r8,80006904 <nav_gotoindex+0x4c>
800068ce:	91 89       	st.w	r8[0x20],r9

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
800068d0:	f0 1f 00 0e 	mcall	80006908 <nav_gotoindex+0x50>
800068d4:	c0 a1       	brne	800068e8 <nav_gotoindex+0x30>
800068d6:	c1 28       	rjmp	800068fa <nav_gotoindex+0x42>
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
800068d8:	0a 9b       	mov	r11,r5
800068da:	08 9c       	mov	r12,r4
800068dc:	f0 1f 00 0c 	mcall	8000690c <nav_gotoindex+0x54>
800068e0:	c0 71       	brne	800068ee <nav_gotoindex+0x36>
      {
         nav_filelist_reset();
800068e2:	f0 1f 00 0a 	mcall	80006908 <nav_gotoindex+0x50>
800068e6:	d8 2a       	popm	r4-r7,pc,r12=0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
800068e8:	48 a6       	lddpc	r6,80006910 <nav_gotoindex+0x58>
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
800068ea:	30 15       	mov	r5,1
800068ec:	30 04       	mov	r4,0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
800068ee:	8c 19       	ld.sh	r9,r6[0x2]
800068f0:	8e 48       	ld.sh	r8,r7[0x8]
800068f2:	f0 09 19 00 	cp.h	r9,r8
800068f6:	cf 11       	brne	800068d8 <nav_gotoindex+0x20>
800068f8:	da 2a       	popm	r4-r7,pc,r12=1
800068fa:	d8 2a       	popm	r4-r7,pc,r12=0
800068fc:	80 00       	ld.sh	r0,r0[0x0]
800068fe:	68 64       	ld.w	r4,r4[0x18]
80006900:	80 00       	ld.sh	r0,r0[0x0]
80006902:	68 1c       	ld.w	r12,r4[0x4]
80006904:	00 00       	add	r0,r0
80006906:	06 ec       	st.h	--r3,r12
80006908:	80 00       	ld.sh	r0,r0[0x0]
8000690a:	65 24       	ld.w	r4,r2[0x48]
8000690c:	80 00       	ld.sh	r0,r0[0x0]
8000690e:	63 84       	ld.w	r4,r1[0x60]
80006910:	00 00       	add	r0,r0
80006912:	07 38       	ld.ub	r8,r3++

80006914 <nav_setcwd>:
//! With syntact "./dir_parent/directory_name"  the file list corresponding at "dir_parent" and "directory_name" is selected.
//! With syntact "./dir_parent/directory_name/" the file list corresponding at "directory_name" and no file is selected.
//! @endverbatim
//!
Bool  nav_setcwd( FS_STRING sz_path , Bool b_match_case , Bool b_create )
{
80006914:	d4 31       	pushm	r0-r7,lr
80006916:	20 6d       	sub	sp,24
80006918:	18 97       	mov	r7,r12
8000691a:	16 91       	mov	r1,r11
8000691c:	14 90       	mov	r0,r10
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
   FS_STRING sz_save_path = 0;
#endif
   Bool b_create_name = false;

   if ( !fat_check_noopen())
8000691e:	f0 1f 00 62 	mcall	80006aa4 <nav_setcwd+0x190>
80006922:	e0 80 00 be 	breq	80006a9e <nav_setcwd+0x18a>
      return false;

   index = nav_getindex();             // Save current position
80006926:	1a 96       	mov	r6,sp
80006928:	1a 9c       	mov	r12,sp
8000692a:	f0 1f 00 60 	mcall	80006aa8 <nav_setcwd+0x194>
8000692e:	fa c8 ff f4 	sub	r8,sp,-12
80006932:	fa ea 00 00 	ld.d	r10,sp[0]
80006936:	f0 eb 00 00 	st.d	r8[0],r10
8000693a:	40 29       	lddsp	r9,sp[0x8]
8000693c:	91 29       	st.w	r8[0x8],r9

   // Check syntact "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
8000693e:	0f 88       	ld.ub	r8,r7[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntact "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
80006940:	35 c9       	mov	r9,92
80006942:	f2 08 18 00 	cp.b	r8,r9
80006946:	5f 0a       	sreq	r10
80006948:	32 f9       	mov	r9,47
8000694a:	f2 08 18 00 	cp.b	r8,r9
8000694e:	5f 09       	sreq	r9
80006950:	f5 e9 10 09 	or	r9,r10,r9
80006954:	c0 70       	breq	80006962 <nav_setcwd+0x4e>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
80006956:	f0 1f 00 56 	mcall	80006aac <nav_setcwd+0x198>
8000695a:	e0 80 00 9d 	breq	80006a94 <nav_setcwd+0x180>
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
8000695e:	2f f7       	sub	r7,-1
80006960:	c5 f8       	rjmp	80006a1e <nav_setcwd+0x10a>
   }else

   // Check syntact "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
80006962:	0f 99       	ld.ub	r9,r7[0x1]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntact "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80006964:	33 aa       	mov	r10,58
80006966:	f4 09 18 00 	cp.b	r9,r10
8000696a:	c2 21       	brne	800069ae <nav_setcwd+0x9a>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
8000696c:	0f aa       	ld.ub	r10,r7[0x2]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntact "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
8000696e:	35 cb       	mov	r11,92
80006970:	f6 0a 18 00 	cp.b	r10,r11
80006974:	5f 0b       	sreq	r11
80006976:	32 fc       	mov	r12,47
80006978:	f8 0a 18 00 	cp.b	r10,r12
8000697c:	5f 0a       	sreq	r10
8000697e:	f7 ea 10 0a 	or	r10,r11,r10
80006982:	c1 60       	breq	800069ae <nav_setcwd+0x9a>
      if( Is_unicode )
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
80006984:	4c b9       	lddpc	r9,80006ab0 <nav_setcwd+0x19c>
80006986:	72 09       	ld.w	r9,r9[0x0]
80006988:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000698c:	f0 ca 00 20 	sub	r10,r8,32
80006990:	e2 19 00 02 	andl	r9,0x2,COH
80006994:	f4 08 17 10 	movne	r8,r10
80006998:	24 18       	sub	r8,65
8000699a:	f9 d8 c0 08 	bfextu	r12,r8,0x0,0x8
8000699e:	f0 1f 00 46 	mcall	80006ab4 <nav_setcwd+0x1a0>
800069a2:	c7 90       	breq	80006a94 <nav_setcwd+0x180>
            goto nav_setcwd_fail;
      }
      if( !nav_partition_mount())
800069a4:	f0 1f 00 45 	mcall	80006ab8 <nav_setcwd+0x1a4>
800069a8:	c7 60       	breq	80006a94 <nav_setcwd+0x180>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
800069aa:	2f d7       	sub	r7,-3
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntact "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
800069ac:	c3 98       	rjmp	80006a1e <nav_setcwd+0x10a>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntact ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
800069ae:	32 ea       	mov	r10,46
800069b0:	f4 08 18 00 	cp.b	r8,r10
800069b4:	c1 91       	brne	800069e6 <nav_setcwd+0xd2>
800069b6:	35 c8       	mov	r8,92
800069b8:	f0 09 18 00 	cp.b	r9,r8
800069bc:	5f 0a       	sreq	r10
800069be:	32 f8       	mov	r8,47
800069c0:	f0 09 18 00 	cp.b	r9,r8
800069c4:	5f 08       	sreq	r8
800069c6:	f5 e8 10 08 	or	r8,r10,r8
800069ca:	c0 e0       	breq	800069e6 <nav_setcwd+0xd2>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
   {
      // Search in current directory
      sz_path  += 2*(Is_unicode? 2 : 1 );
800069cc:	2f e7       	sub	r7,-2
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntact ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
800069ce:	c2 88       	rjmp	80006a1e <nav_setcwd+0x10a>
         while(( '.'  == sz_path [0] )
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
800069d0:	f0 1f 00 3b 	mcall	80006abc <nav_setcwd+0x1a8>
800069d4:	c6 00       	breq	80006a94 <nav_setcwd+0x180>
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
            if( 0 != sz_path [0])
800069d6:	0d 88       	ld.ub	r8,r6[0x0]
               sz_path  +=1; // jump "/"
800069d8:	ec c7 ff ff 	sub	r7,r6,-1
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
            if( 0 != sz_path [0])
800069dc:	ea 08 18 00 	cp.b	r8,r5
800069e0:	ec 07 17 00 	moveq	r7,r6
800069e4:	c0 58       	rjmp	800069ee <nav_setcwd+0xda>
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
800069e6:	32 e4       	mov	r4,46
800069e8:	35 c3       	mov	r3,92
800069ea:	32 f2       	mov	r2,47
800069ec:	30 05       	mov	r5,0
800069ee:	0f 88       	ld.ub	r8,r7[0x0]
800069f0:	e8 08 18 00 	cp.b	r8,r4
800069f4:	c1 51       	brne	80006a1e <nav_setcwd+0x10a>
         &&    ( '.'  == sz_path [1] )
800069f6:	0f 98       	ld.ub	r8,r7[0x1]
800069f8:	e8 08 18 00 	cp.b	r8,r4
800069fc:	c1 11       	brne	80006a1e <nav_setcwd+0x10a>
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
800069fe:	ee c6 ff fe 	sub	r6,r7,-2
80006a02:	0d 88       	ld.ub	r8,r6[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
80006a04:	e6 08 18 00 	cp.b	r8,r3
80006a08:	5f 0a       	sreq	r10
80006a0a:	e4 08 18 00 	cp.b	r8,r2
80006a0e:	5f 09       	sreq	r9
80006a10:	f5 e9 10 09 	or	r9,r10,r9
80006a14:	ea 09 18 00 	cp.b	r9,r5
80006a18:	cd c1       	brne	800069d0 <nav_setcwd+0xbc>
80006a1a:	58 08       	cp.w	r8,0
80006a1c:	cd a0       	breq	800069d0 <nav_setcwd+0xbc>
         }
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
80006a1e:	f0 1f 00 29 	mcall	80006ac0 <nav_setcwd+0x1ac>
80006a22:	c3 90       	breq	80006a94 <nav_setcwd+0x180>
80006a24:	30 03       	mov	r3,0
80006a26:	06 92       	mov	r2,r3
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006a28:	30 06       	mov	r6,0
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80006a2a:	35 c5       	mov	r5,92
80006a2c:	32 f4       	mov	r4,47
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006a2e:	0f 88       	ld.ub	r8,r7[0x0]
80006a30:	ec 08 18 00 	cp.b	r8,r6
80006a34:	c0 31       	brne	80006a3a <nav_setcwd+0x126>
80006a36:	30 1c       	mov	r12,1
80006a38:	c3 38       	rjmp	80006a9e <nav_setcwd+0x18a>
      {
         return true;   // path (without file) is found or create
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
80006a3a:	02 9b       	mov	r11,r1
80006a3c:	0e 9c       	mov	r12,r7
80006a3e:	f0 1f 00 22 	mcall	80006ac4 <nav_setcwd+0x1b0>
80006a42:	c0 51       	brne	80006a4c <nav_setcwd+0x138>
      {
         // The file or directory is not found
         if( !b_create )
80006a44:	58 00       	cp.w	r0,0
80006a46:	c2 70       	breq	80006a94 <nav_setcwd+0x180>
80006a48:	0e 92       	mov	r2,r7
80006a4a:	30 13       	mov	r3,1
#endif
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
80006a4c:	2f f7       	sub	r7,-1
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
80006a4e:	0f 88       	ld.ub	r8,r7[0x0]
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
80006a50:	58 08       	cp.w	r8,0
80006a52:	c0 81       	brne	80006a62 <nav_setcwd+0x14e>
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
         {
            // Is it the last name of path and it is a file
            if( b_create_name )
80006a54:	58 03       	cp.w	r3,0
80006a56:	ce c0       	breq	80006a2e <nav_setcwd+0x11a>
            {
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
               // The file must be created
               if( !nav_file_create( sz_save_path ) )
80006a58:	04 9c       	mov	r12,r2
80006a5a:	f0 1f 00 1c 	mcall	80006ac8 <nav_setcwd+0x1b4>
80006a5e:	ce 81       	brne	80006a2e <nav_setcwd+0x11a>
80006a60:	c1 a8       	rjmp	80006a94 <nav_setcwd+0x180>
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80006a62:	ea 08 18 00 	cp.b	r8,r5
80006a66:	5f 09       	sreq	r9
80006a68:	e8 08 18 00 	cp.b	r8,r4
80006a6c:	5f 08       	sreq	r8
80006a6e:	f3 e8 10 08 	or	r8,r9,r8
80006a72:	ec 08 18 00 	cp.b	r8,r6
80006a76:	ce b0       	breq	80006a4c <nav_setcwd+0x138>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
         {
            // Is it a folder name
            if( b_create_name )
80006a78:	58 03       	cp.w	r3,0
80006a7a:	c0 50       	breq	80006a84 <nav_setcwd+0x170>
            {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
               // The folder doesn't exist and it must be created
               if( !nav_dir_make( sz_save_path ))
80006a7c:	04 9c       	mov	r12,r2
80006a7e:	f0 1f 00 14 	mcall	80006acc <nav_setcwd+0x1b8>
80006a82:	c0 90       	breq	80006a94 <nav_setcwd+0x180>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
80006a84:	f0 1f 00 13 	mcall	80006ad0 <nav_setcwd+0x1bc>
80006a88:	c0 60       	breq	80006a94 <nav_setcwd+0x180>
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
80006a8a:	f0 1f 00 13 	mcall	80006ad4 <nav_setcwd+0x1c0>
80006a8e:	c0 30       	breq	80006a94 <nav_setcwd+0x180>
#endif
            }
            if( !fat_entry_is_dir() )
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
80006a90:	2f f7       	sub	r7,-1
80006a92:	cc eb       	rjmp	80006a2e <nav_setcwd+0x11a>
      }

   }

nav_setcwd_fail:
   nav_gotoindex( &index );   // Restore the position
80006a94:	fa cc ff f4 	sub	r12,sp,-12
80006a98:	f0 1f 00 10 	mcall	80006ad8 <nav_setcwd+0x1c4>
80006a9c:	30 0c       	mov	r12,0
   return false;
}
80006a9e:	2f ad       	sub	sp,-24
80006aa0:	d8 32       	popm	r0-r7,pc
80006aa2:	00 00       	add	r0,r0
80006aa4:	80 00       	ld.sh	r0,r0[0x0]
80006aa6:	51 14       	stdsp	sp[0x44],r4
80006aa8:	80 00       	ld.sh	r0,r0[0x0]
80006aaa:	62 74       	ld.w	r4,r1[0x1c]
80006aac:	80 00       	ld.sh	r0,r0[0x0]
80006aae:	68 58       	ld.w	r8,r4[0x14]
80006ab0:	00 00       	add	r0,r0
80006ab2:	00 e4       	st.h	--r0,r4
80006ab4:	80 00       	ld.sh	r0,r0[0x0]
80006ab6:	68 64       	ld.w	r4,r4[0x18]
80006ab8:	80 00       	ld.sh	r0,r0[0x0]
80006aba:	68 1c       	ld.w	r12,r4[0x4]
80006abc:	80 00       	ld.sh	r0,r0[0x0]
80006abe:	65 a8       	ld.w	r8,r2[0x68]
80006ac0:	80 00       	ld.sh	r0,r0[0x0]
80006ac2:	65 24       	ld.w	r4,r2[0x48]
80006ac4:	80 00       	ld.sh	r0,r0[0x0]
80006ac6:	64 f4       	ld.w	r4,r2[0x3c]
80006ac8:	80 00       	ld.sh	r0,r0[0x0]
80006aca:	65 3c       	ld.w	r12,r2[0x4c]
80006acc:	80 00       	ld.sh	r0,r0[0x0]
80006ace:	67 8c       	ld.w	r12,r3[0x60]
80006ad0:	80 00       	ld.sh	r0,r0[0x0]
80006ad2:	42 88       	lddsp	r8,sp[0xa0]
80006ad4:	80 00       	ld.sh	r0,r0[0x0]
80006ad6:	66 48       	ld.w	r8,r3[0x10]
80006ad8:	80 00       	ld.sh	r0,r0[0x0]
80006ada:	68 b8       	ld.w	r8,r4[0x2c]

80006adc <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
Bool  nav_select( uint8_t u8_idnav )
{
80006adc:	eb cd 40 80 	pushm	r7,lr
80006ae0:	18 97       	mov	r7,r12
   if( FS_NB_NAVIGATOR <= u8_idnav )
80006ae2:	30 18       	mov	r8,1
80006ae4:	f0 0c 18 00 	cp.b	r12,r8
80006ae8:	e0 88 00 07 	brls	80006af6 <nav_select+0x1a>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
80006aec:	32 79       	mov	r9,39
80006aee:	48 b8       	lddpc	r8,80006b18 <nav_select+0x3c>
80006af0:	b0 89       	st.b	r8[0x0],r9
80006af2:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
80006af6:	48 a8       	lddpc	r8,80006b1c <nav_select+0x40>
80006af8:	11 8c       	ld.ub	r12,r8[0x0]
80006afa:	ee 0c 18 00 	cp.b	r12,r7
80006afe:	c0 31       	brne	80006b04 <nav_select+0x28>
80006b00:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
80006b04:	f0 1f 00 07 	mcall	80006b20 <nav_select+0x44>
      fat_invert_nav( u8_idnav );               // Select new navigator
80006b08:	0e 9c       	mov	r12,r7
80006b0a:	f0 1f 00 06 	mcall	80006b20 <nav_select+0x44>
      fs_g_u8_nav_selected = u8_idnav;
80006b0e:	48 48       	lddpc	r8,80006b1c <nav_select+0x40>
80006b10:	b0 87       	st.b	r8[0x0],r7
80006b12:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80006b16:	00 00       	add	r0,r0
80006b18:	00 00       	add	r0,r0
80006b1a:	07 3c       	ld.ub	r12,r3++
80006b1c:	00 00       	add	r0,r0
80006b1e:	07 b4       	ld.ub	r4,r3[0x3]
80006b20:	80 00       	ld.sh	r0,r0[0x0]
80006b22:	47 84       	lddsp	r4,sp[0x1e0]

80006b24 <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
80006b24:	eb cd 40 f8 	pushm	r3-r7,lr
#if ( (FS_ASCII   == ENABLED) && (FS_UNICODE == ENABLED))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
80006b28:	30 07       	mov	r7,0
80006b2a:	49 18       	lddpc	r8,80006b6c <nav_reset+0x48>
80006b2c:	b0 87       	st.b	r8[0x0],r7
   g_b_no_check_disk = false;
80006b2e:	49 18       	lddpc	r8,80006b70 <nav_reset+0x4c>
80006b30:	b0 87       	st.b	r8[0x0],r7

   fat_cache_reset();
80006b32:	f0 1f 00 11 	mcall	80006b74 <nav_reset+0x50>
   fat_cache_clusterlist_reset();
80006b36:	f0 1f 00 11 	mcall	80006b78 <nav_reset+0x54>
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80006b3a:	30 0c       	mov	r12,0
80006b3c:	f0 1f 00 10 	mcall	80006b7c <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80006b40:	49 03       	lddpc	r3,80006b80 <nav_reset+0x5c>
80006b42:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80006b44:	49 05       	lddpc	r5,80006b84 <nav_reset+0x60>
80006b46:	3f f4       	mov	r4,-1
80006b48:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  ENABLED)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80006b4a:	49 06       	lddpc	r6,80006b88 <nav_reset+0x64>
80006b4c:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006b4e:	eb 67 00 2d 	st.b	r5[45],r7
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80006b52:	30 1c       	mov	r12,1
80006b54:	f0 1f 00 0a 	mcall	80006b7c <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80006b58:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80006b5a:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  ENABLED)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80006b5c:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80006b5e:	eb 67 00 2d 	st.b	r5[45],r7
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
80006b62:	48 b8       	lddpc	r8,80006b8c <nav_reset+0x68>
80006b64:	b0 87       	st.b	r8[0x0],r7
#  if (FS_MULTI_PARTITION  ==  ENABLED)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
80006b66:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80006b6a:	00 00       	add	r0,r0
80006b6c:	00 00       	add	r0,r0
80006b6e:	07 3d       	ld.ub	sp,r3++
80006b70:	00 00       	add	r0,r0
80006b72:	04 be       	st.h	r2++,lr
80006b74:	80 00       	ld.sh	r0,r0[0x0]
80006b76:	46 94       	lddsp	r4,sp[0x1a4]
80006b78:	80 00       	ld.sh	r0,r0[0x0]
80006b7a:	40 3c       	lddsp	r12,sp[0xc]
80006b7c:	80 00       	ld.sh	r0,r0[0x0]
80006b7e:	6a dc       	ld.w	r12,r5[0x34]
80006b80:	00 00       	add	r0,r0
80006b82:	07 38       	ld.ub	r8,r3++
80006b84:	00 00       	add	r0,r0
80006b86:	06 ec       	st.h	--r3,r12
80006b88:	00 00       	add	r0,r0
80006b8a:	04 ac       	st.w	r2++,r12
80006b8c:	00 00       	add	r0,r0
80006b8e:	07 b4       	ld.ub	r4,r3[0x3]

80006b90 <_stext>:
80006b90:	48 dd       	lddpc	sp,80006bc4 <udata_clear_loop_end+0x4>
80006b92:	fe c0 ed 92 	sub	r0,pc,-4718
80006b96:	e3 b0 00 01 	mtsr	0x4,r0
80006b9a:	d5 53       	csrf	0x15
80006b9c:	48 b0       	lddpc	r0,80006bc8 <udata_clear_loop_end+0x8>
80006b9e:	48 c1       	lddpc	r1,80006bcc <udata_clear_loop_end+0xc>
80006ba0:	02 30       	cp.w	r0,r1
80006ba2:	c0 62       	brcc	80006bae <idata_load_loop_end>
80006ba4:	48 b2       	lddpc	r2,80006bd0 <udata_clear_loop_end+0x10>

80006ba6 <idata_load_loop>:
80006ba6:	a5 05       	ld.d	r4,r2++
80006ba8:	a1 24       	st.d	r0++,r4
80006baa:	02 30       	cp.w	r0,r1
80006bac:	cf d3       	brcs	80006ba6 <idata_load_loop>

80006bae <idata_load_loop_end>:
80006bae:	48 a0       	lddpc	r0,80006bd4 <udata_clear_loop_end+0x14>
80006bb0:	48 a1       	lddpc	r1,80006bd8 <udata_clear_loop_end+0x18>
80006bb2:	02 30       	cp.w	r0,r1
80006bb4:	c0 62       	brcc	80006bc0 <udata_clear_loop_end>
80006bb6:	30 02       	mov	r2,0
80006bb8:	30 03       	mov	r3,0

80006bba <udata_clear_loop>:
80006bba:	a1 22       	st.d	r0++,r2
80006bbc:	02 30       	cp.w	r0,r1
80006bbe:	cf e3       	brcs	80006bba <udata_clear_loop>

80006bc0 <udata_clear_loop_end>:
80006bc0:	fe cf f2 f0 	sub	pc,pc,-3344
80006bc4:	00 00       	add	r0,r0
80006bc6:	80 00       	ld.sh	r0,r0[0x0]
80006bc8:	00 00       	add	r0,r0
80006bca:	00 08       	add	r8,r0
80006bcc:	00 00       	add	r0,r0
80006bce:	00 e8       	st.h	--r0,r8
80006bd0:	80 00       	ld.sh	r0,r0[0x0]
80006bd2:	82 88       	ld.uh	r8,r1[0x0]
80006bd4:	00 00       	add	r0,r0
80006bd6:	00 e8       	st.h	--r0,r8
80006bd8:	00 00       	add	r0,r0
80006bda:	07 c8       	ld.ub	r8,r3[0x4]

80006bdc <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80006bdc:	d4 01       	pushm	lr

	if (pbb_shift > 0)
		cksel |= ((pbb_shift - 1) << AVR32_PM_CKSEL_PBBSEL)
				| (1U << AVR32_PM_CKSEL_PBBDIV);

	AVR32_PM.cksel = cksel;
80006bde:	fe 78 0c 00 	mov	r8,-62464
80006be2:	e0 69 00 80 	mov	r9,128
80006be6:	ea 19 80 80 	orh	r9,0x8080
80006bea:	91 19       	st.w	r8[0x4],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006bec:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80006bf0:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80006bf2:	e0 6a 03 07 	mov	r10,775
80006bf6:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1 << AVR32_PM_MCCTRL_OSC0EN;
80006bf8:	70 0a       	ld.w	r10,r8[0x0]
80006bfa:	a3 aa       	sbr	r10,0x2
80006bfc:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006bfe:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
80006c02:	71 59       	ld.w	r9,r8[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80006c04:	e2 19 00 80 	andl	r9,0x80,COH
80006c08:	cf d0       	breq	80006c02 <sysclk_init+0x26>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(0);
		osc_wait_ready(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
80006c0a:	e0 6c 1b 00 	mov	r12,6912
80006c0e:	ea 1c 00 b7 	orh	r12,0xb7
80006c12:	f0 1f 00 08 	mcall	80006c30 <sysclk_init+0x54>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006c16:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80006c1a:	d3 03       	ssrf	0x10
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80006c1c:	fe 78 0c 00 	mov	r8,-62464
80006c20:	70 0a       	ld.w	r10,r8[0x0]
80006c22:	e0 1a ff fc 	andl	r10,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80006c26:	a1 aa       	sbr	r10,0x0
	AVR32_PM.mcctrl = mcctrl;
80006c28:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006c2a:	e3 b9 00 00 	mtsr	0x0,r9

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80006c2e:	d8 02       	popm	pc
80006c30:	80 00       	ld.sh	r0,r0[0x0]
80006c32:	2e 80       	sub	r0,-24

80006c34 <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006c34:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80006c38:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80006c3a:	fe 78 0c 00 	mov	r8,-62464
80006c3e:	71 59       	ld.w	r9,r8[0x54]
80006c40:	e2 19 00 40 	andl	r9,0x40,COH
80006c44:	cf d0       	breq	80006c3e <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80006c46:	a3 6c       	lsl	r12,0x2
80006c48:	e0 2c f3 f8 	sub	r12,62456
80006c4c:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80006c4e:	30 19       	mov	r9,1
80006c50:	f2 0b 09 4b 	lsl	r11,r9,r11
80006c54:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80006c56:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006c58:	e3 ba 00 00 	mtsr	0x0,r10

	cpu_irq_restore(flags);
}
80006c5c:	5e fc       	retal	r12
80006c5e:	d7 03       	nop

80006c60 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80006c60:	eb cd 40 c0 	pushm	r6-r7,lr
80006c64:	18 97       	mov	r7,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006c66:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80006c6a:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
80006c6c:	48 b8       	lddpc	r8,80006c98 <sysclk_enable_pbb_module+0x38>
80006c6e:	11 89       	ld.ub	r9,r8[0x0]
80006c70:	30 08       	mov	r8,0
80006c72:	f0 09 18 00 	cp.b	r9,r8
80006c76:	c0 51       	brne	80006c80 <sysclk_enable_pbb_module+0x20>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80006c78:	30 2b       	mov	r11,2
80006c7a:	30 1c       	mov	r12,1
80006c7c:	f0 1f 00 08 	mcall	80006c9c <sysclk_enable_pbb_module+0x3c>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
	sysclk_pbb_refcount++;
80006c80:	48 68       	lddpc	r8,80006c98 <sysclk_enable_pbb_module+0x38>
80006c82:	11 89       	ld.ub	r9,r8[0x0]
80006c84:	2f f9       	sub	r9,-1
80006c86:	b0 89       	st.b	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006c88:	e3 b6 00 00 	mtsr	0x0,r6

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80006c8c:	0e 9b       	mov	r11,r7
80006c8e:	30 3c       	mov	r12,3
80006c90:	f0 1f 00 03 	mcall	80006c9c <sysclk_enable_pbb_module+0x3c>
}
80006c94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006c98:	00 00       	add	r0,r0
80006c9a:	01 c5       	ld.ub	r5,r0[0x4]
80006c9c:	80 00       	ld.sh	r0,r0[0x0]
80006c9e:	6c 34       	ld.w	r4,r6[0xc]

80006ca0 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80006ca0:	d4 01       	pushm	lr
	struct genclk_config gcfg;

	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80006ca2:	30 1c       	mov	r12,1
80006ca4:	f0 1f 00 18 	mcall	80006d04 <sysclk_enable_usb+0x64>
80006ca8:	30 3b       	mov	r11,3
80006caa:	30 1c       	mov	r12,1
80006cac:	f0 1f 00 17 	mcall	80006d08 <sysclk_enable_usb+0x68>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006cb0:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80006cb4:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80006cb6:	fe 78 0c 00 	mov	r8,-62464
80006cba:	e0 6a 03 07 	mov	r10,775
80006cbe:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1 << AVR32_PM_MCCTRL_OSC0EN;
80006cc0:	70 0a       	ld.w	r10,r8[0x0]
80006cc2:	a3 aa       	sbr	r10,0x2
80006cc4:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006cc6:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
80006cca:	10 99       	mov	r9,r8
80006ccc:	73 58       	ld.w	r8,r9[0x54]
80006cce:	e2 18 00 80 	andl	r8,0x80,COH
80006cd2:	cf d0       	breq	80006ccc <sysclk_enable_usb+0x2c>
	cfg->ctrl = 0;

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
		mul *= 2;
		vco_hz *= 2;
80006cd4:	30 88       	mov	r8,8
static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
80006cd6:	a3 a8       	sbr	r8,0x2
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80006cd8:	31 09       	mov	r9,16
80006cda:	20 19       	sub	r9,1
80006cdc:	b1 69       	lsl	r9,0x10
80006cde:	ea 19 3f 00 	orh	r9,0x3f00
80006ce2:	e8 19 02 01 	orl	r9,0x201
80006ce6:	f3 e8 10 08 	or	r8,r9,r8
80006cea:	fe 79 0c 00 	mov	r9,-62464
80006cee:	93 88       	st.w	r9[0x20],r8

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80006cf0:	73 58       	ld.w	r8,r9[0x54]
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
80006cf2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006cf6:	cf d0       	breq	80006cf0 <sysclk_enable_usb+0x50>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80006cf8:	30 69       	mov	r9,6
80006cfa:	fe 78 0c 00 	mov	r8,-62464
80006cfe:	f1 49 00 6c 	st.w	r8[108],r9
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
80006d02:	d8 02       	popm	pc
80006d04:	80 00       	ld.sh	r0,r0[0x0]
80006d06:	6c 60       	ld.w	r0,r6[0x18]
80006d08:	80 00       	ld.sh	r0,r0[0x0]
80006d0a:	6c 34       	ld.w	r4,r6[0xc]

80006d0c <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
80006d0c:	5e ff       	retal	1
80006d0e:	d7 03       	nop

80006d10 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
80006d10:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80006d12:	58 0c       	cp.w	r12,0
80006d14:	c0 20       	breq	80006d18 <mem_test_unit_ready+0x8>
80006d16:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
80006d18:	48 28       	lddpc	r8,80006d20 <mem_test_unit_ready+0x10>
80006d1a:	70 0c       	ld.w	r12,r8[0x0]
80006d1c:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return status;
}
80006d1e:	d8 02       	popm	pc
80006d20:	80 00       	ld.sh	r0,r0[0x0]
80006d22:	80 e8       	ld.uh	r8,r0[0xc]

80006d24 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
80006d24:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80006d26:	58 0c       	cp.w	r12,0
80006d28:	c0 20       	breq	80006d2c <mem_read_capacity+0x8>
80006d2a:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
80006d2c:	48 38       	lddpc	r8,80006d38 <mem_read_capacity+0x14>
80006d2e:	70 18       	ld.w	r8,r8[0x4]
80006d30:	16 9c       	mov	r12,r11
80006d32:	5d 18       	icall	r8
#endif

  Ctrl_access_unlock();

  return status;
}
80006d34:	d8 02       	popm	pc
80006d36:	00 00       	add	r0,r0
80006d38:	80 00       	ld.sh	r0,r0[0x0]
80006d3a:	80 e8       	ld.uh	r8,r0[0xc]

80006d3c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
80006d3c:	58 0c       	cp.w	r12,0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
80006d3e:	5f 0c       	sreq	r12
80006d40:	5e fc       	retal	r12
80006d42:	d7 03       	nop

80006d44 <mem_wr_protect>:


Bool mem_wr_protect(U8 lun)
{
80006d44:	d4 01       	pushm	lr
  Bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
80006d46:	58 0c       	cp.w	r12,0
80006d48:	c0 20       	breq	80006d4c <mem_wr_protect+0x8>
80006d4a:	da 0a       	popm	pc,r12=1
#if MAX_LUN
               (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
80006d4c:	48 28       	lddpc	r8,80006d54 <mem_wr_protect+0x10>
80006d4e:	70 2c       	ld.w	r12,r8[0x8]
80006d50:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
80006d52:	d8 02       	popm	pc
80006d54:	80 00       	ld.sh	r0,r0[0x0]
80006d56:	80 e8       	ld.uh	r8,r0[0xc]

80006d58 <ram_2_memory>:
  return status;
}


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
80006d58:	eb cd 40 e0 	pushm	r5-r7,lr
80006d5c:	18 97       	mov	r7,r12
80006d5e:	16 95       	mov	r5,r11
80006d60:	14 96       	mov	r6,r10
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
80006d62:	30 2c       	mov	r12,2
80006d64:	f0 1f 00 09 	mcall	80006d88 <ram_2_memory+0x30>
  status =
80006d68:	58 07       	cp.w	r7,0
80006d6a:	c0 30       	breq	80006d70 <ram_2_memory+0x18>
80006d6c:	30 17       	mov	r7,1
80006d6e:	c0 78       	rjmp	80006d7c <ram_2_memory+0x24>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
80006d70:	48 78       	lddpc	r8,80006d8c <ram_2_memory+0x34>
80006d72:	70 58       	ld.w	r8,r8[0x14]
80006d74:	0c 9b       	mov	r11,r6
80006d76:	0a 9c       	mov	r12,r5
80006d78:	5d 18       	icall	r8
80006d7a:	18 97       	mov	r7,r12
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
80006d7c:	30 2c       	mov	r12,2
80006d7e:	f0 1f 00 05 	mcall	80006d90 <ram_2_memory+0x38>

  Ctrl_access_unlock();

  return status;
}
80006d82:	0e 9c       	mov	r12,r7
80006d84:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006d88:	80 00       	ld.sh	r0,r0[0x0]
80006d8a:	20 fc       	sub	r12,15
80006d8c:	80 00       	ld.sh	r0,r0[0x0]
80006d8e:	80 e8       	ld.uh	r8,r0[0xc]
80006d90:	80 00       	ld.sh	r0,r0[0x0]
80006d92:	21 4c       	sub	r12,20

80006d94 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
80006d94:	eb cd 40 e0 	pushm	r5-r7,lr
80006d98:	18 97       	mov	r7,r12
80006d9a:	16 95       	mov	r5,r11
80006d9c:	14 96       	mov	r6,r10
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
80006d9e:	30 1c       	mov	r12,1
80006da0:	f0 1f 00 09 	mcall	80006dc4 <memory_2_ram+0x30>
  status =
80006da4:	58 07       	cp.w	r7,0
80006da6:	c0 30       	breq	80006dac <memory_2_ram+0x18>
80006da8:	30 17       	mov	r7,1
80006daa:	c0 78       	rjmp	80006db8 <memory_2_ram+0x24>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
80006dac:	48 78       	lddpc	r8,80006dc8 <memory_2_ram+0x34>
80006dae:	70 48       	ld.w	r8,r8[0x10]
80006db0:	0c 9b       	mov	r11,r6
80006db2:	0a 9c       	mov	r12,r5
80006db4:	5d 18       	icall	r8
80006db6:	18 97       	mov	r7,r12
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
80006db8:	30 1c       	mov	r12,1
80006dba:	f0 1f 00 05 	mcall	80006dcc <memory_2_ram+0x38>

  Ctrl_access_unlock();

  return status;
}
80006dbe:	0e 9c       	mov	r12,r7
80006dc0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006dc4:	80 00       	ld.sh	r0,r0[0x0]
80006dc6:	20 fc       	sub	r12,15
80006dc8:	80 00       	ld.sh	r0,r0[0x0]
80006dca:	80 e8       	ld.uh	r8,r0[0xc]
80006dcc:	80 00       	ld.sh	r0,r0[0x0]
80006dce:	21 4c       	sub	r12,20

80006dd0 <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
	return 0;
}
80006dd0:	5e fd       	retal	0
80006dd2:	d7 03       	nop

80006dd4 <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
80006dd4:	48 d8       	lddpc	r8,80006e08 <udi_hid_kbd_setreport+0x34>
80006dd6:	90 18       	ld.sh	r8,r8[0x2]
80006dd8:	f5 d8 c1 08 	bfextu	r10,r8,0x8,0x8
80006ddc:	30 29       	mov	r9,2
80006dde:	f2 0a 19 00 	cp.h	r10,r9
80006de2:	c1 11       	brne	80006e04 <udi_hid_kbd_setreport+0x30>
80006de4:	5c 58       	castu.b	r8
80006de6:	c0 f1       	brne	80006e04 <udi_hid_kbd_setreport+0x30>
80006de8:	48 88       	lddpc	r8,80006e08 <udi_hid_kbd_setreport+0x34>
80006dea:	90 39       	ld.sh	r9,r8[0x6]
80006dec:	30 18       	mov	r8,1
80006dee:	f0 09 19 00 	cp.h	r9,r8
80006df2:	c0 91       	brne	80006e04 <udi_hid_kbd_setreport+0x30>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
			&& (1 == udd_g_ctrlreq.req.wLength)) {
		// Report OUT type on report ID 0 from USB Host
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
80006df4:	48 58       	lddpc	r8,80006e08 <udi_hid_kbd_setreport+0x34>
80006df6:	48 69       	lddpc	r9,80006e0c <udi_hid_kbd_setreport+0x38>
80006df8:	91 29       	st.w	r8[0x8],r9
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
80006dfa:	48 69       	lddpc	r9,80006e10 <udi_hid_kbd_setreport+0x3c>
80006dfc:	91 49       	st.w	r8[0x10],r9
		udd_g_ctrlreq.payload_size = 1;
80006dfe:	30 19       	mov	r9,1
80006e00:	b0 69       	st.h	r8[0xc],r9
80006e02:	5e ff       	retal	1
		return true;
80006e04:	5e fd       	retal	0
80006e06:	00 00       	add	r0,r0
80006e08:	00 00       	add	r0,r0
80006e0a:	04 90       	mov	r0,r2
80006e0c:	00 00       	add	r0,r0
80006e0e:	01 d1       	ld.ub	r1,r0[0x5]
80006e10:	80 00       	ld.sh	r0,r0[0x0]
80006e12:	70 20       	ld.w	r0,r8[0x8]

80006e14 <udi_hid_kbd_send_report>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
80006e14:	d4 01       	pushm	lr
	if (udi_hid_kbd_b_report_trans_ongoing)
80006e16:	48 e8       	lddpc	r8,80006e4c <udi_hid_kbd_send_report+0x38>
80006e18:	11 89       	ld.ub	r9,r8[0x0]
80006e1a:	30 08       	mov	r8,0
80006e1c:	f0 09 18 00 	cp.b	r9,r8
80006e20:	c0 20       	breq	80006e24 <udi_hid_kbd_send_report+0x10>
80006e22:	d8 0a       	popm	pc,r12=0
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
80006e24:	48 ba       	lddpc	r10,80006e50 <udi_hid_kbd_send_report+0x3c>
80006e26:	48 c8       	lddpc	r8,80006e54 <udi_hid_kbd_send_report+0x40>
80006e28:	f0 e8 00 00 	ld.d	r8,r8[0]
80006e2c:	f4 e9 00 00 	st.d	r10[0],r8
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
80006e30:	30 09       	mov	r9,0
80006e32:	48 a8       	lddpc	r8,80006e58 <udi_hid_kbd_send_report+0x44>
80006e34:	b0 89       	st.b	r8[0x0],r9
	udi_hid_kbd_b_report_trans_ongoing =
			udd_ep_run(	UDI_HID_KBD_EP_IN,
80006e36:	48 a8       	lddpc	r8,80006e5c <udi_hid_kbd_send_report+0x48>
80006e38:	30 89       	mov	r9,8
80006e3a:	30 0b       	mov	r11,0
80006e3c:	e0 6c 00 81 	mov	r12,129
80006e40:	f0 1f 00 08 	mcall	80006e60 <udi_hid_kbd_send_report+0x4c>
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
	udi_hid_kbd_b_report_trans_ongoing =
80006e44:	48 28       	lddpc	r8,80006e4c <udi_hid_kbd_send_report+0x38>
80006e46:	b0 8c       	st.b	r8[0x0],r12
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
}
80006e48:	d8 02       	popm	pc
80006e4a:	00 00       	add	r0,r0
80006e4c:	00 00       	add	r0,r0
80006e4e:	01 c7       	ld.ub	r7,r0[0x4]
80006e50:	00 00       	add	r0,r0
80006e52:	01 c8       	ld.ub	r8,r0[0x4]
80006e54:	00 00       	add	r0,r0
80006e56:	01 d4       	ld.ub	r4,r0[0x5]
80006e58:	00 00       	add	r0,r0
80006e5a:	01 c6       	ld.ub	r6,r0[0x4]
80006e5c:	80 00       	ld.sh	r0,r0[0x0]
80006e5e:	6e 64       	ld.w	r4,r7[0x18]
80006e60:	80 00       	ld.sh	r0,r0[0x0]
80006e62:	39 24       	mov	r4,-110

80006e64 <udi_hid_kbd_report_sent>:

void udi_hid_kbd_report_sent(udd_ep_status_t status, iram_size_t nb_sent)
{
80006e64:	d4 01       	pushm	lr
	udi_hid_kbd_b_report_trans_ongoing = false;
80006e66:	30 08       	mov	r8,0
80006e68:	48 59       	lddpc	r9,80006e7c <udi_hid_kbd_report_sent+0x18>
80006e6a:	b2 88       	st.b	r9[0x0],r8
	if (udi_hid_kbd_b_report_valid) {
80006e6c:	48 59       	lddpc	r9,80006e80 <udi_hid_kbd_report_sent+0x1c>
80006e6e:	13 89       	ld.ub	r9,r9[0x0]
80006e70:	f0 09 18 00 	cp.b	r9,r8
80006e74:	c0 30       	breq	80006e7a <udi_hid_kbd_report_sent+0x16>
		udi_hid_kbd_send_report();
80006e76:	f0 1f 00 04 	mcall	80006e84 <udi_hid_kbd_report_sent+0x20>
80006e7a:	d8 02       	popm	pc
80006e7c:	00 00       	add	r0,r0
80006e7e:	01 c7       	ld.ub	r7,r0[0x4]
80006e80:	00 00       	add	r0,r0
80006e82:	01 c6       	ld.ub	r6,r0[0x4]
80006e84:	80 00       	ld.sh	r0,r0[0x0]
80006e86:	6e 14       	ld.w	r4,r7[0x4]

80006e88 <udi_hid_kbd_down>:
	return true;
}


bool udi_hid_kbd_down(uint8_t key_id)
{
80006e88:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006e8c:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80006e90:	d3 03       	ssrf	0x10

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
80006e92:	49 98       	lddpc	r8,80006ef4 <udi_hid_kbd_down+0x6c>
80006e94:	11 a8       	ld.ub	r8,r8[0x2]
80006e96:	58 08       	cp.w	r8,0
80006e98:	c2 10       	breq	80006eda <udi_hid_kbd_down+0x52>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
80006e9a:	f8 08 18 00 	cp.b	r8,r12
80006e9e:	c0 b0       	breq	80006eb4 <udi_hid_kbd_down+0x2c>
80006ea0:	49 59       	lddpc	r9,80006ef4 <udi_hid_kbd_down+0x6c>
80006ea2:	2f d9       	sub	r9,-3
80006ea4:	30 38       	mov	r8,3
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
80006ea6:	30 8b       	mov	r11,8
		if (0 == udi_hid_kbd_report[i])
80006ea8:	13 8a       	ld.ub	r10,r9[0x0]
80006eaa:	58 0a       	cp.w	r10,0
80006eac:	c0 f0       	breq	80006eca <udi_hid_kbd_down+0x42>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
80006eae:	f8 0a 18 00 	cp.b	r10,r12
80006eb2:	c0 51       	brne	80006ebc <udi_hid_kbd_down+0x34>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006eb4:	e3 b7 00 00 	mtsr	0x0,r7
#endif
	barrier();
80006eb8:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
80006ebc:	2f f8       	sub	r8,-1
80006ebe:	5c 58       	castu.b	r8
80006ec0:	2f f9       	sub	r9,-1
80006ec2:	f6 08 18 00 	cp.b	r8,r11
80006ec6:	cf 11       	brne	80006ea8 <udi_hid_kbd_down+0x20>
80006ec8:	c0 58       	rjmp	80006ed2 <udi_hid_kbd_down+0x4a>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
80006eca:	30 89       	mov	r9,8
80006ecc:	f2 08 18 00 	cp.b	r8,r9
80006ed0:	c0 61       	brne	80006edc <udi_hid_kbd_down+0x54>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006ed2:	e3 b7 00 00 	mtsr	0x0,r7
#endif
	barrier();
80006ed6:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time 
		cpu_irq_restore(flags);
		return false;
80006eda:	30 28       	mov	r8,2
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
80006edc:	48 69       	lddpc	r9,80006ef4 <udi_hid_kbd_down+0x6c>
80006ede:	f2 08 0b 0c 	st.b	r9[r8],r12
	udi_hid_kbd_b_report_valid = true;
80006ee2:	30 19       	mov	r9,1
80006ee4:	48 58       	lddpc	r8,80006ef8 <udi_hid_kbd_down+0x70>
80006ee6:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_kbd_send_report();
80006ee8:	f0 1f 00 05 	mcall	80006efc <udi_hid_kbd_down+0x74>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006eec:	e3 b7 00 00 	mtsr	0x0,r7
#endif
	barrier();
80006ef0:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80006ef4:	00 00       	add	r0,r0
80006ef6:	01 d4       	ld.ub	r4,r0[0x5]
80006ef8:	00 00       	add	r0,r0
80006efa:	01 c6       	ld.ub	r6,r0[0x4]
80006efc:	80 00       	ld.sh	r0,r0[0x0]
80006efe:	6e 14       	ld.w	r4,r7[0x4]

80006f00 <udi_hid_kbd_up>:
	return true;
}


bool udi_hid_kbd_up(uint8_t key_id)
{
80006f00:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006f04:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80006f08:	d3 03       	ssrf	0x10

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
80006f0a:	4a 18       	lddpc	r8,80006f8c <udi_hid_kbd_up+0x8c>
80006f0c:	11 a8       	ld.ub	r8,r8[0x2]
80006f0e:	58 08       	cp.w	r8,0
80006f10:	c0 b0       	breq	80006f26 <udi_hid_kbd_up+0x26>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
80006f12:	f8 08 18 00 	cp.b	r8,r12
80006f16:	c2 20       	breq	80006f5a <udi_hid_kbd_up+0x5a>
80006f18:	49 d9       	lddpc	r9,80006f8c <udi_hid_kbd_up+0x8c>
80006f1a:	2f d9       	sub	r9,-3
80006f1c:	30 38       	mov	r8,3
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
80006f1e:	30 8b       	mov	r11,8
		if (0 == udi_hid_kbd_report[i]) {
80006f20:	13 8a       	ld.ub	r10,r9[0x0]
80006f22:	58 0a       	cp.w	r10,0
80006f24:	c0 41       	brne	80006f2c <udi_hid_kbd_up+0x2c>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006f26:	e3 b7 00 00 	mtsr	0x0,r7
			// Already removed
			cpu_irq_restore(flags);
			return true;
80006f2a:	c2 f8       	rjmp	80006f88 <udi_hid_kbd_up+0x88>
		}
		if (key_id == udi_hid_kbd_report[i])
80006f2c:	f8 0a 18 00 	cp.b	r10,r12
80006f30:	c0 80       	breq	80006f40 <udi_hid_kbd_up+0x40>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
80006f32:	2f f8       	sub	r8,-1
80006f34:	5c 58       	castu.b	r8
80006f36:	2f f9       	sub	r9,-1
80006f38:	f6 08 18 00 	cp.b	r8,r11
80006f3c:	cf 21       	brne	80006f20 <udi_hid_kbd_up+0x20>
80006f3e:	c0 b8       	rjmp	80006f54 <udi_hid_kbd_up+0x54>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
80006f40:	30 89       	mov	r9,8
80006f42:	f2 08 18 00 	cp.b	r8,r9
80006f46:	c0 70       	breq	80006f54 <udi_hid_kbd_up+0x54>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
80006f48:	30 69       	mov	r9,6
80006f4a:	f2 08 18 00 	cp.b	r8,r9
80006f4e:	e0 88 00 07 	brls	80006f5c <udi_hid_kbd_up+0x5c>
80006f52:	c1 18       	rjmp	80006f74 <udi_hid_kbd_up+0x74>
80006f54:	e3 b7 00 00 	mtsr	0x0,r7
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
80006f58:	c1 88       	rjmp	80006f88 <udi_hid_kbd_up+0x88>
80006f5a:	30 28       	mov	r8,2
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
80006f5c:	48 c9       	lddpc	r9,80006f8c <udi_hid_kbd_up+0x8c>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
80006f5e:	30 7b       	mov	r11,7
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
80006f60:	f2 08 00 0a 	add	r10,r9,r8
80006f64:	15 9a       	ld.ub	r10,r10[0x1]
80006f66:	f2 08 0b 0a 	st.b	r9[r8],r10
		i++;
80006f6a:	2f f8       	sub	r8,-1
80006f6c:	5c 58       	castu.b	r8
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
80006f6e:	f6 08 18 00 	cp.b	r8,r11
80006f72:	cf 71       	brne	80006f60 <udi_hid_kbd_up+0x60>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
80006f74:	30 09       	mov	r9,0
80006f76:	48 68       	lddpc	r8,80006f8c <udi_hid_kbd_up+0x8c>
80006f78:	b0 f9       	st.b	r8[0x7],r9
	udi_hid_kbd_b_report_valid = true;
80006f7a:	30 19       	mov	r9,1
80006f7c:	48 58       	lddpc	r8,80006f90 <udi_hid_kbd_up+0x90>
80006f7e:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_kbd_send_report();
80006f80:	f0 1f 00 05 	mcall	80006f94 <udi_hid_kbd_up+0x94>
80006f84:	e3 b7 00 00 	mtsr	0x0,r7

	cpu_irq_restore(flags);
	return true;
}
80006f88:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80006f8c:	00 00       	add	r0,r0
80006f8e:	01 d4       	ld.ub	r4,r0[0x5]
80006f90:	00 00       	add	r0,r0
80006f92:	01 c6       	ld.ub	r6,r0[0x4]
80006f94:	80 00       	ld.sh	r0,r0[0x0]
80006f96:	6e 14       	ld.w	r4,r7[0x4]

80006f98 <udi_hid_kbd_modifier_down>:
	return true;
}


bool udi_hid_kbd_modifier_down(uint8_t modifier_id)
{
80006f98:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006f9c:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80006fa0:	d3 03       	ssrf	0x10
	irqflags_t flags = cpu_irq_save();

	// Fill report
	udi_hid_kbd_report[0] |= modifier_id;
80006fa2:	48 78       	lddpc	r8,80006fbc <udi_hid_kbd_modifier_down+0x24>
80006fa4:	11 89       	ld.ub	r9,r8[0x0]
80006fa6:	12 4c       	or	r12,r9
80006fa8:	b0 8c       	st.b	r8[0x0],r12
	udi_hid_kbd_b_report_valid = true;
80006faa:	30 19       	mov	r9,1
80006fac:	48 58       	lddpc	r8,80006fc0 <udi_hid_kbd_modifier_down+0x28>
80006fae:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_kbd_send_report();
80006fb0:	f0 1f 00 05 	mcall	80006fc4 <udi_hid_kbd_modifier_down+0x2c>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006fb4:	e3 b7 00 00 	mtsr	0x0,r7

	cpu_irq_restore(flags);
	return true;
}
80006fb8:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80006fbc:	00 00       	add	r0,r0
80006fbe:	01 d4       	ld.ub	r4,r0[0x5]
80006fc0:	00 00       	add	r0,r0
80006fc2:	01 c6       	ld.ub	r6,r0[0x4]
80006fc4:	80 00       	ld.sh	r0,r0[0x0]
80006fc6:	6e 14       	ld.w	r4,r7[0x4]

80006fc8 <udi_hid_kbd_modifier_up>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_kbd_modifier_up(uint8_t modifier_id)
{
80006fc8:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006fcc:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80006fd0:	d3 03       	ssrf	0x10
	irqflags_t flags = cpu_irq_save();

	// Fill report
	udi_hid_kbd_report[0] &= ~modifier_id;
80006fd2:	48 88       	lddpc	r8,80006ff0 <udi_hid_kbd_modifier_up+0x28>
80006fd4:	5c dc       	com	r12
80006fd6:	11 89       	ld.ub	r9,r8[0x0]
80006fd8:	12 6c       	and	r12,r9
80006fda:	b0 8c       	st.b	r8[0x0],r12
	udi_hid_kbd_b_report_valid = true;
80006fdc:	30 19       	mov	r9,1
80006fde:	48 68       	lddpc	r8,80006ff4 <udi_hid_kbd_modifier_up+0x2c>
80006fe0:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_kbd_send_report();
80006fe2:	f0 1f 00 06 	mcall	80006ff8 <udi_hid_kbd_modifier_up+0x30>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006fe6:	e3 b7 00 00 	mtsr	0x0,r7

	cpu_irq_restore(flags);
	return true;
}
80006fea:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80006fee:	00 00       	add	r0,r0
80006ff0:	00 00       	add	r0,r0
80006ff2:	01 d4       	ld.ub	r4,r0[0x5]
80006ff4:	00 00       	add	r0,r0
80006ff6:	01 c6       	ld.ub	r6,r0[0x4]
80006ff8:	80 00       	ld.sh	r0,r0[0x0]
80006ffa:	6e 14       	ld.w	r4,r7[0x4]

80006ffc <udi_hid_kbd_setup>:
	UDI_HID_KBD_DISABLE_EXT();
}


bool udi_hid_kbd_setup(void)
{
80006ffc:	d4 01       	pushm	lr
	return udi_hid_setup(&udi_hid_kbd_rate,
80006ffe:	48 49       	lddpc	r9,8000700c <udi_hid_kbd_setup+0x10>
80007000:	48 4a       	lddpc	r10,80007010 <udi_hid_kbd_setup+0x14>
80007002:	48 5b       	lddpc	r11,80007014 <udi_hid_kbd_setup+0x18>
80007004:	48 5c       	lddpc	r12,80007018 <udi_hid_kbd_setup+0x1c>
80007006:	f0 1f 00 06 	mcall	8000701c <udi_hid_kbd_setup+0x20>
								&udi_hid_kbd_protocol,
								(uint8_t *) &udi_hid_kbd_report_desc,
								udi_hid_kbd_setreport);
}
8000700a:	d8 02       	popm	pc
8000700c:	80 00       	ld.sh	r0,r0[0x0]
8000700e:	6d d4       	ld.w	r4,r6[0x74]
80007010:	00 00       	add	r0,r0
80007012:	00 0d       	add	sp,r0
80007014:	00 00       	add	r0,r0
80007016:	01 d0       	ld.ub	r0,r0[0x5]
80007018:	00 00       	add	r0,r0
8000701a:	01 dc       	ld.ub	r12,r0[0x5]
8000701c:	80 00       	ld.sh	r0,r0[0x0]
8000701e:	70 7c       	ld.w	r12,r8[0x1c]

80007020 <udi_hid_kbd_setreport_valid>:
		udi_hid_kbd_send_report();
	}
}

static void udi_hid_kbd_setreport_valid(void)
{
80007020:	d4 01       	pushm	lr
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
80007022:	48 38       	lddpc	r8,8000702c <udi_hid_kbd_setreport_valid+0xc>
80007024:	11 8c       	ld.ub	r12,r8[0x0]
80007026:	f0 1f 00 03 	mcall	80007030 <udi_hid_kbd_setreport_valid+0x10>
}
8000702a:	d8 02       	popm	pc
8000702c:	00 00       	add	r0,r0
8000702e:	01 d1       	ld.ub	r1,r0[0x5]
80007030:	80 00       	ld.sh	r0,r0[0x0]
80007032:	78 ba       	ld.w	r10,r12[0x2c]

80007034 <udi_hid_kbd_disable>:
	return UDI_HID_KBD_ENABLE_EXT();
}


void udi_hid_kbd_disable(void)
{
80007034:	d4 01       	pushm	lr
	UDI_HID_KBD_DISABLE_EXT();
80007036:	f0 1f 00 02 	mcall	8000703c <udi_hid_kbd_disable+0x8>
}
8000703a:	d8 02       	popm	pc
8000703c:	80 00       	ld.sh	r0,r0[0x0]
8000703e:	78 b8       	ld.w	r8,r12[0x2c]

80007040 <udi_hid_kbd_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_kbd_enable(void)
{
80007040:	d4 01       	pushm	lr
	// Initialize internal values
	udi_hid_kbd_rate = 0;
80007042:	30 08       	mov	r8,0
80007044:	48 89       	lddpc	r9,80007064 <udi_hid_kbd_enable+0x24>
80007046:	b2 88       	st.b	r9[0x0],r8
	udi_hid_kbd_protocol = 0;
80007048:	48 89       	lddpc	r9,80007068 <udi_hid_kbd_enable+0x28>
8000704a:	b2 88       	st.b	r9[0x0],r8
	udi_hid_kbd_b_report_trans_ongoing = false;
8000704c:	48 89       	lddpc	r9,8000706c <udi_hid_kbd_enable+0x2c>
8000704e:	b2 88       	st.b	r9[0x0],r8
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
80007050:	30 0a       	mov	r10,0
80007052:	30 0b       	mov	r11,0
80007054:	48 79       	lddpc	r9,80007070 <udi_hid_kbd_enable+0x30>
80007056:	f2 eb 00 00 	st.d	r9[0],r10
	udi_hid_kbd_b_report_valid = false;
8000705a:	48 79       	lddpc	r9,80007074 <udi_hid_kbd_enable+0x34>
8000705c:	b2 88       	st.b	r9[0x0],r8
	return UDI_HID_KBD_ENABLE_EXT();
8000705e:	f0 1f 00 07 	mcall	80007078 <udi_hid_kbd_enable+0x38>
}
80007062:	d8 02       	popm	pc
80007064:	00 00       	add	r0,r0
80007066:	01 dc       	ld.ub	r12,r0[0x5]
80007068:	00 00       	add	r0,r0
8000706a:	01 d0       	ld.ub	r0,r0[0x5]
8000706c:	00 00       	add	r0,r0
8000706e:	01 c7       	ld.ub	r7,r0[0x4]
80007070:	00 00       	add	r0,r0
80007072:	01 d4       	ld.ub	r4,r0[0x5]
80007074:	00 00       	add	r0,r0
80007076:	01 c6       	ld.ub	r6,r0[0x4]
80007078:	80 00       	ld.sh	r0,r0[0x0]
8000707a:	78 b6       	ld.w	r6,r12[0x2c]

8000707c <udi_hid_setup>:
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

//@}

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*set_report)(void) )
{
8000707c:	eb cd 40 80 	pushm	r7,lr
80007080:	14 97       	mov	r7,r10
	if (Udd_setup_is_in()) {
80007082:	4c 08       	lddpc	r8,80007180 <udi_hid_setup+0x104>
80007084:	11 88       	ld.ub	r8,r8[0x0]
80007086:	30 0a       	mov	r10,0
80007088:	f4 08 18 00 	cp.b	r8,r10
8000708c:	c5 04       	brge	8000712c <udi_hid_setup+0xb0>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
8000708e:	e2 18 00 60 	andl	r8,0x60,COH
80007092:	c3 31       	brne	800070f8 <udi_hid_setup+0x7c>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
80007094:	4b b9       	lddpc	r9,80007180 <udi_hid_setup+0x104>
80007096:	13 9a       	ld.ub	r10,r9[0x1]
80007098:	30 69       	mov	r9,6
8000709a:	f2 0a 18 00 	cp.b	r10,r9
8000709e:	c2 d1       	brne	800070f8 <udi_hid_setup+0x7c>
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
800070a0:	f0 1f 00 39 	mcall	80007184 <udi_hid_setup+0x108>
800070a4:	2f 7c       	sub	r12,-9
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
800070a6:	19 99       	ld.ub	r9,r12[0x1]
800070a8:	32 18       	mov	r8,33
800070aa:	f0 09 18 00 	cp.b	r9,r8
800070ae:	c2 31       	brne	800070f4 <udi_hid_setup+0x78>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor 
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
800070b0:	4b 48       	lddpc	r8,80007180 <udi_hid_setup+0x104>
800070b2:	11 a8       	ld.ub	r8,r8[0x2]
800070b4:	32 19       	mov	r9,33
800070b6:	f2 08 18 00 	cp.b	r8,r9
800070ba:	c0 a1       	brne	800070ce <udi_hid_setup+0x52>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
800070bc:	4b 18       	lddpc	r8,80007180 <udi_hid_setup+0x104>
800070be:	91 2c       	st.w	r8[0x8],r12
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
800070c0:	90 b9       	ld.uh	r9,r8[0x6]
800070c2:	19 8a       	ld.ub	r10,r12[0x0]
800070c4:	f2 0a 0d 49 	min	r9,r9,r10
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
800070c8:	b0 69       	st.h	r8[0xc],r9
800070ca:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
800070ce:	19 e9       	ld.ub	r9,r12[0x6]
800070d0:	f0 09 18 00 	cp.b	r9,r8
800070d4:	c1 01       	brne	800070f4 <udi_hid_setup+0x78>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
800070d6:	4a b8       	lddpc	r8,80007180 <udi_hid_setup+0x104>
800070d8:	91 27       	st.w	r8[0x8],r7
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
800070da:	90 ba       	ld.uh	r10,r8[0x6]
800070dc:	19 fb       	ld.ub	r11,r12[0x7]
800070de:	f9 39 00 08 	ld.ub	r9,r12[8]
800070e2:	f3 eb 10 89 	or	r9,r9,r11<<0x8
800070e6:	5c c9       	swap.bh	r9
800070e8:	5c 79       	castu.h	r9
800070ea:	f4 09 0d 49 	min	r9,r10,r9
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
800070ee:	b0 69       	st.h	r8[0xc],r9
800070f0:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800070f4:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800070f8:	e0 48 00 20 	cp.w	r8,32
800070fc:	c4 01       	brne	8000717c <udi_hid_setup+0x100>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
800070fe:	4a 18       	lddpc	r8,80007180 <udi_hid_setup+0x104>
80007100:	11 98       	ld.ub	r8,r8[0x1]
80007102:	30 29       	mov	r9,2
80007104:	f2 08 18 00 	cp.b	r8,r9
80007108:	c0 60       	breq	80007114 <udi_hid_setup+0x98>
8000710a:	30 39       	mov	r9,3
8000710c:	f2 08 18 00 	cp.b	r8,r9
80007110:	c3 61       	brne	8000717c <udi_hid_setup+0x100>
80007112:	c0 78       	rjmp	80007120 <udi_hid_setup+0xa4>
			case USB_REQ_HID_GET_REPORT:
				// TODO
				break;

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
80007114:	49 b8       	lddpc	r8,80007180 <udi_hid_setup+0x104>
80007116:	91 2c       	st.w	r8[0x8],r12
				udd_g_ctrlreq.payload_size = 1;
80007118:	30 19       	mov	r9,1
8000711a:	b0 69       	st.h	r8[0xc],r9
8000711c:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
				return true;

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
80007120:	49 88       	lddpc	r8,80007180 <udi_hid_setup+0x104>
80007122:	91 2b       	st.w	r8[0x8],r11
				udd_g_ctrlreq.payload_size = 1;
80007124:	30 19       	mov	r9,1
80007126:	b0 69       	st.h	r8[0xc],r9
80007128:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000712c:	e2 18 00 60 	andl	r8,0x60,COH
80007130:	e0 48 00 20 	cp.w	r8,32
80007134:	c2 41       	brne	8000717c <udi_hid_setup+0x100>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
80007136:	49 38       	lddpc	r8,80007180 <udi_hid_setup+0x104>
80007138:	11 98       	ld.ub	r8,r8[0x1]
8000713a:	30 9a       	mov	r10,9
8000713c:	f4 08 18 00 	cp.b	r8,r10
80007140:	c0 b0       	breq	80007156 <udi_hid_setup+0xda>
80007142:	c1 d3       	brcs	8000717c <udi_hid_setup+0x100>
80007144:	30 a9       	mov	r9,10
80007146:	f2 08 18 00 	cp.b	r8,r9
8000714a:	c0 90       	breq	8000715c <udi_hid_setup+0xe0>
8000714c:	30 b9       	mov	r9,11
8000714e:	f2 08 18 00 	cp.b	r8,r9
80007152:	c1 51       	brne	8000717c <udi_hid_setup+0x100>
80007154:	c0 98       	rjmp	80007166 <udi_hid_setup+0xea>

			case USB_REQ_HID_SET_REPORT:
				return set_report();
80007156:	5d 19       	icall	r9
80007158:	e3 cd 80 80 	ldm	sp++,r7,pc

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
8000715c:	48 98       	lddpc	r8,80007180 <udi_hid_setup+0x104>
8000715e:	11 a8       	ld.ub	r8,r8[0x2]
80007160:	b8 88       	st.b	r12[0x0],r8
80007162:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
80007166:	48 78       	lddpc	r8,80007180 <udi_hid_setup+0x104>
80007168:	90 39       	ld.sh	r9,r8[0x6]
8000716a:	30 08       	mov	r8,0
8000716c:	f0 09 19 00 	cp.h	r9,r8
80007170:	c0 61       	brne	8000717c <udi_hid_setup+0x100>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
80007172:	48 48       	lddpc	r8,80007180 <udi_hid_setup+0x104>
80007174:	90 18       	ld.sh	r8,r8[0x2]
80007176:	b6 88       	st.b	r11[0x0],r8
80007178:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
				return true;
8000717c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80007180:	00 00       	add	r0,r0
80007182:	04 90       	mov	r0,r2
80007184:	80 00       	ld.sh	r0,r0[0x0]
80007186:	71 88       	ld.w	r8,r8[0x60]

80007188 <udc_get_interface_desc>:


usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
80007188:	48 28       	lddpc	r8,80007190 <udc_get_interface_desc+0x8>
8000718a:	70 0c       	ld.w	r12,r8[0x0]
8000718c:	5e fc       	retal	r12
8000718e:	00 00       	add	r0,r0
80007190:	00 00       	add	r0,r0
80007192:	01 ec       	ld.ub	r12,r0[0x6]

80007194 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80007194:	48 78       	lddpc	r8,800071b0 <udc_get_eof_conf+0x1c>
80007196:	70 08       	ld.w	r8,r8[0x0]
80007198:	70 08       	ld.w	r8,r8[0x0]
8000719a:	11 aa       	ld.ub	r10,r8[0x2]
8000719c:	11 b9       	ld.ub	r9,r8[0x3]
8000719e:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800071a2:	5c c9       	swap.bh	r9
800071a4:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
800071a8:	f0 0c 00 0c 	add	r12,r8,r12
800071ac:	5e fc       	retal	r12
800071ae:	00 00       	add	r0,r0
800071b0:	00 00       	add	r0,r0
800071b2:	01 e0       	ld.ub	r0,r0[0x6]

800071b4 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
800071b4:	eb cd 40 e0 	pushm	r5-r7,lr
800071b8:	18 97       	mov	r7,r12
800071ba:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
800071bc:	49 b8       	lddpc	r8,80007228 <udc_update_iface_desc+0x74>
800071be:	11 89       	ld.ub	r9,r8[0x0]
800071c0:	30 08       	mov	r8,0
800071c2:	f0 09 18 00 	cp.b	r9,r8
800071c6:	c2 f0       	breq	80007224 <udc_update_iface_desc+0x70>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
800071c8:	49 98       	lddpc	r8,8000722c <udc_update_iface_desc+0x78>
800071ca:	70 08       	ld.w	r8,r8[0x0]
800071cc:	70 08       	ld.w	r8,r8[0x0]
800071ce:	11 c9       	ld.ub	r9,r8[0x4]
800071d0:	18 9e       	mov	lr,r12
800071d2:	f8 09 18 00 	cp.b	r9,r12
800071d6:	e0 88 00 27 	brls	80007224 <udc_update_iface_desc+0x70>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
800071da:	49 65       	lddpc	r5,80007230 <udc_update_iface_desc+0x7c>
800071dc:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
800071de:	f0 1f 00 16 	mcall	80007234 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
800071e2:	6a 08       	ld.w	r8,r5[0x0]
800071e4:	10 3c       	cp.w	r12,r8
800071e6:	e0 88 00 1f 	brls	80007224 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
800071ea:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800071ec:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
800071ee:	11 9a       	ld.ub	r10,r8[0x1]
800071f0:	f6 0a 18 00 	cp.b	r10,r11
800071f4:	c0 a1       	brne	80007208 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
800071f6:	11 aa       	ld.ub	r10,r8[0x2]
800071f8:	0e 9e       	mov	lr,r7
800071fa:	ee 0a 18 00 	cp.b	r10,r7
800071fe:	c0 51       	brne	80007208 <udc_update_iface_desc+0x54>
					&& (setting_num ==
							udc_ptr_iface->
80007200:	11 ba       	ld.ub	r10,r8[0x3]
80007202:	ec 0a 18 00 	cp.b	r10,r6
80007206:	c0 b0       	breq	8000721c <udc_update_iface_desc+0x68>
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
80007208:	13 88       	ld.ub	r8,r9[0x0]
8000720a:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000720e:	10 3c       	cp.w	r12,r8
80007210:	fe 9b ff ee 	brhi	800071ec <udc_update_iface_desc+0x38>
80007214:	48 79       	lddpc	r9,80007230 <udc_update_iface_desc+0x7c>
80007216:	93 08       	st.w	r9[0x0],r8
80007218:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000721c:	48 59       	lddpc	r9,80007230 <udc_update_iface_desc+0x7c>
8000721e:	93 08       	st.w	r9[0x0],r8
80007220:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80007224:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80007228:	00 00       	add	r0,r0
8000722a:	01 e8       	ld.ub	r8,r0[0x6]
8000722c:	00 00       	add	r0,r0
8000722e:	01 e0       	ld.ub	r0,r0[0x6]
80007230:	00 00       	add	r0,r0
80007232:	01 ec       	ld.ub	r12,r0[0x6]
80007234:	80 00       	ld.sh	r0,r0[0x0]
80007236:	71 94       	ld.w	r4,r8[0x64]

80007238 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
80007238:	eb cd 40 c0 	pushm	r6-r7,lr
8000723c:	18 96       	mov	r6,r12
8000723e:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
80007240:	f0 1f 00 11 	mcall	80007284 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80007244:	0d 88       	ld.ub	r8,r6[0x0]
80007246:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80007248:	0c 3c       	cp.w	r12,r6
8000724a:	e0 88 00 19 	brls	8000727c <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
8000724e:	0d 98       	ld.ub	r8,r6[0x1]
80007250:	30 49       	mov	r9,4
80007252:	f2 08 18 00 	cp.b	r8,r9
80007256:	c1 30       	breq	8000727c <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
80007258:	ee 08 18 00 	cp.b	r8,r7
8000725c:	c0 a1       	brne	80007270 <udc_next_desc_in_iface+0x38>
8000725e:	c1 08       	rjmp	8000727e <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
80007260:	0d 98       	ld.ub	r8,r6[0x1]
80007262:	f2 08 18 00 	cp.b	r8,r9
80007266:	c0 b0       	breq	8000727c <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
80007268:	ee 08 18 00 	cp.b	r8,r7
8000726c:	c0 31       	brne	80007272 <udc_next_desc_in_iface+0x3a>
8000726e:	c0 88       	rjmp	8000727e <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
80007270:	30 49       	mov	r9,4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80007272:	0d 88       	ld.ub	r8,r6[0x0]
80007274:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80007276:	0c 3c       	cp.w	r12,r6
80007278:	fe 9b ff f4 	brhi	80007260 <udc_next_desc_in_iface+0x28>
8000727c:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL;	// No specific descriptor found
}
8000727e:	0c 9c       	mov	r12,r6
80007280:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007284:	80 00       	ld.sh	r0,r0[0x0]
80007286:	71 94       	ld.w	r4,r8[0x64]

80007288 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80007288:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
8000728a:	48 48       	lddpc	r8,80007298 <udc_valid_address+0x10>
8000728c:	11 bc       	ld.ub	r12,r8[0x3]
8000728e:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80007292:	f0 1f 00 03 	mcall	8000729c <udc_valid_address+0x14>
}
80007296:	d8 02       	popm	pc
80007298:	00 00       	add	r0,r0
8000729a:	04 90       	mov	r0,r2
8000729c:	80 00       	ld.sh	r0,r0[0x0]
8000729e:	32 a2       	mov	r2,42

800072a0 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
800072a0:	eb cd 40 e0 	pushm	r5-r7,lr
800072a4:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
800072a6:	f0 1f 00 12 	mcall	800072ec <udc_iface_enable+0x4c>
800072aa:	c1 f0       	breq	800072e8 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800072ac:	49 18       	lddpc	r8,800072f0 <udc_iface_enable+0x50>
800072ae:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800072b0:	30 56       	mov	r6,5
800072b2:	0c 9b       	mov	r11,r6
800072b4:	0e 9c       	mov	r12,r7
800072b6:	f0 1f 00 10 	mcall	800072f4 <udc_iface_enable+0x54>
800072ba:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
800072bc:	c0 d0       	breq	800072d6 <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
800072be:	19 ca       	ld.ub	r10,r12[0x4]
800072c0:	19 d8       	ld.ub	r8,r12[0x5]
800072c2:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
800072c6:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
800072c8:	5c 7a       	castu.h	r10
800072ca:	19 bb       	ld.ub	r11,r12[0x3]
800072cc:	19 ac       	ld.ub	r12,r12[0x2]
800072ce:	f0 1f 00 0b 	mcall	800072f8 <udc_iface_enable+0x58>
800072d2:	cf 01       	brne	800072b2 <udc_iface_enable+0x12>
800072d4:	c0 a8       	rjmp	800072e8 <udc_iface_enable+0x48>
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
800072d6:	48 a8       	lddpc	r8,800072fc <udc_iface_enable+0x5c>
800072d8:	70 08       	ld.w	r8,r8[0x0]
800072da:	70 18       	ld.w	r8,r8[0x4]
800072dc:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
800072e0:	70 0c       	ld.w	r12,r8[0x0]
800072e2:	5d 1c       	icall	r12
800072e4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800072e8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800072ec:	80 00       	ld.sh	r0,r0[0x0]
800072ee:	71 b4       	ld.w	r4,r8[0x6c]
800072f0:	00 00       	add	r0,r0
800072f2:	01 ec       	ld.ub	r12,r0[0x6]
800072f4:	80 00       	ld.sh	r0,r0[0x0]
800072f6:	72 38       	ld.w	r8,r9[0xc]
800072f8:	80 00       	ld.sh	r0,r0[0x0]
800072fa:	34 58       	mov	r8,69
800072fc:	00 00       	add	r0,r0
800072fe:	01 e0       	ld.ub	r0,r0[0x6]

80007300 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80007300:	eb cd 40 e0 	pushm	r5-r7,lr
80007304:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80007306:	18 97       	mov	r7,r12
80007308:	30 0b       	mov	r11,0
8000730a:	f0 1f 00 12 	mcall	80007350 <udc_iface_disable+0x50>
8000730e:	c1 e0       	breq	8000734a <udc_iface_disable+0x4a>
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80007310:	49 18       	lddpc	r8,80007354 <udc_iface_disable+0x54>
80007312:	70 08       	ld.w	r8,r8[0x0]
80007314:	70 18       	ld.w	r8,r8[0x4]
80007316:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
8000731a:	6a 3c       	ld.w	r12,r5[0xc]
8000731c:	5d 1c       	icall	r12
8000731e:	18 9b       	mov	r11,r12
80007320:	0c 9c       	mov	r12,r6
80007322:	f0 1f 00 0c 	mcall	80007350 <udc_iface_disable+0x50>
80007326:	c1 20       	breq	8000734a <udc_iface_disable+0x4a>
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80007328:	48 c8       	lddpc	r8,80007358 <udc_iface_disable+0x58>
8000732a:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000732c:	30 56       	mov	r6,5
8000732e:	0c 9b       	mov	r11,r6
80007330:	0e 9c       	mov	r12,r7
80007332:	f0 1f 00 0b 	mcall	8000735c <udc_iface_disable+0x5c>
80007336:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
80007338:	c0 50       	breq	80007342 <udc_iface_disable+0x42>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000733a:	19 ac       	ld.ub	r12,r12[0x2]
8000733c:	f0 1f 00 09 	mcall	80007360 <udc_iface_disable+0x60>
		}
80007340:	cf 7b       	rjmp	8000732e <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
80007342:	6a 18       	ld.w	r8,r5[0x4]
80007344:	5d 18       	icall	r8
80007346:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
8000734a:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000734e:	00 00       	add	r0,r0
80007350:	80 00       	ld.sh	r0,r0[0x0]
80007352:	71 b4       	ld.w	r4,r8[0x6c]
80007354:	00 00       	add	r0,r0
80007356:	01 e0       	ld.ub	r0,r0[0x6]
80007358:	00 00       	add	r0,r0
8000735a:	01 ec       	ld.ub	r12,r0[0x6]
8000735c:	80 00       	ld.sh	r0,r0[0x0]
8000735e:	72 38       	ld.w	r8,r9[0xc]
80007360:	80 00       	ld.sh	r0,r0[0x0]
80007362:	34 28       	mov	r8,66

80007364 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device, 
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
80007364:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80007368:	49 68       	lddpc	r8,800073c0 <udc_reset+0x5c>
8000736a:	11 89       	ld.ub	r9,r8[0x0]
8000736c:	30 08       	mov	r8,0
8000736e:	f0 09 18 00 	cp.b	r9,r8
80007372:	c1 70       	breq	800073a0 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007374:	49 48       	lddpc	r8,800073c4 <udc_reset+0x60>
80007376:	70 08       	ld.w	r8,r8[0x0]
80007378:	70 08       	ld.w	r8,r8[0x0]
8000737a:	11 c9       	ld.ub	r9,r8[0x4]
8000737c:	30 08       	mov	r8,0
8000737e:	f0 09 18 00 	cp.b	r9,r8
80007382:	c0 f0       	breq	800073a0 <udc_reset+0x3c>
80007384:	30 07       	mov	r7,0
80007386:	49 06       	lddpc	r6,800073c4 <udc_reset+0x60>
				iface_num++) {
			udc_iface_disable(iface_num);
80007388:	0e 9c       	mov	r12,r7
8000738a:	f0 1f 00 10 	mcall	800073c8 <udc_reset+0x64>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000738e:	2f f7       	sub	r7,-1
80007390:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007392:	6c 08       	ld.w	r8,r6[0x0]
80007394:	70 08       	ld.w	r8,r8[0x0]
80007396:	11 c8       	ld.ub	r8,r8[0x4]
80007398:	ee 08 18 00 	cp.b	r8,r7
8000739c:	fe 9b ff f6 	brhi	80007388 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
800073a0:	30 09       	mov	r9,0
800073a2:	48 88       	lddpc	r8,800073c0 <udc_reset+0x5c>
800073a4:	b0 89       	st.b	r8[0x0],r9
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
800073a6:	48 a8       	lddpc	r8,800073cc <udc_reset+0x68>
800073a8:	90 88       	ld.uh	r8,r8[0x0]
800073aa:	e2 18 02 00 	andl	r8,0x200,COH
800073ae:	c0 30       	breq	800073b4 <udc_reset+0x50>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
800073b0:	f0 1f 00 08 	mcall	800073d0 <udc_reset+0x6c>
	}
#endif
	udc_device_status =
800073b4:	30 09       	mov	r9,0
800073b6:	48 68       	lddpc	r8,800073cc <udc_reset+0x68>
800073b8:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
800073ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800073be:	00 00       	add	r0,r0
800073c0:	00 00       	add	r0,r0
800073c2:	01 e8       	ld.ub	r8,r0[0x6]
800073c4:	00 00       	add	r0,r0
800073c6:	01 e0       	ld.ub	r0,r0[0x6]
800073c8:	80 00       	ld.sh	r0,r0[0x0]
800073ca:	73 00       	ld.w	r0,r9[0x40]
800073cc:	00 00       	add	r0,r0
800073ce:	01 e6       	ld.ub	r6,r0[0x6]
800073d0:	80 00       	ld.sh	r0,r0[0x0]
800073d2:	78 b4       	ld.w	r4,r12[0x2c]

800073d4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
800073d4:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
800073d8:	fe f8 04 7c 	ld.w	r8,pc[1148]
800073dc:	30 09       	mov	r9,0
800073de:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
800073e0:	30 0a       	mov	r10,0
800073e2:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
800073e4:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
800073e6:	11 88       	ld.ub	r8,r8[0x0]
800073e8:	10 9a       	mov	r10,r8
800073ea:	f2 08 18 00 	cp.b	r8,r9
800073ee:	c0 94       	brge	80007400 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0)
800073f0:	fe f9 04 64 	ld.w	r9,pc[1124]
800073f4:	92 3b       	ld.sh	r11,r9[0x6]
800073f6:	30 09       	mov	r9,0
800073f8:	f2 0b 19 00 	cp.h	r11,r9
800073fc:	e0 80 02 2a 	breq	80007850 <udc_process_setup+0x47c>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80007400:	10 99       	mov	r9,r8
80007402:	e2 19 00 60 	andl	r9,0x60,COH
80007406:	e0 81 01 f9 	brne	800077f8 <udc_process_setup+0x424>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
8000740a:	f2 0a 18 00 	cp.b	r10,r9
8000740e:	e0 84 01 06 	brge	8000761a <udc_process_setup+0x246>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
80007412:	fe f9 04 42 	ld.w	r9,pc[1090]
80007416:	92 39       	ld.sh	r9,r9[0x6]
80007418:	58 09       	cp.w	r9,0
8000741a:	e0 80 01 ef 	breq	800077f8 <udc_process_setup+0x424>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000741e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007422:	e0 81 00 a3 	brne	80007568 <udc_process_setup+0x194>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80007426:	fe fa 04 2e 	ld.w	r10,pc[1070]
8000742a:	15 9a       	ld.ub	r10,r10[0x1]
8000742c:	30 6b       	mov	r11,6
8000742e:	f6 0a 18 00 	cp.b	r10,r11
80007432:	c1 a0       	breq	80007466 <udc_process_setup+0x92>
80007434:	30 8b       	mov	r11,8
80007436:	f6 0a 18 00 	cp.b	r10,r11
8000743a:	e0 80 00 88 	breq	8000754a <udc_process_setup+0x176>
8000743e:	30 0b       	mov	r11,0
80007440:	f6 0a 18 00 	cp.b	r10,r11
80007444:	e0 81 00 92 	brne	80007568 <udc_process_setup+0x194>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
80007448:	30 28       	mov	r8,2
8000744a:	f0 09 19 00 	cp.h	r9,r8
8000744e:	c0 40       	breq	80007456 <udc_process_setup+0x82>
80007450:	30 0c       	mov	r12,0
80007452:	e0 8f 01 cf 	bral	800077f0 <udc_process_setup+0x41c>
		return false;

	udd_set_setup_payload(
80007456:	30 2b       	mov	r11,2
80007458:	fe fc 04 00 	ld.w	r12,pc[1024]
8000745c:	f0 1f 01 00 	mcall	8000785c <udc_process_setup+0x488>
80007460:	30 1c       	mov	r12,1
80007462:	e0 8f 01 c7 	bral	800077f0 <udc_process_setup+0x41c>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80007466:	fe f8 03 ee 	ld.w	r8,pc[1006]
8000746a:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
8000746c:	f2 08 16 08 	lsr	r8,r9,0x8
80007470:	30 2a       	mov	r10,2
80007472:	f4 08 18 00 	cp.b	r8,r10
80007476:	c1 00       	breq	80007496 <udc_process_setup+0xc2>
80007478:	30 3a       	mov	r10,3
8000747a:	f4 08 18 00 	cp.b	r8,r10
8000747e:	c2 a0       	breq	800074d2 <udc_process_setup+0xfe>
80007480:	30 19       	mov	r9,1
80007482:	f2 08 18 00 	cp.b	r8,r9
80007486:	c5 f1       	brne	80007544 <udc_process_setup+0x170>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80007488:	fe f8 03 d8 	ld.w	r8,pc[984]
8000748c:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
8000748e:	19 8b       	ld.ub	r11,r12[0x0]
80007490:	f0 1f 00 f3 	mcall	8000785c <udc_process_setup+0x488>
80007494:	c4 78       	rjmp	80007522 <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80007496:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80007498:	fe f8 03 c8 	ld.w	r8,pc[968]
8000749c:	70 08       	ld.w	r8,r8[0x0]
8000749e:	f1 38 00 11 	ld.ub	r8,r8[17]
800074a2:	f2 08 18 00 	cp.b	r8,r9
800074a6:	e0 88 00 4f 	brls	80007544 <udc_process_setup+0x170>
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
800074aa:	fe f8 03 b6 	ld.w	r8,pc[950]
800074ae:	70 18       	ld.w	r8,r8[0x4]
800074b0:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
800074b4:	19 a9       	ld.ub	r9,r12[0x2]
800074b6:	19 b8       	ld.ub	r8,r12[0x3]
800074b8:	f1 e9 10 88 	or	r8,r8,r9<<0x8
800074bc:	5c c8       	swap.bh	r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
800074be:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
800074c2:	f0 1f 00 e7 	mcall	8000785c <udc_process_setup+0x488>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
800074c6:	fe f8 03 8e 	ld.w	r8,pc[910]
800074ca:	70 28       	ld.w	r8,r8[0x8]
800074cc:	30 29       	mov	r9,2
800074ce:	b0 99       	st.b	r8[0x1],r9
800074d0:	c2 98       	rjmp	80007522 <udc_process_setup+0x14e>
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
800074d2:	5c 59       	castu.b	r9
800074d4:	58 19       	cp.w	r9,1
800074d6:	c1 00       	breq	800074f6 <udc_process_setup+0x122>
800074d8:	58 29       	cp.w	r9,2
800074da:	c0 40       	breq	800074e2 <udc_process_setup+0x10e>
800074dc:	58 09       	cp.w	r9,0
800074de:	c0 60       	breq	800074ea <udc_process_setup+0x116>
800074e0:	c3 28       	rjmp	80007544 <udc_process_setup+0x170>
800074e2:	fe fc 03 82 	ld.w	r12,pc[898]
800074e6:	30 cb       	mov	r11,12
800074e8:	c0 a8       	rjmp	800074fc <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload(
800074ea:	30 4b       	mov	r11,4
800074ec:	fe fc 03 7c 	ld.w	r12,pc[892]
800074f0:	f0 1f 00 db 	mcall	8000785c <udc_process_setup+0x488>
800074f4:	c1 78       	rjmp	80007522 <udc_process_setup+0x14e>
800074f6:	fe fc 03 76 	ld.w	r12,pc[886]
800074fa:	30 9b       	mov	r11,9
800074fc:	fe fa 03 74 	ld.w	r10,pc[884]
80007500:	2f ea       	sub	r10,-2
80007502:	18 98       	mov	r8,r12
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80007504:	11 39       	ld.ub	r9,r8++
80007506:	5c c9       	swap.bh	r9
80007508:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
8000750a:	f0 0c 01 09 	sub	r9,r8,r12
8000750e:	f6 09 18 00 	cp.b	r9,r11
80007512:	cf 93       	brcs	80007504 <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
80007514:	a1 7b       	lsl	r11,0x1
80007516:	2f eb       	sub	r11,-2
80007518:	fe fc 03 58 	ld.w	r12,pc[856]
8000751c:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
8000751e:	f0 1f 00 d0 	mcall	8000785c <udc_process_setup+0x488>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
80007522:	fe f8 03 32 	ld.w	r8,pc[818]
80007526:	90 39       	ld.sh	r9,r8[0x6]
80007528:	90 68       	ld.sh	r8,r8[0xc]
8000752a:	f2 08 19 00 	cp.h	r8,r9
8000752e:	e0 8b 00 05 	brhi	80007538 <udc_process_setup+0x164>
80007532:	30 1c       	mov	r12,1
80007534:	e0 8f 01 5e 	bral	800077f0 <udc_process_setup+0x41c>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
80007538:	fe f8 03 1c 	ld.w	r8,pc[796]
8000753c:	b0 69       	st.h	r8[0xc],r9
8000753e:	30 1c       	mov	r12,1
80007540:	e0 8f 01 58 	bral	800077f0 <udc_process_setup+0x41c>
80007544:	30 0c       	mov	r12,0
80007546:	e0 8f 01 55 	bral	800077f0 <udc_process_setup+0x41c>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
8000754a:	30 18       	mov	r8,1
8000754c:	f0 09 19 00 	cp.h	r9,r8
80007550:	c0 40       	breq	80007558 <udc_process_setup+0x184>
80007552:	30 0c       	mov	r12,0
80007554:	e0 8f 01 4e 	bral	800077f0 <udc_process_setup+0x41c>
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
80007558:	30 1b       	mov	r11,1
8000755a:	fe fc 03 1a 	ld.w	r12,pc[794]
8000755e:	f0 1f 00 c0 	mcall	8000785c <udc_process_setup+0x488>
80007562:	30 1c       	mov	r12,1
80007564:	e0 8f 01 46 	bral	800077f0 <udc_process_setup+0x41c>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80007568:	58 18       	cp.w	r8,1
8000756a:	c3 61       	brne	800075d6 <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000756c:	fe fa 02 e8 	ld.w	r10,pc[744]
80007570:	15 9b       	ld.ub	r11,r10[0x1]
80007572:	30 aa       	mov	r10,10
80007574:	f4 0b 18 00 	cp.b	r11,r10
80007578:	c2 f1       	brne	800075d6 <udc_process_setup+0x202>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
8000757a:	f0 09 19 00 	cp.h	r9,r8
8000757e:	c2 a1       	brne	800075d2 <udc_process_setup+0x1fe>
		return false;	// Error in request
	if (!udc_num_configuration)
80007580:	fe f8 02 f4 	ld.w	r8,pc[756]
80007584:	11 89       	ld.ub	r9,r8[0x0]
80007586:	30 08       	mov	r8,0
80007588:	f0 09 18 00 	cp.b	r9,r8
8000758c:	c2 30       	breq	800075d2 <udc_process_setup+0x1fe>
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000758e:	fe f8 02 c6 	ld.w	r8,pc[710]
80007592:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80007594:	fe f8 02 e4 	ld.w	r8,pc[740]
80007598:	70 08       	ld.w	r8,r8[0x0]
8000759a:	70 08       	ld.w	r8,r8[0x0]
8000759c:	11 c8       	ld.ub	r8,r8[0x4]
8000759e:	ee 08 18 00 	cp.b	r8,r7
800075a2:	e0 88 00 18 	brls	800075d2 <udc_process_setup+0x1fe>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
800075a6:	30 0b       	mov	r11,0
800075a8:	0e 9c       	mov	r12,r7
800075aa:	f0 1f 00 b5 	mcall	8000787c <udc_process_setup+0x4a8>
800075ae:	c1 20       	breq	800075d2 <udc_process_setup+0x1fe>
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
800075b0:	fe f8 02 c8 	ld.w	r8,pc[712]
800075b4:	70 08       	ld.w	r8,r8[0x0]
800075b6:	70 18       	ld.w	r8,r8[0x4]
800075b8:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800075bc:	70 3c       	ld.w	r12,r8[0xc]
800075be:	5d 1c       	icall	r12
800075c0:	fe f8 02 c0 	ld.w	r8,pc[704]
800075c4:	b0 8c       	st.b	r8[0x0],r12
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
800075c6:	30 1b       	mov	r11,1
800075c8:	10 9c       	mov	r12,r8
800075ca:	f0 1f 00 a5 	mcall	8000785c <udc_process_setup+0x488>
800075ce:	30 1c       	mov	r12,1
800075d0:	c1 09       	rjmp	800077f0 <udc_process_setup+0x41c>
800075d2:	30 0c       	mov	r12,0
800075d4:	c0 e9       	rjmp	800077f0 <udc_process_setup+0x41c>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
800075d6:	58 28       	cp.w	r8,2
800075d8:	e0 81 01 10 	brne	800077f8 <udc_process_setup+0x424>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
800075dc:	fe f8 02 78 	ld.w	r8,pc[632]
800075e0:	11 9a       	ld.ub	r10,r8[0x1]
800075e2:	30 08       	mov	r8,0
800075e4:	f0 0a 18 00 	cp.b	r10,r8
800075e8:	e0 81 01 03 	brne	800077ee <udc_process_setup+0x41a>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
800075ec:	30 28       	mov	r8,2
800075ee:	f0 09 19 00 	cp.h	r9,r8
800075f2:	c0 30       	breq	800075f8 <udc_process_setup+0x224>
800075f4:	30 0c       	mov	r12,0
800075f6:	cf d8       	rjmp	800077f0 <udc_process_setup+0x41c>
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
800075f8:	fe f8 02 5c 	ld.w	r8,pc[604]
800075fc:	11 dc       	ld.ub	r12,r8[0x5]
800075fe:	f0 1f 00 a2 	mcall	80007884 <udc_process_setup+0x4b0>
80007602:	e0 68 01 00 	mov	r8,256
80007606:	f9 b8 00 00 	moveq	r8,0
8000760a:	fe fc 02 7e 	ld.w	r12,pc[638]
8000760e:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
80007610:	30 2b       	mov	r11,2
80007612:	f0 1f 00 93 	mcall	8000785c <udc_process_setup+0x488>
80007616:	30 1c       	mov	r12,1
80007618:	ce c8       	rjmp	800077f0 <udc_process_setup+0x41c>
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000761a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000761e:	e0 81 00 92 	brne	80007742 <udc_process_setup+0x36e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80007622:	fe f9 02 32 	ld.w	r9,pc[562]
80007626:	13 99       	ld.ub	r9,r9[0x1]
80007628:	30 3a       	mov	r10,3
8000762a:	f4 09 18 00 	cp.b	r9,r10
8000762e:	c3 70       	breq	8000769c <udc_process_setup+0x2c8>
80007630:	e0 8b 00 08 	brhi	80007640 <udc_process_setup+0x26c>
80007634:	30 1a       	mov	r10,1
80007636:	f4 09 18 00 	cp.b	r9,r10
8000763a:	e0 81 00 84 	brne	80007742 <udc_process_setup+0x36e>
8000763e:	c1 98       	rjmp	80007670 <udc_process_setup+0x29c>
80007640:	30 5a       	mov	r10,5
80007642:	f4 09 18 00 	cp.b	r9,r10
80007646:	c0 60       	breq	80007652 <udc_process_setup+0x27e>
80007648:	30 9a       	mov	r10,9
8000764a:	f4 09 18 00 	cp.b	r9,r10
8000764e:	c7 a1       	brne	80007742 <udc_process_setup+0x36e>
80007650:	c3 c8       	rjmp	800076c8 <udc_process_setup+0x2f4>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80007652:	fe f8 02 02 	ld.w	r8,pc[514]
80007656:	90 39       	ld.sh	r9,r8[0x6]
80007658:	30 08       	mov	r8,0
8000765a:	f0 09 19 00 	cp.h	r9,r8
8000765e:	c0 30       	breq	80007664 <udc_process_setup+0x290>
80007660:	30 0c       	mov	r12,0
80007662:	cc 78       	rjmp	800077f0 <udc_process_setup+0x41c>
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
80007664:	fe f9 02 28 	ld.w	r9,pc[552]
80007668:	4f b8       	lddpc	r8,80007854 <udc_process_setup+0x480>
8000766a:	91 49       	st.w	r8[0x10],r9
8000766c:	30 1c       	mov	r12,1
8000766e:	cc 18       	rjmp	800077f0 <udc_process_setup+0x41c>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80007670:	4f 98       	lddpc	r8,80007854 <udc_process_setup+0x480>
80007672:	90 39       	ld.sh	r9,r8[0x6]
80007674:	30 08       	mov	r8,0
80007676:	f0 09 19 00 	cp.h	r9,r8
8000767a:	c0 f1       	brne	80007698 <udc_process_setup+0x2c4>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000767c:	4f 68       	lddpc	r8,80007854 <udc_process_setup+0x480>
8000767e:	90 19       	ld.sh	r9,r8[0x2]
80007680:	30 18       	mov	r8,1
80007682:	f0 09 19 00 	cp.h	r9,r8
80007686:	c0 91       	brne	80007698 <udc_process_setup+0x2c4>
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
80007688:	4f 48       	lddpc	r8,80007858 <udc_process_setup+0x484>
8000768a:	90 09       	ld.sh	r9,r8[0x0]
8000768c:	a9 d9       	cbr	r9,0x9
8000768e:	b0 09       	st.h	r8[0x0],r9
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
80007690:	f0 1f 00 80 	mcall	80007890 <udc_process_setup+0x4bc>
80007694:	30 1c       	mov	r12,1
80007696:	ca d8       	rjmp	800077f0 <udc_process_setup+0x41c>
80007698:	30 0c       	mov	r12,0
8000769a:	ca b8       	rjmp	800077f0 <udc_process_setup+0x41c>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
8000769c:	4e e8       	lddpc	r8,80007854 <udc_process_setup+0x480>
8000769e:	90 39       	ld.sh	r9,r8[0x6]
800076a0:	30 08       	mov	r8,0
800076a2:	f0 09 19 00 	cp.h	r9,r8
800076a6:	c0 f1       	brne	800076c4 <udc_process_setup+0x2f0>
		return false;

	switch (udd_g_ctrlreq.req.wValue) {
800076a8:	4e b8       	lddpc	r8,80007854 <udc_process_setup+0x480>
800076aa:	90 19       	ld.sh	r9,r8[0x2]
800076ac:	30 18       	mov	r8,1
800076ae:	f0 09 19 00 	cp.h	r9,r8
800076b2:	c0 91       	brne	800076c4 <udc_process_setup+0x2f0>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
800076b4:	4e 98       	lddpc	r8,80007858 <udc_process_setup+0x484>
800076b6:	90 09       	ld.sh	r9,r8[0x0]
800076b8:	a9 b9       	sbr	r9,0x9
800076ba:	b0 09       	st.h	r8[0x0],r9
		UDC_REMOTEWAKEUP_ENABLE();
800076bc:	f0 1f 00 76 	mcall	80007894 <udc_process_setup+0x4c0>
800076c0:	30 1c       	mov	r12,1
800076c2:	c9 78       	rjmp	800077f0 <udc_process_setup+0x41c>
800076c4:	30 0c       	mov	r12,0
800076c6:	c9 58       	rjmp	800077f0 <udc_process_setup+0x41c>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
800076c8:	4e 38       	lddpc	r8,80007854 <udc_process_setup+0x480>
800076ca:	90 39       	ld.sh	r9,r8[0x6]
800076cc:	30 08       	mov	r8,0
800076ce:	f0 09 19 00 	cp.h	r9,r8
800076d2:	c3 41       	brne	8000773a <udc_process_setup+0x366>
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
800076d4:	f0 1f 00 71 	mcall	80007898 <udc_process_setup+0x4c4>
800076d8:	c3 10       	breq	8000773a <udc_process_setup+0x366>
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
800076da:	4d f8       	lddpc	r8,80007854 <udc_process_setup+0x480>
800076dc:	11 b9       	ld.ub	r9,r8[0x3]
800076de:	4e 18       	lddpc	r8,80007860 <udc_process_setup+0x48c>
800076e0:	70 08       	ld.w	r8,r8[0x0]
800076e2:	f1 38 00 11 	ld.ub	r8,r8[17]
800076e6:	10 39       	cp.w	r9,r8
800076e8:	e0 89 00 29 	brgt	8000773a <udc_process_setup+0x366>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
800076ec:	f0 1f 00 6c 	mcall	8000789c <udc_process_setup+0x4c8>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
800076f0:	4d 98       	lddpc	r8,80007854 <udc_process_setup+0x480>
800076f2:	11 b8       	ld.ub	r8,r8[0x3]
800076f4:	4e 09       	lddpc	r9,80007874 <udc_process_setup+0x4a0>
800076f6:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
800076f8:	58 08       	cp.w	r8,0
800076fa:	c2 20       	breq	8000773e <udc_process_setup+0x36a>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
800076fc:	20 18       	sub	r8,1
800076fe:	4d 99       	lddpc	r9,80007860 <udc_process_setup+0x48c>
80007700:	72 19       	ld.w	r9,r9[0x4]
80007702:	f2 08 00 38 	add	r8,r9,r8<<0x3
80007706:	4d d9       	lddpc	r9,80007878 <udc_process_setup+0x4a4>
80007708:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000770a:	70 08       	ld.w	r8,r8[0x0]
8000770c:	11 c9       	ld.ub	r9,r8[0x4]
8000770e:	30 08       	mov	r8,0
80007710:	f0 09 18 00 	cp.b	r9,r8
80007714:	c1 50       	breq	8000773e <udc_process_setup+0x36a>
80007716:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
80007718:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000771a:	4d 86       	lddpc	r6,80007878 <udc_process_setup+0x4a4>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
8000771c:	0a 9b       	mov	r11,r5
8000771e:	0e 9c       	mov	r12,r7
80007720:	f0 1f 00 60 	mcall	800078a0 <udc_process_setup+0x4cc>
80007724:	c0 b0       	breq	8000773a <udc_process_setup+0x366>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80007726:	2f f7       	sub	r7,-1
80007728:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000772a:	6c 08       	ld.w	r8,r6[0x0]
8000772c:	70 08       	ld.w	r8,r8[0x0]
8000772e:	11 c8       	ld.ub	r8,r8[0x4]
80007730:	ee 08 18 00 	cp.b	r8,r7
80007734:	fe 9b ff f4 	brhi	8000771c <udc_process_setup+0x348>
80007738:	c0 38       	rjmp	8000773e <udc_process_setup+0x36a>
8000773a:	30 0c       	mov	r12,0
8000773c:	c5 a8       	rjmp	800077f0 <udc_process_setup+0x41c>
8000773e:	30 1c       	mov	r12,1
80007740:	c5 88       	rjmp	800077f0 <udc_process_setup+0x41c>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80007742:	58 18       	cp.w	r8,1
80007744:	c2 21       	brne	80007788 <udc_process_setup+0x3b4>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80007746:	4c 49       	lddpc	r9,80007854 <udc_process_setup+0x480>
80007748:	13 9a       	ld.ub	r10,r9[0x1]
8000774a:	30 b9       	mov	r9,11
8000774c:	f2 0a 18 00 	cp.b	r10,r9
80007750:	c1 c1       	brne	80007788 <udc_process_setup+0x3b4>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
80007752:	4c 18       	lddpc	r8,80007854 <udc_process_setup+0x480>
80007754:	90 39       	ld.sh	r9,r8[0x6]
80007756:	30 08       	mov	r8,0
80007758:	f0 09 19 00 	cp.h	r9,r8
8000775c:	c1 41       	brne	80007784 <udc_process_setup+0x3b0>
		return false;	// Error in request
	if (!udc_num_configuration)
8000775e:	4c 68       	lddpc	r8,80007874 <udc_process_setup+0x4a0>
80007760:	11 89       	ld.ub	r9,r8[0x0]
80007762:	30 08       	mov	r8,0
80007764:	f0 09 18 00 	cp.b	r9,r8
80007768:	c0 e0       	breq	80007784 <udc_process_setup+0x3b0>
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
8000776a:	4b b8       	lddpc	r8,80007854 <udc_process_setup+0x480>
8000776c:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num))
8000776e:	11 d7       	ld.ub	r7,r8[0x5]
80007770:	0e 9c       	mov	r12,r7
80007772:	f0 1f 00 4d 	mcall	800078a4 <udc_process_setup+0x4d0>
80007776:	c0 70       	breq	80007784 <udc_process_setup+0x3b0>
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80007778:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
8000777c:	0e 9c       	mov	r12,r7
8000777e:	f0 1f 00 49 	mcall	800078a0 <udc_process_setup+0x4cc>
80007782:	c3 78       	rjmp	800077f0 <udc_process_setup+0x41c>
80007784:	30 0c       	mov	r12,0
80007786:	c3 58       	rjmp	800077f0 <udc_process_setup+0x41c>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80007788:	58 28       	cp.w	r8,2
8000778a:	c3 71       	brne	800077f8 <udc_process_setup+0x424>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000778c:	4b 28       	lddpc	r8,80007854 <udc_process_setup+0x480>
8000778e:	11 98       	ld.ub	r8,r8[0x1]
80007790:	30 19       	mov	r9,1
80007792:	f2 08 18 00 	cp.b	r8,r9
80007796:	c0 60       	breq	800077a2 <udc_process_setup+0x3ce>
80007798:	30 39       	mov	r9,3
8000779a:	f2 08 18 00 	cp.b	r8,r9
8000779e:	c2 81       	brne	800077ee <udc_process_setup+0x41a>
800077a0:	c1 48       	rjmp	800077c8 <udc_process_setup+0x3f4>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
800077a2:	4a d8       	lddpc	r8,80007854 <udc_process_setup+0x480>
800077a4:	90 39       	ld.sh	r9,r8[0x6]
800077a6:	30 08       	mov	r8,0
800077a8:	f0 09 19 00 	cp.h	r9,r8
800077ac:	c0 c1       	brne	800077c4 <udc_process_setup+0x3f0>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
800077ae:	4a a8       	lddpc	r8,80007854 <udc_process_setup+0x480>
800077b0:	90 19       	ld.sh	r9,r8[0x2]
800077b2:	30 08       	mov	r8,0
800077b4:	f0 09 19 00 	cp.h	r9,r8
800077b8:	c0 61       	brne	800077c4 <udc_process_setup+0x3f0>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
800077ba:	4a 78       	lddpc	r8,80007854 <udc_process_setup+0x480>
800077bc:	11 dc       	ld.ub	r12,r8[0x5]
800077be:	f0 1f 00 3b 	mcall	800078a8 <udc_process_setup+0x4d4>
800077c2:	c1 78       	rjmp	800077f0 <udc_process_setup+0x41c>
800077c4:	30 0c       	mov	r12,0
800077c6:	c1 58       	rjmp	800077f0 <udc_process_setup+0x41c>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
800077c8:	4a 38       	lddpc	r8,80007854 <udc_process_setup+0x480>
800077ca:	90 39       	ld.sh	r9,r8[0x6]
800077cc:	30 08       	mov	r8,0
800077ce:	f0 09 19 00 	cp.h	r9,r8
800077d2:	c0 c1       	brne	800077ea <udc_process_setup+0x416>
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
800077d4:	4a 08       	lddpc	r8,80007854 <udc_process_setup+0x480>
800077d6:	90 19       	ld.sh	r9,r8[0x2]
800077d8:	30 08       	mov	r8,0
800077da:	f0 09 19 00 	cp.h	r9,r8
800077de:	c0 61       	brne	800077ea <udc_process_setup+0x416>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
800077e0:	49 d8       	lddpc	r8,80007854 <udc_process_setup+0x480>
800077e2:	11 dc       	ld.ub	r12,r8[0x5]
800077e4:	f0 1f 00 32 	mcall	800078ac <udc_process_setup+0x4d8>
800077e8:	c0 48       	rjmp	800077f0 <udc_process_setup+0x41c>
800077ea:	30 0c       	mov	r12,0
800077ec:	c0 28       	rjmp	800077f0 <udc_process_setup+0x41c>
800077ee:	30 0c       	mov	r12,0
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
800077f0:	58 0c       	cp.w	r12,0
800077f2:	c0 30       	breq	800077f8 <udc_process_setup+0x424>
800077f4:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
800077f8:	49 78       	lddpc	r8,80007854 <udc_process_setup+0x480>
800077fa:	11 88       	ld.ub	r8,r8[0x0]
800077fc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007800:	58 18       	cp.w	r8,1
80007802:	c2 71       	brne	80007850 <udc_process_setup+0x47c>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
80007804:	49 c8       	lddpc	r8,80007874 <udc_process_setup+0x4a0>
80007806:	11 89       	ld.ub	r9,r8[0x0]
80007808:	30 08       	mov	r8,0
8000780a:	f0 09 18 00 	cp.b	r9,r8
8000780e:	c2 10       	breq	80007850 <udc_process_setup+0x47c>
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80007810:	49 18       	lddpc	r8,80007854 <udc_process_setup+0x480>
80007812:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80007814:	49 98       	lddpc	r8,80007878 <udc_process_setup+0x4a4>
80007816:	70 08       	ld.w	r8,r8[0x0]
80007818:	70 08       	ld.w	r8,r8[0x0]
8000781a:	11 c8       	ld.ub	r8,r8[0x4]
8000781c:	ee 08 18 00 	cp.b	r8,r7
80007820:	e0 88 00 18 	brls	80007850 <udc_process_setup+0x47c>
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80007824:	0e 96       	mov	r6,r7
80007826:	30 0b       	mov	r11,0
80007828:	0e 9c       	mov	r12,r7
8000782a:	f0 1f 00 15 	mcall	8000787c <udc_process_setup+0x4a8>
8000782e:	c1 10       	breq	80007850 <udc_process_setup+0x47c>
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80007830:	49 28       	lddpc	r8,80007878 <udc_process_setup+0x4a4>
80007832:	70 08       	ld.w	r8,r8[0x0]
80007834:	70 18       	ld.w	r8,r8[0x4]
80007836:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
8000783a:	6e 3c       	ld.w	r12,r7[0xc]
8000783c:	5d 1c       	icall	r12
8000783e:	18 9b       	mov	r11,r12
80007840:	0c 9c       	mov	r12,r6
80007842:	f0 1f 00 0f 	mcall	8000787c <udc_process_setup+0x4a8>
80007846:	c0 50       	breq	80007850 <udc_process_setup+0x47c>
		return false;

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80007848:	6e 2c       	ld.w	r12,r7[0x8]
8000784a:	5d 1c       	icall	r12
8000784c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007850:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80007854:	00 00       	add	r0,r0
80007856:	04 90       	mov	r0,r2
80007858:	00 00       	add	r0,r0
8000785a:	01 e6       	ld.ub	r6,r0[0x6]
8000785c:	80 00       	ld.sh	r0,r0[0x0]
8000785e:	32 dc       	mov	r12,45
80007860:	00 00       	add	r0,r0
80007862:	00 88       	andn	r8,r0
80007864:	00 00       	add	r0,r0
80007866:	00 a4       	st.w	r0++,r4
80007868:	00 00       	add	r0,r0
8000786a:	00 da       	st.w	--r0,r10
8000786c:	00 00       	add	r0,r0
8000786e:	00 b4       	st.h	r0++,r4
80007870:	00 00       	add	r0,r0
80007872:	00 c0       	st.b	r0++,r0
80007874:	00 00       	add	r0,r0
80007876:	01 e8       	ld.ub	r8,r0[0x6]
80007878:	00 00       	add	r0,r0
8000787a:	01 e0       	ld.ub	r0,r0[0x6]
8000787c:	80 00       	ld.sh	r0,r0[0x0]
8000787e:	71 b4       	ld.w	r4,r8[0x6c]
80007880:	00 00       	add	r0,r0
80007882:	01 f0       	ld.ub	r0,r0[0x7]
80007884:	80 00       	ld.sh	r0,r0[0x0]
80007886:	32 e8       	mov	r8,46
80007888:	00 00       	add	r0,r0
8000788a:	01 e4       	ld.ub	r4,r0[0x6]
8000788c:	80 00       	ld.sh	r0,r0[0x0]
8000788e:	72 88       	ld.w	r8,r9[0x20]
80007890:	80 00       	ld.sh	r0,r0[0x0]
80007892:	78 b4       	ld.w	r4,r12[0x2c]
80007894:	80 00       	ld.sh	r0,r0[0x0]
80007896:	78 b2       	ld.w	r2,r12[0x2c]
80007898:	80 00       	ld.sh	r0,r0[0x0]
8000789a:	32 c4       	mov	r4,44
8000789c:	80 00       	ld.sh	r0,r0[0x0]
8000789e:	73 64       	ld.w	r4,r9[0x58]
800078a0:	80 00       	ld.sh	r0,r0[0x0]
800078a2:	72 a0       	ld.w	r0,r9[0x28]
800078a4:	80 00       	ld.sh	r0,r0[0x0]
800078a6:	73 00       	ld.w	r0,r9[0x40]
800078a8:	80 00       	ld.sh	r0,r0[0x0]
800078aa:	32 fc       	mov	r12,47
800078ac:	80 00       	ld.sh	r0,r0[0x0]
800078ae:	33 cc       	mov	r12,60

800078b0 <main_resume_action>:
}

//-------------------------------------------------------------------
void main_resume_action(void)
{
}
800078b0:	5e fc       	retal	r12

800078b2 <main_remotewakeup_enable>:

//-------------------------------------------------------------------
// If remote wakeup enable/disable is supported insert code below
void main_remotewakeup_enable(void)
{
}
800078b2:	5e fc       	retal	r12

800078b4 <main_remotewakeup_disable>:

//-------------------------------------------------------------------
void main_remotewakeup_disable(void)
{
}
800078b4:	5e fc       	retal	r12

800078b6 <main_kbd_enable>:
//-------------------------------------------------------------------
bool main_kbd_enable(void)
{
	//main_b_kbd_enable = true;
	return true;
}
800078b6:	5e ff       	retal	1

800078b8 <main_kbd_disable>:
//-------------------------------------------------------------------
bool main_kbd_disable(void)
{
	//main_b_kbd_enable = false; mod 
	return false;
}
800078b8:	5e fd       	retal	0

800078ba <main_kbd_change>:

//-------------------------------------------------------------------
void main_kbd_change(uint8_t value) 
{	
	//no use in this firmware
}
800078ba:	5e fc       	retal	r12

800078bc <main_suspend_action>:
	}
}

//-------------------------------------------------------------------
void main_suspend_action(void)
{
800078bc:	d4 01       	pushm	lr
	LED_Off(LED0);
800078be:	30 1c       	mov	r12,1
800078c0:	f0 1f 00 03 	mcall	800078cc <main_suspend_action+0x10>
	LED_Off(LED1);
800078c4:	30 2c       	mov	r12,2
800078c6:	f0 1f 00 02 	mcall	800078cc <main_suspend_action+0x10>
}
800078ca:	d8 02       	popm	pc
800078cc:	80 00       	ld.sh	r0,r0[0x0]
800078ce:	21 4c       	sub	r12,20

800078d0 <main>:
	}
}

// Main Method - IRQ, CLCK, INIT setup
//-------------------------------------------------------------------
int main(void) {
800078d0:	eb cd 40 e0 	pushm	r5-r7,lr
800078d4:	20 5d       	sub	sp,20
	
	uint32_t sizeTemp;
	
	// init cpu
	irq_initialize_vectors();
800078d6:	f0 1f 00 52 	mcall	80007a1c <main+0x14c>
	cpu_irq_enable();
800078da:	d5 03       	csrf	0x10
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
800078dc:	4d 18       	lddpc	r8,80007a20 <main+0x150>
800078de:	30 09       	mov	r9,0
800078e0:	b0 89       	st.b	r8[0x0],r9
800078e2:	b0 99       	st.b	r8[0x1],r9
800078e4:	b0 a9       	st.b	r8[0x2],r9
800078e6:	b0 b9       	st.b	r8[0x3],r9
800078e8:	b0 c9       	st.b	r8[0x4],r9
800078ea:	b0 d9       	st.b	r8[0x5],r9
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
800078ec:	30 19       	mov	r9,1
800078ee:	b0 e9       	st.b	r8[0x6],r9

	// init board
	sleepmgr_init();
	sysclk_init();
800078f0:	f0 1f 00 4d 	mcall	80007a24 <main+0x154>
	board_init();
800078f4:	f0 1f 00 4d 	mcall	80007a28 <main+0x158>
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	};
800078f8:	4c d8       	lddpc	r8,80007a2c <main+0x15c>
800078fa:	1a 97       	mov	r7,sp
800078fc:	f0 ea 00 00 	ld.d	r10,r8[0]
80007900:	fa eb 00 00 	st.d	sp[0],r10
80007904:	f0 e8 00 08 	ld.d	r8,r8[8]
80007908:	fa e9 00 08 	st.d	sp[8],r8

	// assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000790c:	30 4b       	mov	r11,4
8000790e:	4c 9c       	lddpc	r12,80007a30 <main+0x160>
80007910:	f0 1f 00 49 	mcall	80007a34 <main+0x164>
						sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

	// initialize as master.
	spi_initMaster(SD_MMC_SPI, &spiOptions);
80007914:	1a 9b       	mov	r11,sp
80007916:	fe 7c 24 00 	mov	r12,-56320
8000791a:	f0 1f 00 48 	mcall	80007a38 <main+0x168>

	// set SPI selection mode: variable_ps, pcs_decode, delay.
	spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
8000791e:	30 09       	mov	r9,0
80007920:	12 9a       	mov	r10,r9
80007922:	12 9b       	mov	r11,r9
80007924:	fe 7c 24 00 	mov	r12,-56320
80007928:	f0 1f 00 45 	mcall	80007a3c <main+0x16c>

	// enable SPI module.
	spi_enable(SD_MMC_SPI);
8000792c:	fe 7c 24 00 	mov	r12,-56320
80007930:	f0 1f 00 44 	mcall	80007a40 <main+0x170>

	// Initialize SD/MMC driver with SPI clock (PBA).
	sd_mmc_spi_init(spiOptions, pba_hz);
80007934:	20 4d       	sub	sp,16
80007936:	ee e8 00 00 	ld.d	r8,r7[0]
8000793a:	fa e9 00 00 	st.d	sp[0],r8
8000793e:	ee e8 00 08 	ld.d	r8,r7[8]
80007942:	fa e9 00 08 	st.d	sp[8],r8
80007946:	e0 6c 1b 00 	mov	r12,6912
8000794a:	ea 1c 00 b7 	orh	r12,0xb7
8000794e:	f0 1f 00 3e 	mcall	80007a44 <main+0x174>

	// initialize SD/MMC resources: GPIO, SPI.
	sd_mmc_resources_init(FOSC0);
	
	// test if the memory is ready - using the control access memory abstraction layer (/SERVICES/MEMORY/CTRL_ACCESS/)
	if (mem_test_unit_ready(LUN_ID_SD_MMC_SPI_MEM) == CTRL_GOOD) {
80007952:	30 0c       	mov	r12,0
80007954:	f0 1f 00 3d 	mcall	80007a48 <main+0x178>
80007958:	2f cd       	sub	sp,-16
8000795a:	58 0c       	cp.w	r12,0
8000795c:	c0 f1       	brne	8000797a <main+0xaa>
		// Get and display the capacity
		mem_read_capacity(LUN_ID_SD_MMC_SPI_MEM, &sizeTemp);
8000795e:	fa cb ff f0 	sub	r11,sp,-16
80007962:	f0 1f 00 3b 	mcall	80007a4c <main+0x17c>
	else {
		//  error - we can't proceed - sit and spin...
		while(true) { LED_On( LED1 ); }
	}
	
 nav_reset();
80007966:	f0 1f 00 3b 	mcall	80007a50 <main+0x180>
 if( nav_setcwd( vidpidFile, false, false ) ) {
8000796a:	30 0a       	mov	r10,0
8000796c:	14 9b       	mov	r11,r10
8000796e:	4b a8       	lddpc	r8,80007a54 <main+0x184>
80007970:	70 0c       	ld.w	r12,r8[0x0]
80007972:	f0 1f 00 3a 	mcall	80007a58 <main+0x188>
80007976:	c3 c0       	breq	800079ee <main+0x11e>
80007978:	c0 68       	rjmp	80007984 <main+0xb4>
		// Get and display the capacity
		mem_read_capacity(LUN_ID_SD_MMC_SPI_MEM, &sizeTemp);
	}
	else {
		//  error - we can't proceed - sit and spin...
		while(true) { LED_On( LED1 ); }
8000797a:	30 27       	mov	r7,2
8000797c:	0e 9c       	mov	r12,r7
8000797e:	f0 1f 00 38 	mcall	80007a5c <main+0x18c>
80007982:	cf db       	rjmp	8000797c <main+0xac>
	}
	
 nav_reset();
 if( nav_setcwd( vidpidFile, false, false ) ) {
	 file_open(FOPEN_MODE_R);
80007984:	30 9c       	mov	r12,9
80007986:	f0 1f 00 37 	mcall	80007a60 <main+0x190>
	 file_bof();
8000798a:	f0 1f 00 37 	mcall	80007a64 <main+0x194>
	 
	 vid =  file_getc() | (file_getc() << 8);
8000798e:	f0 1f 00 37 	mcall	80007a68 <main+0x198>
80007992:	ef dc b0 10 	bfexts	r7,r12,0x0,0x10
80007996:	f0 1f 00 35 	mcall	80007a68 <main+0x198>
8000799a:	4b 56       	lddpc	r6,80007a6c <main+0x19c>
8000799c:	5c 7c       	castu.h	r12
8000799e:	ef ec 10 87 	or	r7,r7,r12<<0x8
800079a2:	ac 07       	st.h	r6[0x0],r7
	 pid =  file_getc() | (file_getc() << 8);
800079a4:	f0 1f 00 31 	mcall	80007a68 <main+0x198>
800079a8:	eb dc b0 10 	bfexts	r5,r12,0x0,0x10
800079ac:	f0 1f 00 2f 	mcall	80007a68 <main+0x198>
800079b0:	4b 07       	lddpc	r7,80007a70 <main+0x1a0>
800079b2:	5c 7c       	castu.h	r12
800079b4:	eb ec 10 85 	or	r5,r5,r12<<0x8
800079b8:	ae 05       	st.h	r7[0x0],r5
	 serial_len = file_getc();
800079ba:	f0 1f 00 2c 	mcall	80007a68 <main+0x198>
800079be:	5c 7c       	castu.h	r12
800079c0:	4a d8       	lddpc	r8,80007a74 <main+0x1a4>
800079c2:	91 0c       	st.w	r8[0x0],r12
	 //serial = (uint8_t *)dlmalloc(serial_len);
	 file_read_buf(serial,sizeof(serial_len));
800079c4:	30 4b       	mov	r11,4
800079c6:	4a dc       	lddpc	r12,80007a78 <main+0x1a8>
800079c8:	f0 1f 00 2d 	mcall	80007a7c <main+0x1ac>
	 //serial[serial_len]='\0';
	 udc_device_desc.idVendor = (vid);
800079cc:	4a d8       	lddpc	r8,80007a80 <main+0x1b0>
800079ce:	8c 89       	ld.uh	r9,r6[0x0]
800079d0:	f2 0a 16 08 	lsr	r10,r9,0x8
800079d4:	f1 6a 00 08 	st.b	r8[8],r10
800079d8:	f1 69 00 09 	st.b	r8[9],r9
	 udc_device_desc.idProduct = (pid);
800079dc:	8e 89       	ld.uh	r9,r7[0x0]
800079de:	f2 0a 16 08 	lsr	r10,r9,0x8
800079e2:	f1 6a 00 0a 	st.b	r8[10],r10
800079e6:	f1 69 00 0b 	st.b	r8[11],r9
	 if (serial_len > 0){
		 //#define USB_DEVICE_GET_SERIAL_NAME_LENGTH serial_len;
		 #define USB_DEVICE_SERIAL_NAME serial;
	 }
	 file_close();
800079ea:	f0 1f 00 27 	mcall	80007a84 <main+0x1b4>
 }

	nav_reset();
800079ee:	f0 1f 00 19 	mcall	80007a50 <main+0x180>
	if( !nav_setcwd( injectFile, true, false ) ) {
800079f2:	30 0a       	mov	r10,0
800079f4:	30 1b       	mov	r11,1
800079f6:	4a 58       	lddpc	r8,80007a88 <main+0x1b8>
800079f8:	70 0c       	ld.w	r12,r8[0x0]
800079fa:	f0 1f 00 18 	mcall	80007a58 <main+0x188>
800079fe:	c0 91       	brne	80007a10 <main+0x140>
		//try to open a://inject.bin else sit here 
		while(true) { 
			LED_On( LED1 );
80007a00:	30 27       	mov	r7,2
80007a02:	0e 9c       	mov	r12,r7
80007a04:	f0 1f 00 16 	mcall	80007a5c <main+0x18c>
			for (int i=0; i<10000; i++){}
			LED_Off(LED1); 
80007a08:	0e 9c       	mov	r12,r7
80007a0a:	f0 1f 00 21 	mcall	80007a8c <main+0x1bc>
80007a0e:	cf ab       	rjmp	80007a02 <main+0x132>

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
80007a10:	f0 1f 00 20 	mcall	80007a90 <main+0x1c0>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80007a14:	f0 1f 00 20 	mcall	80007a94 <main+0x1c4>
80007a18:	c0 08       	rjmp	80007a18 <main+0x148>
80007a1a:	00 00       	add	r0,r0
80007a1c:	80 00       	ld.sh	r0,r0[0x0]
80007a1e:	30 28       	mov	r8,2
80007a20:	00 00       	add	r0,r0
80007a22:	07 b8       	ld.ub	r8,r3[0x3]
80007a24:	80 00       	ld.sh	r0,r0[0x0]
80007a26:	6b dc       	ld.w	r12,r5[0x74]
80007a28:	80 00       	ld.sh	r0,r0[0x0]
80007a2a:	20 04       	sub	r4,0
80007a2c:	80 00       	ld.sh	r0,r0[0x0]
80007a2e:	81 50       	st.w	r0[0x14],r0
80007a30:	80 00       	ld.sh	r0,r0[0x0]
80007a32:	81 44       	st.w	r0[0x10],r4
80007a34:	80 00       	ld.sh	r0,r0[0x0]
80007a36:	2e f8       	sub	r8,-17
80007a38:	80 00       	ld.sh	r0,r0[0x0]
80007a3a:	30 ce       	mov	lr,12
80007a3c:	80 00       	ld.sh	r0,r0[0x0]
80007a3e:	31 06       	mov	r6,16
80007a40:	80 00       	ld.sh	r0,r0[0x0]
80007a42:	32 60       	mov	r0,38
80007a44:	80 00       	ld.sh	r0,r0[0x0]
80007a46:	2c a8       	sub	r8,-54
80007a48:	80 00       	ld.sh	r0,r0[0x0]
80007a4a:	6d 10       	ld.w	r0,r6[0x44]
80007a4c:	80 00       	ld.sh	r0,r0[0x0]
80007a4e:	6d 24       	ld.w	r4,r6[0x48]
80007a50:	80 00       	ld.sh	r0,r0[0x0]
80007a52:	6b 24       	ld.w	r4,r5[0x48]
80007a54:	80 00       	ld.sh	r0,r0[0x0]
80007a56:	81 60       	st.w	r0[0x18],r0
80007a58:	80 00       	ld.sh	r0,r0[0x0]
80007a5a:	69 14       	ld.w	r4,r4[0x44]
80007a5c:	80 00       	ld.sh	r0,r0[0x0]
80007a5e:	20 fc       	sub	r12,15
80007a60:	80 00       	ld.sh	r0,r0[0x0]
80007a62:	61 d4       	ld.w	r4,r0[0x74]
80007a64:	80 00       	ld.sh	r0,r0[0x0]
80007a66:	5f 78       	srpl	r8
80007a68:	80 00       	ld.sh	r0,r0[0x0]
80007a6a:	5f d4       	srvc	r4
80007a6c:	00 00       	add	r0,r0
80007a6e:	07 c2       	ld.ub	r2,r3[0x4]
80007a70:	00 00       	add	r0,r0
80007a72:	07 c0       	ld.ub	r0,r3[0x4]
80007a74:	00 00       	add	r0,r0
80007a76:	01 f4       	ld.ub	r4,r0[0x7]
80007a78:	00 00       	add	r0,r0
80007a7a:	02 00       	add	r0,r1
80007a7c:	80 00       	ld.sh	r0,r0[0x0]
80007a7e:	60 40       	ld.w	r0,r0[0x10]
80007a80:	00 00       	add	r0,r0
80007a82:	00 90       	mov	r0,r0
80007a84:	80 00       	ld.sh	r0,r0[0x0]
80007a86:	5f 98       	srgt	r8
80007a88:	80 00       	ld.sh	r0,r0[0x0]
80007a8a:	81 4c       	st.w	r0[0x10],r12
80007a8c:	80 00       	ld.sh	r0,r0[0x0]
80007a8e:	21 4c       	sub	r12,20
80007a90:	80 00       	ld.sh	r0,r0[0x0]
80007a92:	38 2c       	mov	r12,-126
80007a94:	80 00       	ld.sh	r0,r0[0x0]
80007a96:	36 78       	mov	r8,103

80007a98 <process_frame>:
}

// process a USB frame
//-------------------------------------------------------------------
void process_frame(uint16_t framenumber)
{
80007a98:	eb cd 40 80 	pushm	r7,lr
	static uint8_t wait = 0;
	static uint16_t debounce = 0;
	static uint16_t injectToken = 0x0000;
	
	// scan process running each 2ms
	cpt_sof++;
80007a9c:	4d 99       	lddpc	r9,80007c00 <process_frame+0x168>
80007a9e:	13 88       	ld.ub	r8,r9[0x0]
80007aa0:	2f f8       	sub	r8,-1
80007aa2:	b2 88       	st.b	r9[0x0],r8
	if( 2 > cpt_sof )
80007aa4:	30 19       	mov	r9,1
80007aa6:	f2 08 18 00 	cp.b	r8,r9
80007aaa:	e0 88 00 a9 	brls	80007bfc <process_frame+0x164>
		return;
	cpt_sof = 0;	
80007aae:	30 09       	mov	r9,0
80007ab0:	4d 48       	lddpc	r8,80007c00 <process_frame+0x168>
80007ab2:	b0 89       	st.b	r8[0x0],r9
	
	// pulse led
	LED_Set_Intensity( LED0, framenumber >> 1 );	
80007ab4:	f7 dc c0 28 	bfextu	r11,r12,0x1,0x8
80007ab8:	30 1c       	mov	r12,1
80007aba:	f0 1f 00 53 	mcall	80007c04 <process_frame+0x16c>
	
	// debounce switch
	if( debounce > 0 ) --debounce;
80007abe:	4d 38       	lddpc	r8,80007c08 <process_frame+0x170>
80007ac0:	90 08       	ld.sh	r8,r8[0x0]
80007ac2:	58 08       	cp.w	r8,0
80007ac4:	c0 40       	breq	80007acc <process_frame+0x34>
80007ac6:	20 18       	sub	r8,1
80007ac8:	4d 09       	lddpc	r9,80007c08 <process_frame+0x170>
80007aca:	b2 08       	st.h	r9[0x0],r8
		
	// injection state machine
	switch(state) {
80007acc:	4d 08       	lddpc	r8,80007c0c <process_frame+0x174>
80007ace:	70 08       	ld.w	r8,r8[0x0]
80007ad0:	58 98       	cp.w	r8,9
80007ad2:	e0 8b 00 92 	brhi	80007bf6 <process_frame+0x15e>
80007ad6:	4c f9       	lddpc	r9,80007c10 <process_frame+0x178>
80007ad8:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]

		case state_IDLE:
			// check switch
			if( gpio_get_pin_value(GPIO_JOYSTICK_PUSH) == GPIO_JOYSTICK_PUSH_PRESSED ) {
80007adc:	30 dc       	mov	r12,13
80007ade:	f0 1f 00 4e 	mcall	80007c14 <process_frame+0x17c>
80007ae2:	e0 81 00 8d 	brne	80007bfc <process_frame+0x164>
	
				// debounce
				if( debounce == 0 ) {
80007ae6:	4c 98       	lddpc	r8,80007c08 <process_frame+0x170>
80007ae8:	90 09       	ld.sh	r9,r8[0x0]
80007aea:	30 08       	mov	r8,0
80007aec:	f0 09 19 00 	cp.h	r9,r8
80007af0:	e0 81 00 86 	brne	80007bfc <process_frame+0x164>
					state = state_START_INJECT;
80007af4:	30 19       	mov	r9,1
80007af6:	4c 68       	lddpc	r8,80007c0c <process_frame+0x174>
80007af8:	91 09       	st.w	r8[0x0],r9
					debounce = 250;
80007afa:	e0 69 00 fa 	mov	r9,250
80007afe:	4c 38       	lddpc	r8,80007c08 <process_frame+0x170>
80007b00:	b0 09       	st.h	r8[0x0],r9
80007b02:	e3 cd 80 80 	ldm	sp++,r7,pc
				}			
			}		
			break;		
			
		case state_START_INJECT:
			file_open(FOPEN_MODE_R);		
80007b06:	30 9c       	mov	r12,9
80007b08:	f0 1f 00 44 	mcall	80007c18 <process_frame+0x180>
			state = state_INJECTING;
80007b0c:	30 29       	mov	r9,2
80007b0e:	4c 08       	lddpc	r8,80007c0c <process_frame+0x174>
80007b10:	91 09       	st.w	r8[0x0],r9
			break;
80007b12:	e3 cd 80 80 	ldm	sp++,r7,pc
			
		case state_INJECTING:				
			
			if( file_eof() ) {
80007b16:	f0 1f 00 42 	mcall	80007c1c <process_frame+0x184>
80007b1a:	c0 80       	breq	80007b2a <process_frame+0x92>
				file_close();	
80007b1c:	f0 1f 00 41 	mcall	80007c20 <process_frame+0x188>
				state = state_IDLE;
80007b20:	30 09       	mov	r9,0
80007b22:	4b b8       	lddpc	r8,80007c0c <process_frame+0x174>
80007b24:	91 09       	st.w	r8[0x0],r9
				break;
80007b26:	e3 cd 80 80 	ldm	sp++,r7,pc
			}
			
			injectToken = ( file_getc() | ( file_getc() << 8 ) );			
80007b2a:	f0 1f 00 3f 	mcall	80007c24 <process_frame+0x18c>
80007b2e:	ef dc b0 10 	bfexts	r7,r12,0x0,0x10
80007b32:	f0 1f 00 3d 	mcall	80007c24 <process_frame+0x18c>
80007b36:	5c 7c       	castu.h	r12
80007b38:	ef ec 10 87 	or	r7,r7,r12<<0x8
80007b3c:	5c 87       	casts.h	r7
80007b3e:	4b b8       	lddpc	r8,80007c28 <process_frame+0x190>
80007b40:	b0 07       	st.h	r8[0x0],r7
						
			if( ( injectToken&0xff ) == 0x00 ) {				
80007b42:	0e 98       	mov	r8,r7
80007b44:	5c 58       	castu.b	r8
80007b46:	c0 a1       	brne	80007b5a <process_frame+0xc2>
				wait = injectToken>>8;
80007b48:	ef d7 c1 08 	bfextu	r7,r7,0x8,0x8
80007b4c:	4b 88       	lddpc	r8,80007c2c <process_frame+0x194>
80007b4e:	b0 87       	st.b	r8[0x0],r7
				state = state_WAIT;
80007b50:	30 99       	mov	r9,9
80007b52:	4a f8       	lddpc	r8,80007c0c <process_frame+0x174>
80007b54:	91 09       	st.w	r8[0x0],r9
80007b56:	e3 cd 80 80 	ldm	sp++,r7,pc
			}
			else if( ( injectToken>>8 ) == 0x00 ) {
80007b5a:	ef d7 c1 08 	bfextu	r7,r7,0x8,0x8
80007b5e:	c0 61       	brne	80007b6a <process_frame+0xd2>
				state = state_KEY_DOWN;
80007b60:	30 39       	mov	r9,3
80007b62:	4a b8       	lddpc	r8,80007c0c <process_frame+0x174>
80007b64:	91 09       	st.w	r8[0x0],r9
80007b66:	e3 cd 80 80 	ldm	sp++,r7,pc
			}				
			else {
				state = state_MOD_DOWN;					
80007b6a:	30 59       	mov	r9,5
80007b6c:	4a 88       	lddpc	r8,80007c0c <process_frame+0x174>
80007b6e:	91 09       	st.w	r8[0x0],r9
80007b70:	e3 cd 80 80 	ldm	sp++,r7,pc
			}					
			break;
			
		case state_KEY_DOWN:
			udi_hid_kbd_down(injectToken&0xff);
80007b74:	4a d8       	lddpc	r8,80007c28 <process_frame+0x190>
80007b76:	11 9c       	ld.ub	r12,r8[0x1]
80007b78:	f0 1f 00 2e 	mcall	80007c30 <process_frame+0x198>
			state = state_KEY_UP;
80007b7c:	30 49       	mov	r9,4
80007b7e:	4a 48       	lddpc	r8,80007c0c <process_frame+0x174>
80007b80:	91 09       	st.w	r8[0x0],r9
			break;
80007b82:	e3 cd 80 80 	ldm	sp++,r7,pc

		case state_KEY_UP:
			udi_hid_kbd_up(injectToken&0xff);
80007b86:	4a 98       	lddpc	r8,80007c28 <process_frame+0x190>
80007b88:	11 9c       	ld.ub	r12,r8[0x1]
80007b8a:	f0 1f 00 2b 	mcall	80007c34 <process_frame+0x19c>
			state = state_INJECTING;
80007b8e:	30 29       	mov	r9,2
80007b90:	49 f8       	lddpc	r8,80007c0c <process_frame+0x174>
80007b92:	91 09       	st.w	r8[0x0],r9
			break;			
80007b94:	e3 cd 80 80 	ldm	sp++,r7,pc
			
		case state_MOD_DOWN:
			udi_hid_kbd_modifier_down(injectToken>>8);
80007b98:	4a 48       	lddpc	r8,80007c28 <process_frame+0x190>
80007b9a:	11 8c       	ld.ub	r12,r8[0x0]
80007b9c:	f0 1f 00 27 	mcall	80007c38 <process_frame+0x1a0>
			state = state_MOD_KEY_DOWN;
80007ba0:	30 69       	mov	r9,6
80007ba2:	49 b8       	lddpc	r8,80007c0c <process_frame+0x174>
80007ba4:	91 09       	st.w	r8[0x0],r9
			break;
80007ba6:	e3 cd 80 80 	ldm	sp++,r7,pc

		case state_MOD_KEY_DOWN:
			udi_hid_kbd_down(injectToken&0xff);
80007baa:	4a 08       	lddpc	r8,80007c28 <process_frame+0x190>
80007bac:	11 9c       	ld.ub	r12,r8[0x1]
80007bae:	f0 1f 00 21 	mcall	80007c30 <process_frame+0x198>
			state = state_MOD_KEY_UP;
80007bb2:	30 79       	mov	r9,7
80007bb4:	49 68       	lddpc	r8,80007c0c <process_frame+0x174>
80007bb6:	91 09       	st.w	r8[0x0],r9
			break;
80007bb8:	e3 cd 80 80 	ldm	sp++,r7,pc

		case state_MOD_KEY_UP:
			udi_hid_kbd_up(injectToken&0xff);
80007bbc:	49 b8       	lddpc	r8,80007c28 <process_frame+0x190>
80007bbe:	11 9c       	ld.ub	r12,r8[0x1]
80007bc0:	f0 1f 00 1d 	mcall	80007c34 <process_frame+0x19c>
			state = state_MOD_UP;		
80007bc4:	30 89       	mov	r9,8
80007bc6:	49 28       	lddpc	r8,80007c0c <process_frame+0x174>
80007bc8:	91 09       	st.w	r8[0x0],r9
			break;
80007bca:	e3 cd 80 80 	ldm	sp++,r7,pc
			
		case state_MOD_UP:
			udi_hid_kbd_modifier_up(injectToken>>8);
80007bce:	49 78       	lddpc	r8,80007c28 <process_frame+0x190>
80007bd0:	11 8c       	ld.ub	r12,r8[0x0]
80007bd2:	f0 1f 00 1b 	mcall	80007c3c <process_frame+0x1a4>
			state = state_INJECTING;
80007bd6:	30 29       	mov	r9,2
80007bd8:	48 d8       	lddpc	r8,80007c0c <process_frame+0x174>
80007bda:	91 09       	st.w	r8[0x0],r9
			break;	
80007bdc:	e3 cd 80 80 	ldm	sp++,r7,pc
			
		case state_WAIT:
			if( --wait == 0 ) {
80007be0:	49 39       	lddpc	r9,80007c2c <process_frame+0x194>
80007be2:	13 88       	ld.ub	r8,r9[0x0]
80007be4:	20 18       	sub	r8,1
80007be6:	5c 58       	castu.b	r8
80007be8:	b2 88       	st.b	r9[0x0],r8
80007bea:	c0 91       	brne	80007bfc <process_frame+0x164>
				state = state_INJECTING;
80007bec:	30 29       	mov	r9,2
80007bee:	48 88       	lddpc	r8,80007c0c <process_frame+0x174>
80007bf0:	91 09       	st.w	r8[0x0],r9
80007bf2:	e3 cd 80 80 	ldm	sp++,r7,pc
			}
			break;
			
		default:
			state = state_IDLE;
80007bf6:	30 09       	mov	r9,0
80007bf8:	48 58       	lddpc	r8,80007c0c <process_frame+0x174>
80007bfa:	91 09       	st.w	r8[0x0],r9
80007bfc:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c00:	00 00       	add	r0,r0
80007c02:	02 64       	and	r4,r1
80007c04:	80 00       	ld.sh	r0,r0[0x0]
80007c06:	20 5c       	sub	r12,5
80007c08:	00 00       	add	r0,r0
80007c0a:	01 f8       	ld.ub	r8,r0[0x7]
80007c0c:	00 00       	add	r0,r0
80007c0e:	00 e0       	st.h	--r0,r0
80007c10:	80 00       	ld.sh	r0,r0[0x0]
80007c12:	81 1c       	st.w	r0[0x4],r12
80007c14:	80 00       	ld.sh	r0,r0[0x0]
80007c16:	2f e0       	sub	r0,-2
80007c18:	80 00       	ld.sh	r0,r0[0x0]
80007c1a:	61 d4       	ld.w	r4,r0[0x74]
80007c1c:	80 00       	ld.sh	r0,r0[0x0]
80007c1e:	5f 54       	srlt	r4
80007c20:	80 00       	ld.sh	r0,r0[0x0]
80007c22:	5f 98       	srgt	r8
80007c24:	80 00       	ld.sh	r0,r0[0x0]
80007c26:	5f d4       	srvc	r4
80007c28:	00 00       	add	r0,r0
80007c2a:	01 fc       	ld.ub	r12,r0[0x7]
80007c2c:	00 00       	add	r0,r0
80007c2e:	01 fa       	ld.ub	r10,r0[0x7]
80007c30:	80 00       	ld.sh	r0,r0[0x0]
80007c32:	6e 88       	ld.w	r8,r7[0x20]
80007c34:	80 00       	ld.sh	r0,r0[0x0]
80007c36:	6f 00       	ld.w	r0,r7[0x40]
80007c38:	80 00       	ld.sh	r0,r0[0x0]
80007c3a:	6f 98       	ld.w	r8,r7[0x64]
80007c3c:	80 00       	ld.sh	r0,r0[0x0]
80007c3e:	6f c8       	ld.w	r8,r7[0x70]

80007c40 <main_sof_action>:
{
}
 
//-------------------------------------------------------------------
void main_sof_action(void)
{
80007c40:	d4 01       	pushm	lr
		process_frame( udd_get_frame_number() );
80007c42:	f0 1f 00 04 	mcall	80007c50 <main_sof_action+0x10>
80007c46:	5c 7c       	castu.h	r12
80007c48:	f0 1f 00 03 	mcall	80007c54 <main_sof_action+0x14>

}
80007c4c:	d8 02       	popm	pc
80007c4e:	00 00       	add	r0,r0
80007c50:	80 00       	ld.sh	r0,r0[0x0]
80007c52:	32 d0       	mov	r0,45
80007c54:	80 00       	ld.sh	r0,r0[0x0]
80007c56:	7a 98       	ld.w	r8,sp[0x24]

80007c58 <memcmp>:
80007c58:	d4 01       	pushm	lr
80007c5a:	30 08       	mov	r8,0
80007c5c:	c0 d8       	rjmp	80007c76 <memcmp+0x1e>
80007c5e:	f8 08 07 0e 	ld.ub	lr,r12[r8]
80007c62:	f6 08 07 09 	ld.ub	r9,r11[r8]
80007c66:	20 1a       	sub	r10,1
80007c68:	2f f8       	sub	r8,-1
80007c6a:	f2 0e 18 00 	cp.b	lr,r9
80007c6e:	c0 40       	breq	80007c76 <memcmp+0x1e>
80007c70:	fc 09 01 0c 	sub	r12,lr,r9
80007c74:	d8 02       	popm	pc
80007c76:	58 0a       	cp.w	r10,0
80007c78:	cf 31       	brne	80007c5e <memcmp+0x6>
80007c7a:	14 9c       	mov	r12,r10
80007c7c:	d8 02       	popm	pc

80007c7e <memcpy>:
80007c7e:	58 8a       	cp.w	r10,8
80007c80:	c2 f5       	brlt	80007cde <memcpy+0x60>
80007c82:	f9 eb 10 09 	or	r9,r12,r11
80007c86:	e2 19 00 03 	andl	r9,0x3,COH
80007c8a:	e0 81 00 97 	brne	80007db8 <memcpy+0x13a>
80007c8e:	e0 4a 00 20 	cp.w	r10,32
80007c92:	c3 b4       	brge	80007d08 <memcpy+0x8a>
80007c94:	f4 08 14 02 	asr	r8,r10,0x2
80007c98:	f0 09 11 08 	rsub	r9,r8,8
80007c9c:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80007ca0:	76 69       	ld.w	r9,r11[0x18]
80007ca2:	99 69       	st.w	r12[0x18],r9
80007ca4:	76 59       	ld.w	r9,r11[0x14]
80007ca6:	99 59       	st.w	r12[0x14],r9
80007ca8:	76 49       	ld.w	r9,r11[0x10]
80007caa:	99 49       	st.w	r12[0x10],r9
80007cac:	76 39       	ld.w	r9,r11[0xc]
80007cae:	99 39       	st.w	r12[0xc],r9
80007cb0:	76 29       	ld.w	r9,r11[0x8]
80007cb2:	99 29       	st.w	r12[0x8],r9
80007cb4:	76 19       	ld.w	r9,r11[0x4]
80007cb6:	99 19       	st.w	r12[0x4],r9
80007cb8:	76 09       	ld.w	r9,r11[0x0]
80007cba:	99 09       	st.w	r12[0x0],r9
80007cbc:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80007cc0:	f8 08 00 28 	add	r8,r12,r8<<0x2
80007cc4:	e0 1a 00 03 	andl	r10,0x3
80007cc8:	f4 0a 11 04 	rsub	r10,r10,4
80007ccc:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80007cd0:	17 a9       	ld.ub	r9,r11[0x2]
80007cd2:	b0 a9       	st.b	r8[0x2],r9
80007cd4:	17 99       	ld.ub	r9,r11[0x1]
80007cd6:	b0 99       	st.b	r8[0x1],r9
80007cd8:	17 89       	ld.ub	r9,r11[0x0]
80007cda:	b0 89       	st.b	r8[0x0],r9
80007cdc:	5e fc       	retal	r12
80007cde:	f4 0a 11 09 	rsub	r10,r10,9
80007ce2:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80007ce6:	17 f9       	ld.ub	r9,r11[0x7]
80007ce8:	b8 f9       	st.b	r12[0x7],r9
80007cea:	17 e9       	ld.ub	r9,r11[0x6]
80007cec:	b8 e9       	st.b	r12[0x6],r9
80007cee:	17 d9       	ld.ub	r9,r11[0x5]
80007cf0:	b8 d9       	st.b	r12[0x5],r9
80007cf2:	17 c9       	ld.ub	r9,r11[0x4]
80007cf4:	b8 c9       	st.b	r12[0x4],r9
80007cf6:	17 b9       	ld.ub	r9,r11[0x3]
80007cf8:	b8 b9       	st.b	r12[0x3],r9
80007cfa:	17 a9       	ld.ub	r9,r11[0x2]
80007cfc:	b8 a9       	st.b	r12[0x2],r9
80007cfe:	17 99       	ld.ub	r9,r11[0x1]
80007d00:	b8 99       	st.b	r12[0x1],r9
80007d02:	17 89       	ld.ub	r9,r11[0x0]
80007d04:	b8 89       	st.b	r12[0x0],r9
80007d06:	5e fc       	retal	r12
80007d08:	eb cd 40 c0 	pushm	r6-r7,lr
80007d0c:	18 99       	mov	r9,r12
80007d0e:	22 0a       	sub	r10,32
80007d10:	b7 07       	ld.d	r6,r11++
80007d12:	b3 26       	st.d	r9++,r6
80007d14:	b7 07       	ld.d	r6,r11++
80007d16:	b3 26       	st.d	r9++,r6
80007d18:	b7 07       	ld.d	r6,r11++
80007d1a:	b3 26       	st.d	r9++,r6
80007d1c:	b7 07       	ld.d	r6,r11++
80007d1e:	b3 26       	st.d	r9++,r6
80007d20:	22 0a       	sub	r10,32
80007d22:	cf 74       	brge	80007d10 <memcpy+0x92>
80007d24:	2f 0a       	sub	r10,-16
80007d26:	c0 65       	brlt	80007d32 <memcpy+0xb4>
80007d28:	b7 07       	ld.d	r6,r11++
80007d2a:	b3 26       	st.d	r9++,r6
80007d2c:	b7 07       	ld.d	r6,r11++
80007d2e:	b3 26       	st.d	r9++,r6
80007d30:	21 0a       	sub	r10,16
80007d32:	5c 3a       	neg	r10
80007d34:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80007d38:	d7 03       	nop
80007d3a:	d7 03       	nop
80007d3c:	f7 36 00 0e 	ld.ub	r6,r11[14]
80007d40:	f3 66 00 0e 	st.b	r9[14],r6
80007d44:	f7 36 00 0d 	ld.ub	r6,r11[13]
80007d48:	f3 66 00 0d 	st.b	r9[13],r6
80007d4c:	f7 36 00 0c 	ld.ub	r6,r11[12]
80007d50:	f3 66 00 0c 	st.b	r9[12],r6
80007d54:	f7 36 00 0b 	ld.ub	r6,r11[11]
80007d58:	f3 66 00 0b 	st.b	r9[11],r6
80007d5c:	f7 36 00 0a 	ld.ub	r6,r11[10]
80007d60:	f3 66 00 0a 	st.b	r9[10],r6
80007d64:	f7 36 00 09 	ld.ub	r6,r11[9]
80007d68:	f3 66 00 09 	st.b	r9[9],r6
80007d6c:	f7 36 00 08 	ld.ub	r6,r11[8]
80007d70:	f3 66 00 08 	st.b	r9[8],r6
80007d74:	f7 36 00 07 	ld.ub	r6,r11[7]
80007d78:	f3 66 00 07 	st.b	r9[7],r6
80007d7c:	f7 36 00 06 	ld.ub	r6,r11[6]
80007d80:	f3 66 00 06 	st.b	r9[6],r6
80007d84:	f7 36 00 05 	ld.ub	r6,r11[5]
80007d88:	f3 66 00 05 	st.b	r9[5],r6
80007d8c:	f7 36 00 04 	ld.ub	r6,r11[4]
80007d90:	f3 66 00 04 	st.b	r9[4],r6
80007d94:	f7 36 00 03 	ld.ub	r6,r11[3]
80007d98:	f3 66 00 03 	st.b	r9[3],r6
80007d9c:	f7 36 00 02 	ld.ub	r6,r11[2]
80007da0:	f3 66 00 02 	st.b	r9[2],r6
80007da4:	f7 36 00 01 	ld.ub	r6,r11[1]
80007da8:	f3 66 00 01 	st.b	r9[1],r6
80007dac:	f7 36 00 00 	ld.ub	r6,r11[0]
80007db0:	f3 66 00 00 	st.b	r9[0],r6
80007db4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007db8:	20 1a       	sub	r10,1
80007dba:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80007dbe:	f8 0a 0b 09 	st.b	r12[r10],r9
80007dc2:	cf b1       	brne	80007db8 <memcpy+0x13a>
80007dc4:	5e fc       	retal	r12

80007dc6 <memset>:
80007dc6:	18 98       	mov	r8,r12
80007dc8:	c0 38       	rjmp	80007dce <memset+0x8>
80007dca:	10 cb       	st.b	r8++,r11
80007dcc:	20 1a       	sub	r10,1
80007dce:	58 0a       	cp.w	r10,0
80007dd0:	cf d1       	brne	80007dca <memset+0x4>
80007dd2:	5e fc       	retal	r12

Disassembly of section .exception:

80007e00 <_evba>:
80007e00:	c0 08       	rjmp	80007e00 <_evba>
	...

80007e04 <_handle_TLB_Multiple_Hit>:
80007e04:	c0 08       	rjmp	80007e04 <_handle_TLB_Multiple_Hit>
	...

80007e08 <_handle_Bus_Error_Data_Fetch>:
80007e08:	c0 08       	rjmp	80007e08 <_handle_Bus_Error_Data_Fetch>
	...

80007e0c <_handle_Bus_Error_Instruction_Fetch>:
80007e0c:	c0 08       	rjmp	80007e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80007e10 <_handle_NMI>:
80007e10:	c0 08       	rjmp	80007e10 <_handle_NMI>
	...

80007e14 <_handle_Instruction_Address>:
80007e14:	c0 08       	rjmp	80007e14 <_handle_Instruction_Address>
	...

80007e18 <_handle_ITLB_Protection>:
80007e18:	c0 08       	rjmp	80007e18 <_handle_ITLB_Protection>
	...

80007e1c <_handle_Breakpoint>:
80007e1c:	c0 08       	rjmp	80007e1c <_handle_Breakpoint>
	...

80007e20 <_handle_Illegal_Opcode>:
80007e20:	c0 08       	rjmp	80007e20 <_handle_Illegal_Opcode>
	...

80007e24 <_handle_Unimplemented_Instruction>:
80007e24:	c0 08       	rjmp	80007e24 <_handle_Unimplemented_Instruction>
	...

80007e28 <_handle_Privilege_Violation>:
80007e28:	c0 08       	rjmp	80007e28 <_handle_Privilege_Violation>
	...

80007e2c <_handle_Floating_Point>:
80007e2c:	c0 08       	rjmp	80007e2c <_handle_Floating_Point>
	...

80007e30 <_handle_Coprocessor_Absent>:
80007e30:	c0 08       	rjmp	80007e30 <_handle_Coprocessor_Absent>
	...

80007e34 <_handle_Data_Address_Read>:
80007e34:	c0 08       	rjmp	80007e34 <_handle_Data_Address_Read>
	...

80007e38 <_handle_Data_Address_Write>:
80007e38:	c0 08       	rjmp	80007e38 <_handle_Data_Address_Write>
	...

80007e3c <_handle_DTLB_Protection_Read>:
80007e3c:	c0 08       	rjmp	80007e3c <_handle_DTLB_Protection_Read>
	...

80007e40 <_handle_DTLB_Protection_Write>:
80007e40:	c0 08       	rjmp	80007e40 <_handle_DTLB_Protection_Write>
	...

80007e44 <_handle_DTLB_Modified>:
80007e44:	c0 08       	rjmp	80007e44 <_handle_DTLB_Modified>
	...

80007e50 <_handle_ITLB_Miss>:
80007e50:	c0 08       	rjmp	80007e50 <_handle_ITLB_Miss>
	...

80007e60 <_handle_DTLB_Miss_Read>:
80007e60:	c0 08       	rjmp	80007e60 <_handle_DTLB_Miss_Read>
	...

80007e70 <_handle_DTLB_Miss_Write>:
80007e70:	c0 08       	rjmp	80007e70 <_handle_DTLB_Miss_Write>
	...

80007f00 <_handle_Supervisor_Call>:
80007f00:	c0 08       	rjmp	80007f00 <_handle_Supervisor_Call>
80007f02:	d7 03       	nop

80007f04 <_int0>:
80007f04:	30 0c       	mov	r12,0
80007f06:	fe b0 d8 bb 	rcall	8000307c <_get_interrupt_handler>
80007f0a:	58 0c       	cp.w	r12,0
80007f0c:	f8 0f 17 10 	movne	pc,r12
80007f10:	d6 03       	rete

80007f12 <_int1>:
80007f12:	30 1c       	mov	r12,1
80007f14:	fe b0 d8 b4 	rcall	8000307c <_get_interrupt_handler>
80007f18:	58 0c       	cp.w	r12,0
80007f1a:	f8 0f 17 10 	movne	pc,r12
80007f1e:	d6 03       	rete

80007f20 <_int2>:
80007f20:	30 2c       	mov	r12,2
80007f22:	fe b0 d8 ad 	rcall	8000307c <_get_interrupt_handler>
80007f26:	58 0c       	cp.w	r12,0
80007f28:	f8 0f 17 10 	movne	pc,r12
80007f2c:	d6 03       	rete

80007f2e <_int3>:
80007f2e:	30 3c       	mov	r12,3
80007f30:	fe b0 d8 a6 	rcall	8000307c <_get_interrupt_handler>
80007f34:	58 0c       	cp.w	r12,0
80007f36:	f8 0f 17 10 	movne	pc,r12
80007f3a:	d6 03       	rete

80007f3c <ipr_val>:
80007f3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
80007f4c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80007f5c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80007f6c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80007f7c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80007f8c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80007f9c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80007fac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80007fbc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80007fcc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80007fdc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80007fec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80007ffc:	d7 03 d7 03                                         ....
