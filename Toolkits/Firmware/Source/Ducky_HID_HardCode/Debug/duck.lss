
duck.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002dc4  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80004e00  80004e00  00005200  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000001b5  80005000  80005000  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000003  800051b5  800051b5  000055b5  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         000000d6  00000008  800051b8  00005808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000002  000000de  8000528e  000058de  2**0
                  ALLOC
  9 .bss          00000358  000000e0  000000e0  00000000  2**2
                  ALLOC
 10 .heap         00006bc8  00000438  00000438  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  000058de  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000900  00000000  00000000  0000590e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 00001895  00000000  00000000  0000620e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   00018086  00000000  00000000  00007aa3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002414  00000000  00000000  0001fb29  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000950f  00000000  00000000  00021f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00001748  00000000  00000000  0002b44c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00006ba5  00000000  00000000  0002cb94  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00003a87  00000000  00000000  00033739  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 00e275cf  00000000  00000000  000371c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  00007000  00007000  00000000  2**0
                  ALLOC
 22 .debug_ranges 000008e8  00000000  00000000  00e5e78f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf e1 20 	sub	pc,pc,-7904

Disassembly of section .text:

80002004 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#define AT45DBX_MEM_CNT             1
#endif

void board_init(void)
{
80002004:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002006:	30 3b       	mov	r11,3
80002008:	30 7c       	mov	r12,7
8000200a:	f0 1f 00 14 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200e:	30 3b       	mov	r11,3
80002010:	30 8c       	mov	r12,8
80002012:	f0 1f 00 12 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002016:	30 3b       	mov	r11,3
80002018:	31 5c       	mov	r12,21
8000201a:	f0 1f 00 10 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201e:	30 3b       	mov	r11,3
80002020:	31 6c       	mov	r12,22
80002022:	f0 1f 00 0e 	mcall	80002058 <board_init+0x54>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
80002026:	30 0b       	mov	r11,0
80002028:	32 2c       	mov	r12,34
8000202a:	f0 1f 00 0c 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
8000202e:	30 0b       	mov	r11,0
80002030:	32 3c       	mov	r12,35
80002032:	f0 1f 00 0a 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
80002036:	30 0b       	mov	r11,0
80002038:	30 dc       	mov	r12,13
8000203a:	f0 1f 00 08 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
8000203e:	30 0b       	mov	r11,0
80002040:	32 6c       	mov	r12,38
80002042:	f0 1f 00 06 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
80002046:	30 0b       	mov	r11,0
80002048:	32 7c       	mov	r12,39
8000204a:	f0 1f 00 04 	mcall	80002058 <board_init+0x54>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
8000204e:	30 0b       	mov	r11,0
80002050:	32 8c       	mov	r12,40
80002052:	f0 1f 00 02 	mcall	80002058 <board_init+0x54>
	// Assign GPIO pins to USB.
	gpio_enable_module(USB_GPIO_MAP,
            sizeof(USB_GPIO_MAP) / sizeof(USB_GPIO_MAP[0]));
#endif
  
}
80002056:	d8 02       	popm	pc
80002058:	80 00       	ld.sh	r0,r0[0x0]
8000205a:	2e 88       	sub	r8,-24

8000205c <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000205c:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80002060:	49 18       	lddpc	r8,800020a4 <LED_On+0x48>
80002062:	70 09       	ld.w	r9,r8[0x0]
80002064:	f9 e9 10 09 	or	r9,r12,r9
80002068:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000206a:	58 0c       	cp.w	r12,0
8000206c:	5e 0c       	reteq	r12
8000206e:	48 f8       	lddpc	r8,800020a8 <LED_On+0x4c>
80002070:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80002072:	18 9a       	mov	r10,r12
80002074:	5c 9a       	brev	r10
80002076:	f4 0a 12 00 	clz	r10,r10
8000207a:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
8000207c:	f4 09 15 04 	lsl	r9,r10,0x4
80002080:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80002082:	70 09       	ld.w	r9,r8[0x0]
80002084:	a9 69       	lsl	r9,0x8
80002086:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
8000208a:	70 1b       	ld.w	r11,r8[0x4]
8000208c:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80002090:	70 1b       	ld.w	r11,r8[0x4]
80002092:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002096:	70 1b       	ld.w	r11,r8[0x4]
80002098:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
8000209a:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
8000209e:	ce a1       	brne	80002072 <LED_On+0x16>
800020a0:	5e fc       	retal	r12
800020a2:	00 00       	add	r0,r0
800020a4:	00 00       	add	r0,r0
800020a6:	00 08       	add	r8,r0
800020a8:	80 00       	ld.sh	r0,r0[0x0]
800020aa:	50 00       	stdsp	sp[0x0],r0

800020ac <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800020ac:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
800020b0:	49 28       	lddpc	r8,800020f8 <LED_Off+0x4c>
800020b2:	70 09       	ld.w	r9,r8[0x0]
800020b4:	f8 0a 11 ff 	rsub	r10,r12,-1
800020b8:	f5 e9 00 09 	and	r9,r10,r9
800020bc:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800020be:	58 0c       	cp.w	r12,0
800020c0:	5e 0c       	reteq	r12
800020c2:	48 f8       	lddpc	r8,800020fc <LED_Off+0x50>
800020c4:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
800020c6:	18 9a       	mov	r10,r12
800020c8:	5c 9a       	brev	r10
800020ca:	f4 0a 12 00 	clz	r10,r10
800020ce:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
800020d0:	f4 09 15 04 	lsl	r9,r10,0x4
800020d4:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800020d6:	70 09       	ld.w	r9,r8[0x0]
800020d8:	a9 69       	lsl	r9,0x8
800020da:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800020de:	70 1b       	ld.w	r11,r8[0x4]
800020e0:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800020e4:	70 1b       	ld.w	r11,r8[0x4]
800020e6:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800020ea:	70 1b       	ld.w	r11,r8[0x4]
800020ec:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
800020ee:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800020f2:	ce a1       	brne	800020c6 <LED_Off+0x1a>
800020f4:	5e fc       	retal	r12
800020f6:	00 00       	add	r0,r0
800020f8:	00 00       	add	r0,r0
800020fa:	00 08       	add	r8,r0
800020fc:	80 00       	ld.sh	r0,r0[0x0]
800020fe:	50 00       	stdsp	sp[0x0],r0

80002100 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         OK
void sd_mmc_spi_get_capacity(void)
{
80002100:	d4 01       	pushm	lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80002102:	4b c8       	lddpc	r8,800021f0 <sd_mmc_spi_get_capacity+0xf0>
80002104:	11 dc       	ld.ub	r12,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
80002106:	4b c9       	lddpc	r9,800021f4 <sd_mmc_spi_get_capacity+0xf4>
80002108:	13 89       	ld.ub	r9,r9[0x0]
8000210a:	30 3a       	mov	r10,3
8000210c:	f4 09 18 00 	cp.b	r9,r10
80002110:	c1 e1       	brne	8000214c <sd_mmc_spi_get_capacity+0x4c>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80002112:	f1 3a 00 08 	ld.ub	r10,r8[8]
80002116:	f1 39 00 09 	ld.ub	r9,r8[9]
8000211a:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000211e:	11 f8       	ld.ub	r8,r8[0x7]
80002120:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002124:	f3 e8 11 08 	or	r8,r9,r8<<0x10
    ++c_size;
80002128:	2f f8       	sub	r8,-1
    capacity = c_size << 19;
8000212a:	f0 0a 15 13 	lsl	r10,r8,0x13
8000212e:	4b 39       	lddpc	r9,800021f8 <sd_mmc_spi_get_capacity+0xf8>
80002130:	93 0a       	st.w	r9[0x0],r10
    capacity_mult = (c_size >> 13) & 0x01FF;
80002132:	f5 d8 c1 a9 	bfextu	r10,r8,0xd,0x9
80002136:	4b 28       	lddpc	r8,800021fc <sd_mmc_spi_get_capacity+0xfc>
80002138:	b0 0a       	st.h	r8[0x0],r10
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
8000213a:	72 09       	ld.w	r9,r9[0x0]
8000213c:	90 08       	ld.sh	r8,r8[0x0]
8000213e:	a9 99       	lsr	r9,0x9
80002140:	20 19       	sub	r9,1
80002142:	b7 78       	lsl	r8,0x17
80002144:	10 09       	add	r9,r8
80002146:	4a f8       	lddpc	r8,80002200 <sd_mmc_spi_get_capacity+0x100>
80002148:	91 09       	st.w	r8[0x0],r9
8000214a:	c4 28       	rjmp	800021ce <sd_mmc_spi_get_capacity+0xce>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
8000214c:	4a 98       	lddpc	r8,800021f0 <sd_mmc_spi_get_capacity+0xf0>
8000214e:	f1 3a 00 0a 	ld.ub	r10,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
80002152:	f1 3b 00 08 	ld.ub	r11,r8[8]
80002156:	a7 8b       	lsr	r11,0x6
80002158:	11 fe       	ld.ub	lr,r8[0x7]
8000215a:	f6 0e 00 2b 	add	r11,r11,lr<<0x2
8000215e:	11 ee       	ld.ub	lr,r8[0x6]
80002160:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
80002164:	ab 6e       	lsl	lr,0xa
80002166:	1c 0b       	add	r11,lr
80002168:	2f fb       	sub	r11,-1
8000216a:	f1 38 00 09 	ld.ub	r8,r8[9]
8000216e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002172:	f4 0e 16 07 	lsr	lr,r10,0x7
80002176:	fc 08 00 18 	add	r8,lr,r8<<0x1
8000217a:	2f e8       	sub	r8,-2
8000217c:	f6 08 09 48 	lsl	r8,r11,r8
80002180:	20 18       	sub	r8,1
80002182:	4a 0b       	lddpc	r11,80002200 <sd_mmc_spi_get_capacity+0x100>
80002184:	97 08       	st.w	r11[0x0],r8
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
80002186:	76 0b       	ld.w	r11,r11[0x0]
80002188:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
8000218c:	f6 cc ff ff 	sub	r12,r11,-1
80002190:	f8 08 09 4c 	lsl	r12,r12,r8
80002194:	49 9b       	lddpc	r11,800021f8 <sd_mmc_spi_get_capacity+0xf8>
80002196:	97 0c       	st.w	r11[0x0],r12
    capacity_mult = 0;
80002198:	30 0c       	mov	r12,0
8000219a:	49 9b       	lddpc	r11,800021fc <sd_mmc_spi_get_capacity+0xfc>
8000219c:	b6 0c       	st.h	r11[0x0],r12
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
8000219e:	30 9b       	mov	r11,9
800021a0:	f6 08 18 00 	cp.b	r8,r11
800021a4:	e0 88 00 08 	brls	800021b4 <sd_mmc_spi_get_capacity+0xb4>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
800021a8:	49 6b       	lddpc	r11,80002200 <sd_mmc_spi_get_capacity+0x100>
800021aa:	76 0c       	ld.w	r12,r11[0x0]
800021ac:	20 98       	sub	r8,9
800021ae:	f8 08 09 48 	lsl	r8,r12,r8
800021b2:	97 08       	st.w	r11[0x0],r8
    }
  }
  if (card_type == MMC_CARD)
800021b4:	58 09       	cp.w	r9,0
800021b6:	c0 c1       	brne	800021ce <sd_mmc_spi_get_capacity+0xce>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
800021b8:	f1 da c0 45 	bfextu	r8,r10,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
800021bc:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800021c0:	48 c9       	lddpc	r9,800021f0 <sd_mmc_spi_get_capacity+0xf0>
800021c2:	f3 39 00 0b 	ld.ub	r9,r9[11]
800021c6:	a3 7a       	lsl	r10,0x3
800021c8:	f5 e9 12 59 	or	r9,r10,r9>>0x5
800021cc:	c0 c8       	rjmp	800021e4 <sd_mmc_spi_get_capacity+0xe4>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800021ce:	48 9a       	lddpc	r10,800021f0 <sd_mmc_spi_get_capacity+0xf0>
800021d0:	f5 39 00 0a 	ld.ub	r9,r10[10]
800021d4:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
800021d8:	f5 38 00 0b 	ld.ub	r8,r10[11]
800021dc:	a7 98       	lsr	r8,0x7
800021de:	f0 09 00 18 	add	r8,r8,r9<<0x1
800021e2:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800021e4:	2f f9       	sub	r9,-1
800021e6:	2f f8       	sub	r8,-1
800021e8:	b1 39       	mul	r9,r8
800021ea:	48 78       	lddpc	r8,80002204 <sd_mmc_spi_get_capacity+0x104>
800021ec:	b0 09       	st.h	r8[0x0],r9
}
800021ee:	d8 02       	popm	pc
800021f0:	00 00       	add	r0,r0
800021f2:	04 04       	add	r4,r2
800021f4:	00 00       	add	r0,r0
800021f6:	04 02       	add	r2,r2
800021f8:	00 00       	add	r0,r0
800021fa:	03 f4       	ld.ub	r4,r1[0x7]
800021fc:	00 00       	add	r0,r0
800021fe:	03 f8       	ld.ub	r8,r1[0x7]
80002200:	00 00       	add	r0,r0
80002202:	03 fc       	ld.ub	r12,r1[0x7]
80002204:	00 00       	add	r0,r0
80002206:	03 fa       	ld.ub	r10,r1[0x7]

80002208 <sd_mmc_spi_write_close>:
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{

}
80002208:	5e fc       	retal	r12
8000220a:	d7 03       	nop

8000220c <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
8000220c:	d4 01       	pushm	lr
8000220e:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
80002210:	18 9b       	mov	r11,r12
80002212:	fe 7c 24 00 	mov	r12,-56320
80002216:	f0 1f 00 09 	mcall	80002238 <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
8000221a:	fa cb ff fe 	sub	r11,sp,-2
8000221e:	fe 7c 24 00 	mov	r12,-56320
80002222:	f0 1f 00 07 	mcall	8000223c <sd_mmc_spi_send_and_read+0x30>
80002226:	58 1c       	cp.w	r12,1
80002228:	c0 41       	brne	80002230 <sd_mmc_spi_send_and_read+0x24>
8000222a:	e0 6c 00 ff 	mov	r12,255
8000222e:	c0 28       	rjmp	80002232 <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
80002230:	1b bc       	ld.ub	r12,sp[0x3]
}
80002232:	2f fd       	sub	sp,-4
80002234:	d8 02       	popm	pc
80002236:	00 00       	add	r0,r0
80002238:	80 00       	ld.sh	r0,r0[0x0]
8000223a:	31 c6       	mov	r6,28
8000223c:	80 00       	ld.sh	r0,r0[0x0]
8000223e:	31 e2       	mov	r2,30

80002240 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          OK when card is not busy
Bool sd_mmc_spi_wait_not_busy(void)
{
80002240:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002242:	30 1b       	mov	r11,1
80002244:	fe 7c 24 00 	mov	r12,-56320
80002248:	f0 1f 00 10 	mcall	80002288 <sd_mmc_spi_wait_not_busy+0x48>
8000224c:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
8000224e:	e0 65 00 ff 	mov	r5,255
80002252:	48 f4       	lddpc	r4,8000228c <sd_mmc_spi_wait_not_busy+0x4c>
80002254:	3f f6       	mov	r6,-1
80002256:	c0 b8       	rjmp	8000226c <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
80002258:	2f f7       	sub	r7,-1
    if (retry == 200000)
8000225a:	e2 57 0d 40 	cp.w	r7,200000
8000225e:	c0 71       	brne	8000226c <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002260:	30 1b       	mov	r11,1
80002262:	fe 7c 24 00 	mov	r12,-56320
80002266:	f0 1f 00 0b 	mcall	80002290 <sd_mmc_spi_wait_not_busy+0x50>
8000226a:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
8000226c:	0a 9c       	mov	r12,r5
8000226e:	f0 1f 00 0a 	mcall	80002294 <sd_mmc_spi_wait_not_busy+0x54>
80002272:	a8 8c       	st.b	r4[0x0],r12
80002274:	ec 0c 18 00 	cp.b	r12,r6
80002278:	cf 01       	brne	80002258 <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return KO;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000227a:	30 1b       	mov	r11,1
8000227c:	fe 7c 24 00 	mov	r12,-56320
80002280:	f0 1f 00 04 	mcall	80002290 <sd_mmc_spi_wait_not_busy+0x50>
80002284:	da 2a       	popm	r4-r7,pc,r12=1
80002286:	00 00       	add	r0,r0
80002288:	80 00       	ld.sh	r0,r0[0x0]
8000228a:	30 92       	mov	r2,9
8000228c:	00 00       	add	r0,r0
8000228e:	04 14       	sub	r4,r2
80002290:	80 00       	ld.sh	r0,r0[0x0]
80002292:	30 de       	mov	lr,13
80002294:	80 00       	ld.sh	r0,r0[0x0]
80002296:	22 0c       	sub	r12,32

80002298 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> OK
Bool sd_mmc_spi_write_open (uint32_t pos)
{
80002298:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
8000229a:	a9 7c       	lsl	r12,0x9
8000229c:	48 38       	lddpc	r8,800022a8 <sd_mmc_spi_write_open+0x10>
8000229e:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800022a0:	f0 1f 00 03 	mcall	800022ac <sd_mmc_spi_write_open+0x14>
}
800022a4:	d8 02       	popm	pc
800022a6:	00 00       	add	r0,r0
800022a8:	00 00       	add	r0,r0
800022aa:	00 e0       	st.h	--r0,r0
800022ac:	80 00       	ld.sh	r0,r0[0x0]
800022ae:	22 40       	sub	r0,36

800022b0 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
Bool sd_mmc_spi_read_close (void)
{
800022b0:	d4 01       	pushm	lr
  if (KO == sd_mmc_spi_wait_not_busy())
800022b2:	f0 1f 00 03 	mcall	800022bc <sd_mmc_spi_read_close+0xc>
    return false;
  return true;
}
800022b6:	5f 1c       	srne	r12
800022b8:	d8 02       	popm	pc
800022ba:	00 00       	add	r0,r0
800022bc:	80 00       	ld.sh	r0,r0[0x0]
800022be:	22 40       	sub	r0,36

800022c0 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> OK
Bool sd_mmc_spi_read_open (uint32_t pos)
{
800022c0:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
800022c2:	a9 7c       	lsl	r12,0x9
800022c4:	48 38       	lddpc	r8,800022d0 <sd_mmc_spi_read_open+0x10>
800022c6:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800022c8:	f0 1f 00 03 	mcall	800022d4 <sd_mmc_spi_read_open+0x14>
}
800022cc:	d8 02       	popm	pc
800022ce:	00 00       	add	r0,r0
800022d0:	00 00       	add	r0,r0
800022d2:	00 e0       	st.h	--r0,r0
800022d4:	80 00       	ld.sh	r0,r0[0x0]
800022d6:	22 40       	sub	r0,36

800022d8 <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800022d8:	eb cd 40 f8 	pushm	r3-r7,lr
800022dc:	18 96       	mov	r6,r12
800022de:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
800022e0:	e0 6b 00 ff 	mov	r11,255
800022e4:	fe 7c 24 00 	mov	r12,-56320
800022e8:	f0 1f 00 2b 	mcall	80002394 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
800022ec:	0c 9b       	mov	r11,r6
800022ee:	a7 ab       	sbr	r11,0x6
800022f0:	5c 5b       	castu.b	r11
800022f2:	fe 7c 24 00 	mov	r12,-56320
800022f6:	f0 1f 00 28 	mcall	80002394 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
800022fa:	ee 0b 16 18 	lsr	r11,r7,0x18
800022fe:	fe 7c 24 00 	mov	r12,-56320
80002302:	f0 1f 00 25 	mcall	80002394 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
80002306:	ee 0b 16 10 	lsr	r11,r7,0x10
8000230a:	fe 7c 24 00 	mov	r12,-56320
8000230e:	f0 1f 00 22 	mcall	80002394 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
80002312:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
80002316:	fe 7c 24 00 	mov	r12,-56320
8000231a:	f0 1f 00 1f 	mcall	80002394 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
8000231e:	0e 9b       	mov	r11,r7
80002320:	5c 7b       	castu.h	r11
80002322:	fe 7c 24 00 	mov	r12,-56320
80002326:	f0 1f 00 1c 	mcall	80002394 <sd_mmc_spi_command+0xbc>
  switch(command)
8000232a:	30 08       	mov	r8,0
8000232c:	f0 06 18 00 	cp.b	r6,r8
80002330:	c0 60       	breq	8000233c <sd_mmc_spi_command+0x64>
80002332:	30 88       	mov	r8,8
80002334:	f0 06 18 00 	cp.b	r6,r8
80002338:	c1 01       	brne	80002358 <sd_mmc_spi_command+0x80>
8000233a:	c0 88       	rjmp	8000234a <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
8000233c:	e0 6b 00 95 	mov	r11,149
80002340:	fe 7c 24 00 	mov	r12,-56320
80002344:	f0 1f 00 14 	mcall	80002394 <sd_mmc_spi_command+0xbc>
         break;
80002348:	c0 e8       	rjmp	80002364 <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
8000234a:	e0 6b 00 87 	mov	r11,135
8000234e:	fe 7c 24 00 	mov	r12,-56320
80002352:	f0 1f 00 11 	mcall	80002394 <sd_mmc_spi_command+0xbc>
         break;
80002356:	c0 78       	rjmp	80002364 <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
80002358:	e0 6b 00 ff 	mov	r11,255
8000235c:	fe 7c 24 00 	mov	r12,-56320
80002360:	f0 1f 00 0d 	mcall	80002394 <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002364:	3f f9       	mov	r9,-1
80002366:	48 d8       	lddpc	r8,80002398 <sd_mmc_spi_command+0xc0>
80002368:	b0 89       	st.b	r8[0x0],r9
8000236a:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000236c:	e0 64 00 ff 	mov	r4,255
80002370:	10 93       	mov	r3,r8
80002372:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
80002374:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002376:	c0 68       	rjmp	80002382 <sd_mmc_spi_command+0xaa>
  {
    retry++;
80002378:	2f f7       	sub	r7,-1
8000237a:	5c 57       	castu.b	r7
    if(retry > 10) break;
8000237c:	ea 07 18 00 	cp.b	r7,r5
80002380:	c0 80       	breq	80002390 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002382:	08 9c       	mov	r12,r4
80002384:	f0 1f 00 06 	mcall	8000239c <sd_mmc_spi_command+0xc4>
80002388:	a6 8c       	st.b	r3[0x0],r12
8000238a:	ec 0c 18 00 	cp.b	r12,r6
8000238e:	cf 50       	breq	80002378 <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
80002390:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002394:	80 00       	ld.sh	r0,r0[0x0]
80002396:	31 c6       	mov	r6,28
80002398:	00 00       	add	r0,r0
8000239a:	04 14       	sub	r4,r2
8000239c:	80 00       	ld.sh	r0,r0[0x0]
8000239e:	22 0c       	sub	r12,32

800023a0 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
800023a0:	eb cd 40 c0 	pushm	r6-r7,lr
800023a4:	18 97       	mov	r7,r12
800023a6:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800023a8:	30 1b       	mov	r11,1
800023aa:	fe 7c 24 00 	mov	r12,-56320
800023ae:	f0 1f 00 09 	mcall	800023d0 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
800023b2:	0c 9b       	mov	r11,r6
800023b4:	0e 9c       	mov	r12,r7
800023b6:	f0 1f 00 08 	mcall	800023d4 <sd_mmc_spi_send_command+0x34>
800023ba:	48 87       	lddpc	r7,800023d8 <sd_mmc_spi_send_command+0x38>
800023bc:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800023be:	30 1b       	mov	r11,1
800023c0:	fe 7c 24 00 	mov	r12,-56320
800023c4:	f0 1f 00 06 	mcall	800023dc <sd_mmc_spi_send_command+0x3c>
  return r1;
}
800023c8:	0f 8c       	ld.ub	r12,r7[0x0]
800023ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023ce:	00 00       	add	r0,r0
800023d0:	80 00       	ld.sh	r0,r0[0x0]
800023d2:	30 92       	mov	r2,9
800023d4:	80 00       	ld.sh	r0,r0[0x0]
800023d6:	22 d8       	sub	r8,45
800023d8:	00 00       	add	r0,r0
800023da:	04 14       	sub	r4,r2
800023dc:	80 00       	ld.sh	r0,r0[0x0]
800023de:	30 de       	mov	lr,13

800023e0 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (OK)
//!   The memory does not respond (disconnected) (KO)
Bool sd_mmc_spi_check_presence(void)
{
800023e0:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
800023e4:	49 a8       	lddpc	r8,8000244c <sd_mmc_spi_check_presence+0x6c>
800023e6:	11 89       	ld.ub	r9,r8[0x0]
800023e8:	30 08       	mov	r8,0
800023ea:	f0 09 18 00 	cp.b	r9,r8
800023ee:	c1 f1       	brne	8000242c <sd_mmc_spi_check_presence+0x4c>
800023f0:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800023f2:	0e 94       	mov	r4,r7
800023f4:	49 73       	lddpc	r3,80002450 <sd_mmc_spi_check_presence+0x70>
800023f6:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800023f8:	e0 62 00 ff 	mov	r2,255
800023fc:	fe 71 24 00 	mov	r1,-56320
      retry++;
      if (retry > 10)
80002400:	30 b5       	mov	r5,11
80002402:	c0 c8       	rjmp	8000241a <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002404:	04 9b       	mov	r11,r2
80002406:	02 9c       	mov	r12,r1
80002408:	f0 1f 00 13 	mcall	80002454 <sd_mmc_spi_check_presence+0x74>
      retry++;
8000240c:	2f f7       	sub	r7,-1
8000240e:	5c 87       	casts.h	r7
      if (retry > 10)
80002410:	ea 07 19 00 	cp.h	r7,r5
80002414:	c0 31       	brne	8000241a <sd_mmc_spi_check_presence+0x3a>
80002416:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8000241a:	08 9b       	mov	r11,r4
8000241c:	08 9c       	mov	r12,r4
8000241e:	f0 1f 00 0f 	mcall	80002458 <sd_mmc_spi_check_presence+0x78>
80002422:	a6 8c       	st.b	r3[0x0],r12
80002424:	ec 0c 18 00 	cp.b	r12,r6
80002428:	ce e1       	brne	80002404 <sd_mmc_spi_check_presence+0x24>
8000242a:	c0 e8       	rjmp	80002446 <sd_mmc_spi_check_presence+0x66>
    return OK;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
8000242c:	30 0b       	mov	r11,0
8000242e:	33 bc       	mov	r12,59
80002430:	f0 1f 00 0a 	mcall	80002458 <sd_mmc_spi_check_presence+0x78>
80002434:	48 78       	lddpc	r8,80002450 <sd_mmc_spi_check_presence+0x70>
80002436:	b0 8c       	st.b	r8[0x0],r12
80002438:	58 0c       	cp.w	r12,0
8000243a:	c0 60       	breq	80002446 <sd_mmc_spi_check_presence+0x66>
      return OK;
    sd_mmc_spi_init_done = false;
8000243c:	30 09       	mov	r9,0
8000243e:	48 48       	lddpc	r8,8000244c <sd_mmc_spi_check_presence+0x6c>
80002440:	b0 89       	st.b	r8[0x0],r9
80002442:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return KO;
80002446:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
8000244a:	00 00       	add	r0,r0
8000244c:	00 00       	add	r0,r0
8000244e:	00 f8       	st.b	--r0,r8
80002450:	00 00       	add	r0,r0
80002452:	04 14       	sub	r4,r2
80002454:	80 00       	ld.sh	r0,r0[0x0]
80002456:	31 c6       	mov	r6,28
80002458:	80 00       	ld.sh	r0,r0[0x0]
8000245a:	23 a0       	sub	r0,58

8000245c <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> OK
//!   The write failed      -> KO
//!
Bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
8000245c:	eb cd 40 e0 	pushm	r5-r7,lr
80002460:	18 97       	mov	r7,r12
  const uint8_t *_ram = ram;
  uint16_t i;

  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
80002462:	f0 1f 00 49 	mcall	80002584 <sd_mmc_spi_write_sector_from_ram+0x128>
80002466:	e0 80 00 8c 	breq	8000257e <sd_mmc_spi_write_sector_from_ram+0x122>
    return KO;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000246a:	30 1b       	mov	r11,1
8000246c:	fe 7c 24 00 	mov	r12,-56320
80002470:	f0 1f 00 46 	mcall	80002588 <sd_mmc_spi_write_sector_from_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002474:	4c 68       	lddpc	r8,8000258c <sd_mmc_spi_write_sector_from_ram+0x130>
80002476:	11 89       	ld.ub	r9,r8[0x0]
80002478:	30 38       	mov	r8,3
8000247a:	f0 09 18 00 	cp.b	r9,r8
8000247e:	c0 a1       	brne	80002492 <sd_mmc_spi_write_sector_from_ram+0x36>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002480:	4c 48       	lddpc	r8,80002590 <sd_mmc_spi_write_sector_from_ram+0x134>
80002482:	70 0b       	ld.w	r11,r8[0x0]
80002484:	a9 9b       	lsr	r11,0x9
80002486:	31 8c       	mov	r12,24
80002488:	f0 1f 00 43 	mcall	80002594 <sd_mmc_spi_write_sector_from_ram+0x138>
8000248c:	4c 38       	lddpc	r8,80002598 <sd_mmc_spi_write_sector_from_ram+0x13c>
8000248e:	b0 8c       	st.b	r8[0x0],r12
80002490:	c0 88       	rjmp	800024a0 <sd_mmc_spi_write_sector_from_ram+0x44>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
80002492:	4c 08       	lddpc	r8,80002590 <sd_mmc_spi_write_sector_from_ram+0x134>
80002494:	70 0b       	ld.w	r11,r8[0x0]
80002496:	31 8c       	mov	r12,24
80002498:	f0 1f 00 3f 	mcall	80002594 <sd_mmc_spi_write_sector_from_ram+0x138>
8000249c:	4b f8       	lddpc	r8,80002598 <sd_mmc_spi_write_sector_from_ram+0x13c>
8000249e:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if(r1 != 0x00)
800024a0:	4b e8       	lddpc	r8,80002598 <sd_mmc_spi_write_sector_from_ram+0x13c>
800024a2:	11 89       	ld.ub	r9,r8[0x0]
800024a4:	30 08       	mov	r8,0
800024a6:	f0 09 18 00 	cp.b	r9,r8
800024aa:	c0 80       	breq	800024ba <sd_mmc_spi_write_sector_from_ram+0x5e>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800024ac:	30 1b       	mov	r11,1
800024ae:	fe 7c 24 00 	mov	r12,-56320
800024b2:	f0 1f 00 3b 	mcall	8000259c <sd_mmc_spi_write_sector_from_ram+0x140>
800024b6:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return KO;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800024ba:	e0 6b 00 ff 	mov	r11,255
800024be:	fe 7c 24 00 	mov	r12,-56320
800024c2:	f0 1f 00 38 	mcall	800025a0 <sd_mmc_spi_write_sector_from_ram+0x144>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
800024c6:	e0 6b 00 fe 	mov	r11,254
800024ca:	fe 7c 24 00 	mov	r12,-56320
800024ce:	f0 1f 00 35 	mcall	800025a0 <sd_mmc_spi_write_sector_from_ram+0x144>
//!
//! @return bit
//!   The write succeeded   -> OK
//!   The write failed      -> KO
//!
Bool sd_mmc_spi_write_sector_from_ram(const void *ram)
800024d2:	ee c6 fe 00 	sub	r6,r7,-512
  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800024d6:	fe 75 24 00 	mov	r5,-56320
800024da:	0f 3b       	ld.ub	r11,r7++
800024dc:	0a 9c       	mov	r12,r5
800024de:	f0 1f 00 31 	mcall	800025a0 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800024e2:	0c 37       	cp.w	r7,r6
800024e4:	cf b1       	brne	800024da <sd_mmc_spi_write_sector_from_ram+0x7e>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800024e6:	e0 6b 00 ff 	mov	r11,255
800024ea:	fe 7c 24 00 	mov	r12,-56320
800024ee:	f0 1f 00 2d 	mcall	800025a0 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
800024f2:	e0 6b 00 ff 	mov	r11,255
800024f6:	fe 7c 24 00 	mov	r12,-56320
800024fa:	f0 1f 00 2a 	mcall	800025a0 <sd_mmc_spi_write_sector_from_ram+0x144>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
800024fe:	e0 6c 00 ff 	mov	r12,255
80002502:	f0 1f 00 29 	mcall	800025a4 <sd_mmc_spi_write_sector_from_ram+0x148>
80002506:	4a 58       	lddpc	r8,80002598 <sd_mmc_spi_write_sector_from_ram+0x13c>
80002508:	b0 8c       	st.b	r8[0x0],r12
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
8000250a:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
8000250e:	58 5c       	cp.w	r12,5
80002510:	c1 40       	breq	80002538 <sd_mmc_spi_write_sector_from_ram+0xdc>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002512:	e0 6b 00 ff 	mov	r11,255
80002516:	fe 7c 24 00 	mov	r12,-56320
8000251a:	f0 1f 00 22 	mcall	800025a0 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_write(SD_MMC_SPI,0xFF);
8000251e:	e0 6b 00 ff 	mov	r11,255
80002522:	fe 7c 24 00 	mov	r12,-56320
80002526:	f0 1f 00 1f 	mcall	800025a0 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000252a:	30 1b       	mov	r11,1
8000252c:	fe 7c 24 00 	mov	r12,-56320
80002530:	f0 1f 00 1b 	mcall	8000259c <sd_mmc_spi_write_sector_from_ram+0x140>
80002534:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return KO;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002538:	e0 6b 00 ff 	mov	r11,255
8000253c:	fe 7c 24 00 	mov	r12,-56320
80002540:	f0 1f 00 18 	mcall	800025a0 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002544:	e0 6b 00 ff 	mov	r11,255
80002548:	fe 7c 24 00 	mov	r12,-56320
8000254c:	f0 1f 00 15 	mcall	800025a0 <sd_mmc_spi_write_sector_from_ram+0x144>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002550:	30 1b       	mov	r11,1
80002552:	fe 7c 24 00 	mov	r12,-56320
80002556:	f0 1f 00 12 	mcall	8000259c <sd_mmc_spi_write_sector_from_ram+0x140>
  gl_ptr_mem += 512;        // Update the memory pointer.
8000255a:	48 e8       	lddpc	r8,80002590 <sd_mmc_spi_write_sector_from_ram+0x134>
8000255c:	70 09       	ld.w	r9,r8[0x0]
8000255e:	f2 c9 fe 00 	sub	r9,r9,-512
80002562:	91 09       	st.w	r8[0x0],r9
80002564:	30 07       	mov	r7,0
  // wait card not busy after last programming operation
  i=0;
  while (KO == sd_mmc_spi_wait_not_busy())
  {
    i++;
    if (i == 10)
80002566:	30 a6       	mov	r6,10
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (KO == sd_mmc_spi_wait_not_busy())
80002568:	c0 68       	rjmp	80002574 <sd_mmc_spi_write_sector_from_ram+0x118>
  {
    i++;
8000256a:	2f f7       	sub	r7,-1
8000256c:	5c 87       	casts.h	r7
    if (i == 10)
8000256e:	ec 07 19 00 	cp.h	r7,r6
80002572:	c0 60       	breq	8000257e <sd_mmc_spi_write_sector_from_ram+0x122>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (KO == sd_mmc_spi_wait_not_busy())
80002574:	f0 1f 00 04 	mcall	80002584 <sd_mmc_spi_write_sector_from_ram+0x128>
80002578:	cf 90       	breq	8000256a <sd_mmc_spi_write_sector_from_ram+0x10e>
8000257a:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
8000257e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002582:	00 00       	add	r0,r0
80002584:	80 00       	ld.sh	r0,r0[0x0]
80002586:	22 40       	sub	r0,36
80002588:	80 00       	ld.sh	r0,r0[0x0]
8000258a:	30 92       	mov	r2,9
8000258c:	00 00       	add	r0,r0
8000258e:	04 02       	add	r2,r2
80002590:	00 00       	add	r0,r0
80002592:	00 e0       	st.h	--r0,r0
80002594:	80 00       	ld.sh	r0,r0[0x0]
80002596:	22 d8       	sub	r8,45
80002598:	00 00       	add	r0,r0
8000259a:	04 14       	sub	r4,r2
8000259c:	80 00       	ld.sh	r0,r0[0x0]
8000259e:	30 de       	mov	lr,13
800025a0:	80 00       	ld.sh	r0,r0[0x0]
800025a2:	31 c6       	mov	r6,28
800025a4:	80 00       	ld.sh	r0,r0[0x0]
800025a6:	22 0c       	sub	r12,32

800025a8 <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR                                  


int sd_mmc_spi_check_hc(void)
{
800025a8:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
800025ac:	f0 1f 00 1c 	mcall	8000261c <sd_mmc_spi_check_hc+0x74>
800025b0:	c0 31       	brne	800025b6 <sd_mmc_spi_check_hc+0xe>
800025b2:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800025b6:	30 1b       	mov	r11,1
800025b8:	fe 7c 24 00 	mov	r12,-56320
800025bc:	f0 1f 00 19 	mcall	80002620 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
800025c0:	30 0b       	mov	r11,0
800025c2:	33 ac       	mov	r12,58
800025c4:	f0 1f 00 18 	mcall	80002624 <sd_mmc_spi_check_hc+0x7c>
800025c8:	49 88       	lddpc	r8,80002628 <sd_mmc_spi_check_hc+0x80>
800025ca:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
800025cc:	58 0c       	cp.w	r12,0
800025ce:	c0 80       	breq	800025de <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025d0:	30 1b       	mov	r11,1
800025d2:	fe 7c 24 00 	mov	r12,-56320
800025d6:	f0 1f 00 16 	mcall	8000262c <sd_mmc_spi_check_hc+0x84>
800025da:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
800025de:	e0 6c 00 ff 	mov	r12,255
800025e2:	f0 1f 00 14 	mcall	80002630 <sd_mmc_spi_check_hc+0x88>
800025e6:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025e8:	e0 6c 00 ff 	mov	r12,255
800025ec:	f0 1f 00 11 	mcall	80002630 <sd_mmc_spi_check_hc+0x88>
800025f0:	48 e7       	lddpc	r7,80002628 <sd_mmc_spi_check_hc+0x80>
800025f2:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025f4:	e0 6c 00 ff 	mov	r12,255
800025f8:	f0 1f 00 0e 	mcall	80002630 <sd_mmc_spi_check_hc+0x88>
800025fc:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025fe:	e0 6c 00 ff 	mov	r12,255
80002602:	f0 1f 00 0c 	mcall	80002630 <sd_mmc_spi_check_hc+0x88>
80002606:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002608:	30 1b       	mov	r11,1
8000260a:	fe 7c 24 00 	mov	r12,-56320
8000260e:	f0 1f 00 08 	mcall	8000262c <sd_mmc_spi_check_hc+0x84>
80002612:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
80002616:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000261a:	00 00       	add	r0,r0
8000261c:	80 00       	ld.sh	r0,r0[0x0]
8000261e:	22 40       	sub	r0,36
80002620:	80 00       	ld.sh	r0,r0[0x0]
80002622:	30 92       	mov	r2,9
80002624:	80 00       	ld.sh	r0,r0[0x0]
80002626:	22 d8       	sub	r8,45
80002628:	00 00       	add	r0,r0
8000262a:	04 14       	sub	r4,r2
8000262c:	80 00       	ld.sh	r0,r0[0x0]
8000262e:	30 de       	mov	lr,13
80002630:	80 00       	ld.sh	r0,r0[0x0]
80002632:	22 0c       	sub	r12,32

80002634 <sd_mmc_spi_get_if>:
//!                OK
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80002634:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
80002638:	f0 1f 00 27 	mcall	800026d4 <sd_mmc_spi_get_if+0xa0>
8000263c:	c0 31       	brne	80002642 <sd_mmc_spi_get_if+0xe>
8000263e:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002642:	30 1b       	mov	r11,1
80002644:	fe 7c 24 00 	mov	r12,-56320
80002648:	f0 1f 00 24 	mcall	800026d8 <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
8000264c:	e0 6b 01 aa 	mov	r11,426
80002650:	30 8c       	mov	r12,8
80002652:	f0 1f 00 23 	mcall	800026dc <sd_mmc_spi_get_if+0xa8>
80002656:	4a 38       	lddpc	r8,800026e0 <sd_mmc_spi_get_if+0xac>
80002658:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
8000265a:	e2 1c 00 04 	andl	r12,0x4,COH
8000265e:	c0 80       	breq	8000266e <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002660:	30 1b       	mov	r11,1
80002662:	fe 7c 24 00 	mov	r12,-56320
80002666:	f0 1f 00 20 	mcall	800026e4 <sd_mmc_spi_get_if+0xb0>
8000266a:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000266e:	e0 6c 00 ff 	mov	r12,255
80002672:	f0 1f 00 1e 	mcall	800026e8 <sd_mmc_spi_get_if+0xb4>
80002676:	49 b7       	lddpc	r7,800026e0 <sd_mmc_spi_get_if+0xac>
80002678:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000267a:	e0 6c 00 ff 	mov	r12,255
8000267e:	f0 1f 00 1b 	mcall	800026e8 <sd_mmc_spi_get_if+0xb4>
80002682:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002684:	e0 6c 00 ff 	mov	r12,255
80002688:	f0 1f 00 18 	mcall	800026e8 <sd_mmc_spi_get_if+0xb4>
8000268c:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
8000268e:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002692:	c0 81       	brne	800026a2 <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002694:	30 1b       	mov	r11,1
80002696:	fe 7c 24 00 	mov	r12,-56320
8000269a:	f0 1f 00 13 	mcall	800026e4 <sd_mmc_spi_get_if+0xb0>
8000269e:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800026a2:	e0 6c 00 ff 	mov	r12,255
800026a6:	f0 1f 00 11 	mcall	800026e8 <sd_mmc_spi_get_if+0xb4>
800026aa:	48 e8       	lddpc	r8,800026e0 <sd_mmc_spi_get_if+0xac>
800026ac:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
800026ae:	3a a8       	mov	r8,-86
800026b0:	f0 0c 18 00 	cp.b	r12,r8
800026b4:	c0 80       	breq	800026c4 <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026b6:	30 1b       	mov	r11,1
800026b8:	fe 7c 24 00 	mov	r12,-56320
800026bc:	f0 1f 00 0a 	mcall	800026e4 <sd_mmc_spi_get_if+0xb0>
800026c0:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026c4:	30 1b       	mov	r11,1
800026c6:	fe 7c 24 00 	mov	r12,-56320
800026ca:	f0 1f 00 07 	mcall	800026e4 <sd_mmc_spi_get_if+0xb0>
800026ce:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800026d2:	00 00       	add	r0,r0
800026d4:	80 00       	ld.sh	r0,r0[0x0]
800026d6:	22 40       	sub	r0,36
800026d8:	80 00       	ld.sh	r0,r0[0x0]
800026da:	30 92       	mov	r2,9
800026dc:	80 00       	ld.sh	r0,r0[0x0]
800026de:	22 d8       	sub	r8,45
800026e0:	00 00       	add	r0,r0
800026e2:	04 14       	sub	r4,r2
800026e4:	80 00       	ld.sh	r0,r0[0x0]
800026e6:	30 de       	mov	lr,13
800026e8:	80 00       	ld.sh	r0,r0[0x0]
800026ea:	22 0c       	sub	r12,32

800026ec <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> OK
//!   The read failed (bad address, etc.)  -> KO
//!/
Bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
800026ec:	eb cd 40 f8 	pushm	r3-r7,lr
800026f0:	20 1d       	sub	sp,4
800026f2:	18 93       	mov	r3,r12
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
800026f4:	f0 1f 00 48 	mcall	80002814 <sd_mmc_spi_read_sector_to_ram+0x128>
800026f8:	e0 80 00 8a 	breq	8000280c <sd_mmc_spi_read_sector_to_ram+0x120>
    return KO;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800026fc:	30 1b       	mov	r11,1
800026fe:	fe 7c 24 00 	mov	r12,-56320
80002702:	f0 1f 00 46 	mcall	80002818 <sd_mmc_spi_read_sector_to_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002706:	4c 68       	lddpc	r8,8000281c <sd_mmc_spi_read_sector_to_ram+0x130>
80002708:	11 89       	ld.ub	r9,r8[0x0]
8000270a:	30 38       	mov	r8,3
8000270c:	f0 09 18 00 	cp.b	r9,r8
80002710:	c0 a1       	brne	80002724 <sd_mmc_spi_read_sector_to_ram+0x38>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80002712:	4c 48       	lddpc	r8,80002820 <sd_mmc_spi_read_sector_to_ram+0x134>
80002714:	70 0b       	ld.w	r11,r8[0x0]
80002716:	a9 9b       	lsr	r11,0x9
80002718:	31 1c       	mov	r12,17
8000271a:	f0 1f 00 43 	mcall	80002824 <sd_mmc_spi_read_sector_to_ram+0x138>
8000271e:	4c 38       	lddpc	r8,80002828 <sd_mmc_spi_read_sector_to_ram+0x13c>
80002720:	b0 8c       	st.b	r8[0x0],r12
80002722:	c0 88       	rjmp	80002732 <sd_mmc_spi_read_sector_to_ram+0x46>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80002724:	4b f8       	lddpc	r8,80002820 <sd_mmc_spi_read_sector_to_ram+0x134>
80002726:	70 0b       	ld.w	r11,r8[0x0]
80002728:	31 1c       	mov	r12,17
8000272a:	f0 1f 00 3f 	mcall	80002824 <sd_mmc_spi_read_sector_to_ram+0x138>
8000272e:	4b f8       	lddpc	r8,80002828 <sd_mmc_spi_read_sector_to_ram+0x13c>
80002730:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
80002732:	4b e8       	lddpc	r8,80002828 <sd_mmc_spi_read_sector_to_ram+0x13c>
80002734:	11 89       	ld.ub	r9,r8[0x0]
80002736:	30 08       	mov	r8,0
80002738:	f0 09 18 00 	cp.b	r9,r8
8000273c:	c1 20       	breq	80002760 <sd_mmc_spi_read_sector_to_ram+0x74>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000273e:	30 1b       	mov	r11,1
80002740:	fe 7c 24 00 	mov	r12,-56320
80002744:	f0 1f 00 3a 	mcall	8000282c <sd_mmc_spi_read_sector_to_ram+0x140>
80002748:	30 0c       	mov	r12,0
    return KO;
8000274a:	c6 18       	rjmp	8000280c <sd_mmc_spi_read_sector_to_ram+0x120>

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
8000274c:	20 17       	sub	r7,1
8000274e:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
80002750:	c0 e1       	brne	8000276c <sd_mmc_spi_read_sector_to_ram+0x80>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80002752:	30 1b       	mov	r11,1
80002754:	fe 7c 24 00 	mov	r12,-56320
80002758:	f0 1f 00 35 	mcall	8000282c <sd_mmc_spi_read_sector_to_ram+0x140>
8000275c:	30 0c       	mov	r12,0
       return KO;
8000275e:	c5 78       	rjmp	8000280c <sd_mmc_spi_read_sector_to_ram+0x120>
80002760:	e0 67 75 30 	mov	r7,30000
    return KO;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002764:	e0 65 00 ff 	mov	r5,255
80002768:	4b 04       	lddpc	r4,80002828 <sd_mmc_spi_read_sector_to_ram+0x13c>
8000276a:	3f f6       	mov	r6,-1
8000276c:	0a 9c       	mov	r12,r5
8000276e:	f0 1f 00 31 	mcall	80002830 <sd_mmc_spi_read_sector_to_ram+0x144>
80002772:	a8 8c       	st.b	r4[0x0],r12
80002774:	ec 0c 18 00 	cp.b	r12,r6
80002778:	ce a0       	breq	8000274c <sd_mmc_spi_read_sector_to_ram+0x60>
       return KO;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000277a:	3f e8       	mov	r8,-2
8000277c:	f0 0c 18 00 	cp.b	r12,r8
80002780:	c0 e0       	breq	8000279c <sd_mmc_spi_read_sector_to_ram+0xb0>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002782:	e0 6b 00 ff 	mov	r11,255
80002786:	fe 7c 24 00 	mov	r12,-56320
8000278a:	f0 1f 00 2b 	mcall	80002834 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000278e:	30 1b       	mov	r11,1
80002790:	fe 7c 24 00 	mov	r12,-56320
80002794:	f0 1f 00 26 	mcall	8000282c <sd_mmc_spi_read_sector_to_ram+0x140>
80002798:	30 0c       	mov	r12,0
    return KO;
8000279a:	c3 98       	rjmp	8000280c <sd_mmc_spi_read_sector_to_ram+0x120>
//!   The read succeeded   -> OK
//!   The read failed (bad address, etc.)  -> KO
//!/
Bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
  uint8_t *_ram = ram;
8000279c:	06 97       	mov	r7,r3
//!
//! @return bit
//!   The read succeeded   -> OK
//!   The read failed (bad address, etc.)  -> KO
//!/
Bool sd_mmc_spi_read_sector_to_ram(void *ram)
8000279e:	e6 c5 fe 00 	sub	r5,r3,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800027a2:	e0 64 00 ff 	mov	r4,255
800027a6:	fe 76 24 00 	mov	r6,-56320
    spi_read(SD_MMC_SPI,&data_read);
800027aa:	fa c3 ff fe 	sub	r3,sp,-2
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800027ae:	08 9b       	mov	r11,r4
800027b0:	0c 9c       	mov	r12,r6
800027b2:	f0 1f 00 21 	mcall	80002834 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_read(SD_MMC_SPI,&data_read);
800027b6:	06 9b       	mov	r11,r3
800027b8:	0c 9c       	mov	r12,r6
800027ba:	f0 1f 00 20 	mcall	80002838 <sd_mmc_spi_read_sector_to_ram+0x14c>
    *_ram++=data_read;
800027be:	9a 18       	ld.sh	r8,sp[0x2]
800027c0:	0e c8       	st.b	r7++,r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return KO;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800027c2:	0a 37       	cp.w	r7,r5
800027c4:	cf 51       	brne	800027ae <sd_mmc_spi_read_sector_to_ram+0xc2>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
800027c6:	49 78       	lddpc	r8,80002820 <sd_mmc_spi_read_sector_to_ram+0x134>
800027c8:	70 09       	ld.w	r9,r8[0x0]
800027ca:	f2 c9 fe 00 	sub	r9,r9,-512
800027ce:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
800027d0:	e0 6b 00 ff 	mov	r11,255
800027d4:	fe 7c 24 00 	mov	r12,-56320
800027d8:	f0 1f 00 17 	mcall	80002834 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
800027dc:	e0 6b 00 ff 	mov	r11,255
800027e0:	fe 7c 24 00 	mov	r12,-56320
800027e4:	f0 1f 00 14 	mcall	80002834 <sd_mmc_spi_read_sector_to_ram+0x148>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
800027e8:	e0 6b 00 ff 	mov	r11,255
800027ec:	fe 7c 24 00 	mov	r12,-56320
800027f0:	f0 1f 00 11 	mcall	80002834 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
800027f4:	e0 6b 00 ff 	mov	r11,255
800027f8:	fe 7c 24 00 	mov	r12,-56320
800027fc:	f0 1f 00 0e 	mcall	80002834 <sd_mmc_spi_read_sector_to_ram+0x148>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002800:	30 1b       	mov	r11,1
80002802:	fe 7c 24 00 	mov	r12,-56320
80002806:	f0 1f 00 0a 	mcall	8000282c <sd_mmc_spi_read_sector_to_ram+0x140>
8000280a:	30 1c       	mov	r12,1

  return OK;   // Read done.
}
8000280c:	2f fd       	sub	sp,-4
8000280e:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002812:	00 00       	add	r0,r0
80002814:	80 00       	ld.sh	r0,r0[0x0]
80002816:	22 40       	sub	r0,36
80002818:	80 00       	ld.sh	r0,r0[0x0]
8000281a:	30 92       	mov	r2,9
8000281c:	00 00       	add	r0,r0
8000281e:	04 02       	add	r2,r2
80002820:	00 00       	add	r0,r0
80002822:	00 e0       	st.h	--r0,r0
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	22 d8       	sub	r8,45
80002828:	00 00       	add	r0,r0
8000282a:	04 14       	sub	r4,r2
8000282c:	80 00       	ld.sh	r0,r0[0x0]
8000282e:	30 de       	mov	lr,13
80002830:	80 00       	ld.sh	r0,r0[0x0]
80002832:	22 0c       	sub	r12,32
80002834:	80 00       	ld.sh	r0,r0[0x0]
80002836:	31 c6       	mov	r6,28
80002838:	80 00       	ld.sh	r0,r0[0x0]
8000283a:	31 e2       	mov	r2,30

8000283c <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         OK / KO
Bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
8000283c:	eb cd 40 fc 	pushm	r2-r7,lr
80002840:	20 1d       	sub	sp,4
80002842:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
80002844:	f0 1f 00 32 	mcall	8000290c <sd_mmc_spi_get_csd+0xd0>
80002848:	c5 f0       	breq	80002906 <sd_mmc_spi_get_csd+0xca>
    return KO;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000284a:	30 1b       	mov	r11,1
8000284c:	fe 7c 24 00 	mov	r12,-56320
80002850:	f0 1f 00 30 	mcall	80002910 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80002854:	30 0b       	mov	r11,0
80002856:	30 9c       	mov	r12,9
80002858:	f0 1f 00 2f 	mcall	80002914 <sd_mmc_spi_get_csd+0xd8>
8000285c:	4a f8       	lddpc	r8,80002918 <sd_mmc_spi_get_csd+0xdc>
8000285e:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002860:	58 0c       	cp.w	r12,0
80002862:	c0 81       	brne	80002872 <sd_mmc_spi_get_csd+0x36>
80002864:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return KO;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002866:	e0 64 00 ff 	mov	r4,255
8000286a:	10 93       	mov	r3,r8
8000286c:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
8000286e:	30 95       	mov	r5,9
80002870:	c1 78       	rjmp	8000289e <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002872:	30 1b       	mov	r11,1
80002874:	fe 7c 24 00 	mov	r12,-56320
80002878:	f0 1f 00 29 	mcall	8000291c <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
8000287c:	30 09       	mov	r9,0
8000287e:	4a 98       	lddpc	r8,80002920 <sd_mmc_spi_get_csd+0xe4>
80002880:	b0 89       	st.b	r8[0x0],r9
80002882:	30 0c       	mov	r12,0
    return KO;
80002884:	c4 18       	rjmp	80002906 <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
80002886:	ea 07 18 00 	cp.b	r7,r5
8000288a:	c0 81       	brne	8000289a <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000288c:	30 1b       	mov	r11,1
8000288e:	fe 7c 24 00 	mov	r12,-56320
80002892:	f0 1f 00 23 	mcall	8000291c <sd_mmc_spi_get_csd+0xe0>
80002896:	30 0c       	mov	r12,0
      return KO;
80002898:	c3 78       	rjmp	80002906 <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
8000289a:	2f f7       	sub	r7,-1
8000289c:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return KO;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000289e:	08 9c       	mov	r12,r4
800028a0:	f0 1f 00 21 	mcall	80002924 <sd_mmc_spi_get_csd+0xe8>
800028a4:	a6 8c       	st.b	r3[0x0],r12
800028a6:	ec 0c 18 00 	cp.b	r12,r6
800028aa:	ce e1       	brne	80002886 <sd_mmc_spi_get_csd+0x4a>
800028ac:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800028ae:	e0 65 00 ff 	mov	r5,255
800028b2:	fe 76 24 00 	mov	r6,-56320
   spi_read(SD_MMC_SPI,&data_read);
800028b6:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800028ba:	0a 9b       	mov	r11,r5
800028bc:	0c 9c       	mov	r12,r6
800028be:	f0 1f 00 1b 	mcall	80002928 <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
800028c2:	08 9b       	mov	r11,r4
800028c4:	0c 9c       	mov	r12,r6
800028c6:	f0 1f 00 1a 	mcall	8000292c <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
800028ca:	9a 18       	ld.sh	r8,sp[0x2]
800028cc:	e4 07 0b 08 	st.b	r2[r7],r8
800028d0:	2f f7       	sub	r7,-1
      return KO;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
800028d2:	59 07       	cp.w	r7,16
800028d4:	cf 31       	brne	800028ba <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800028d6:	e0 6b 00 ff 	mov	r11,255
800028da:	fe 7c 24 00 	mov	r12,-56320
800028de:	f0 1f 00 13 	mcall	80002928 <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
800028e2:	e0 6b 00 ff 	mov	r11,255
800028e6:	fe 7c 24 00 	mov	r12,-56320
800028ea:	f0 1f 00 10 	mcall	80002928 <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800028ee:	e0 6b 00 ff 	mov	r11,255
800028f2:	fe 7c 24 00 	mov	r12,-56320
800028f6:	f0 1f 00 0d 	mcall	80002928 <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800028fa:	30 1b       	mov	r11,1
800028fc:	fe 7c 24 00 	mov	r12,-56320
80002900:	f0 1f 00 07 	mcall	8000291c <sd_mmc_spi_get_csd+0xe0>
80002904:	30 1c       	mov	r12,1
  return OK;
}
80002906:	2f fd       	sub	sp,-4
80002908:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
8000290c:	80 00       	ld.sh	r0,r0[0x0]
8000290e:	22 40       	sub	r0,36
80002910:	80 00       	ld.sh	r0,r0[0x0]
80002912:	30 92       	mov	r2,9
80002914:	80 00       	ld.sh	r0,r0[0x0]
80002916:	22 d8       	sub	r8,45
80002918:	00 00       	add	r0,r0
8000291a:	04 14       	sub	r4,r2
8000291c:	80 00       	ld.sh	r0,r0[0x0]
8000291e:	30 de       	mov	lr,13
80002920:	00 00       	add	r0,r0
80002922:	00 f8       	st.b	--r0,r8
80002924:	80 00       	ld.sh	r0,r0[0x0]
80002926:	22 0c       	sub	r12,32
80002928:	80 00       	ld.sh	r0,r0[0x0]
8000292a:	31 c6       	mov	r6,28
8000292c:	80 00       	ld.sh	r0,r0[0x0]
8000292e:	31 e2       	mov	r2,30

80002930 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> OK (always)
Bool sd_mmc_spi_internal_init(void)
{
80002930:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002932:	fe fb 02 6a 	ld.w	r11,pc[618]
80002936:	e6 68 1a 80 	mov	r8,400000
8000293a:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
8000293c:	fe f8 02 64 	ld.w	r8,pc[612]
80002940:	70 0a       	ld.w	r10,r8[0x0]
80002942:	fe 7c 24 00 	mov	r12,-56320
80002946:	f0 1f 00 98 	mcall	80002ba4 <sd_mmc_spi_internal_init+0x274>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000294a:	30 1b       	mov	r11,1
8000294c:	fe 7c 24 00 	mov	r12,-56320
80002950:	f0 1f 00 96 	mcall	80002ba8 <sd_mmc_spi_internal_init+0x278>
80002954:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
80002956:	e0 66 00 ff 	mov	r6,255
8000295a:	fe 75 24 00 	mov	r5,-56320
8000295e:	0c 9b       	mov	r11,r6
80002960:	0a 9c       	mov	r12,r5
80002962:	f0 1f 00 93 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
80002966:	2f f7       	sub	r7,-1
80002968:	58 a7       	cp.w	r7,10
8000296a:	cf a1       	brne	8000295e <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000296c:	30 1b       	mov	r11,1
8000296e:	fe 7c 24 00 	mov	r12,-56320
80002972:	f0 1f 00 90 	mcall	80002bb0 <sd_mmc_spi_internal_init+0x280>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
80002976:	30 08       	mov	r8,0
80002978:	fe f9 02 3c 	ld.w	r9,pc[572]
8000297c:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
8000297e:	fe f9 02 3a 	ld.w	r9,pc[570]
80002982:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002984:	30 0b       	mov	r11,0
80002986:	16 9c       	mov	r12,r11
80002988:	f0 1f 00 8d 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
8000298c:	fe f8 02 34 	ld.w	r8,pc[564]
80002990:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002992:	e0 6b 00 ff 	mov	r11,255
80002996:	fe 7c 24 00 	mov	r12,-56320
8000299a:	f0 1f 00 85 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
8000299e:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return KO;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800029a0:	fe f6 02 20 	ld.w	r6,pc[544]
800029a4:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800029a6:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029a8:	e0 62 00 ff 	mov	r2,255
800029ac:	fe 71 24 00 	mov	r1,-56320
    // do retry counter
    retry++;
    if(retry > 100)
800029b0:	36 54       	mov	r4,101
800029b2:	c1 08       	rjmp	800029d2 <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800029b4:	06 9b       	mov	r11,r3
800029b6:	06 9c       	mov	r12,r3
800029b8:	f0 1f 00 81 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
800029bc:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029be:	04 9b       	mov	r11,r2
800029c0:	02 9c       	mov	r12,r1
800029c2:	f0 1f 00 7b 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
    // do retry counter
    retry++;
800029c6:	2f f7       	sub	r7,-1
800029c8:	5c 87       	casts.h	r7
    if(retry > 100)
800029ca:	e8 07 19 00 	cp.h	r7,r4
800029ce:	e0 80 00 e5 	breq	80002b98 <sd_mmc_spi_internal_init+0x268>
      return KO;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800029d2:	0d 88       	ld.ub	r8,r6[0x0]
800029d4:	ea 08 18 00 	cp.b	r8,r5
800029d8:	ce e1       	brne	800029b4 <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
800029da:	f0 1f 00 7b 	mcall	80002bc4 <sd_mmc_spi_internal_init+0x294>
  if(if_cond == -1) {
800029de:	5b fc       	cp.w	r12,-1
800029e0:	e0 80 00 dc 	breq	80002b98 <sd_mmc_spi_internal_init+0x268>
      return KO; // card is bad
  } else if (if_cond == 1) {
800029e4:	58 1c       	cp.w	r12,1
800029e6:	c0 51       	brne	800029f0 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
800029e8:	30 29       	mov	r9,2
800029ea:	4f 48       	lddpc	r8,80002bb8 <sd_mmc_spi_internal_init+0x288>
800029ec:	b0 89       	st.b	r8[0x0],r9
800029ee:	c4 c8       	rjmp	80002a86 <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029f0:	30 0b       	mov	r11,0
800029f2:	33 7c       	mov	r12,55
800029f4:	f0 1f 00 72 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
800029f8:	4f 27       	lddpc	r7,80002bc0 <sd_mmc_spi_internal_init+0x290>
800029fa:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
800029fc:	e0 6b 00 ff 	mov	r11,255
80002a00:	fe 7c 24 00 	mov	r12,-56320
80002a04:	f0 1f 00 6a 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002a08:	30 0b       	mov	r11,0
80002a0a:	32 9c       	mov	r12,41
80002a0c:	f0 1f 00 6c 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002a10:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002a12:	e0 6b 00 ff 	mov	r11,255
80002a16:	fe 7c 24 00 	mov	r12,-56320
80002a1a:	f0 1f 00 65 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002a1e:	0f 88       	ld.ub	r8,r7[0x0]
80002a20:	e2 18 00 fe 	andl	r8,0xfe,COH
80002a24:	c0 51       	brne	80002a2e <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
80002a26:	30 19       	mov	r9,1
80002a28:	4e 48       	lddpc	r8,80002bb8 <sd_mmc_spi_internal_init+0x288>
80002a2a:	b0 89       	st.b	r8[0x0],r9
80002a2c:	c2 d8       	rjmp	80002a86 <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80002a2e:	30 09       	mov	r9,0
80002a30:	4e 28       	lddpc	r8,80002bb8 <sd_mmc_spi_internal_init+0x288>
80002a32:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002a34:	30 0b       	mov	r11,0
80002a36:	16 9c       	mov	r12,r11
80002a38:	f0 1f 00 61 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002a3c:	4e 18       	lddpc	r8,80002bc0 <sd_mmc_spi_internal_init+0x290>
80002a3e:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a40:	e0 6b 00 ff 	mov	r11,255
80002a44:	fe 7c 24 00 	mov	r12,-56320
80002a48:	f0 1f 00 59 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
80002a4c:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return KO;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002a4e:	4d d6       	lddpc	r6,80002bc0 <sd_mmc_spi_internal_init+0x290>
80002a50:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002a52:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a54:	e0 62 00 ff 	mov	r2,255
80002a58:	fe 71 24 00 	mov	r1,-56320
        // do retry counter
        retry++;
        if(retry > 100)
80002a5c:	36 54       	mov	r4,101
80002a5e:	c1 08       	rjmp	80002a7e <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002a60:	06 9b       	mov	r11,r3
80002a62:	06 9c       	mov	r12,r3
80002a64:	f0 1f 00 56 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002a68:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a6a:	04 9b       	mov	r11,r2
80002a6c:	02 9c       	mov	r12,r1
80002a6e:	f0 1f 00 50 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
        // do retry counter
        retry++;
80002a72:	2f f7       	sub	r7,-1
80002a74:	5c 87       	casts.h	r7
        if(retry > 100)
80002a76:	e8 07 19 00 	cp.h	r7,r4
80002a7a:	e0 80 00 8f 	breq	80002b98 <sd_mmc_spi_internal_init+0x268>
          return KO;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002a7e:	0d 88       	ld.ub	r8,r6[0x0]
80002a80:	ea 08 18 00 	cp.b	r8,r5
80002a84:	ce e1       	brne	80002a60 <sd_mmc_spi_internal_init+0x130>
80002a86:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80002a88:	4c c4       	lddpc	r4,80002bb8 <sd_mmc_spi_internal_init+0x288>
80002a8a:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002a8c:	0e 93       	mov	r3,r7
80002a8e:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002a90:	4c c6       	lddpc	r6,80002bc0 <sd_mmc_spi_internal_init+0x290>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a92:	e0 62 00 ff 	mov	r2,255
80002a96:	fe 71 24 00 	mov	r1,-56320

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80002a9a:	09 88       	ld.ub	r8,r4[0x0]
80002a9c:	ea 08 18 00 	cp.b	r8,r5
80002aa0:	c1 10       	breq	80002ac2 <sd_mmc_spi_internal_init+0x192>
80002aa2:	c0 63       	brcs	80002aae <sd_mmc_spi_internal_init+0x17e>
80002aa4:	30 29       	mov	r9,2
80002aa6:	f2 08 18 00 	cp.b	r8,r9
80002aaa:	c2 91       	brne	80002afc <sd_mmc_spi_internal_init+0x1cc>
80002aac:	c1 98       	rjmp	80002ade <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
80002aae:	06 9b       	mov	r11,r3
80002ab0:	30 1c       	mov	r12,1
80002ab2:	f0 1f 00 43 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002ab6:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002ab8:	04 9b       	mov	r11,r2
80002aba:	02 9c       	mov	r12,r1
80002abc:	f0 1f 00 3c 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
      break;
80002ac0:	c1 e8       	rjmp	80002afc <sd_mmc_spi_internal_init+0x1cc>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002ac2:	06 9b       	mov	r11,r3
80002ac4:	00 9c       	mov	r12,r0
80002ac6:	f0 1f 00 3e 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002aca:	06 9b       	mov	r11,r3
80002acc:	32 9c       	mov	r12,41
80002ace:	f0 1f 00 3c 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002ad2:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002ad4:	04 9b       	mov	r11,r2
80002ad6:	02 9c       	mov	r12,r1
80002ad8:	f0 1f 00 35 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
      break;
80002adc:	c1 08       	rjmp	80002afc <sd_mmc_spi_internal_init+0x1cc>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002ade:	06 9b       	mov	r11,r3
80002ae0:	00 9c       	mov	r12,r0
80002ae2:	f0 1f 00 37 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
80002ae6:	30 0b       	mov	r11,0
80002ae8:	ea 1b 40 00 	orh	r11,0x4000
80002aec:	32 9c       	mov	r12,41
80002aee:	f0 1f 00 34 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002af2:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002af4:	04 9b       	mov	r11,r2
80002af6:	02 9c       	mov	r12,r1
80002af8:	f0 1f 00 2d 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
      break;
    }
     // do retry counter
     retry++;
80002afc:	2f f7       	sub	r7,-1
80002afe:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
80002b00:	fe 78 c3 50 	mov	r8,-15536
80002b04:	f0 07 19 00 	cp.h	r7,r8
80002b08:	c4 80       	breq	80002b98 <sd_mmc_spi_internal_init+0x268>
        return KO;
  } while (r1);
80002b0a:	0d 89       	ld.ub	r9,r6[0x0]
80002b0c:	30 08       	mov	r8,0
80002b0e:	f0 09 18 00 	cp.b	r9,r8
80002b12:	cc 41       	brne	80002a9a <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80002b14:	4a 98       	lddpc	r8,80002bb8 <sd_mmc_spi_internal_init+0x288>
80002b16:	11 89       	ld.ub	r9,r8[0x0]
80002b18:	30 28       	mov	r8,2
80002b1a:	f0 09 18 00 	cp.b	r9,r8
80002b1e:	c0 a1       	brne	80002b32 <sd_mmc_spi_internal_init+0x202>
    if_cond = sd_mmc_spi_check_hc();
80002b20:	f0 1f 00 2a 	mcall	80002bc8 <sd_mmc_spi_internal_init+0x298>
    if (if_cond == -1) {
80002b24:	5b fc       	cp.w	r12,-1
80002b26:	c3 90       	breq	80002b98 <sd_mmc_spi_internal_init+0x268>
      return KO;
    } else if (if_cond == 1){
80002b28:	58 1c       	cp.w	r12,1
80002b2a:	c0 41       	brne	80002b32 <sd_mmc_spi_internal_init+0x202>
          card_type = SD_CARD_2_SDHC;
80002b2c:	30 39       	mov	r9,3
80002b2e:	4a 38       	lddpc	r8,80002bb8 <sd_mmc_spi_internal_init+0x288>
80002b30:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80002b32:	30 0b       	mov	r11,0
80002b34:	33 bc       	mov	r12,59
80002b36:	f0 1f 00 22 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002b3a:	4a 27       	lddpc	r7,80002bc0 <sd_mmc_spi_internal_init+0x290>
80002b3c:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002b3e:	e0 6b 00 ff 	mov	r11,255
80002b42:	fe 7c 24 00 	mov	r12,-56320
80002b46:	f0 1f 00 1a 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002b4a:	e0 6b 02 00 	mov	r11,512
80002b4e:	31 0c       	mov	r12,16
80002b50:	f0 1f 00 1b 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002b54:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002b56:	e0 6b 00 ff 	mov	r11,255
80002b5a:	fe 7c 24 00 	mov	r12,-56320
80002b5e:	f0 1f 00 14 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
  if (r1 != 0x00)
80002b62:	0f 89       	ld.ub	r9,r7[0x0]
80002b64:	30 08       	mov	r8,0
80002b66:	f0 09 18 00 	cp.b	r9,r8
80002b6a:	c1 71       	brne	80002b98 <sd_mmc_spi_internal_init+0x268>
    return KO;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (KO ==  sd_mmc_spi_get_csd(csd))
80002b6c:	49 8c       	lddpc	r12,80002bcc <sd_mmc_spi_internal_init+0x29c>
80002b6e:	f0 1f 00 19 	mcall	80002bd0 <sd_mmc_spi_internal_init+0x2a0>
80002b72:	c1 30       	breq	80002b98 <sd_mmc_spi_internal_init+0x268>
    return KO;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002b74:	f0 1f 00 18 	mcall	80002bd4 <sd_mmc_spi_internal_init+0x2a4>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == ENABLED)
  if (KO ==  sd_mmc_spi_get_cid(cid))
    return KO;
#endif

  sd_mmc_spi_init_done = true;
80002b78:	30 19       	mov	r9,1
80002b7a:	48 f8       	lddpc	r8,80002bb4 <sd_mmc_spi_internal_init+0x284>
80002b7c:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80002b7e:	48 8b       	lddpc	r11,80002b9c <sd_mmc_spi_internal_init+0x26c>
80002b80:	e0 68 1b 00 	mov	r8,6912
80002b84:	ea 18 00 b7 	orh	r8,0xb7
80002b88:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002b8a:	48 68       	lddpc	r8,80002ba0 <sd_mmc_spi_internal_init+0x270>
80002b8c:	70 0a       	ld.w	r10,r8[0x0]
80002b8e:	fe 7c 24 00 	mov	r12,-56320
80002b92:	f0 1f 00 05 	mcall	80002ba4 <sd_mmc_spi_internal_init+0x274>
80002b96:	da 3a       	popm	r0-r7,pc,r12=1
  return OK;
80002b98:	d8 3a       	popm	r0-r7,pc,r12=0
80002b9a:	00 00       	add	r0,r0
80002b9c:	00 00       	add	r0,r0
80002b9e:	00 e4       	st.h	--r0,r4
80002ba0:	00 00       	add	r0,r0
80002ba2:	00 f4       	st.b	--r0,r4
80002ba4:	80 00       	ld.sh	r0,r0[0x0]
80002ba6:	31 08       	mov	r8,16
80002ba8:	80 00       	ld.sh	r0,r0[0x0]
80002baa:	30 92       	mov	r2,9
80002bac:	80 00       	ld.sh	r0,r0[0x0]
80002bae:	31 c6       	mov	r6,28
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	30 de       	mov	lr,13
80002bb4:	00 00       	add	r0,r0
80002bb6:	00 f8       	st.b	--r0,r8
80002bb8:	00 00       	add	r0,r0
80002bba:	04 02       	add	r2,r2
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	23 a0       	sub	r0,58
80002bc0:	00 00       	add	r0,r0
80002bc2:	04 14       	sub	r4,r2
80002bc4:	80 00       	ld.sh	r0,r0[0x0]
80002bc6:	26 34       	sub	r4,99
80002bc8:	80 00       	ld.sh	r0,r0[0x0]
80002bca:	25 a8       	sub	r8,90
80002bcc:	00 00       	add	r0,r0
80002bce:	04 04       	add	r4,r2
80002bd0:	80 00       	ld.sh	r0,r0[0x0]
80002bd2:	28 3c       	sub	r12,-125
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	21 00       	sub	r0,16

80002bd8 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> OK
//!   The memory check failed -> KO
Bool sd_mmc_spi_mem_check(void)
{
80002bd8:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence() == OK)
80002bda:	f0 1f 00 09 	mcall	80002bfc <sd_mmc_spi_mem_check+0x24>
80002bde:	30 18       	mov	r8,1
80002be0:	f0 0c 18 00 	cp.b	r12,r8
80002be4:	c0 20       	breq	80002be8 <sd_mmc_spi_mem_check+0x10>
80002be6:	d8 0a       	popm	pc,r12=0
  {
    if (sd_mmc_spi_init_done == false)
80002be8:	48 68       	lddpc	r8,80002c00 <sd_mmc_spi_mem_check+0x28>
80002bea:	11 89       	ld.ub	r9,r8[0x0]
80002bec:	30 08       	mov	r8,0
80002bee:	f0 09 18 00 	cp.b	r9,r8
80002bf2:	c0 20       	breq	80002bf6 <sd_mmc_spi_mem_check+0x1e>
80002bf4:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80002bf6:	f0 1f 00 04 	mcall	80002c04 <sd_mmc_spi_mem_check+0x2c>
    }
    else
      return OK;
  }
  return KO;
}
80002bfa:	d8 02       	popm	pc
80002bfc:	80 00       	ld.sh	r0,r0[0x0]
80002bfe:	23 e0       	sub	r0,62
80002c00:	00 00       	add	r0,r0
80002c02:	00 f8       	st.b	--r0,r8
80002c04:	80 00       	ld.sh	r0,r0[0x0]
80002c06:	29 30       	sub	r0,-109

80002c08 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> OK (always)
Bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80002c08:	eb cd 40 10 	pushm	r4,lr
80002c0c:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
80002c10:	48 88       	lddpc	r8,80002c30 <sd_mmc_spi_init+0x28>
80002c12:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002c14:	48 88       	lddpc	r8,80002c34 <sd_mmc_spi_init+0x2c>
80002c16:	e8 ea 00 00 	ld.d	r10,r4[0]
80002c1a:	f0 eb 00 00 	st.d	r8[0],r10
80002c1e:	e8 ea 00 08 	ld.d	r10,r4[8]
80002c22:	f0 eb 00 08 	st.d	r8[8],r10

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80002c26:	f0 1f 00 05 	mcall	80002c38 <sd_mmc_spi_init+0x30>
}
80002c2a:	e3 cd 80 10 	ldm	sp++,r4,pc
80002c2e:	00 00       	add	r0,r0
80002c30:	00 00       	add	r0,r0
80002c32:	00 f4       	st.b	--r0,r4
80002c34:	00 00       	add	r0,r0
80002c36:	00 e4       	st.h	--r0,r4
80002c38:	80 00       	ld.sh	r0,r0[0x0]
80002c3a:	29 30       	sub	r0,-109

80002c3c <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
Bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
80002c3c:	5e fd       	retal	0

80002c3e <sd_mmc_spi_removal>:
//!/
Bool  sd_mmc_spi_removal(void)
{
  return false;
//  return ((OK == sd_mmc_spi_check_presence()) ? false : true);
}
80002c3e:	5e fd       	retal	0

80002c40 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80002c40:	d4 01       	pushm	lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80002c42:	49 b8       	lddpc	r8,80002cac <sd_mmc_spi_test_unit_ready+0x6c>
80002c44:	11 88       	ld.ub	r8,r8[0x0]
80002c46:	30 19       	mov	r9,1
80002c48:	f2 08 18 00 	cp.b	r8,r9
80002c4c:	c1 70       	breq	80002c7a <sd_mmc_spi_test_unit_ready+0x3a>
80002c4e:	c0 63       	brcs	80002c5a <sd_mmc_spi_test_unit_ready+0x1a>
80002c50:	30 29       	mov	r9,2
80002c52:	f2 08 18 00 	cp.b	r8,r9
80002c56:	c2 61       	brne	80002ca2 <sd_mmc_spi_test_unit_ready+0x62>
80002c58:	c2 08       	rjmp	80002c98 <sd_mmc_spi_test_unit_ready+0x58>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80002c5a:	30 09       	mov	r9,0
80002c5c:	49 58       	lddpc	r8,80002cb0 <sd_mmc_spi_test_unit_ready+0x70>
80002c5e:	b0 89       	st.b	r8[0x0],r9
      if (OK == sd_mmc_spi_mem_check())
80002c60:	f0 1f 00 15 	mcall	80002cb4 <sd_mmc_spi_test_unit_ready+0x74>
80002c64:	30 18       	mov	r8,1
80002c66:	f0 0c 18 00 	cp.b	r12,r8
80002c6a:	c0 30       	breq	80002c70 <sd_mmc_spi_test_unit_ready+0x30>
80002c6c:	30 2c       	mov	r12,2
80002c6e:	d8 02       	popm	pc
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80002c70:	30 19       	mov	r9,1
80002c72:	48 f8       	lddpc	r8,80002cac <sd_mmc_spi_test_unit_ready+0x6c>
80002c74:	b0 89       	st.b	r8[0x0],r9
80002c76:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002c78:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (OK != sd_mmc_spi_mem_check())
80002c7a:	f0 1f 00 0f 	mcall	80002cb4 <sd_mmc_spi_test_unit_ready+0x74>
80002c7e:	30 18       	mov	r8,1
80002c80:	f0 0c 18 00 	cp.b	r12,r8
80002c84:	c0 21       	brne	80002c88 <sd_mmc_spi_test_unit_ready+0x48>
80002c86:	d8 0a       	popm	pc,r12=0
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80002c88:	30 29       	mov	r9,2
80002c8a:	48 98       	lddpc	r8,80002cac <sd_mmc_spi_test_unit_ready+0x6c>
80002c8c:	b0 89       	st.b	r8[0x0],r9
        sd_mmc_spi_init_done = false;
80002c8e:	30 09       	mov	r9,0
80002c90:	48 88       	lddpc	r8,80002cb0 <sd_mmc_spi_test_unit_ready+0x70>
80002c92:	b0 89       	st.b	r8[0x0],r9
80002c94:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80002c96:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002c98:	30 09       	mov	r9,0
80002c9a:	48 58       	lddpc	r8,80002cac <sd_mmc_spi_test_unit_ready+0x6c>
80002c9c:	b0 89       	st.b	r8[0x0],r9
80002c9e:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80002ca0:	d8 02       	popm	pc

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80002ca2:	30 09       	mov	r9,0
80002ca4:	48 28       	lddpc	r8,80002cac <sd_mmc_spi_test_unit_ready+0x6c>
80002ca6:	b0 89       	st.b	r8[0x0],r9
80002ca8:	30 3c       	mov	r12,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80002caa:	d8 02       	popm	pc
80002cac:	00 00       	add	r0,r0
80002cae:	00 0c       	add	r12,r0
80002cb0:	00 00       	add	r0,r0
80002cb2:	00 f8       	st.b	--r0,r8
80002cb4:	80 00       	ld.sh	r0,r0[0x0]
80002cb6:	2b d8       	sub	r8,-67

80002cb8 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
80002cb8:	d4 01       	pushm	lr
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80002cba:	f0 1f 00 02 	mcall	80002cc0 <sd_mmc_spi_mem_init+0x8>
}
80002cbe:	d8 02       	popm	pc
80002cc0:	80 00       	ld.sh	r0,r0[0x0]
80002cc2:	29 30       	sub	r0,-109

80002cc4 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80002cc4:	eb cd 40 c0 	pushm	r6-r7,lr
80002cc8:	18 96       	mov	r6,r12
80002cca:	16 97       	mov	r7,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002ccc:	f0 1f 00 12 	mcall	80002d14 <sd_mmc_spi_ram_2_mem+0x50>

   if (sd_mmc_spi_init_done == false)
80002cd0:	49 28       	lddpc	r8,80002d18 <sd_mmc_spi_ram_2_mem+0x54>
80002cd2:	11 89       	ld.ub	r9,r8[0x0]
80002cd4:	30 08       	mov	r8,0
80002cd6:	f0 09 18 00 	cp.b	r9,r8
80002cda:	c0 31       	brne	80002ce0 <sd_mmc_spi_ram_2_mem+0x1c>
   {
      sd_mmc_spi_mem_init();
80002cdc:	f0 1f 00 10 	mcall	80002d1c <sd_mmc_spi_ram_2_mem+0x58>
   }

   if (sd_mmc_spi_init_done == true)
80002ce0:	48 e8       	lddpc	r8,80002d18 <sd_mmc_spi_ram_2_mem+0x54>
80002ce2:	11 89       	ld.ub	r9,r8[0x0]
80002ce4:	30 18       	mov	r8,1
80002ce6:	f0 09 18 00 	cp.b	r9,r8
80002cea:	c0 40       	breq	80002cf2 <sd_mmc_spi_ram_2_mem+0x2e>
80002cec:	30 2c       	mov	r12,2
80002cee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   {
     sd_mmc_spi_write_open(addr);
80002cf2:	0c 9c       	mov	r12,r6
80002cf4:	f0 1f 00 0b 	mcall	80002d20 <sd_mmc_spi_ram_2_mem+0x5c>
     if (KO == sd_mmc_spi_write_sector_from_ram(ram))
80002cf8:	0e 9c       	mov	r12,r7
80002cfa:	f0 1f 00 0b 	mcall	80002d24 <sd_mmc_spi_ram_2_mem+0x60>
80002cfe:	c0 61       	brne	80002d0a <sd_mmc_spi_ram_2_mem+0x46>
     {
       sd_mmc_spi_write_close();
80002d00:	f0 1f 00 0a 	mcall	80002d28 <sd_mmc_spi_ram_2_mem+0x64>
80002d04:	30 2c       	mov	r12,2
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80002d06:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     sd_mmc_spi_write_close();
80002d0a:	f0 1f 00 08 	mcall	80002d28 <sd_mmc_spi_ram_2_mem+0x64>
80002d0e:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002d12:	00 00       	add	r0,r0
80002d14:	80 00       	ld.sh	r0,r0[0x0]
80002d16:	23 e0       	sub	r0,62
80002d18:	00 00       	add	r0,r0
80002d1a:	00 f8       	st.b	--r0,r8
80002d1c:	80 00       	ld.sh	r0,r0[0x0]
80002d1e:	2c b8       	sub	r8,-53
80002d20:	80 00       	ld.sh	r0,r0[0x0]
80002d22:	22 98       	sub	r8,41
80002d24:	80 00       	ld.sh	r0,r0[0x0]
80002d26:	24 5c       	sub	r12,69
80002d28:	80 00       	ld.sh	r0,r0[0x0]
80002d2a:	22 08       	sub	r8,32

80002d2c <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == ENABLED

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80002d2c:	eb cd 40 c0 	pushm	r6-r7,lr
80002d30:	18 97       	mov	r7,r12
80002d32:	16 96       	mov	r6,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80002d34:	f0 1f 00 11 	mcall	80002d78 <sd_mmc_spi_mem_2_ram+0x4c>

   if (sd_mmc_spi_init_done == false)
80002d38:	49 18       	lddpc	r8,80002d7c <sd_mmc_spi_mem_2_ram+0x50>
80002d3a:	11 89       	ld.ub	r9,r8[0x0]
80002d3c:	30 08       	mov	r8,0
80002d3e:	f0 09 18 00 	cp.b	r9,r8
80002d42:	c0 31       	brne	80002d48 <sd_mmc_spi_mem_2_ram+0x1c>
   {
      sd_mmc_spi_mem_init();
80002d44:	f0 1f 00 0f 	mcall	80002d80 <sd_mmc_spi_mem_2_ram+0x54>
   }

   if (sd_mmc_spi_init_done != true)
80002d48:	48 d8       	lddpc	r8,80002d7c <sd_mmc_spi_mem_2_ram+0x50>
80002d4a:	11 89       	ld.ub	r9,r8[0x0]
80002d4c:	30 18       	mov	r8,1
80002d4e:	f0 09 18 00 	cp.b	r9,r8
80002d52:	c0 40       	breq	80002d5a <sd_mmc_spi_mem_2_ram+0x2e>
80002d54:	30 2c       	mov	r12,2
80002d56:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80002d5a:	0e 9c       	mov	r12,r7
80002d5c:	f0 1f 00 0a 	mcall	80002d84 <sd_mmc_spi_mem_2_ram+0x58>
80002d60:	c0 a0       	breq	80002d74 <sd_mmc_spi_mem_2_ram+0x48>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80002d62:	0c 9c       	mov	r12,r6
80002d64:	f0 1f 00 09 	mcall	80002d88 <sd_mmc_spi_mem_2_ram+0x5c>
80002d68:	c0 60       	breq	80002d74 <sd_mmc_spi_mem_2_ram+0x48>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80002d6a:	f0 1f 00 09 	mcall	80002d8c <sd_mmc_spi_mem_2_ram+0x60>
80002d6e:	5f 0c       	sreq	r12
80002d70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d74:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80002d78:	80 00       	ld.sh	r0,r0[0x0]
80002d7a:	23 e0       	sub	r0,62
80002d7c:	00 00       	add	r0,r0
80002d7e:	00 f8       	st.b	--r0,r8
80002d80:	80 00       	ld.sh	r0,r0[0x0]
80002d82:	2c b8       	sub	r8,-53
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	22 c0       	sub	r0,44
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	26 ec       	sub	r12,110
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	22 b0       	sub	r0,43

80002d90 <sd_mmc_spi_read_capacity>:
}



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
80002d90:	eb cd 40 80 	pushm	r7,lr
80002d94:	18 97       	mov	r7,r12
//   sd_mmc_spi_check_presence();   // ommited because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (sd_mmc_spi_init_done == false)
80002d96:	48 c8       	lddpc	r8,80002dc4 <sd_mmc_spi_read_capacity+0x34>
80002d98:	11 89       	ld.ub	r9,r8[0x0]
80002d9a:	30 08       	mov	r8,0
80002d9c:	f0 09 18 00 	cp.b	r9,r8
80002da0:	c0 31       	brne	80002da6 <sd_mmc_spi_read_capacity+0x16>
   {
      sd_mmc_spi_mem_init();
80002da2:	f0 1f 00 0a 	mcall	80002dc8 <sd_mmc_spi_read_capacity+0x38>
   }

   if (sd_mmc_spi_init_done == true)
80002da6:	48 88       	lddpc	r8,80002dc4 <sd_mmc_spi_read_capacity+0x34>
80002da8:	11 89       	ld.ub	r9,r8[0x0]
80002daa:	30 18       	mov	r8,1
80002dac:	f0 09 18 00 	cp.b	r9,r8
80002db0:	c0 40       	breq	80002db8 <sd_mmc_spi_read_capacity+0x28>
80002db2:	30 2c       	mov	r12,2
80002db4:	e3 cd 80 80 	ldm	sp++,r7,pc
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80002db8:	48 58       	lddpc	r8,80002dcc <sd_mmc_spi_read_capacity+0x3c>
80002dba:	70 08       	ld.w	r8,r8[0x0]
80002dbc:	2f f8       	sub	r8,-1
80002dbe:	8f 08       	st.w	r7[0x0],r8
80002dc0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80002dc4:	00 00       	add	r0,r0
80002dc6:	00 f8       	st.b	--r0,r8
80002dc8:	80 00       	ld.sh	r0,r0[0x0]
80002dca:	2c b8       	sub	r8,-53
80002dcc:	00 00       	add	r0,r0
80002dce:	03 fc       	ld.ub	r12,r1[0x7]

80002dd0 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002dd0:	fe 68 14 00 	mov	r8,-125952
80002dd4:	70 09       	ld.w	r9,r8[0x0]
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80002dd6:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002dda:	91 09       	st.w	r8[0x0],r9
}
80002ddc:	5e fc       	retal	r12
80002dde:	d7 03       	nop

80002de0 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80002de0:	d4 01       	pushm	lr
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
80002de2:	e0 68 8a 3f 	mov	r8,35391
80002de6:	ea 18 01 f7 	orh	r8,0x1f7
80002dea:	10 3c       	cp.w	r12,r8
80002dec:	e0 88 00 06 	brls	80002df8 <flashc_set_bus_freq+0x18>
  {
    // Set 1 WS.
    flashc_set_wait_state(1);
80002df0:	30 1c       	mov	r12,1
80002df2:	f0 1f 00 04 	mcall	80002e00 <flashc_set_bus_freq+0x20>
80002df6:	d8 02       	popm	pc
  }
  else
  {
    // Set 0 WS.
    flashc_set_wait_state(0);
80002df8:	30 0c       	mov	r12,0
80002dfa:	f0 1f 00 02 	mcall	80002e00 <flashc_set_bus_freq+0x20>
80002dfe:	d8 02       	popm	pc
80002e00:	80 00       	ld.sh	r0,r0[0x0]
80002e02:	2d d0       	sub	r0,-35

80002e04 <gpio_enable_module_pin>:
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002e04:	f8 08 16 05 	lsr	r8,r12,0x5
80002e08:	a9 68       	lsl	r8,0x8
80002e0a:	e0 28 f0 00 	sub	r8,61440

  // Enable the correct function.
  switch (function)
80002e0e:	58 1b       	cp.w	r11,1
80002e10:	c0 d0       	breq	80002e2a <gpio_enable_module_pin+0x26>
80002e12:	c0 63       	brcs	80002e1e <gpio_enable_module_pin+0x1a>
80002e14:	58 2b       	cp.w	r11,2
80002e16:	c1 00       	breq	80002e36 <gpio_enable_module_pin+0x32>
80002e18:	58 3b       	cp.w	r11,3
80002e1a:	c1 40       	breq	80002e42 <gpio_enable_module_pin+0x3e>
80002e1c:	5e ff       	retal	1
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80002e1e:	30 19       	mov	r9,1
80002e20:	f2 0c 09 49 	lsl	r9,r9,r12
80002e24:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002e26:	91 a9       	st.w	r8[0x28],r9
#if defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_211_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80002e28:	c1 28       	rjmp	80002e4c <gpio_enable_module_pin+0x48>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002e2a:	30 19       	mov	r9,1
80002e2c:	f2 0c 09 49 	lsl	r9,r9,r12
80002e30:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80002e32:	91 a9       	st.w	r8[0x28],r9
#if defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_211_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80002e34:	c0 c8       	rjmp	80002e4c <gpio_enable_module_pin+0x48>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80002e36:	30 19       	mov	r9,1
80002e38:	f2 0c 09 49 	lsl	r9,r9,r12
80002e3c:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002e3e:	91 99       	st.w	r8[0x24],r9
#if defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_211_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80002e40:	c0 68       	rjmp	80002e4c <gpio_enable_module_pin+0x48>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80002e42:	30 19       	mov	r9,1
80002e44:	f2 0c 09 49 	lsl	r9,r9,r12
80002e48:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80002e4a:	91 99       	st.w	r8[0x24],r9
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80002e4c:	30 19       	mov	r9,1
80002e4e:	f2 0c 09 4c 	lsl	r12,r9,r12
80002e52:	91 2c       	st.w	r8[0x8],r12
80002e54:	5e fd       	retal	0
80002e56:	d7 03       	nop

80002e58 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80002e58:	d4 21       	pushm	r4-r7,lr
80002e5a:	18 97       	mov	r7,r12
80002e5c:	16 94       	mov	r4,r11
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002e5e:	58 0b       	cp.w	r11,0
80002e60:	c0 31       	brne	80002e66 <gpio_enable_module+0xe>
80002e62:	30 05       	mov	r5,0
80002e64:	c0 d8       	rjmp	80002e7e <gpio_enable_module+0x26>
80002e66:	30 06       	mov	r6,0
80002e68:	0c 95       	mov	r5,r6
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002e6a:	0f 9b       	ld.ub	r11,r7[0x1]
80002e6c:	0f 8c       	ld.ub	r12,r7[0x0]
80002e6e:	f0 1f 00 06 	mcall	80002e84 <gpio_enable_module+0x2c>
80002e72:	18 45       	or	r5,r12
    gpiomap++;
80002e74:	2f e7       	sub	r7,-2
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
80002e76:	2f f6       	sub	r6,-1
80002e78:	0c 34       	cp.w	r4,r6
80002e7a:	fe 9b ff f8 	brhi	80002e6a <gpio_enable_module+0x12>
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
}
80002e7e:	0a 9c       	mov	r12,r5
80002e80:	d8 22       	popm	r4-r7,pc
80002e82:	00 00       	add	r0,r0
80002e84:	80 00       	ld.sh	r0,r0[0x0]
80002e86:	2e 04       	sub	r4,-32

80002e88 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
80002e88:	f8 08 16 05 	lsr	r8,r12,0x5
80002e8c:	a9 68       	lsl	r8,0x8
80002e8e:	e0 28 f0 00 	sub	r8,61440
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif    
    if (flags & GPIO_PULL_UP)
80002e92:	16 99       	mov	r9,r11
80002e94:	e2 19 00 04 	andl	r9,0x4,COH
80002e98:	c0 70       	breq	80002ea6 <gpio_configure_pin+0x1e>
            gpio_port->puers = 1 << (pin & 0x1F);
80002e9a:	30 19       	mov	r9,1
80002e9c:	f2 0c 09 49 	lsl	r9,r9,r12
80002ea0:	f1 49 00 74 	st.w	r8[116],r9
80002ea4:	c0 68       	rjmp	80002eb0 <gpio_configure_pin+0x28>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80002ea6:	30 19       	mov	r9,1
80002ea8:	f2 0c 09 49 	lsl	r9,r9,r12
80002eac:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80002eb0:	16 99       	mov	r9,r11
80002eb2:	e2 19 00 80 	andl	r9,0x80,COH
80002eb6:	c2 40       	breq	80002efe <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
80002eb8:	16 99       	mov	r9,r11
80002eba:	e2 19 01 80 	andl	r9,0x180,COH
80002ebe:	c0 90       	breq	80002ed0 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002ec0:	30 19       	mov	r9,1
80002ec2:	f2 0c 09 49 	lsl	r9,r9,r12
80002ec6:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80002eca:	f1 49 00 b8 	st.w	r8[184],r9
80002ece:	c1 88       	rjmp	80002efe <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_RISING)
80002ed0:	16 99       	mov	r9,r11
80002ed2:	e2 19 02 80 	andl	r9,0x280,COH
80002ed6:	c0 90       	breq	80002ee8 <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80002ed8:	30 19       	mov	r9,1
80002eda:	f2 0c 09 49 	lsl	r9,r9,r12
80002ede:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80002ee2:	f1 49 00 b8 	st.w	r8[184],r9
80002ee6:	c0 c8       	rjmp	80002efe <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
80002ee8:	16 99       	mov	r9,r11
80002eea:	e2 19 03 80 	andl	r9,0x380,COH
80002eee:	c0 80       	breq	80002efe <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80002ef0:	30 19       	mov	r9,1
80002ef2:	f2 0c 09 49 	lsl	r9,r9,r12
80002ef6:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80002efa:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80002efe:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80002f02:	c1 50       	breq	80002f2c <gpio_configure_pin+0xa4>
            if (flags & GPIO_INIT_HIGH)
80002f04:	e2 1b 00 02 	andl	r11,0x2,COH
80002f08:	c0 70       	breq	80002f16 <gpio_configure_pin+0x8e>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80002f0a:	30 19       	mov	r9,1
80002f0c:	f2 0c 09 49 	lsl	r9,r9,r12
80002f10:	f1 49 00 54 	st.w	r8[84],r9
80002f14:	c0 68       	rjmp	80002f20 <gpio_configure_pin+0x98>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80002f16:	30 19       	mov	r9,1
80002f18:	f2 0c 09 49 	lsl	r9,r9,r12
80002f1c:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80002f20:	30 19       	mov	r9,1
80002f22:	f2 0c 09 49 	lsl	r9,r9,r12
80002f26:	f1 49 00 44 	st.w	r8[68],r9
80002f2a:	c0 68       	rjmp	80002f36 <gpio_configure_pin+0xae>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80002f2c:	30 19       	mov	r9,1
80002f2e:	f2 0c 09 49 	lsl	r9,r9,r12
80002f32:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80002f36:	30 19       	mov	r9,1
80002f38:	f2 0c 09 4c 	lsl	r12,r9,r12
80002f3c:	91 1c       	st.w	r8[0x4],r12
}
80002f3e:	5e fc       	retal	r12

80002f40 <gpio_get_pin_value>:
    gpio_port->gpers = mask;
}

int gpio_get_pin_value(uint32_t pin)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80002f40:	f8 08 16 05 	lsr	r8,r12,0x5
80002f44:	a9 68       	lsl	r8,0x8
80002f46:	e0 28 f0 00 	sub	r8,61440
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80002f4a:	71 88       	ld.w	r8,r8[0x60]
80002f4c:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80002f50:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002f54:	5e fc       	retal	r12

80002f56 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002f56:	c0 08       	rjmp	80002f56 <_unhandled_interrupt>

80002f58 <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002f58:	f6 08 16 05 	lsr	r8,r11,0x5

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
80002f5c:	48 99       	lddpc	r9,80002f80 <INTC_register_interrupt+0x28>
80002f5e:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002f62:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002f66:	72 19       	ld.w	r9,r9[0x4]
80002f68:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
80002f6c:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80002f70:	48 59       	lddpc	r9,80002f84 <INTC_register_interrupt+0x2c>
80002f72:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002f76:	fe 79 08 00 	mov	r9,-63488
80002f7a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002f7e:	5e fc       	retal	r12
80002f80:	80 00       	ld.sh	r0,r0[0x0]
80002f82:	50 40       	stdsp	sp[0x10],r0
80002f84:	80 00       	ld.sh	r0,r0[0x0]
80002f86:	4f 3c       	lddpc	r12,80003150 <spi_setupChipReg+0x48>

80002f88 <INTC_init_interrupts>:
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
}

void INTC_init_interrupts(void)
{
80002f88:	d4 21       	pushm	r4-r7,lr
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002f8a:	49 18       	lddpc	r8,80002fcc <INTC_init_interrupts+0x44>
80002f8c:	e3 b8 00 01 	mtsr	0x4,r8
80002f90:	49 0e       	lddpc	lr,80002fd0 <INTC_init_interrupts+0x48>
80002f92:	30 07       	mov	r7,0
80002f94:	0e 94       	mov	r4,r7
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002f96:	49 0c       	lddpc	r12,80002fd4 <INTC_init_interrupts+0x4c>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002f98:	49 08       	lddpc	r8,80002fd8 <INTC_init_interrupts+0x50>
80002f9a:	70 05       	ld.w	r5,r8[0x0]
80002f9c:	fe 76 08 00 	mov	r6,-63488
80002fa0:	c1 08       	rjmp	80002fc0 <INTC_init_interrupts+0x38>
}

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002fa2:	08 98       	mov	r8,r4
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002fa4:	7c 1b       	ld.w	r11,lr[0x4]

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002fa6:	7c 0a       	ld.w	r10,lr[0x0]
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
80002fa8:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002fac:	2f f8       	sub	r8,-1
80002fae:	10 3a       	cp.w	r10,r8
80002fb0:	fe 9b ff fc 	brhi	80002fa8 <INTC_init_interrupts+0x20>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002fb4:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002fb8:	2f f7       	sub	r7,-1
80002fba:	2f 8e       	sub	lr,-8
80002fbc:	59 27       	cp.w	r7,18
80002fbe:	c0 50       	breq	80002fc8 <INTC_init_interrupts+0x40>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002fc0:	7c 08       	ld.w	r8,lr[0x0]
80002fc2:	58 08       	cp.w	r8,0
80002fc4:	ce f1       	brne	80002fa2 <INTC_init_interrupts+0x1a>
80002fc6:	cf 7b       	rjmp	80002fb4 <INTC_init_interrupts+0x2c>
80002fc8:	d8 22       	popm	r4-r7,pc
80002fca:	00 00       	add	r0,r0
80002fcc:	80 00       	ld.sh	r0,r0[0x0]
80002fce:	4e 00       	lddpc	r0,8000314c <spi_setupChipReg+0x44>
80002fd0:	80 00       	ld.sh	r0,r0[0x0]
80002fd2:	50 40       	stdsp	sp[0x10],r0
80002fd4:	80 00       	ld.sh	r0,r0[0x0]
80002fd6:	2f 56       	sub	r6,-11
80002fd8:	80 00       	ld.sh	r0,r0[0x0]
80002fda:	4f 3c       	lddpc	r12,800031a4 <spi_setupChipReg+0x9c>

80002fdc <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(unsigned int int_level)
{
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002fdc:	fe 78 08 00 	mov	r8,-63488
80002fe0:	e0 69 00 83 	mov	r9,131
80002fe4:	f2 0c 01 0c 	sub	r12,r9,r12
80002fe8:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
  unsigned int int_req = AVR32_INTC.irr[int_grp];
80002fec:	f2 ca ff c0 	sub	r10,r9,-64
80002ff0:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
80002ff4:	58 08       	cp.w	r8,0
80002ff6:	c0 21       	brne	80002ffa <_get_interrupt_handler+0x1e>
80002ff8:	5e fd       	retal	0
80002ffa:	f0 08 12 00 	clz	r8,r8
80002ffe:	48 5a       	lddpc	r10,80003010 <_get_interrupt_handler+0x34>
80003000:	f4 09 00 39 	add	r9,r10,r9<<0x3
80003004:	f0 08 11 1f 	rsub	r8,r8,31
80003008:	72 19       	ld.w	r9,r9[0x4]
8000300a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
}
8000300e:	5e fc       	retal	r12
80003010:	80 00       	ld.sh	r0,r0[0x0]
80003012:	50 40       	stdsp	sp[0x10],r0

80003014 <getBaudDiv>:
#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pba_hz)
{
  int baudDiv = (pba_hz + baudrate / 2) / baudrate;
80003014:	f8 08 16 01 	lsr	r8,r12,0x1
80003018:	10 0b       	add	r11,r8
8000301a:	f6 0c 0d 0a 	divu	r10,r11,r12
8000301e:	14 9c       	mov	r12,r10

  if (baudDiv <= 0 || baudDiv > 255) {
80003020:	f4 c8 00 01 	sub	r8,r10,1
    return -1;
  }

  return baudDiv;
80003024:	5c 8c       	casts.h	r12

int16_t getBaudDiv(const unsigned int baudrate, uint32_t pba_hz)
{
  int baudDiv = (pba_hz + baudrate / 2) / baudrate;

  if (baudDiv <= 0 || baudDiv > 255) {
80003026:	e0 48 00 ff 	cp.w	r8,255
8000302a:	5e 3c       	retlo	r12
8000302c:	5e 2e       	reths	-1

8000302e <spi_initMaster>:

spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
8000302e:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003032:	30 18       	mov	r8,1
80003034:	f0 09 18 00 	cp.b	r9,r8
80003038:	e0 88 00 04 	brls	80003040 <spi_initMaster+0x12>
8000303c:	30 2c       	mov	r12,2
8000303e:	5e fc       	retal	r12
    return SPI_ERROR_ARGUMENT;
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80003040:	e0 68 00 80 	mov	r8,128
80003044:	99 08       	st.w	r12[0x0],r8

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
80003046:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.mstr = 1;
80003048:	30 19       	mov	r9,1
8000304a:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000304e:	f7 39 00 0d 	ld.ub	r9,r11[13]
80003052:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
  u_avr32_spi_mr.MR.llb = 0;
80003056:	30 09       	mov	r9,0
80003058:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000305c:	30 fa       	mov	r10,15
8000305e:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
  spi->mr = u_avr32_spi_mr.mr;
80003062:	99 18       	st.w	r12[0x4],r8
80003064:	5e f9       	retal	r9

80003066 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
80003066:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
80003068:	30 18       	mov	r8,1
8000306a:	f0 0b 18 00 	cp.b	r11,r8
8000306e:	5f be       	srhi	lr
80003070:	f0 0a 18 00 	cp.b	r10,r8
80003074:	5f b8       	srhi	r8
80003076:	fd e8 10 08 	or	r8,lr,r8
8000307a:	c0 30       	breq	80003080 <spi_selectionMode+0x1a>
8000307c:	30 2c       	mov	r12,2
8000307e:	d8 02       	popm	pc
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  u_avr32_spi_mr.mr = spi->mr;
80003080:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.ps = variable_ps;
80003082:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003086:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
  u_avr32_spi_mr.MR.dlybcs = delay;
8000308a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
  spi->mr = u_avr32_spi_mr.mr;
8000308e:	99 18       	st.w	r12[0x4],r8
80003090:	d8 0a       	popm	pc,r12=0

80003092 <spi_selectChip>:
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003092:	78 18       	ld.w	r8,r12[0x4]
80003094:	ea 18 00 0f 	orh	r8,0xf
80003098:	99 18       	st.w	r12[0x4],r8

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000309a:	78 18       	ld.w	r8,r12[0x4]
8000309c:	e2 18 00 04 	andl	r8,0x4,COH
800030a0:	c0 f0       	breq	800030be <spi_selectChip+0x2c>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
800030a2:	30 e8       	mov	r8,14
800030a4:	f0 0b 18 00 	cp.b	r11,r8
800030a8:	e0 8b 00 19 	brhi	800030da <spi_selectChip+0x48>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
800030ac:	78 18       	ld.w	r8,r12[0x4]
800030ae:	b1 6b       	lsl	r11,0x10
800030b0:	ea 1b ff f0 	orh	r11,0xfff0
800030b4:	e8 1b ff ff 	orl	r11,0xffff
800030b8:	10 6b       	and	r11,r8
800030ba:	99 1b       	st.w	r12[0x4],r11
800030bc:	5e fd       	retal	0
  } else {
    if (chip > 3) {
800030be:	30 38       	mov	r8,3
800030c0:	f0 0b 18 00 	cp.b	r11,r8
800030c4:	e0 8b 00 0b 	brhi	800030da <spi_selectChip+0x48>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800030c8:	78 18       	ld.w	r8,r12[0x4]
800030ca:	2f 0b       	sub	r11,-16
800030cc:	30 19       	mov	r9,1
800030ce:	f2 0b 09 4b 	lsl	r11,r9,r11
800030d2:	5c db       	com	r11
800030d4:	10 6b       	and	r11,r8
800030d6:	99 1b       	st.w	r12[0x4],r11
800030d8:	5e fd       	retal	0
800030da:	30 2c       	mov	r12,2
  }

  return SPI_OK;
}
800030dc:	5e fc       	retal	r12

800030de <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
800030de:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800030e2:	c0 58       	rjmp	800030ec <spi_unselectChip+0xe>
    if (!timeout--) {
800030e4:	58 08       	cp.w	r8,0
800030e6:	c0 21       	brne	800030ea <spi_unselectChip+0xc>
800030e8:	5e ff       	retal	1
800030ea:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
800030ec:	78 49       	ld.w	r9,r12[0x10]
800030ee:	e2 19 02 00 	andl	r9,0x200,COH
800030f2:	cf 90       	breq	800030e4 <spi_unselectChip+0x6>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800030f4:	78 18       	ld.w	r8,r12[0x4]
800030f6:	ea 18 00 0f 	orh	r8,0xf
800030fa:	99 18       	st.w	r12[0x4],r8

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800030fc:	30 08       	mov	r8,0
800030fe:	ea 18 01 00 	orh	r8,0x100
80003102:	99 08       	st.w	r12[0x0],r8
80003104:	5e fd       	retal	0
80003106:	d7 03       	nop

80003108 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
80003108:	eb cd 40 f8 	pushm	r3-r7,lr
8000310c:	18 95       	mov	r5,r12
8000310e:	16 97       	mov	r7,r11
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80003110:	f7 36 00 0c 	ld.ub	r6,r11[12]
80003114:	30 38       	mov	r8,3
80003116:	f0 06 18 00 	cp.b	r6,r8
8000311a:	e0 8b 00 4d 	brhi	800031b4 <spi_setupChipReg+0xac>
      options->stay_act > 1 ||
8000311e:	f7 34 00 0b 	ld.ub	r4,r11[11]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80003122:	30 18       	mov	r8,1
80003124:	f0 04 18 00 	cp.b	r4,r8
80003128:	e0 8b 00 46 	brhi	800031b4 <spi_setupChipReg+0xac>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
8000312c:	f7 33 00 08 	ld.ub	r3,r11[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80003130:	30 78       	mov	r8,7
80003132:	f0 03 18 00 	cp.b	r3,r8
80003136:	e0 88 00 3f 	brls	800031b4 <spi_setupChipReg+0xac>
8000313a:	31 08       	mov	r8,16
8000313c:	f0 03 18 00 	cp.b	r3,r8
80003140:	e0 8b 00 3a 	brhi	800031b4 <spi_setupChipReg+0xac>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
  }

  int baudDiv = getBaudDiv(options->baudrate, pba_hz);
80003144:	14 9b       	mov	r11,r10
80003146:	6e 1c       	ld.w	r12,r7[0x4]
80003148:	f0 1f 00 1d 	mcall	800031bc <spi_setupChipReg+0xb4>

  if (baudDiv < 0) {
8000314c:	c3 45       	brlt	800031b4 <spi_setupChipReg+0xac>
    return SPI_ERROR_ARGUMENT;
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
8000314e:	30 08       	mov	r8,0
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003150:	ec 09 16 01 	lsr	r9,r6,0x1
80003154:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003158:	ec 16 00 01 	eorl	r6,0x1
8000315c:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003160:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003164:	20 83       	sub	r3,8
80003166:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
8000316a:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000316e:	ef 39 00 09 	ld.ub	r9,r7[9]
80003172:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003176:	ef 39 00 0a 	ld.ub	r9,r7[10]
8000317a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

  switch(options->reg) {
8000317e:	0f 89       	ld.ub	r9,r7[0x0]
80003180:	30 1a       	mov	r10,1
80003182:	f4 09 18 00 	cp.b	r9,r10
80003186:	c0 e0       	breq	800031a2 <spi_setupChipReg+0x9a>
80003188:	c0 a3       	brcs	8000319c <spi_setupChipReg+0x94>
8000318a:	30 2a       	mov	r10,2
8000318c:	f4 09 18 00 	cp.b	r9,r10
80003190:	c0 c0       	breq	800031a8 <spi_setupChipReg+0xa0>
80003192:	30 3a       	mov	r10,3
80003194:	f4 09 18 00 	cp.b	r9,r10
80003198:	c0 e1       	brne	800031b4 <spi_setupChipReg+0xac>
8000319a:	c0 a8       	rjmp	800031ae <spi_setupChipReg+0xa6>
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
8000319c:	8b c8       	st.w	r5[0x30],r8
8000319e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
800031a2:	8b d8       	st.w	r5[0x34],r8
800031a4:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
800031a8:	8b e8       	st.w	r5[0x38],r8
800031aa:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
800031ae:	8b f8       	st.w	r5[0x3c],r8
800031b0:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
800031b4:	30 2c       	mov	r12,2
    }
  }
#endif

  return SPI_OK;
}
800031b6:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800031ba:	00 00       	add	r0,r0
800031bc:	80 00       	ld.sh	r0,r0[0x0]
800031be:	30 14       	mov	r4,1

800031c0 <spi_enable>:


void spi_enable(volatile avr32_spi_t *spi)
{
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
800031c0:	30 18       	mov	r8,1
800031c2:	99 08       	st.w	r12[0x0],r8
}
800031c4:	5e fc       	retal	r12

800031c6 <spi_write>:
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
800031c6:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800031ca:	c0 58       	rjmp	800031d4 <spi_write+0xe>
    if (!timeout--) {
800031cc:	58 08       	cp.w	r8,0
800031ce:	c0 21       	brne	800031d2 <spi_write+0xc>
800031d0:	5e ff       	retal	1
800031d2:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800031d4:	78 49       	ld.w	r9,r12[0x10]
800031d6:	e2 19 00 02 	andl	r9,0x2,COH
800031da:	cf 90       	breq	800031cc <spi_write+0x6>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800031dc:	5c 7b       	castu.h	r11
800031de:	99 3b       	st.w	r12[0xc],r11
800031e0:	5e fd       	retal	0

800031e2 <spi_read>:
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
800031e2:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
800031e6:	c0 58       	rjmp	800031f0 <spi_read+0xe>
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
800031e8:	58 08       	cp.w	r8,0
800031ea:	c0 21       	brne	800031ee <spi_read+0xc>
800031ec:	5e ff       	retal	1
800031ee:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
800031f0:	78 49       	ld.w	r9,r12[0x10]
800031f2:	e2 19 02 01 	andl	r9,0x201,COH
800031f6:	e0 49 02 01 	cp.w	r9,513
800031fa:	cf 71       	brne	800031e8 <spi_read+0x6>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800031fc:	78 28       	ld.w	r8,r12[0x8]
800031fe:	b6 08       	st.h	r11[0x0],r8
80003200:	5e fd       	retal	0

80003202 <udd_set_address>:
}


void udd_set_address(uint8_t address)
{
	udd_disable_address();
80003202:	fe 68 00 00 	mov	r8,-131072
80003206:	70 09       	ld.w	r9,r8[0x0]
80003208:	a7 d9       	cbr	r9,0x7
8000320a:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
8000320c:	70 09       	ld.w	r9,r8[0x0]
8000320e:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80003212:	e0 19 ff 80 	andl	r9,0xff80
80003216:	f9 e9 10 09 	or	r9,r12,r9
8000321a:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000321c:	70 09       	ld.w	r9,r8[0x0]
8000321e:	a7 b9       	sbr	r9,0x7
80003220:	91 09       	st.w	r8[0x0],r9
}
80003222:	5e fc       	retal	r12

80003224 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
80003224:	fe 68 00 00 	mov	r8,-131072
80003228:	70 0c       	ld.w	r12,r8[0x0]
}
8000322a:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000322e:	5e fc       	retal	r12

80003230 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
80003230:	fe 68 00 00 	mov	r8,-131072
80003234:	70 8c       	ld.w	r12,r8[0x20]
}
80003236:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
8000323a:	5e fc       	retal	r12

8000323c <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload,	uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
8000323c:	48 28       	lddpc	r8,80003244 <udd_set_setup_payload+0x8>
8000323e:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
80003240:	b0 6b       	st.h	r8[0xc],r11
}
80003242:	5e fc       	retal	r12
80003244:	00 00       	add	r0,r0
80003246:	04 18       	sub	r8,r2

80003248 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80003248:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
8000324c:	a3 68       	lsl	r8,0x2
8000324e:	e0 38 fe 40 	sub	r8,130624
80003252:	70 0c       	ld.w	r12,r8[0x0]
}
80003254:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80003258:	5e fc       	retal	r12
8000325a:	d7 03       	nop

8000325c <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
8000325c:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000325e:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
80003262:	30 18       	mov	r8,1
80003264:	f0 0c 18 00 	cp.b	r12,r8
80003268:	e0 88 00 03 	brls	8000326e <udd_ep_clear_halt+0x12>
8000326c:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
8000326e:	f8 c8 00 01 	sub	r8,r12,1
80003272:	a5 68       	lsl	r8,0x4
80003274:	49 29       	lddpc	r9,800032bc <udd_ep_clear_halt+0x60>
80003276:	f2 08 00 08 	add	r8,r9,r8

	if (Is_udd_endpoint_stall_requested(ep)	// Endpoint stalled
8000327a:	a3 6c       	lsl	r12,0x2
8000327c:	fe 6a 01 c0 	mov	r10,-130624
80003280:	f8 0a 00 09 	add	r9,r12,r10
80003284:	72 09       	ld.w	r9,r9[0x0]
80003286:	e6 19 00 08 	andh	r9,0x8,COH
8000328a:	c0 51       	brne	80003294 <udd_ep_clear_halt+0x38>
			|| ptr_job->stall_requested) {	// Endpoint stall is requested
8000328c:	70 09       	ld.w	r9,r8[0x0]
8000328e:	e6 19 40 00 	andh	r9,0x4000,COH
80003292:	c1 40       	breq	800032ba <udd_ep_clear_halt+0x5e>
		// Remove request to stall
		ptr_job->stall_requested = false;
80003294:	70 09       	ld.w	r9,r8[0x0]
80003296:	30 0a       	mov	r10,0
80003298:	f3 da d3 c1 	bfins	r9,r10,0x1e,0x1
8000329c:	91 09       	st.w	r8[0x0],r9
		// Remove stall
		udd_disable_stall_handshake(ep);
8000329e:	e0 3c fd e0 	sub	r12,130528
800032a2:	e8 69 00 00 	mov	r9,524288
800032a6:	99 09       	st.w	r12[0x0],r9
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
800032a8:	70 09       	ld.w	r9,r8[0x0]
800032aa:	58 09       	cp.w	r9,0
800032ac:	c0 74       	brge	800032ba <udd_ep_clear_halt+0x5e>
			ptr_job->busy = false;
800032ae:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
800032b2:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
800032b4:	70 38       	ld.w	r8,r8[0xc]
800032b6:	5d 18       	icall	r8
800032b8:	da 0a       	popm	pc,r12=1
800032ba:	da 0a       	popm	pc,r12=1
800032bc:	00 00       	add	r0,r0
800032be:	01 a4       	ld.ub	r4,r0[0x2]

800032c0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
800032c0:	30 59       	mov	r9,5
800032c2:	48 58       	lddpc	r8,800032d4 <udd_ctrl_stall_data+0x14>
800032c4:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
800032c6:	e8 69 00 00 	mov	r9,524288
800032ca:	fe 68 01 f0 	mov	r8,-130576
800032ce:	91 09       	st.w	r8[0x0],r9
}
800032d0:	5e fc       	retal	r12
800032d2:	00 00       	add	r0,r0
800032d4:	00 00       	add	r0,r0
800032d6:	01 b8       	ld.ub	r8,r0[0x3]

800032d8 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
800032d8:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
800032da:	48 48       	lddpc	r8,800032e8 <udd_ctrl_endofrequest+0x10>
800032dc:	70 48       	ld.w	r8,r8[0x10]
800032de:	58 08       	cp.w	r8,0
800032e0:	c0 20       	breq	800032e4 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
800032e2:	5d 18       	icall	r8
800032e4:	d8 02       	popm	pc
800032e6:	00 00       	add	r0,r0
800032e8:	00 00       	add	r0,r0
800032ea:	04 18       	sub	r8,r2

800032ec <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
800032ec:	d4 01       	pushm	lr
800032ee:	16 99       	mov	r9,r11
	if (ptr_job->busy == false)
800032f0:	78 08       	ld.w	r8,r12[0x0]
800032f2:	58 08       	cp.w	r8,0
800032f4:	c0 b4       	brge	8000330a <udd_ep_finish_job+0x1e>
		return;	// No on-going job
	ptr_job->busy = false;
800032f6:	30 0a       	mov	r10,0
800032f8:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
800032fc:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans)
800032fe:	78 38       	ld.w	r8,r12[0xc]
80003300:	58 08       	cp.w	r8,0
80003302:	c0 40       	breq	8000330a <udd_ep_finish_job+0x1e>
		return;	// No callback linked to job
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80003304:	78 2b       	ld.w	r11,r12[0x8]
80003306:	12 9c       	mov	r12,r9
80003308:	5d 18       	icall	r8
8000330a:	d8 02       	popm	pc

8000330c <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
8000330c:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
8000330e:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80003312:	20 18       	sub	r8,1
80003314:	a5 68       	lsl	r8,0x4
80003316:	30 1b       	mov	r11,1
80003318:	48 3c       	lddpc	r12,80003324 <udd_ep_abort_job+0x18>
8000331a:	10 0c       	add	r12,r8
8000331c:	f0 1f 00 03 	mcall	80003328 <udd_ep_abort_job+0x1c>
}
80003320:	d8 02       	popm	pc
80003322:	00 00       	add	r0,r0
80003324:	00 00       	add	r0,r0
80003326:	01 a4       	ld.ub	r4,r0[0x2]
80003328:	80 00       	ld.sh	r0,r0[0x0]
8000332a:	32 ec       	mov	r12,46

8000332c <udd_ep_set_halt>:
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
}


bool udd_ep_set_halt(udd_ep_id_t ep)
{
8000332c:	d4 01       	pushm	lr
	uint8_t index = ep & USB_EP_ADDR_MASK;
8000332e:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index)
80003332:	30 19       	mov	r9,1
80003334:	f2 08 18 00 	cp.b	r8,r9
80003338:	e0 88 00 03 	brls	8000333e <udd_ep_set_halt+0x12>
8000333c:	d8 0a       	popm	pc,r12=0
		return false;
	if (Is_udd_bank_interrupt_enabled(index)) {
8000333e:	f0 09 15 02 	lsl	r9,r8,0x2
80003342:	fe 6b 01 c0 	mov	r11,-130624
80003346:	f2 0b 00 0a 	add	r10,r9,r11
8000334a:	74 0a       	ld.w	r10,r10[0x0]
8000334c:	e2 1a 10 00 	andl	r10,0x1000,COH
80003350:	c0 c0       	breq	80003368 <udd_ep_set_halt+0x3c>
		// Wait end of transfer (= no busy bank) before stall endpoint
		udd_ep_job[index - 1].stall_requested = true;
80003352:	20 18       	sub	r8,1
80003354:	a5 68       	lsl	r8,0x4
80003356:	48 b9       	lddpc	r9,80003380 <udd_ep_set_halt+0x54>
80003358:	f2 08 00 08 	add	r8,r9,r8
8000335c:	70 09       	ld.w	r9,r8[0x0]
8000335e:	30 1a       	mov	r10,1
80003360:	f3 da d3 c1 	bfins	r9,r10,0x1e,0x1
80003364:	91 09       	st.w	r8[0x0],r9
80003366:	c0 98       	rjmp	80003378 <udd_ep_set_halt+0x4c>
	} else {
		// Stall endpoint
		udd_enable_stall_handshake(index);
80003368:	e0 39 fe 10 	sub	r9,130576
8000336c:	e8 68 00 00 	mov	r8,524288
80003370:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
80003372:	e4 68 00 00 	mov	r8,262144
80003376:	93 08       	st.w	r9[0x0],r8
	}
	udd_ep_abort_job(ep);
80003378:	f0 1f 00 03 	mcall	80003384 <udd_ep_set_halt+0x58>
8000337c:	da 0a       	popm	pc,r12=1
8000337e:	00 00       	add	r0,r0
80003380:	00 00       	add	r0,r0
80003382:	01 a4       	ld.ub	r4,r0[0x2]
80003384:	80 00       	ld.sh	r0,r0[0x0]
80003386:	33 0c       	mov	r12,48

80003388 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80003388:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
8000338a:	fe 69 00 00 	mov	r9,-131072
8000338e:	72 7b       	ld.w	r11,r9[0x1c]
80003390:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80003394:	30 1a       	mov	r10,1
80003396:	f4 08 09 4a 	lsl	r10,r10,r8
8000339a:	5c da       	com	r10
8000339c:	16 6a       	and	r10,r11
8000339e:	93 7a       	st.w	r9[0x1c],r10
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
800033a0:	a3 68       	lsl	r8,0x2
800033a2:	e0 38 ff 00 	sub	r8,130816
800033a6:	70 09       	ld.w	r9,r8[0x0]
800033a8:	a1 d9       	cbr	r9,0x1
800033aa:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
800033ac:	f0 1f 00 02 	mcall	800033b4 <udd_ep_free+0x2c>
}
800033b0:	d8 02       	popm	pc
800033b2:	00 00       	add	r0,r0
800033b4:	80 00       	ld.sh	r0,r0[0x0]
800033b6:	33 0c       	mov	r12,48

800033b8 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
800033b8:	eb cd 40 e0 	pushm	r5-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
800033bc:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP)
800033c0:	30 19       	mov	r9,1
800033c2:	f2 08 18 00 	cp.b	r8,r9
800033c6:	e0 8b 00 78 	brhi	800034b6 <udd_ep_alloc+0xfe>
		return false;
	if (Is_udd_endpoint_enabled(ep))
800033ca:	fe 69 00 00 	mov	r9,-131072
800033ce:	72 7e       	ld.w	lr,r9[0x1c]
800033d0:	30 19       	mov	r9,1
800033d2:	f2 08 09 49 	lsl	r9,r9,r8
800033d6:	f3 ee 00 0e 	and	lr,r9,lr
800033da:	c6 e1       	brne	800034b6 <udd_ep_alloc+0xfe>
		return false;

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
800033dc:	fd db c0 02 	bfextu	lr,r11,0x0,0x2
800033e0:	58 1e       	cp.w	lr,1
800033e2:	c6 a5       	brlt	800034b6 <udd_ep_alloc+0xfe>
800033e4:	58 2e       	cp.w	lr,2
800033e6:	e0 8a 00 06 	brle	800033f2 <udd_ep_alloc+0x3a>
800033ea:	58 3e       	cp.w	lr,3
800033ec:	c6 51       	brne	800034b6 <udd_ep_alloc+0xfe>
800033ee:	30 06       	mov	r6,0
800033f0:	c0 28       	rjmp	800033f4 <udd_ep_alloc+0x3c>
800033f2:	30 16       	mov	r6,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);
		   
	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
800033f4:	f0 0e 15 02 	lsl	lr,r8,0x2
800033f8:	e0 3e ff 00 	sub	lr,130816
800033fc:	7c 07       	ld.w	r7,lr[0x0]
800033fe:	5c 7a       	castu.h	r10
80003400:	30 85       	mov	r5,8
80003402:	f4 05 0c 4a 	max	r10,r10,r5
80003406:	e0 65 04 00 	mov	r5,1024
8000340a:	f4 05 0d 4a 	min	r10,r10,r5
8000340e:	a1 7a       	lsl	r10,0x1
80003410:	20 1a       	sub	r10,1
80003412:	f4 0a 12 00 	clz	r10,r10
80003416:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
8000341a:	ab 7b       	lsl	r11,0xb
8000341c:	e2 1b 18 00 	andl	r11,0x1800,COH
80003420:	f7 ec 10 8c 	or	r12,r11,r12<<0x8
80003424:	f4 0b 11 1c 	rsub	r11,r10,28
80003428:	f9 eb 10 4b 	or	r11,r12,r11<<0x4
8000342c:	f7 e6 10 2b 	or	r11,r11,r6<<0x2
80003430:	e2 1b 19 7c 	andl	r11,0x197c,COH
80003434:	0e 9a       	mov	r10,r7
80003436:	e0 1a e6 83 	andl	r10,0xe683
8000343a:	f7 ea 10 0a 	or	r10,r11,r10
8000343e:	9d 0a       	st.w	lr[0x0],r10
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80003440:	f9 d9 b0 10 	bfexts	r12,r9,0x0,0x10

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80003444:	58 08       	cp.w	r8,0
80003446:	c1 21       	brne	8000346a <udd_ep_alloc+0xb2>
		if (Is_udd_endpoint_enabled(i)) {
80003448:	fe 69 00 00 	mov	r9,-131072
8000344c:	72 79       	ld.w	r9,r9[0x1c]
8000344e:	e2 19 00 02 	andl	r9,0x2,COH
80003452:	c0 c0       	breq	8000346a <udd_ep_alloc+0xb2>
			ep_allocated |= 1 << i;
80003454:	a1 bc       	sbr	r12,0x1
			udd_disable_endpoint(i);
80003456:	fe 69 00 00 	mov	r9,-131072
8000345a:	72 7a       	ld.w	r10,r9[0x1c]
8000345c:	a1 da       	cbr	r10,0x1
8000345e:	93 7a       	st.w	r9[0x1c],r10
			udd_unallocate_memory(i);
80003460:	fe 69 01 04 	mov	r9,-130812
80003464:	72 0a       	ld.w	r10,r9[0x0]
80003466:	a1 da       	cbr	r10,0x1
80003468:	93 0a       	st.w	r9[0x0],r10
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
8000346a:	5c 7c       	castu.h	r12
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
8000346c:	fe 6e 00 00 	mov	lr,-131072
80003470:	30 16       	mov	r6,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80003472:	30 17       	mov	r7,1
		if (ep_allocated & (1 << i)) {
80003474:	f8 08 08 49 	asr	r9,r12,r8
80003478:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
8000347c:	c1 50       	breq	800034a6 <udd_ep_alloc+0xee>
			udd_allocate_memory(i);
8000347e:	f0 09 15 02 	lsl	r9,r8,0x2
80003482:	fe 65 01 00 	mov	r5,-130816
80003486:	f2 05 00 0b 	add	r11,r9,r5
8000348a:	76 05       	ld.w	r5,r11[0x0]
8000348c:	a1 b5       	sbr	r5,0x1
8000348e:	97 05       	st.w	r11[0x0],r5
			udd_enable_endpoint(i);
80003490:	7c 7b       	ld.w	r11,lr[0x1c]
80003492:	ec 08 09 4a 	lsl	r10,r6,r8
80003496:	16 4a       	or	r10,r11
80003498:	9d 7a       	st.w	lr[0x1c],r10
			if (!Is_udd_endpoint_configured(i))
8000349a:	e0 39 fe d0 	sub	r9,130768
8000349e:	72 09       	ld.w	r9,r9[0x0]
800034a0:	e6 19 00 04 	andh	r9,0x4,COH
800034a4:	c0 90       	breq	800034b6 <udd_ep_alloc+0xfe>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800034a6:	2f f8       	sub	r8,-1
800034a8:	5c 58       	castu.b	r8
800034aa:	ee 08 18 00 	cp.b	r8,r7
800034ae:	fe 98 ff e3 	brls	80003474 <udd_ep_alloc+0xbc>
800034b2:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800034b6:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800034ba:	d7 03       	nop

800034bc <udd_sleep_mode>:
 * 
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
800034bc:	58 0c       	cp.w	r12,0
800034be:	c1 11       	brne	800034e0 <udd_sleep_mode+0x24>
800034c0:	49 18       	lddpc	r8,80003504 <udd_sleep_mode+0x48>
800034c2:	11 89       	ld.ub	r9,r8[0x0]
800034c4:	30 08       	mov	r8,0
800034c6:	f0 09 18 00 	cp.b	r9,r8
800034ca:	c1 a0       	breq	800034fe <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800034cc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800034d0:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800034d2:	48 e8       	lddpc	r8,80003508 <udd_sleep_mode+0x4c>
800034d4:	11 9a       	ld.ub	r10,r8[0x1]
800034d6:	2f fa       	sub	r10,-1
800034d8:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034da:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
800034de:	c1 08       	rjmp	800034fe <udd_sleep_mode+0x42>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
800034e0:	48 98       	lddpc	r8,80003504 <udd_sleep_mode+0x48>
800034e2:	11 89       	ld.ub	r9,r8[0x0]
800034e4:	30 08       	mov	r8,0
800034e6:	f0 09 18 00 	cp.b	r9,r8
800034ea:	c0 a1       	brne	800034fe <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800034ec:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800034f0:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
800034f2:	48 68       	lddpc	r8,80003508 <udd_sleep_mode+0x4c>
800034f4:	11 9a       	ld.ub	r10,r8[0x1]
800034f6:	20 1a       	sub	r10,1
800034f8:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800034fa:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
800034fe:	48 28       	lddpc	r8,80003504 <udd_sleep_mode+0x48>
80003500:	b0 8c       	st.b	r8[0x0],r12
}
80003502:	5e fc       	retal	r12
80003504:	00 00       	add	r0,r0
80003506:	01 b4       	ld.ub	r4,r0[0x3]
80003508:	00 00       	add	r0,r0
8000350a:	04 30       	cp.w	r0,r2

8000350c <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000350c:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003510:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI), 
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI 
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80003512:	30 1a       	mov	r10,1
80003514:	fe 69 02 20 	mov	r9,-130528
80003518:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000351a:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
8000351e:	30 29       	mov	r9,2
80003520:	fe 68 01 60 	mov	r8,-130720
80003524:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80003526:	48 59       	lddpc	r9,80003538 <udd_ctrl_init+0x2c>
80003528:	30 08       	mov	r8,0
8000352a:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
8000352c:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
8000352e:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80003530:	48 39       	lddpc	r9,8000353c <udd_ctrl_init+0x30>
80003532:	93 08       	st.w	r9[0x0],r8
}
80003534:	5e fc       	retal	r12
80003536:	00 00       	add	r0,r0
80003538:	00 00       	add	r0,r0
8000353a:	04 18       	sub	r8,r2
8000353c:	00 00       	add	r0,r0
8000353e:	01 b8       	ld.ub	r8,r0[0x3]

80003540 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80003540:	30 39       	mov	r9,3
80003542:	48 a8       	lddpc	r8,80003568 <udd_ctrl_send_zlp_in+0x28>
80003544:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003546:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
8000354a:	d3 03       	ssrf	0x10
	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
8000354c:	fe 6a 01 60 	mov	r10,-130720
80003550:	30 19       	mov	r9,1
80003552:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
80003554:	fe 68 01 f0 	mov	r8,-130576
80003558:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
8000355a:	30 89       	mov	r9,8
8000355c:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
8000355e:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003560:	e3 bb 00 00 	mtsr	0x0,r11
	cpu_irq_restore(flags);
}
80003564:	5e fc       	retal	r12
80003566:	00 00       	add	r0,r0
80003568:	00 00       	add	r0,r0
8000356a:	01 b8       	ld.ub	r8,r0[0x3]

8000356c <udd_reset_ep_ctrl>:

static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;
	// Reset USB address to 0
	udd_configure_address(0);
8000356c:	fe 68 00 00 	mov	r8,-131072
80003570:	70 09       	ld.w	r9,r8[0x0]
80003572:	e0 19 ff 80 	andl	r9,0xff80
80003576:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80003578:	70 09       	ld.w	r9,r8[0x0]
8000357a:	a7 b9       	sbr	r9,0x7
8000357c:	91 09       	st.w	r8[0x0],r9
	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
8000357e:	fe 69 01 00 	mov	r9,-130816
80003582:	72 0b       	ld.w	r11,r9[0x0]
80003584:	30 8a       	mov	r10,8
80003586:	f4 0a 0c 4a 	max	r10,r10,r10
8000358a:	e0 6c 04 00 	mov	r12,1024
8000358e:	f4 0c 0d 4a 	min	r10,r10,r12
80003592:	a1 7a       	lsl	r10,0x1
80003594:	20 1a       	sub	r10,1
80003596:	f4 0a 12 00 	clz	r10,r10
8000359a:	f4 0a 11 1c 	rsub	r10,r10,28
8000359e:	a5 6a       	lsl	r10,0x4
800035a0:	e2 1a 19 7c 	andl	r10,0x197c,COH
800035a4:	e0 1b e6 83 	andl	r11,0xe683
800035a8:	16 4a       	or	r10,r11
800035aa:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
800035ac:	72 0a       	ld.w	r10,r9[0x0]
800035ae:	a1 ba       	sbr	r10,0x1
800035b0:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
800035b2:	70 79       	ld.w	r9,r8[0x1c]
800035b4:	a1 a9       	sbr	r9,0x0
800035b6:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800035b8:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800035bc:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
800035be:	fe 69 01 f0 	mov	r9,-130576
800035c2:	30 4b       	mov	r11,4
800035c4:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
800035c6:	30 2b       	mov	r11,2
800035c8:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
800035ca:	e0 69 10 00 	mov	r9,4096
800035ce:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800035d0:	e3 ba 00 00 	mtsr	0x0,r10
	cpu_irq_restore(flags);
}
800035d4:	5e fc       	retal	r12
800035d6:	d7 03       	nop

800035d8 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
800035d8:	eb cd 40 c0 	pushm	r6-r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800035dc:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
800035e0:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown, 
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
800035e2:	30 1c       	mov	r12,1
800035e4:	f0 1f 00 17 	mcall	80003640 <udd_attach+0x68>
	otg_unfreeze_clock();
800035e8:	fe 68 00 00 	mov	r8,-131072
800035ec:	f0 f9 08 00 	ld.w	r9,r8[2048]
800035f0:	af c9       	cbr	r9,0xe
800035f2:	f1 49 08 00 	st.w	r8[2048],r9
	// and the UTMI clock is disabled in suspend mode. Thereby, the utmi clock
	// can't be checked when USB line is not attached or in suspend mode 
	// But it is not a issue, because the clock source is the OSC
#else
	// Check USB clock because the source can be a PLL
	while( !Is_clock_usable() );
800035f6:	f0 f9 08 04 	ld.w	r9,r8[2052]
800035fa:	e2 19 40 00 	andl	r9,0x4000,COH
800035fe:	cf c0       	breq	800035f6 <udd_attach+0x1e>
#endif
	// Authorize attach if VBus is present
	udd_attach_device();
80003600:	fe 67 00 00 	mov	r7,-131072
80003604:	6e 08       	ld.w	r8,r7[0x0]
80003606:	a9 c8       	cbr	r8,0x8
80003608:	8f 08       	st.w	r7[0x0],r8

	// (RESET_AND_WAKEUP)
	// After the attach and the first USB suspend, the following USB Reset time can be inferior to CPU restart clock time.
	// Thus, the USB Reset state is not detected and endpoint control is not allocated
	// In this case, a Reset is do automatically after attach.
	udc_reset();	// Reset USB Device Stack Core
8000360a:	f0 1f 00 0f 	mcall	80003644 <udd_attach+0x6c>
	udd_reset_ep_ctrl();	// Reset endpoint control
8000360e:	f0 1f 00 0f 	mcall	80003648 <udd_attach+0x70>
	udd_ctrl_init();	// Reset endpoint control management
80003612:	f0 1f 00 0f 	mcall	8000364c <udd_attach+0x74>

	// Enable USB line events
	udd_enable_reset_interrupt();
80003616:	30 8b       	mov	r11,8
80003618:	8f 6b       	st.w	r7[0x18],r11
	udd_enable_suspend_interrupt();
8000361a:	30 19       	mov	r9,1
8000361c:	8f 69       	st.w	r7[0x18],r9
	udd_enable_wake_up_interrupt();
8000361e:	31 08       	mov	r8,16
80003620:	8f 68       	st.w	r7[0x18],r8
#ifdef UDC_SOF_EVENT
	udd_enable_sof_interrupt();
80003622:	30 4a       	mov	r10,4
80003624:	8f 6a       	st.w	r7[0x18],r10
#endif
	// Reset following interupts flag
	udd_ack_reset();
80003626:	8f 2b       	st.w	r7[0x8],r11
	udd_ack_sof();
80003628:	8f 2a       	st.w	r7[0x8],r10
#if UC3A3
   // With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
   udd_ack_suspend();
#else
   // The first suspend interrupt is not detected else raise it
   udd_raise_suspend();
8000362a:	8f 39       	st.w	r7[0xc],r9
#endif
	udd_ack_wake_up();
8000362c:	8f 28       	st.w	r7[0x8],r8
	otg_freeze_clock();
8000362e:	ee f8 08 00 	ld.w	r8,r7[2048]
80003632:	af a8       	sbr	r8,0xe
80003634:	ef 48 08 00 	st.w	r7[2048],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003638:	e3 b6 00 00 	mtsr	0x0,r6
	cpu_irq_restore(flags);
}
8000363c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003640:	80 00       	ld.sh	r0,r0[0x0]
80003642:	34 bc       	mov	r12,75
80003644:	80 00       	ld.sh	r0,r0[0x0]
80003646:	46 1c       	lddsp	r12,sp[0x184]
80003648:	80 00       	ld.sh	r0,r0[0x0]
8000364a:	35 6c       	mov	r12,86
8000364c:	80 00       	ld.sh	r0,r0[0x0]
8000364e:	35 0c       	mov	r12,80

80003650 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
80003650:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003654:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80003658:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
8000365a:	30 1a       	mov	r10,1
8000365c:	fe 69 02 20 	mov	r9,-130528
80003660:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003662:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80003666:	4c 38       	lddpc	r8,80003770 <udd_ctrl_in_sent+0x120>
80003668:	70 08       	ld.w	r8,r8[0x0]
8000366a:	58 38       	cp.w	r8,3
8000366c:	c0 71       	brne	8000367a <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
8000366e:	f0 1f 00 42 	mcall	80003774 <udd_ctrl_in_sent+0x124>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80003672:	f0 1f 00 42 	mcall	80003778 <udd_ctrl_in_sent+0x128>
		return;
80003676:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000367a:	4c 18       	lddpc	r8,8000377c <udd_ctrl_in_sent+0x12c>
8000367c:	90 68       	ld.sh	r8,r8[0xc]
8000367e:	4c 19       	lddpc	r9,80003780 <udd_ctrl_in_sent+0x130>
80003680:	92 07       	ld.sh	r7,r9[0x0]
80003682:	f0 07 01 07 	sub	r7,r8,r7
80003686:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
80003688:	c3 b1       	brne	800036fe <udd_ctrl_in_sent+0xae>
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
8000368a:	4b f9       	lddpc	r9,80003784 <udd_ctrl_in_sent+0x134>
8000368c:	13 8a       	ld.ub	r10,r9[0x0]
8000368e:	30 09       	mov	r9,0
80003690:	f2 0a 18 00 	cp.b	r10,r9
80003694:	c1 21       	brne	800036b8 <udd_ctrl_in_sent+0x68>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80003696:	30 49       	mov	r9,4
80003698:	4b 68       	lddpc	r8,80003770 <udd_ctrl_in_sent+0x120>
8000369a:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000369c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800036a0:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
800036a2:	31 08       	mov	r8,16
800036a4:	fe 6a 01 60 	mov	r10,-130720
800036a8:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
800036aa:	fe 6a 01 f0 	mov	r10,-130576
800036ae:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800036b0:	e3 b9 00 00 	mtsr	0x0,r9
		// All content of current buffer payload are sent
		if (!udd_ctrl_payload_need_in_zlp) {
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
800036b4:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
800036b8:	4b 19       	lddpc	r9,8000377c <udd_ctrl_in_sent+0x12c>
800036ba:	92 b9       	ld.uh	r9,r9[0x6]
800036bc:	5c 78       	castu.h	r8
800036be:	4b 3a       	lddpc	r10,80003788 <udd_ctrl_in_sent+0x138>
800036c0:	94 8a       	ld.uh	r10,r10[0x0]
800036c2:	14 08       	add	r8,r10
800036c4:	10 39       	cp.w	r9,r8
800036c6:	e0 89 00 08 	brgt	800036d6 <udd_ctrl_in_sent+0x86>
								+
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
800036ca:	4a d8       	lddpc	r8,8000377c <udd_ctrl_in_sent+0x12c>
800036cc:	70 5c       	ld.w	r12,r8[0x14]
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
800036ce:	58 0c       	cp.w	r12,0
800036d0:	c0 30       	breq	800036d6 <udd_ctrl_in_sent+0x86>
800036d2:	5d 1c       	icall	r12
800036d4:	c0 51       	brne	800036de <udd_ctrl_in_sent+0x8e>
								udd_g_ctrlreq.
								payload_size))
				|| (!udd_g_ctrlreq.over_under_run)
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun or data packet complette than send zlp on IN (note don't change DataToggle)
			udd_ctrl_payload_need_in_zlp = false;
800036d6:	30 09       	mov	r9,0
800036d8:	4a b8       	lddpc	r8,80003784 <udd_ctrl_in_sent+0x134>
800036da:	b0 89       	st.b	r8[0x0],r9
			// It is the end of data phase, because the last data packet is a short packet
			// then generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
		}
		if ((udd_g_ctrlreq.req.wLength > (udd_ctrl_prev_payload_nb_trans
800036dc:	c1 18       	rjmp	800036fe <udd_ctrl_in_sent+0xae>
			udd_ctrl_payload_need_in_zlp = false;
			// nb_remain==0 allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			// Update number of total data sending by previous playlaod buffer
			udd_ctrl_prev_payload_nb_trans +=
800036de:	4a b9       	lddpc	r9,80003788 <udd_ctrl_in_sent+0x138>
800036e0:	4a 88       	lddpc	r8,80003780 <udd_ctrl_in_sent+0x130>
800036e2:	90 0b       	ld.sh	r11,r8[0x0]
800036e4:	92 0a       	ld.sh	r10,r9[0x0]
800036e6:	f6 0a 00 0a 	add	r10,r11,r10
800036ea:	b2 0a       	st.h	r9[0x0],r10
					udd_ctrl_payload_nb_trans;
			// Update maangement of current playoad transfer
			udd_ctrl_payload_nb_trans = 0;
800036ec:	30 09       	mov	r9,0
800036ee:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
800036f0:	4a 38       	lddpc	r8,8000377c <udd_ctrl_in_sent+0x12c>
800036f2:	90 67       	ld.sh	r7,r8[0xc]
			// Compute if an IN ZLP must be send after IN data
			udd_ctrl_payload_need_in_zlp =
800036f4:	f1 d7 c0 03 	bfextu	r8,r7,0x0,0x3
800036f8:	5f 09       	sreq	r9
800036fa:	4a 38       	lddpc	r8,80003784 <udd_ctrl_in_sent+0x134>
800036fc:	b0 89       	st.b	r8[0x0],r9
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800036fe:	4a 08       	lddpc	r8,8000377c <udd_ctrl_in_sent+0x12c>
80003700:	70 2a       	ld.w	r10,r8[0x8]
80003702:	4a 08       	lddpc	r8,80003780 <udd_ctrl_in_sent+0x130>
80003704:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003706:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
8000370a:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write 
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
8000370c:	fe 68 01 30 	mov	r8,-130768
80003710:	70 08       	ld.w	r8,r8[0x0]
80003712:	e2 18 00 02 	andl	r8,0x2,COH
80003716:	c0 91       	brne	80003728 <udd_ctrl_in_sent+0xd8>
80003718:	30 88       	mov	r8,8
8000371a:	f0 07 19 00 	cp.h	r7,r8
8000371e:	f9 b7 0b 08 	movhi	r7,8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80003722:	58 07       	cp.w	r7,0
80003724:	c0 91       	brne	80003736 <udd_ctrl_in_sent+0xe6>
80003726:	c1 58       	rjmp	80003750 <udd_ctrl_in_sent+0x100>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003728:	e3 bb 00 00 	mtsr	0x0,r11
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
8000372c:	30 49       	mov	r9,4
8000372e:	49 18       	lddpc	r8,80003770 <udd_ctrl_in_sent+0x120>
80003730:	91 09       	st.w	r8[0x0],r9
		return;	// Exit of IN DATA phase
80003732:	e3 cd 80 80 	ldm	sp++,r7,pc
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80003736:	5c 79       	castu.h	r9
80003738:	f4 09 00 09 	add	r9,r10,r9
8000373c:	30 08       	mov	r8,0
8000373e:	ea 18 d0 00 	orh	r8,0xd000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
80003742:	13 3a       	ld.ub	r10,r9++
80003744:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return;	// Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80003746:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8000374a:	ee 0a 19 00 	cp.h	r10,r7
8000374e:	cf a3       	brcs	80003742 <udd_ctrl_in_sent+0xf2>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
80003750:	48 c8       	lddpc	r8,80003780 <udd_ctrl_in_sent+0x130>
80003752:	90 09       	ld.sh	r9,r8[0x0]
80003754:	f2 07 00 07 	add	r7,r9,r7
80003758:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
8000375a:	30 18       	mov	r8,1
8000375c:	fe 69 01 60 	mov	r9,-130720
80003760:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
80003762:	fe 69 01 f0 	mov	r9,-130576
80003766:	93 08       	st.w	r9[0x0],r8
80003768:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
8000376c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003770:	00 00       	add	r0,r0
80003772:	01 b8       	ld.ub	r8,r0[0x3]
80003774:	80 00       	ld.sh	r0,r0[0x0]
80003776:	32 d8       	mov	r8,45
80003778:	80 00       	ld.sh	r0,r0[0x0]
8000377a:	35 0c       	mov	r12,80
8000377c:	00 00       	add	r0,r0
8000377e:	04 18       	sub	r8,r2
80003780:	00 00       	add	r0,r0
80003782:	01 b6       	ld.ub	r6,r0[0x3]
80003784:	00 00       	add	r0,r0
80003786:	01 bc       	ld.ub	r12,r0[0x3]
80003788:	00 00       	add	r0,r0
8000378a:	01 a0       	ld.ub	r0,r0[0x2]

8000378c <udd_enable>:
	return true;
}


void udd_enable(void)
{
8000378c:	eb cd 40 c0 	pushm	r6-r7,lr
	irqflags_t flags;
	sysclk_enable_usb();
80003790:	f0 1f 00 37 	mcall	8000386c <udd_enable+0xe0>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003794:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80003798:	d3 03       	ssrf	0x10

	flags = cpu_irq_save();

	//** Enable USB hardware
	otg_disable();
8000379a:	fe 67 00 00 	mov	r7,-131072
8000379e:	ee f8 08 00 	ld.w	r8,r7[2048]
800037a2:	af d8       	cbr	r8,0xf
800037a4:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_enabled();
800037a8:	ee f8 08 00 	ld.w	r8,r7[2048]
	// Check UID pin state before enter in USB device mode
	if (!Is_otg_id_device())
		return FALSE;
#else
	// Here, only the Device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
800037ac:	30 0a       	mov	r10,0
800037ae:	e0 6b 02 20 	mov	r11,544
800037b2:	4b 0c       	lddpc	r12,80003870 <udd_enable+0xe4>
800037b4:	f0 1f 00 30 	mcall	80003874 <udd_enable+0xe8>
	otg_force_device_mode();
800037b8:	ee f8 08 00 	ld.w	r8,r7[2048]
800037bc:	b9 b8       	sbr	r8,0x19
800037be:	ef 48 08 00 	st.w	r7[2048],r8
800037c2:	ee f8 08 00 	ld.w	r8,r7[2048]
800037c6:	b9 c8       	cbr	r8,0x18
800037c8:	ef 48 08 00 	st.w	r7[2048],r8
#endif
	otg_disable_pad();
800037cc:	ee f8 08 00 	ld.w	r8,r7[2048]
800037d0:	ad c8       	cbr	r8,0xc
800037d2:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable_pad();
800037d6:	ee f8 08 00 	ld.w	r8,r7[2048]
800037da:	ad a8       	sbr	r8,0xc
800037dc:	ef 48 08 00 	st.w	r7[2048],r8
	otg_enable();
800037e0:	ee f8 08 00 	ld.w	r8,r7[2048]
800037e4:	af b8       	sbr	r8,0xf
800037e6:	ef 48 08 00 	st.w	r7[2048],r8
	otg_unfreeze_clock();
800037ea:	ee f8 08 00 	ld.w	r8,r7[2048]
800037ee:	af c8       	cbr	r8,0xe
800037f0:	ef 48 08 00 	st.w	r7[2048],r8
	(void)Is_otg_clock_frozen();
800037f4:	ee f8 08 00 	ld.w	r8,r7[2048]
	// For parts with high speed feature, the "USABLE" clock is the UTMI clock,
	// and the UTMI clock is disabled in suspend mode. Thereby, the utmi clock
	// can't be checked when USB line is not attached or in suspend mode 
#else
	// Check USB clock
	while( !Is_clock_usable() );
800037f8:	0e 99       	mov	r9,r7
800037fa:	f2 f8 08 04 	ld.w	r8,r9[2052]
800037fe:	e2 18 40 00 	andl	r8,0x4000,COH
80003802:	cf c0       	breq	800037fa <udd_enable+0x6e>

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80003804:	49 d8       	lddpc	r8,80003878 <udd_enable+0xec>
80003806:	70 0a       	ld.w	r10,r8[0x0]
80003808:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
8000380a:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
8000380e:	f5 d9 d3 c1 	bfins	r10,r9,0x1e,0x1
80003812:	91 0a       	st.w	r8[0x0],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80003814:	fe 68 00 00 	mov	r8,-131072
80003818:	70 0a       	ld.w	r10,r8[0x0]
8000381a:	ad ca       	cbr	r10,0xc
8000381c:	91 0a       	st.w	r8[0x0],r10
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
8000381e:	70 0a       	ld.w	r10,r8[0x0]
80003820:	e8 1a 0c 00 	orl	r10,0xc00
80003824:	91 0a       	st.w	r8[0x0],r10
#  endif
#endif
	udd_enable_vbus_interrupt();
80003826:	f0 fa 08 00 	ld.w	r10,r8[2048]
8000382a:	a1 ba       	sbr	r10,0x1
8000382c:	f1 4a 08 00 	st.w	r8[2048],r10
	otg_freeze_clock();
80003830:	f0 fa 08 00 	ld.w	r10,r8[2048]
80003834:	af aa       	sbr	r10,0xe
80003836:	f1 4a 08 00 	st.w	r8[2048],r10
	// Always authorize asynchrone USB interrupts to exit of sleep mode
	AVR32_PM.AWEN.usb_waken = 1;
8000383a:	fe 78 0c 00 	mov	r8,-62464
8000383e:	f0 fa 01 44 	ld.w	r10,r8[324]
80003842:	30 1b       	mov	r11,1
80003844:	f5 db d0 01 	bfins	r10,r11,0x0,0x1
80003848:	f1 4a 01 44 	st.w	r8[324],r10

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
8000384c:	48 c8       	lddpc	r8,8000387c <udd_enable+0xf0>
8000384e:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003850:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003854:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80003856:	48 b8       	lddpc	r8,80003880 <udd_enable+0xf4>
80003858:	11 ba       	ld.ub	r10,r8[0x3]
8000385a:	2f fa       	sub	r10,-1
8000385c:	b0 ba       	st.b	r8[0x3],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000385e:	e3 b9 00 00 	mtsr	0x0,r9
80003862:	e3 b6 00 00 	mtsr	0x0,r6
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80003866:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000386a:	00 00       	add	r0,r0
8000386c:	80 00       	ld.sh	r0,r0[0x0]
8000386e:	3f f0       	mov	r0,-1
80003870:	80 00       	ld.sh	r0,r0[0x0]
80003872:	39 90       	mov	r0,-103
80003874:	80 00       	ld.sh	r0,r0[0x0]
80003876:	2f 58       	sub	r8,-11
80003878:	00 00       	add	r0,r0
8000387a:	01 a4       	ld.ub	r4,r0[0x2]
8000387c:	00 00       	add	r0,r0
8000387e:	01 b4       	ld.ub	r4,r0[0x3]
80003880:	00 00       	add	r0,r0
80003882:	04 30       	cp.w	r0,r2

80003884 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80003884:	eb cd 40 fc 	pushm	r2-r7,lr
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
	ep &= USB_EP_ADDR_MASK;
80003888:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
8000388c:	30 17       	mov	r7,1
8000388e:	ee 0e 18 00 	cp.b	lr,r7
80003892:	e0 8b 00 74 	brhi	8000397a <udd_ep_run+0xf6>
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80003896:	fe 67 00 00 	mov	r7,-131072
8000389a:	6e 76       	ld.w	r6,r7[0x1c]
8000389c:	1c 95       	mov	r5,lr
8000389e:	30 17       	mov	r7,1
800038a0:	ee 0e 09 47 	lsl	r7,r7,lr
800038a4:	0c 67       	and	r7,r6
800038a6:	c6 a0       	breq	8000397a <udd_ep_run+0xf6>
			|| Is_udd_endpoint_stall_requested(ep)
800038a8:	fc 07 15 02 	lsl	r7,lr,0x2
800038ac:	fe 64 01 c0 	mov	r4,-130624
800038b0:	ee 04 00 06 	add	r6,r7,r4
800038b4:	6c 06       	ld.w	r6,r6[0x0]
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
800038b6:	e6 16 00 08 	andh	r6,0x8,COH
800038ba:	c6 01       	brne	8000397a <udd_ep_run+0xf6>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep)
		return false;

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
800038bc:	fc c6 00 01 	sub	r6,lr,1
800038c0:	a5 66       	lsl	r6,0x4
800038c2:	4b 34       	lddpc	r4,8000398c <udd_ep_run+0x108>
800038c4:	e8 06 00 06 	add	r6,r4,r6

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested)
800038c8:	6c 04       	ld.w	r4,r6[0x0]
800038ca:	e6 14 40 00 	andh	r4,0x4000,COH
800038ce:	c5 61       	brne	8000397a <udd_ep_run+0xf6>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800038d0:	e1 b3 00 00 	mfsr	r3,0x0
	cpu_irq_disable();
800038d4:	d3 03       	ssrf	0x10
		return false;	// Endpoint is halted

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
800038d6:	6c 04       	ld.w	r4,r6[0x0]
800038d8:	58 04       	cp.w	r4,0
800038da:	c0 54       	brge	800038e4 <udd_ep_run+0x60>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800038dc:	e3 b3 00 00 	mtsr	0x0,r3
#endif
	barrier();
800038e0:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
	bool b_dir_in;
	uint32_t udd_dma_ctrl = 0;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	b_dir_in = (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN));
800038e4:	f9 dc c0 e8 	bfextu	r12,r12,0x7,0x8
	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
		cpu_irq_restore(flags);
		return false;	// Job already on going
	}
	ptr_job->busy = true;
800038e8:	6c 04       	ld.w	r4,r6[0x0]
800038ea:	30 12       	mov	r2,1
800038ec:	e9 d2 d3 e1 	bfins	r4,r2,0x1f,0x1
800038f0:	8d 04       	st.w	r6[0x0],r4
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800038f2:	e3 b3 00 00 	mtsr	0x0,r3
	cpu_irq_restore(flags);

	// The USBB supports a maximum transfer size of 64KB
	if (0x10000 <= buf_size) {
800038f6:	e0 49 ff ff 	cp.w	r9,65535
800038fa:	e0 88 00 07 	brls	80003908 <udd_ep_run+0x84>
		// Transfer size = 64KB
		ptr_job->buf_size = 0x10000;
800038fe:	e0 79 00 00 	mov	r9,65536
80003902:	8d 29       	st.w	r6[0x8],r9
80003904:	30 09       	mov	r9,0
80003906:	c1 18       	rjmp	80003928 <udd_ep_run+0xa4>
		buf_size = 0;
	} else {
		ptr_job->buf_size = buf_size;
80003908:	8d 29       	st.w	r6[0x8],r9
		if (b_dir_in && (0 != buf_size % udd_get_endpoint_size(ep))) {
8000390a:	58 0c       	cp.w	r12,0
8000390c:	c0 e0       	breq	80003928 <udd_ep_run+0xa4>
8000390e:	fe 63 01 00 	mov	r3,-130816
80003912:	ee 03 00 04 	add	r4,r7,r3
80003916:	68 04       	ld.w	r4,r4[0x0]
80003918:	e9 d4 c0 83 	bfextu	r4,r4,0x4,0x3
8000391c:	30 83       	mov	r3,8
8000391e:	e6 04 09 44 	lsl	r4,r3,r4
80003922:	20 14       	sub	r4,1
80003924:	12 64       	and	r4,r9
80003926:	c2 c1       	brne	8000397e <udd_ep_run+0xfa>
			// Force short packet option to send a shortpacket on IN,
			// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
			b_shortpacket = true;
		}
	}
	ptr_job->buf = buf;
80003928:	8d 1a       	st.w	r6[0x4],r10
	ptr_job->call_trans = callback;
8000392a:	8d 38       	st.w	r6[0xc],r8

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
8000392c:	a5 6e       	lsl	lr,0x4
8000392e:	e0 3e fd 00 	sub	lr,130304
80003932:	9d 1a       	st.w	lr[0x4],r10
	if (b_shortpacket) {
80003934:	58 0b       	cp.w	r11,0
80003936:	c0 31       	brne	8000393c <udd_ep_run+0xb8>
80003938:	30 08       	mov	r8,0
8000393a:	c0 68       	rjmp	80003946 <udd_ep_run+0xc2>
		if (b_dir_in) {
8000393c:	58 0c       	cp.w	r12,0
8000393e:	c0 31       	brne	80003944 <udd_ep_run+0xc0>
80003940:	31 48       	mov	r8,20
80003942:	c0 28       	rjmp	80003946 <udd_ep_run+0xc2>
80003944:	30 88       	mov	r8,8
			udd_dma_ctrl = AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
					|
					AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
		}
	}
	udd_dma_ctrl |= (buf_size <<
80003946:	e8 18 00 21 	orl	r8,0x21
			AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
			& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
	udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
8000394a:	f1 e9 11 09 	or	r9,r8,r9<<0x10
			AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;
	udd_enable_endpoint_bank_autoswitch(ep);
8000394e:	e0 37 ff 00 	sub	r7,130816
80003952:	6e 08       	ld.w	r8,r7[0x0]
80003954:	a9 b8       	sbr	r8,0x9
80003956:	8f 08       	st.w	r7[0x0],r8
	udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
80003958:	9d 29       	st.w	lr[0x8],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000395a:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
8000395e:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_endpoint_dma_interrupt(ep);
80003960:	20 15       	sub	r5,1
80003962:	30 09       	mov	r9,0
80003964:	ea 19 02 00 	orh	r9,0x200
80003968:	f2 05 09 45 	lsl	r5,r9,r5
8000396c:	fe 69 00 00 	mov	r9,-131072
80003970:	93 65       	st.w	r9[0x18],r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003972:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
80003976:	e3 cf 90 fc 	ldm	sp++,r2-r7,pc,r12=1
	cpu_irq_restore(flags);

	return true;
8000397a:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
			// Force short packet option to send a shortpacket on IN,
			// else the DMA transfer is accepted and interrupt DMA valid but nothing is sent.
			b_shortpacket = true;
		}
	}
	ptr_job->buf = buf;
8000397e:	8d 1a       	st.w	r6[0x4],r10
	ptr_job->call_trans = callback;
80003980:	8d 38       	st.w	r6[0xc],r8

	// Start USB DMA to fill or read fifo of the selected endpoint
	udd_endpoint_dma_set_addr(ep, (U32) buf);
80003982:	a5 6e       	lsl	lr,0x4
80003984:	e0 3e fd 00 	sub	lr,130304
80003988:	9d 1a       	st.w	lr[0x4],r10
8000398a:	cd db       	rjmp	80003944 <udd_ep_run+0xc0>
8000398c:	00 00       	add	r0,r0
8000398e:	01 a4       	ld.ub	r4,r0[0x2]

80003990 <udd_interrupt>:
#define AVR32_USBB_IRQ_GROUP AVR32_USB_IRQ_GROUP
#endif
#endif
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
80003990:	d4 01       	pushm	lr
#ifdef UDC_SOF_EVENT
	if (Is_udd_sof()) {
80003992:	fe 68 00 00 	mov	r8,-131072
80003996:	70 18       	ld.w	r8,r8[0x4]
80003998:	e2 18 00 04 	andl	r8,0x4,COH
8000399c:	c0 90       	breq	800039ae <udd_interrupt+0x1e>
		udd_ack_sof();
8000399e:	30 49       	mov	r9,4
800039a0:	fe 68 00 00 	mov	r8,-131072
800039a4:	91 29       	st.w	r8[0x8],r9
		UDC_SOF_EVENT();
800039a6:	f0 1f 01 3c 	mcall	80003e94 <udd_interrupt+0x504>
		goto udd_interrupt_end;
800039aa:	e0 8f 02 63 	bral	80003e70 <udd_interrupt+0x4e0>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
800039ae:	fe 68 00 00 	mov	r8,-131072
800039b2:	70 18       	ld.w	r8,r8[0x4]
800039b4:	e2 18 10 00 	andl	r8,0x1000,COH
800039b8:	e0 80 01 80 	breq	80003cb8 <udd_interrupt+0x328>
		return false;	// No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
800039bc:	fe 68 02 20 	mov	r8,-130528
800039c0:	31 09       	mov	r9,16
800039c2:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
800039c4:	30 89       	mov	r9,8
800039c6:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
800039c8:	fe 68 01 30 	mov	r8,-130768
800039cc:	70 08       	ld.w	r8,r8[0x0]
800039ce:	e2 18 00 04 	andl	r8,0x4,COH
800039d2:	c7 e0       	breq	80003ace <udd_interrupt+0x13e>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
800039d4:	fe f8 04 c4 	ld.w	r8,pc[1220]
800039d8:	70 08       	ld.w	r8,r8[0x0]
800039da:	58 08       	cp.w	r8,0
800039dc:	c0 50       	breq	800039e6 <udd_interrupt+0x56>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
800039de:	f0 1f 01 30 	mcall	80003e9c <udd_interrupt+0x50c>
		// Reinitializes control endpoint management
		udd_ctrl_init();
800039e2:	f0 1f 01 30 	mcall	80003ea0 <udd_interrupt+0x510>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
800039e6:	fe 68 01 30 	mov	r8,-130768
800039ea:	70 08       	ld.w	r8,r8[0x0]
800039ec:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
800039f0:	58 88       	cp.w	r8,8
800039f2:	c0 90       	breq	80003a04 <udd_interrupt+0x74>
		udd_ctrl_stall_data();
800039f4:	f0 1f 01 2c 	mcall	80003ea4 <udd_interrupt+0x514>
		udd_ack_setup_received(0);
800039f8:	30 49       	mov	r9,4
800039fa:	fe 68 01 60 	mov	r8,-130720
800039fe:	91 09       	st.w	r8[0x0],r9
80003a00:	e0 8f 02 38 	bral	80003e70 <udd_interrupt+0x4e0>
		return;	// Error data number doesn't correspond to SETUP packet
	}
	uint32_t *ptr = (uint32_t *) & udd_get_endpoint_fifo_access(0, 32);
	for (i = 0; i < 8 / 4; i++) {
		((uint32_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
80003a04:	fe f8 04 a4 	ld.w	r8,pc[1188]
80003a08:	30 09       	mov	r9,0
80003a0a:	ea 19 d0 00 	orh	r9,0xd000
80003a0e:	72 0a       	ld.w	r10,r9[0x0]
80003a10:	91 0a       	st.w	r8[0x0],r10
80003a12:	30 49       	mov	r9,4
80003a14:	ea 19 d0 00 	orh	r9,0xd000
80003a18:	72 09       	ld.w	r9,r9[0x0]
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80003a1a:	5c ca       	swap.bh	r10
80003a1c:	b0 1a       	st.h	r8[0x2],r10
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80003a1e:	f2 0a 14 10 	asr	r10,r9,0x10
80003a22:	5c ca       	swap.bh	r10
80003a24:	b0 2a       	st.h	r8[0x4],r10
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80003a26:	5c c9       	swap.bh	r9
80003a28:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80003a2a:	f0 1f 01 21 	mcall	80003eac <udd_interrupt+0x51c>
80003a2e:	c0 91       	brne	80003a40 <udd_interrupt+0xb0>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
80003a30:	f0 1f 01 1d 	mcall	80003ea4 <udd_interrupt+0x514>
		udd_ack_setup_received(0);
80003a34:	30 49       	mov	r9,4
80003a36:	fe 68 01 60 	mov	r8,-130720
80003a3a:	91 09       	st.w	r8[0x0],r9
80003a3c:	e0 8f 02 1a 	bral	80003e70 <udd_interrupt+0x4e0>
		return;
	}
	udd_ack_setup_received(0);
80003a40:	30 49       	mov	r9,4
80003a42:	fe 68 01 60 	mov	r8,-130720
80003a46:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80003a48:	fe f8 04 60 	ld.w	r8,pc[1120]
80003a4c:	11 89       	ld.ub	r9,r8[0x0]
80003a4e:	30 08       	mov	r8,0
80003a50:	f0 09 18 00 	cp.b	r9,r8
80003a54:	c1 94       	brge	80003a86 <udd_interrupt+0xf6>
		// Compute if an IN ZLP must be send after IN data
		udd_ctrl_payload_need_in_zlp =
80003a56:	fe f8 04 52 	ld.w	r8,pc[1106]
80003a5a:	90 e8       	ld.uh	r8,r8[0xc]
80003a5c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003a60:	5f 09       	sreq	r9
80003a62:	fe f8 04 4e 	ld.w	r8,pc[1102]
80003a66:	b0 89       	st.b	r8[0x0],r9
				((udd_g_ctrlreq.payload_size %
						USB_DEVICE_EP_CTRL_SIZE) == 0);
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80003a68:	30 08       	mov	r8,0
80003a6a:	fe f9 04 4a 	ld.w	r9,pc[1098]
80003a6e:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80003a70:	fe f9 04 48 	ld.w	r9,pc[1096]
80003a74:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80003a76:	30 29       	mov	r9,2
80003a78:	fe f8 04 20 	ld.w	r8,pc[1056]
80003a7c:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent();	// Send first data transfer
80003a7e:	f0 1f 01 10 	mcall	80003ebc <udd_interrupt+0x52c>
80003a82:	e0 8f 01 f7 	bral	80003e70 <udd_interrupt+0x4e0>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80003a86:	fe f8 04 22 	ld.w	r8,pc[1058]
80003a8a:	90 39       	ld.sh	r9,r8[0x6]
80003a8c:	30 08       	mov	r8,0
80003a8e:	f0 09 19 00 	cp.h	r9,r8
80003a92:	c0 51       	brne	80003a9c <udd_interrupt+0x10c>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80003a94:	f0 1f 01 0b 	mcall	80003ec0 <udd_interrupt+0x530>
80003a98:	e0 8f 01 ec 	bral	80003e70 <udd_interrupt+0x4e0>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80003a9c:	30 08       	mov	r8,0
80003a9e:	fe f9 04 16 	ld.w	r9,pc[1046]
80003aa2:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80003aa4:	fe f9 04 14 	ld.w	r9,pc[1044]
80003aa8:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80003aaa:	30 19       	mov	r9,1
80003aac:	fe f8 03 ec 	ld.w	r8,pc[1004]
80003ab0:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80003ab2:	31 08       	mov	r8,16
80003ab4:	fe 69 01 60 	mov	r9,-130720
80003ab8:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003aba:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003abe:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80003ac0:	fe 6a 01 f0 	mov	r10,-130576
80003ac4:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003ac6:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80003aca:	e0 8f 01 d3 	bral	80003e70 <udd_interrupt+0x4e0>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80003ace:	fe 68 01 30 	mov	r8,-130768
80003ad2:	70 08       	ld.w	r8,r8[0x0]
80003ad4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003ad8:	c0 b0       	breq	80003aee <udd_interrupt+0x15e>
80003ada:	fe 68 01 c0 	mov	r8,-130624
80003ade:	70 08       	ld.w	r8,r8[0x0]
80003ae0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003ae4:	c0 50       	breq	80003aee <udd_interrupt+0x15e>
		// IN packet sent
		udd_ctrl_in_sent();
80003ae6:	f0 1f 00 f6 	mcall	80003ebc <udd_interrupt+0x52c>
80003aea:	e0 8f 01 c3 	bral	80003e70 <udd_interrupt+0x4e0>
		return true;
	}
	if (Is_udd_out_received(0)) {
80003aee:	fe 68 01 30 	mov	r8,-130768
80003af2:	70 08       	ld.w	r8,r8[0x0]
80003af4:	e2 18 00 02 	andl	r8,0x2,COH
80003af8:	e0 80 00 a1 	breq	80003c3a <udd_interrupt+0x2aa>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80003afc:	fe f8 03 9c 	ld.w	r8,pc[924]
80003b00:	70 08       	ld.w	r8,r8[0x0]
80003b02:	58 18       	cp.w	r8,1
80003b04:	c1 10       	breq	80003b26 <udd_interrupt+0x196>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80003b06:	58 28       	cp.w	r8,2
80003b08:	5f 09       	sreq	r9
80003b0a:	58 48       	cp.w	r8,4
80003b0c:	5f 08       	sreq	r8
80003b0e:	f3 e8 10 08 	or	r8,r9,r8
80003b12:	c0 40       	breq	80003b1a <udd_interrupt+0x18a>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
80003b14:	f0 1f 00 e2 	mcall	80003e9c <udd_interrupt+0x50c>
80003b18:	c0 38       	rjmp	80003b1e <udd_interrupt+0x18e>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80003b1a:	f0 1f 00 e3 	mcall	80003ea4 <udd_interrupt+0x514>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80003b1e:	f0 1f 00 e1 	mcall	80003ea0 <udd_interrupt+0x510>
80003b22:	e0 8f 01 a7 	bral	80003e70 <udd_interrupt+0x4e0>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80003b26:	fe 68 01 30 	mov	r8,-130768
80003b2a:	70 0b       	ld.w	r11,r8[0x0]
80003b2c:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80003b30:	fe f8 03 78 	ld.w	r8,pc[888]
80003b34:	90 69       	ld.sh	r9,r8[0xc]
80003b36:	fe f8 03 82 	ld.w	r8,pc[898]
80003b3a:	90 08       	ld.sh	r8,r8[0x0]
80003b3c:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80003b40:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80003b44:	f6 0a 00 0a 	add	r10,r11,r10
80003b48:	14 3c       	cp.w	r12,r10
80003b4a:	c0 44       	brge	80003b52 <udd_interrupt+0x1c2>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80003b4c:	10 19       	sub	r9,r8
80003b4e:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80003b52:	fe f9 03 56 	ld.w	r9,pc[854]
80003b56:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
80003b58:	58 0b       	cp.w	r11,0
80003b5a:	e0 80 01 91 	breq	80003e7c <udd_interrupt+0x4ec>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80003b5e:	5c 78       	castu.h	r8
80003b60:	10 09       	add	r9,r8
80003b62:	30 08       	mov	r8,0
80003b64:	ea 18 d0 00 	orh	r8,0xd000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80003b68:	11 3a       	ld.ub	r10,r8++
80003b6a:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80003b6c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80003b70:	f6 0a 19 00 	cp.h	r10,r11
80003b74:	cf a3       	brcs	80003b68 <udd_interrupt+0x1d8>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80003b76:	fe f9 03 42 	ld.w	r9,pc[834]
80003b7a:	92 08       	ld.sh	r8,r9[0x0]
80003b7c:	16 08       	add	r8,r11
80003b7e:	5c 88       	casts.h	r8
80003b80:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80003b82:	30 89       	mov	r9,8
80003b84:	f2 0b 19 00 	cp.h	r11,r9
80003b88:	c0 e1       	brne	80003ba4 <udd_interrupt+0x214>
80003b8a:	fe f9 03 1e 	ld.w	r9,pc[798]
80003b8e:	92 ba       	ld.uh	r10,r9[0x6]
80003b90:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003b94:	fe f9 03 20 	ld.w	r9,pc[800]
80003b98:	92 89       	ld.uh	r9,r9[0x0]
80003b9a:	f6 09 00 09 	add	r9,r11,r9
80003b9e:	12 3a       	cp.w	r10,r9
80003ba0:	e0 89 00 18 	brgt	80003bd0 <udd_interrupt+0x240>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback 
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80003ba4:	fe f9 03 04 	ld.w	r9,pc[772]
80003ba8:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80003baa:	72 5c       	ld.w	r12,r9[0x14]
80003bac:	58 0c       	cp.w	r12,0
80003bae:	c0 a0       	breq	80003bc2 <udd_interrupt+0x232>
			if (!udd_g_ctrlreq.over_under_run()) {
80003bb0:	5d 1c       	icall	r12
80003bb2:	c0 81       	brne	80003bc2 <udd_interrupt+0x232>
				// Stall ZLP
				udd_ctrl_stall_data();
80003bb4:	f0 1f 00 bc 	mcall	80003ea4 <udd_interrupt+0x514>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80003bb8:	30 29       	mov	r9,2
80003bba:	fe 68 01 60 	mov	r8,-130720
80003bbe:	91 09       	st.w	r8[0x0],r9
80003bc0:	c5 89       	rjmp	80003e70 <udd_interrupt+0x4e0>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80003bc2:	30 29       	mov	r9,2
80003bc4:	fe 68 01 60 	mov	r8,-130720
80003bc8:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80003bca:	f0 1f 00 be 	mcall	80003ec0 <udd_interrupt+0x530>
80003bce:	c5 19       	rjmp	80003e70 <udd_interrupt+0x4e0>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80003bd0:	fe f9 02 d8 	ld.w	r9,pc[728]
80003bd4:	92 69       	ld.sh	r9,r9[0xc]
80003bd6:	f0 09 19 00 	cp.h	r9,r8
80003bda:	c2 11       	brne	80003c1c <udd_interrupt+0x28c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80003bdc:	fe f8 02 cc 	ld.w	r8,pc[716]
80003be0:	70 5c       	ld.w	r12,r8[0x14]
80003be2:	58 0c       	cp.w	r12,0
80003be4:	c0 81       	brne	80003bf4 <udd_interrupt+0x264>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
80003be6:	f0 1f 00 b0 	mcall	80003ea4 <udd_interrupt+0x514>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80003bea:	30 29       	mov	r9,2
80003bec:	fe 68 01 60 	mov	r8,-130720
80003bf0:	91 09       	st.w	r8[0x0],r9
80003bf2:	c3 f9       	rjmp	80003e70 <udd_interrupt+0x4e0>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80003bf4:	5d 1c       	icall	r12
80003bf6:	c0 81       	brne	80003c06 <udd_interrupt+0x276>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80003bf8:	f0 1f 00 ab 	mcall	80003ea4 <udd_interrupt+0x514>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80003bfc:	30 29       	mov	r9,2
80003bfe:	fe 68 01 60 	mov	r8,-130720
80003c02:	91 09       	st.w	r8[0x0],r9
80003c04:	c3 69       	rjmp	80003e70 <udd_interrupt+0x4e0>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80003c06:	fe f9 02 ae 	ld.w	r9,pc[686]
80003c0a:	fe f8 02 ae 	ld.w	r8,pc[686]
80003c0e:	90 0b       	ld.sh	r11,r8[0x0]
80003c10:	92 0a       	ld.sh	r10,r9[0x0]
80003c12:	f6 0a 00 0a 	add	r10,r11,r10
80003c16:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80003c18:	30 09       	mov	r9,0
80003c1a:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80003c1c:	fe 69 01 60 	mov	r9,-130720
80003c20:	30 28       	mov	r8,2
80003c22:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80003c24:	31 08       	mov	r8,16
80003c26:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003c28:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003c2c:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80003c2e:	fe 6a 01 f0 	mov	r10,-130576
80003c32:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003c34:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80003c38:	c1 c9       	rjmp	80003e70 <udd_interrupt+0x4e0>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80003c3a:	fe 68 01 30 	mov	r8,-130768
80003c3e:	70 08       	ld.w	r8,r8[0x0]
80003c40:	e2 18 00 08 	andl	r8,0x8,COH
80003c44:	c1 80       	breq	80003c74 <udd_interrupt+0x2e4>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80003c46:	30 89       	mov	r9,8
80003c48:	fe 68 01 60 	mov	r8,-130720
80003c4c:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80003c4e:	fe 68 01 30 	mov	r8,-130768
80003c52:	70 08       	ld.w	r8,r8[0x0]
80003c54:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003c58:	e0 81 01 0c 	brne	80003e70 <udd_interrupt+0x4e0>
		return;	// overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80003c5c:	fe f8 02 3c 	ld.w	r8,pc[572]
80003c60:	70 08       	ld.w	r8,r8[0x0]
80003c62:	58 38       	cp.w	r8,3
80003c64:	e0 81 01 06 	brne	80003e70 <udd_interrupt+0x4e0>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80003c68:	e8 69 00 00 	mov	r9,524288
80003c6c:	fe 68 01 f0 	mov	r8,-130576
80003c70:	91 09       	st.w	r8[0x0],r9
80003c72:	cf f8       	rjmp	80003e70 <udd_interrupt+0x4e0>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80003c74:	fe 68 01 30 	mov	r8,-130768
80003c78:	70 08       	ld.w	r8,r8[0x0]
80003c7a:	e2 18 00 10 	andl	r8,0x10,COH
80003c7e:	c1 d0       	breq	80003cb8 <udd_interrupt+0x328>
		// Underflow on IN packet
		udd_ack_nak_in(0);
80003c80:	31 09       	mov	r9,16
80003c82:	fe 68 01 60 	mov	r8,-130720
80003c86:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80003c88:	fe 68 01 30 	mov	r8,-130768
80003c8c:	70 08       	ld.w	r8,r8[0x0]
80003c8e:	e2 18 00 02 	andl	r8,0x2,COH
80003c92:	e0 81 00 ef 	brne	80003e70 <udd_interrupt+0x4e0>
		return;	// underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80003c96:	fe f8 02 02 	ld.w	r8,pc[514]
80003c9a:	70 08       	ld.w	r8,r8[0x0]
80003c9c:	58 18       	cp.w	r8,1
80003c9e:	c0 41       	brne	80003ca6 <udd_interrupt+0x316>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80003ca0:	f0 1f 00 88 	mcall	80003ec0 <udd_interrupt+0x530>
80003ca4:	ce 68       	rjmp	80003e70 <udd_interrupt+0x4e0>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80003ca6:	58 48       	cp.w	r8,4
80003ca8:	e0 81 00 e4 	brne	80003e70 <udd_interrupt+0x4e0>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80003cac:	e8 69 00 00 	mov	r9,524288
80003cb0:	fe 68 01 f0 	mov	r8,-130576
80003cb4:	91 09       	st.w	r8[0x0],r9
80003cb6:	cd d8       	rjmp	80003e70 <udd_interrupt+0x4e0>
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80003cb8:	fe 68 00 00 	mov	r8,-131072
80003cbc:	70 48       	ld.w	r8,r8[0x10]
80003cbe:	e6 18 02 00 	andh	r8,0x200,COH
80003cc2:	c3 00       	breq	80003d22 <udd_interrupt+0x392>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80003cc4:	fe 68 00 00 	mov	r8,-131072
80003cc8:	70 18       	ld.w	r8,r8[0x4]
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80003cca:	e6 18 02 00 	andh	r8,0x200,COH
80003cce:	c2 a0       	breq	80003d22 <udd_interrupt+0x392>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			udd_disable_endpoint_dma_interrupt(ep);
80003cd0:	30 09       	mov	r9,0
80003cd2:	ea 19 02 00 	orh	r9,0x200
80003cd6:	fe 68 00 00 	mov	r8,-131072
80003cda:	91 59       	st.w	r8[0x14],r9
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
80003cdc:	fe 68 03 10 	mov	r8,-130288
80003ce0:	70 39       	ld.w	r9,r8[0xc]
					>>
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			// Get job corresponding at endpoint
			ptr_job = &udd_ep_job[ep - 1];
			// Update number of data transfered
			ptr_job->buf_size -= nb_remaining;
80003ce2:	4f 98       	lddpc	r8,80003ec4 <udd_interrupt+0x534>
80003ce4:	b1 89       	lsr	r9,0x10
80003ce6:	70 2a       	ld.w	r10,r8[0x8]
80003ce8:	12 1a       	sub	r10,r9
80003cea:	91 2a       	st.w	r8[0x8],r10

			if (!Is_udd_endpoint_in(ep)) {
80003cec:	fe 68 01 04 	mov	r8,-130812
80003cf0:	70 08       	ld.w	r8,r8[0x0]
80003cf2:	e2 18 01 00 	andl	r8,0x100,COH
80003cf6:	c0 71       	brne	80003d04 <udd_interrupt+0x374>
				// Disable autoswitch bank on OUT
				udd_disable_endpoint_bank_autoswitch(ep);
80003cf8:	fe 68 01 04 	mov	r8,-130812
80003cfc:	70 09       	ld.w	r9,r8[0x0]
80003cfe:	a9 d9       	cbr	r9,0x9
80003d00:	91 09       	st.w	r8[0x0],r9
80003d02:	c0 b8       	rjmp	80003d18 <udd_interrupt+0x388>
			} else {
				// Wait end of background transfer on IN endpoint before disabled autoswitch bank
				udd_enable_endpoint_interrupt(ep);
80003d04:	e0 69 20 00 	mov	r9,8192
80003d08:	fe 68 00 00 	mov	r8,-131072
80003d0c:	91 69       	st.w	r8[0x18],r9
				udd_enable_bank_interrupt(ep);
80003d0e:	e0 69 10 00 	mov	r9,4096
80003d12:	fe 68 01 f4 	mov	r8,-130572
80003d16:	91 09       	st.w	r8[0x0],r9
			}
			// Call callback to signal end of transfer
			udd_ep_finish_job(&udd_ep_job[ep - 1], false);
80003d18:	30 0b       	mov	r11,0
80003d1a:	4e bc       	lddpc	r12,80003ec4 <udd_interrupt+0x534>
80003d1c:	f0 1f 00 6b 	mcall	80003ec8 <udd_interrupt+0x538>
80003d20:	ca 88       	rjmp	80003e70 <udd_interrupt+0x4e0>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)
80003d22:	fe 68 00 00 	mov	r8,-131072
80003d26:	70 48       	ld.w	r8,r8[0x10]
80003d28:	e2 18 20 00 	andl	r8,0x2000,COH
80003d2c:	e0 80 00 ac 	breq	80003e84 <udd_interrupt+0x4f4>
				&& (0 == udd_nb_busy_bank(ep))) {
80003d30:	fe 68 01 34 	mov	r8,-130764
80003d34:	70 08       	ld.w	r8,r8[0x0]
			// Call callback to signal end of transfer
			udd_ep_finish_job(&udd_ep_job[ep - 1], false);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)
80003d36:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80003d3a:	e0 81 00 a5 	brne	80003e84 <udd_interrupt+0x4f4>
				&& (0 == udd_nb_busy_bank(ep))) {
			// End of background transfer on IN endpoint
			udd_disable_bank_interrupt(ep);
80003d3e:	e0 69 10 00 	mov	r9,4096
80003d42:	fe 68 02 24 	mov	r8,-130524
80003d46:	91 09       	st.w	r8[0x0],r9
			udd_disable_endpoint_interrupt(ep);
80003d48:	e0 69 20 00 	mov	r9,8192
80003d4c:	fe 68 00 00 	mov	r8,-131072
80003d50:	91 59       	st.w	r8[0x14],r9
			// If no new transfer running then disable autoswitch bank
			if (!udd_ep_job[ep - 1].busy) {
80003d52:	4d d8       	lddpc	r8,80003ec4 <udd_interrupt+0x534>
80003d54:	70 08       	ld.w	r8,r8[0x0]
80003d56:	58 08       	cp.w	r8,0
80003d58:	c0 65       	brlt	80003d64 <udd_interrupt+0x3d4>
				udd_disable_endpoint_bank_autoswitch(ep);
80003d5a:	fe 68 01 04 	mov	r8,-130812
80003d5e:	70 09       	ld.w	r9,r8[0x0]
80003d60:	a9 d9       	cbr	r9,0x9
80003d62:	91 09       	st.w	r8[0x0],r9
			}
			// If a stall has been requested during backgound transfer then execute it
			if (udd_ep_job[ep - 1].stall_requested) {
80003d64:	4d 88       	lddpc	r8,80003ec4 <udd_interrupt+0x534>
80003d66:	70 09       	ld.w	r9,r8[0x0]
80003d68:	f3 d9 c3 c1 	bfextu	r9,r9,0x1e,0x1
80003d6c:	30 08       	mov	r8,0
80003d6e:	f0 09 18 00 	cp.b	r9,r8
80003d72:	c7 f0       	breq	80003e70 <udd_interrupt+0x4e0>
				udd_ep_job[ep - 1].stall_requested = false;
80003d74:	4d 48       	lddpc	r8,80003ec4 <udd_interrupt+0x534>
80003d76:	70 09       	ld.w	r9,r8[0x0]
80003d78:	30 0a       	mov	r10,0
80003d7a:	f3 da d3 c1 	bfins	r9,r10,0x1e,0x1
80003d7e:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
80003d80:	fe 68 01 f4 	mov	r8,-130572
80003d84:	e8 69 00 00 	mov	r9,524288
80003d88:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
80003d8a:	e4 69 00 00 	mov	r9,262144
80003d8e:	91 09       	st.w	r8[0x0],r9
80003d90:	c7 08       	rjmp	80003e70 <udd_interrupt+0x4e0>
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
80003d92:	30 89       	mov	r9,8
80003d94:	fe 68 00 00 	mov	r8,-131072
80003d98:	91 29       	st.w	r8[0x8],r9
static void udd_ep_job_table_kill(void)
{
	uint8_t i;
	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
80003d9a:	30 1b       	mov	r11,1
80003d9c:	4c ac       	lddpc	r12,80003ec4 <udd_interrupt+0x534>
80003d9e:	f0 1f 00 4b 	mcall	80003ec8 <udd_interrupt+0x538>
		// Abort all jobs on-going
#if (0!=USB_DEVICE_MAX_EP)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
80003da2:	f0 1f 00 4b 	mcall	80003ecc <udd_interrupt+0x53c>
		// Reset endpoint control
		udd_reset_ep_ctrl();
80003da6:	f0 1f 00 4b 	mcall	80003ed0 <udd_interrupt+0x540>
		// Reset endpoint control management
		udd_ctrl_init();
80003daa:	f0 1f 00 3e 	mcall	80003ea0 <udd_interrupt+0x510>
		goto udd_interrupt_end;
80003dae:	c6 18       	rjmp	80003e70 <udd_interrupt+0x4e0>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80003db0:	fe 68 00 00 	mov	r8,-131072
80003db4:	70 48       	ld.w	r8,r8[0x10]
80003db6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003dba:	c1 d0       	breq	80003df4 <udd_interrupt+0x464>
80003dbc:	fe 68 00 00 	mov	r8,-131072
80003dc0:	70 18       	ld.w	r8,r8[0x4]
80003dc2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003dc6:	c1 70       	breq	80003df4 <udd_interrupt+0x464>
		otg_unfreeze_clock();
80003dc8:	fe 68 00 00 	mov	r8,-131072
80003dcc:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003dd0:	af c9       	cbr	r9,0xe
80003dd2:	f1 49 08 00 	st.w	r8[2048],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80003dd6:	30 19       	mov	r9,1
80003dd8:	91 59       	st.w	r8[0x14],r9
		udd_enable_wake_up_interrupt();
80003dda:	31 09       	mov	r9,16
80003ddc:	91 69       	st.w	r8[0x18],r9
		otg_freeze_clock();	// Mandatory to exit of sleep mode after a wakeup event
80003dde:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003de2:	af a9       	sbr	r9,0xe
80003de4:	f1 49 08 00 	st.w	r8[2048],r9
		udd_sleep_mode(false);	// Enter in SUSPEND mode
80003de8:	30 0c       	mov	r12,0
80003dea:	f0 1f 00 3b 	mcall	80003ed4 <udd_interrupt+0x544>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
80003dee:	f0 1f 00 3b 	mcall	80003ed8 <udd_interrupt+0x548>
#endif
		goto udd_interrupt_end;
80003df2:	c3 f8       	rjmp	80003e70 <udd_interrupt+0x4e0>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80003df4:	fe 68 00 00 	mov	r8,-131072
80003df8:	70 48       	ld.w	r8,r8[0x10]
80003dfa:	e2 18 00 10 	andl	r8,0x10,COH
80003dfe:	c2 30       	breq	80003e44 <udd_interrupt+0x4b4>
80003e00:	fe 68 00 00 	mov	r8,-131072
80003e04:	70 18       	ld.w	r8,r8[0x4]
80003e06:	e2 18 00 10 	andl	r8,0x10,COH
80003e0a:	c1 d0       	breq	80003e44 <udd_interrupt+0x4b4>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80003e0c:	fe 68 00 00 	mov	r8,-131072
80003e10:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003e14:	af c9       	cbr	r9,0xe
80003e16:	f1 49 08 00 	st.w	r8[2048],r9
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80003e1a:	c0 58       	rjmp	80003e24 <udd_interrupt+0x494>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
80003e1c:	70 19       	ld.w	r9,r8[0x4]
80003e1e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003e22:	c0 61       	brne	80003e2e <udd_interrupt+0x49e>

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_clock_usable() ) {
80003e24:	f0 f9 08 04 	ld.w	r9,r8[2052]
80003e28:	e2 19 40 00 	andl	r9,0x4000,COH
80003e2c:	cf 80       	breq	80003e1c <udd_interrupt+0x48c>
			if(Is_udd_suspend()) break;   // In case of USB state change in HS
		};
		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80003e2e:	fe 68 00 00 	mov	r8,-131072
80003e32:	31 09       	mov	r9,16
80003e34:	91 59       	st.w	r8[0x14],r9
		udd_enable_suspend_interrupt();
80003e36:	30 1c       	mov	r12,1
80003e38:	91 6c       	st.w	r8[0x18],r12
		udd_sleep_mode(true);	// Enter in IDLE mode
80003e3a:	f0 1f 00 27 	mcall	80003ed4 <udd_interrupt+0x544>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
80003e3e:	f0 1f 00 28 	mcall	80003edc <udd_interrupt+0x54c>
#endif
		goto udd_interrupt_end;
80003e42:	c1 78       	rjmp	80003e70 <udd_interrupt+0x4e0>
	}

	if (Is_udd_vbus_transition()) {
80003e44:	fe 68 00 00 	mov	r8,-131072
80003e48:	f0 f8 08 04 	ld.w	r8,r8[2052]
80003e4c:	e2 18 00 02 	andl	r8,0x2,COH
80003e50:	c1 00       	breq	80003e70 <udd_interrupt+0x4e0>
		// Ack VBus transition and send status to high level
		otg_unfreeze_clock();
80003e52:	fe 68 00 00 	mov	r8,-131072
80003e56:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003e5a:	af c9       	cbr	r9,0xe
80003e5c:	f1 49 08 00 	st.w	r8[2048],r9
		udd_ack_vbus_transition();
80003e60:	30 29       	mov	r9,2
80003e62:	f1 49 08 08 	st.w	r8[2056],r9
		otg_freeze_clock();
80003e66:	f0 f9 08 00 	ld.w	r9,r8[2048]
80003e6a:	af a9       	sbr	r9,0xe
80003e6c:	f1 49 08 00 	st.w	r8[2048],r9
		UDC_VBUS_EVENT(Is_udd_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80003e70:	fe 68 00 00 	mov	r8,-131072
80003e74:	f0 f8 08 18 	ld.w	r8,r8[2072]
	return;
}
80003e78:	d4 02       	popm	lr
80003e7a:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80003e7c:	48 f9       	lddpc	r9,80003eb8 <udd_interrupt+0x528>
80003e7e:	b2 08       	st.h	r9[0x0],r8
80003e80:	fe 9f fe 92 	bral	80003ba4 <udd_interrupt+0x214>
	if (udd_ep_interrupt())
		goto udd_interrupt_end;	// Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80003e84:	fe 68 00 00 	mov	r8,-131072
80003e88:	70 18       	ld.w	r8,r8[0x4]
80003e8a:	e2 18 00 08 	andl	r8,0x8,COH
80003e8e:	c9 10       	breq	80003db0 <udd_interrupt+0x420>
80003e90:	c8 1b       	rjmp	80003d92 <udd_interrupt+0x402>
80003e92:	00 00       	add	r0,r0
80003e94:	80 00       	ld.sh	r0,r0[0x0]
80003e96:	4d b0       	lddpc	r0,80004000 <sysclk_enable_usb+0x10>
80003e98:	00 00       	add	r0,r0
80003e9a:	01 b8       	ld.ub	r8,r0[0x3]
80003e9c:	80 00       	ld.sh	r0,r0[0x0]
80003e9e:	32 d8       	mov	r8,45
80003ea0:	80 00       	ld.sh	r0,r0[0x0]
80003ea2:	35 0c       	mov	r12,80
80003ea4:	80 00       	ld.sh	r0,r0[0x0]
80003ea6:	32 c0       	mov	r0,44
80003ea8:	00 00       	add	r0,r0
80003eaa:	04 18       	sub	r8,r2
80003eac:	80 00       	ld.sh	r0,r0[0x0]
80003eae:	46 8c       	lddsp	r12,sp[0x1a0]
80003eb0:	00 00       	add	r0,r0
80003eb2:	01 bc       	ld.ub	r12,r0[0x3]
80003eb4:	00 00       	add	r0,r0
80003eb6:	01 a0       	ld.ub	r0,r0[0x2]
80003eb8:	00 00       	add	r0,r0
80003eba:	01 b6       	ld.ub	r6,r0[0x3]
80003ebc:	80 00       	ld.sh	r0,r0[0x0]
80003ebe:	36 50       	mov	r0,101
80003ec0:	80 00       	ld.sh	r0,r0[0x0]
80003ec2:	35 40       	mov	r0,84
80003ec4:	00 00       	add	r0,r0
80003ec6:	01 a4       	ld.ub	r4,r0[0x2]
80003ec8:	80 00       	ld.sh	r0,r0[0x0]
80003eca:	32 ec       	mov	r12,46
80003ecc:	80 00       	ld.sh	r0,r0[0x0]
80003ece:	46 1c       	lddsp	r12,sp[0x184]
80003ed0:	80 00       	ld.sh	r0,r0[0x0]
80003ed2:	35 6c       	mov	r12,86
80003ed4:	80 00       	ld.sh	r0,r0[0x0]
80003ed6:	34 bc       	mov	r12,75
80003ed8:	80 00       	ld.sh	r0,r0[0x0]
80003eda:	4b 78       	lddpc	r8,80003fb4 <sysclk_enable_pbb_module+0x4>
80003edc:	80 00       	ld.sh	r0,r0[0x0]
80003ede:	4b 6c       	lddpc	r12,80003fb4 <sysclk_enable_pbb_module+0x4>

80003ee0 <_stext>:
80003ee0:	48 dd       	lddpc	sp,80003f14 <udata_clear_loop_end+0x4>
80003ee2:	fe c0 f0 e2 	sub	r0,pc,-3870
80003ee6:	e3 b0 00 01 	mtsr	0x4,r0
80003eea:	d5 53       	csrf	0x15
80003eec:	48 b0       	lddpc	r0,80003f18 <udata_clear_loop_end+0x8>
80003eee:	48 c1       	lddpc	r1,80003f1c <udata_clear_loop_end+0xc>
80003ef0:	02 30       	cp.w	r0,r1
80003ef2:	c0 62       	brcc	80003efe <idata_load_loop_end>
80003ef4:	48 b2       	lddpc	r2,80003f20 <udata_clear_loop_end+0x10>

80003ef6 <idata_load_loop>:
80003ef6:	a5 05       	ld.d	r4,r2++
80003ef8:	a1 24       	st.d	r0++,r4
80003efa:	02 30       	cp.w	r0,r1
80003efc:	cf d3       	brcs	80003ef6 <idata_load_loop>

80003efe <idata_load_loop_end>:
80003efe:	48 a0       	lddpc	r0,80003f24 <udata_clear_loop_end+0x14>
80003f00:	48 a1       	lddpc	r1,80003f28 <udata_clear_loop_end+0x18>
80003f02:	02 30       	cp.w	r0,r1
80003f04:	c0 62       	brcc	80003f10 <udata_clear_loop_end>
80003f06:	30 02       	mov	r2,0
80003f08:	30 03       	mov	r3,0

80003f0a <udata_clear_loop>:
80003f0a:	a1 22       	st.d	r0++,r2
80003f0c:	02 30       	cp.w	r0,r1
80003f0e:	cf e3       	brcs	80003f0a <udata_clear_loop>

80003f10 <udata_clear_loop_end>:
80003f10:	fe cf f3 84 	sub	pc,pc,-3196
80003f14:	00 00       	add	r0,r0
80003f16:	80 00       	ld.sh	r0,r0[0x0]
80003f18:	00 00       	add	r0,r0
80003f1a:	00 08       	add	r8,r0
80003f1c:	00 00       	add	r0,r0
80003f1e:	00 e0       	st.h	--r0,r0
80003f20:	80 00       	ld.sh	r0,r0[0x0]
80003f22:	51 b8       	stdsp	sp[0x6c],r8
80003f24:	00 00       	add	r0,r0
80003f26:	00 e0       	st.h	--r0,r0
80003f28:	00 00       	add	r0,r0
80003f2a:	04 38       	cp.w	r8,r2

80003f2c <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80003f2c:	d4 01       	pushm	lr

	if (pbb_shift > 0)
		cksel |= ((pbb_shift - 1) << AVR32_PM_CKSEL_PBBSEL)
				| (1U << AVR32_PM_CKSEL_PBBDIV);

	AVR32_PM.cksel = cksel;
80003f2e:	fe 78 0c 00 	mov	r8,-62464
80003f32:	e0 69 00 80 	mov	r9,128
80003f36:	ea 19 80 80 	orh	r9,0x8080
80003f3a:	91 19       	st.w	r8[0x4],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003f3c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003f40:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80003f42:	e0 6a 03 07 	mov	r10,775
80003f46:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1 << AVR32_PM_MCCTRL_OSC0EN;
80003f48:	70 0a       	ld.w	r10,r8[0x0]
80003f4a:	a3 aa       	sbr	r10,0x2
80003f4c:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003f4e:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
80003f52:	71 59       	ld.w	r9,r8[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80003f54:	e2 19 00 80 	andl	r9,0x80,COH
80003f58:	cf d0       	breq	80003f52 <sysclk_init+0x26>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(0);
		osc_wait_ready(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
80003f5a:	e0 6c 1b 00 	mov	r12,6912
80003f5e:	ea 1c 00 b7 	orh	r12,0xb7
80003f62:	f0 1f 00 08 	mcall	80003f80 <sysclk_init+0x54>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003f66:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80003f6a:	d3 03       	ssrf	0x10
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
80003f6c:	fe 78 0c 00 	mov	r8,-62464
80003f70:	70 0a       	ld.w	r10,r8[0x0]
80003f72:	e0 1a ff fc 	andl	r10,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80003f76:	a1 aa       	sbr	r10,0x0
	AVR32_PM.mcctrl = mcctrl;
80003f78:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003f7a:	e3 b9 00 00 	mtsr	0x0,r9

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80003f7e:	d8 02       	popm	pc
80003f80:	80 00       	ld.sh	r0,r0[0x0]
80003f82:	2d e0       	sub	r0,-34

80003f84 <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003f84:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80003f88:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
80003f8a:	fe 78 0c 00 	mov	r8,-62464
80003f8e:	71 59       	ld.w	r9,r8[0x54]
80003f90:	e2 19 00 40 	andl	r9,0x40,COH
80003f94:	cf d0       	breq	80003f8e <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
80003f96:	a3 6c       	lsl	r12,0x2
80003f98:	e0 2c f3 f8 	sub	r12,62456
80003f9c:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80003f9e:	30 19       	mov	r9,1
80003fa0:	f2 0b 09 4b 	lsl	r11,r9,r11
80003fa4:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
80003fa6:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003fa8:	e3 ba 00 00 	mtsr	0x0,r10

	cpu_irq_restore(flags);
}
80003fac:	5e fc       	retal	r12
80003fae:	d7 03       	nop

80003fb0 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80003fb0:	eb cd 40 c0 	pushm	r6-r7,lr
80003fb4:	18 97       	mov	r7,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003fb6:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80003fba:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
80003fbc:	48 b8       	lddpc	r8,80003fe8 <sysclk_enable_pbb_module+0x38>
80003fbe:	11 89       	ld.ub	r9,r8[0x0]
80003fc0:	30 08       	mov	r8,0
80003fc2:	f0 09 18 00 	cp.b	r9,r8
80003fc6:	c0 51       	brne	80003fd0 <sysclk_enable_pbb_module+0x20>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
80003fc8:	30 2b       	mov	r11,2
80003fca:	30 1c       	mov	r12,1
80003fcc:	f0 1f 00 08 	mcall	80003fec <sysclk_enable_pbb_module+0x3c>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
	sysclk_pbb_refcount++;
80003fd0:	48 68       	lddpc	r8,80003fe8 <sysclk_enable_pbb_module+0x38>
80003fd2:	11 89       	ld.ub	r9,r8[0x0]
80003fd4:	2f f9       	sub	r9,-1
80003fd6:	b0 89       	st.b	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80003fd8:	e3 b6 00 00 	mtsr	0x0,r6

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80003fdc:	0e 9b       	mov	r11,r7
80003fde:	30 3c       	mov	r12,3
80003fe0:	f0 1f 00 03 	mcall	80003fec <sysclk_enable_pbb_module+0x3c>
}
80003fe4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003fe8:	00 00       	add	r0,r0
80003fea:	01 bd       	ld.ub	sp,r0[0x3]
80003fec:	80 00       	ld.sh	r0,r0[0x0]
80003fee:	3f 84       	mov	r4,-8

80003ff0 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80003ff0:	d4 01       	pushm	lr
	struct genclk_config gcfg;

	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80003ff2:	30 1c       	mov	r12,1
80003ff4:	f0 1f 00 18 	mcall	80004054 <sysclk_enable_usb+0x64>
80003ff8:	30 3b       	mov	r11,3
80003ffa:	30 1c       	mov	r12,1
80003ffc:	f0 1f 00 17 	mcall	80004058 <sysclk_enable_usb+0x68>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004000:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80004004:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80004006:	fe 78 0c 00 	mov	r8,-62464
8000400a:	e0 6a 03 07 	mov	r10,775
8000400e:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1 << AVR32_PM_MCCTRL_OSC0EN;
80004010:	70 0a       	ld.w	r10,r8[0x0]
80004012:	a3 aa       	sbr	r10,0x2
80004014:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80004016:	e3 b9 00 00 	mtsr	0x0,r9
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_OSC0RDY + id)));
8000401a:	10 99       	mov	r9,r8
8000401c:	73 58       	ld.w	r8,r9[0x54]
8000401e:	e2 18 00 80 	andl	r8,0x80,COH
80004022:	cf d0       	breq	8000401c <sysclk_enable_usb+0x2c>
	cfg->ctrl = 0;

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
		mul *= 2;
		vco_hz *= 2;
80004024:	30 88       	mov	r8,8
static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
80004026:	a3 a8       	sbr	r8,0x2
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80004028:	31 09       	mov	r9,16
8000402a:	20 19       	sub	r9,1
8000402c:	b1 69       	lsl	r9,0x10
8000402e:	ea 19 3f 00 	orh	r9,0x3f00
80004032:	e8 19 02 01 	orl	r9,0x201
80004036:	f3 e8 10 08 	or	r8,r9,r8
8000403a:	fe 79 0c 00 	mov	r9,-62464
8000403e:	93 88       	st.w	r9[0x20],r8

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80004040:	73 58       	ld.w	r8,r9[0x54]
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
80004042:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004046:	cf d0       	breq	80004040 <sysclk_enable_usb+0x50>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80004048:	30 69       	mov	r9,6
8000404a:	fe 78 0c 00 	mov	r8,-62464
8000404e:	f1 49 00 6c 	st.w	r8[108],r9
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
	genclk_enable(&gcfg, AVR32_PM_GCLK_USBB);
}
80004052:	d8 02       	popm	pc
80004054:	80 00       	ld.sh	r0,r0[0x0]
80004056:	3f b0       	mov	r0,-5
80004058:	80 00       	ld.sh	r0,r0[0x0]
8000405a:	3f 84       	mov	r4,-8

8000405c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
8000405c:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000405e:	58 0c       	cp.w	r12,0
80004060:	c0 20       	breq	80004064 <mem_test_unit_ready+0x8>
80004062:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
80004064:	48 28       	lddpc	r8,8000406c <mem_test_unit_ready+0x10>
80004066:	70 0c       	ld.w	r12,r8[0x0]
80004068:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return status;
}
8000406a:	d8 02       	popm	pc
8000406c:	80 00       	ld.sh	r0,r0[0x0]
8000406e:	50 d0       	stdsp	sp[0x34],r0

80004070 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
80004070:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80004072:	58 0c       	cp.w	r12,0
80004074:	c0 20       	breq	80004078 <mem_read_capacity+0x8>
80004076:	da 0a       	popm	pc,r12=1
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
80004078:	48 38       	lddpc	r8,80004084 <mem_read_capacity+0x14>
8000407a:	70 18       	ld.w	r8,r8[0x4]
8000407c:	16 9c       	mov	r12,r11
8000407e:	5d 18       	icall	r8
#endif

  Ctrl_access_unlock();

  return status;
}
80004080:	d8 02       	popm	pc
80004082:	00 00       	add	r0,r0
80004084:	80 00       	ld.sh	r0,r0[0x0]
80004086:	50 d0       	stdsp	sp[0x34],r0

80004088 <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
	return 0;
}
80004088:	5e fd       	retal	0
8000408a:	d7 03       	nop

8000408c <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
8000408c:	48 d8       	lddpc	r8,800040c0 <udi_hid_kbd_setreport+0x34>
8000408e:	90 18       	ld.sh	r8,r8[0x2]
80004090:	f5 d8 c1 08 	bfextu	r10,r8,0x8,0x8
80004094:	30 29       	mov	r9,2
80004096:	f2 0a 19 00 	cp.h	r10,r9
8000409a:	c1 11       	brne	800040bc <udi_hid_kbd_setreport+0x30>
8000409c:	5c 58       	castu.b	r8
8000409e:	c0 f1       	brne	800040bc <udi_hid_kbd_setreport+0x30>
800040a0:	48 88       	lddpc	r8,800040c0 <udi_hid_kbd_setreport+0x34>
800040a2:	90 39       	ld.sh	r9,r8[0x6]
800040a4:	30 18       	mov	r8,1
800040a6:	f0 09 19 00 	cp.h	r9,r8
800040aa:	c0 91       	brne	800040bc <udi_hid_kbd_setreport+0x30>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
			&& (1 == udd_g_ctrlreq.req.wLength)) {
		// Report OUT type on report ID 0 from USB Host
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
800040ac:	48 58       	lddpc	r8,800040c0 <udi_hid_kbd_setreport+0x34>
800040ae:	48 69       	lddpc	r9,800040c4 <udi_hid_kbd_setreport+0x38>
800040b0:	91 29       	st.w	r8[0x8],r9
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
800040b2:	48 69       	lddpc	r9,800040c8 <udi_hid_kbd_setreport+0x3c>
800040b4:	91 49       	st.w	r8[0x10],r9
		udd_g_ctrlreq.payload_size = 1;
800040b6:	30 19       	mov	r9,1
800040b8:	b0 69       	st.h	r8[0xc],r9
800040ba:	5e ff       	retal	1
		return true;
800040bc:	5e fd       	retal	0
800040be:	00 00       	add	r0,r0
800040c0:	00 00       	add	r0,r0
800040c2:	04 18       	sub	r8,r2
800040c4:	00 00       	add	r0,r0
800040c6:	01 c9       	ld.ub	r9,r0[0x4]
800040c8:	80 00       	ld.sh	r0,r0[0x0]
800040ca:	42 d8       	lddsp	r8,sp[0xb4]

800040cc <udi_hid_kbd_send_report>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
800040cc:	d4 01       	pushm	lr
	if (udi_hid_kbd_b_report_trans_ongoing)
800040ce:	48 e8       	lddpc	r8,80004104 <udi_hid_kbd_send_report+0x38>
800040d0:	11 89       	ld.ub	r9,r8[0x0]
800040d2:	30 08       	mov	r8,0
800040d4:	f0 09 18 00 	cp.b	r9,r8
800040d8:	c0 20       	breq	800040dc <udi_hid_kbd_send_report+0x10>
800040da:	d8 0a       	popm	pc,r12=0
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
800040dc:	48 ba       	lddpc	r10,80004108 <udi_hid_kbd_send_report+0x3c>
800040de:	48 c8       	lddpc	r8,8000410c <udi_hid_kbd_send_report+0x40>
800040e0:	f0 e8 00 00 	ld.d	r8,r8[0]
800040e4:	f4 e9 00 00 	st.d	r10[0],r8
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
800040e8:	30 09       	mov	r9,0
800040ea:	48 a8       	lddpc	r8,80004110 <udi_hid_kbd_send_report+0x44>
800040ec:	b0 89       	st.b	r8[0x0],r9
	udi_hid_kbd_b_report_trans_ongoing =
			udd_ep_run(	UDI_HID_KBD_EP_IN,
800040ee:	48 a8       	lddpc	r8,80004114 <udi_hid_kbd_send_report+0x48>
800040f0:	30 89       	mov	r9,8
800040f2:	30 0b       	mov	r11,0
800040f4:	e0 6c 00 81 	mov	r12,129
800040f8:	f0 1f 00 08 	mcall	80004118 <udi_hid_kbd_send_report+0x4c>
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
	udi_hid_kbd_b_report_trans_ongoing =
800040fc:	48 28       	lddpc	r8,80004104 <udi_hid_kbd_send_report+0x38>
800040fe:	b0 8c       	st.b	r8[0x0],r12
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
}
80004100:	d8 02       	popm	pc
80004102:	00 00       	add	r0,r0
80004104:	00 00       	add	r0,r0
80004106:	01 bf       	ld.ub	pc,r0[0x3]
80004108:	00 00       	add	r0,r0
8000410a:	01 c0       	ld.ub	r0,r0[0x4]
8000410c:	00 00       	add	r0,r0
8000410e:	01 cc       	ld.ub	r12,r0[0x4]
80004110:	00 00       	add	r0,r0
80004112:	01 be       	ld.ub	lr,r0[0x3]
80004114:	80 00       	ld.sh	r0,r0[0x0]
80004116:	41 1c       	lddsp	r12,sp[0x44]
80004118:	80 00       	ld.sh	r0,r0[0x0]
8000411a:	38 84       	mov	r4,-120

8000411c <udi_hid_kbd_report_sent>:

void udi_hid_kbd_report_sent(udd_ep_status_t status, iram_size_t nb_sent)
{
8000411c:	d4 01       	pushm	lr
	udi_hid_kbd_b_report_trans_ongoing = false;
8000411e:	30 08       	mov	r8,0
80004120:	48 59       	lddpc	r9,80004134 <udi_hid_kbd_report_sent+0x18>
80004122:	b2 88       	st.b	r9[0x0],r8
	if (udi_hid_kbd_b_report_valid) {
80004124:	48 59       	lddpc	r9,80004138 <udi_hid_kbd_report_sent+0x1c>
80004126:	13 89       	ld.ub	r9,r9[0x0]
80004128:	f0 09 18 00 	cp.b	r9,r8
8000412c:	c0 30       	breq	80004132 <udi_hid_kbd_report_sent+0x16>
		udi_hid_kbd_send_report();
8000412e:	f0 1f 00 04 	mcall	8000413c <udi_hid_kbd_report_sent+0x20>
80004132:	d8 02       	popm	pc
80004134:	00 00       	add	r0,r0
80004136:	01 bf       	ld.ub	pc,r0[0x3]
80004138:	00 00       	add	r0,r0
8000413a:	01 be       	ld.ub	lr,r0[0x3]
8000413c:	80 00       	ld.sh	r0,r0[0x0]
8000413e:	40 cc       	lddsp	r12,sp[0x30]

80004140 <udi_hid_kbd_down>:
	return true;
}


bool udi_hid_kbd_down(uint8_t key_id)
{
80004140:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004144:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80004148:	d3 03       	ssrf	0x10

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
8000414a:	49 98       	lddpc	r8,800041ac <udi_hid_kbd_down+0x6c>
8000414c:	11 a8       	ld.ub	r8,r8[0x2]
8000414e:	58 08       	cp.w	r8,0
80004150:	c2 10       	breq	80004192 <udi_hid_kbd_down+0x52>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
80004152:	f8 08 18 00 	cp.b	r8,r12
80004156:	c0 b0       	breq	8000416c <udi_hid_kbd_down+0x2c>
80004158:	49 59       	lddpc	r9,800041ac <udi_hid_kbd_down+0x6c>
8000415a:	2f d9       	sub	r9,-3
8000415c:	30 38       	mov	r8,3
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
8000415e:	30 8b       	mov	r11,8
		if (0 == udi_hid_kbd_report[i])
80004160:	13 8a       	ld.ub	r10,r9[0x0]
80004162:	58 0a       	cp.w	r10,0
80004164:	c0 f0       	breq	80004182 <udi_hid_kbd_down+0x42>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
80004166:	f8 0a 18 00 	cp.b	r10,r12
8000416a:	c0 51       	brne	80004174 <udi_hid_kbd_down+0x34>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000416c:	e3 b7 00 00 	mtsr	0x0,r7
#endif
	barrier();
80004170:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
80004174:	2f f8       	sub	r8,-1
80004176:	5c 58       	castu.b	r8
80004178:	2f f9       	sub	r9,-1
8000417a:	f6 08 18 00 	cp.b	r8,r11
8000417e:	cf 11       	brne	80004160 <udi_hid_kbd_down+0x20>
80004180:	c0 58       	rjmp	8000418a <udi_hid_kbd_down+0x4a>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
80004182:	30 89       	mov	r9,8
80004184:	f2 08 18 00 	cp.b	r8,r9
80004188:	c0 61       	brne	80004194 <udi_hid_kbd_down+0x54>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000418a:	e3 b7 00 00 	mtsr	0x0,r7
#endif
	barrier();
8000418e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time 
		cpu_irq_restore(flags);
		return false;
80004192:	30 28       	mov	r8,2
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
80004194:	48 69       	lddpc	r9,800041ac <udi_hid_kbd_down+0x6c>
80004196:	f2 08 0b 0c 	st.b	r9[r8],r12
	udi_hid_kbd_b_report_valid = true;
8000419a:	30 19       	mov	r9,1
8000419c:	48 58       	lddpc	r8,800041b0 <udi_hid_kbd_down+0x70>
8000419e:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_kbd_send_report();
800041a0:	f0 1f 00 05 	mcall	800041b4 <udi_hid_kbd_down+0x74>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800041a4:	e3 b7 00 00 	mtsr	0x0,r7
#endif
	barrier();
800041a8:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800041ac:	00 00       	add	r0,r0
800041ae:	01 cc       	ld.ub	r12,r0[0x4]
800041b0:	00 00       	add	r0,r0
800041b2:	01 be       	ld.ub	lr,r0[0x3]
800041b4:	80 00       	ld.sh	r0,r0[0x0]
800041b6:	40 cc       	lddsp	r12,sp[0x30]

800041b8 <udi_hid_kbd_up>:
	return true;
}


bool udi_hid_kbd_up(uint8_t key_id)
{
800041b8:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800041bc:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
800041c0:	d3 03       	ssrf	0x10

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
800041c2:	4a 18       	lddpc	r8,80004244 <udi_hid_kbd_up+0x8c>
800041c4:	11 a8       	ld.ub	r8,r8[0x2]
800041c6:	58 08       	cp.w	r8,0
800041c8:	c0 b0       	breq	800041de <udi_hid_kbd_up+0x26>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
800041ca:	f8 08 18 00 	cp.b	r8,r12
800041ce:	c2 20       	breq	80004212 <udi_hid_kbd_up+0x5a>
800041d0:	49 d9       	lddpc	r9,80004244 <udi_hid_kbd_up+0x8c>
800041d2:	2f d9       	sub	r9,-3
800041d4:	30 38       	mov	r8,3
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
800041d6:	30 8b       	mov	r11,8
		if (0 == udi_hid_kbd_report[i]) {
800041d8:	13 8a       	ld.ub	r10,r9[0x0]
800041da:	58 0a       	cp.w	r10,0
800041dc:	c0 41       	brne	800041e4 <udi_hid_kbd_up+0x2c>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800041de:	e3 b7 00 00 	mtsr	0x0,r7
			// Already removed
			cpu_irq_restore(flags);
			return true;
800041e2:	c2 f8       	rjmp	80004240 <udi_hid_kbd_up+0x88>
		}
		if (key_id == udi_hid_kbd_report[i])
800041e4:	f8 0a 18 00 	cp.b	r10,r12
800041e8:	c0 80       	breq	800041f8 <udi_hid_kbd_up+0x40>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
800041ea:	2f f8       	sub	r8,-1
800041ec:	5c 58       	castu.b	r8
800041ee:	2f f9       	sub	r9,-1
800041f0:	f6 08 18 00 	cp.b	r8,r11
800041f4:	cf 21       	brne	800041d8 <udi_hid_kbd_up+0x20>
800041f6:	c0 b8       	rjmp	8000420c <udi_hid_kbd_up+0x54>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
800041f8:	30 89       	mov	r9,8
800041fa:	f2 08 18 00 	cp.b	r8,r9
800041fe:	c0 70       	breq	8000420c <udi_hid_kbd_up+0x54>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
80004200:	30 69       	mov	r9,6
80004202:	f2 08 18 00 	cp.b	r8,r9
80004206:	e0 88 00 07 	brls	80004214 <udi_hid_kbd_up+0x5c>
8000420a:	c1 18       	rjmp	8000422c <udi_hid_kbd_up+0x74>
8000420c:	e3 b7 00 00 	mtsr	0x0,r7
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
80004210:	c1 88       	rjmp	80004240 <udi_hid_kbd_up+0x88>
80004212:	30 28       	mov	r8,2
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
80004214:	48 c9       	lddpc	r9,80004244 <udi_hid_kbd_up+0x8c>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
80004216:	30 7b       	mov	r11,7
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
80004218:	f2 08 00 0a 	add	r10,r9,r8
8000421c:	15 9a       	ld.ub	r10,r10[0x1]
8000421e:	f2 08 0b 0a 	st.b	r9[r8],r10
		i++;
80004222:	2f f8       	sub	r8,-1
80004224:	5c 58       	castu.b	r8
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
80004226:	f6 08 18 00 	cp.b	r8,r11
8000422a:	cf 71       	brne	80004218 <udi_hid_kbd_up+0x60>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
8000422c:	30 09       	mov	r9,0
8000422e:	48 68       	lddpc	r8,80004244 <udi_hid_kbd_up+0x8c>
80004230:	b0 f9       	st.b	r8[0x7],r9
	udi_hid_kbd_b_report_valid = true;
80004232:	30 19       	mov	r9,1
80004234:	48 58       	lddpc	r8,80004248 <udi_hid_kbd_up+0x90>
80004236:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_kbd_send_report();
80004238:	f0 1f 00 05 	mcall	8000424c <udi_hid_kbd_up+0x94>
8000423c:	e3 b7 00 00 	mtsr	0x0,r7

	cpu_irq_restore(flags);
	return true;
}
80004240:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80004244:	00 00       	add	r0,r0
80004246:	01 cc       	ld.ub	r12,r0[0x4]
80004248:	00 00       	add	r0,r0
8000424a:	01 be       	ld.ub	lr,r0[0x3]
8000424c:	80 00       	ld.sh	r0,r0[0x0]
8000424e:	40 cc       	lddsp	r12,sp[0x30]

80004250 <udi_hid_kbd_modifier_down>:
	return true;
}


bool udi_hid_kbd_modifier_down(uint8_t modifier_id)
{
80004250:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004254:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80004258:	d3 03       	ssrf	0x10
	irqflags_t flags = cpu_irq_save();

	// Fill report
	udi_hid_kbd_report[0] |= modifier_id;
8000425a:	48 78       	lddpc	r8,80004274 <udi_hid_kbd_modifier_down+0x24>
8000425c:	11 89       	ld.ub	r9,r8[0x0]
8000425e:	12 4c       	or	r12,r9
80004260:	b0 8c       	st.b	r8[0x0],r12
	udi_hid_kbd_b_report_valid = true;
80004262:	30 19       	mov	r9,1
80004264:	48 58       	lddpc	r8,80004278 <udi_hid_kbd_modifier_down+0x28>
80004266:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_kbd_send_report();
80004268:	f0 1f 00 05 	mcall	8000427c <udi_hid_kbd_modifier_down+0x2c>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000426c:	e3 b7 00 00 	mtsr	0x0,r7

	cpu_irq_restore(flags);
	return true;
}
80004270:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80004274:	00 00       	add	r0,r0
80004276:	01 cc       	ld.ub	r12,r0[0x4]
80004278:	00 00       	add	r0,r0
8000427a:	01 be       	ld.ub	lr,r0[0x3]
8000427c:	80 00       	ld.sh	r0,r0[0x0]
8000427e:	40 cc       	lddsp	r12,sp[0x30]

80004280 <udi_hid_kbd_modifier_up>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_kbd_modifier_up(uint8_t modifier_id)
{
80004280:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004284:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80004288:	d3 03       	ssrf	0x10
	irqflags_t flags = cpu_irq_save();

	// Fill report
	udi_hid_kbd_report[0] &= ~modifier_id;
8000428a:	48 88       	lddpc	r8,800042a8 <udi_hid_kbd_modifier_up+0x28>
8000428c:	5c dc       	com	r12
8000428e:	11 89       	ld.ub	r9,r8[0x0]
80004290:	12 6c       	and	r12,r9
80004292:	b0 8c       	st.b	r8[0x0],r12
	udi_hid_kbd_b_report_valid = true;
80004294:	30 19       	mov	r9,1
80004296:	48 68       	lddpc	r8,800042ac <udi_hid_kbd_modifier_up+0x2c>
80004298:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_kbd_send_report();
8000429a:	f0 1f 00 06 	mcall	800042b0 <udi_hid_kbd_modifier_up+0x30>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000429e:	e3 b7 00 00 	mtsr	0x0,r7

	cpu_irq_restore(flags);
	return true;
}
800042a2:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800042a6:	00 00       	add	r0,r0
800042a8:	00 00       	add	r0,r0
800042aa:	01 cc       	ld.ub	r12,r0[0x4]
800042ac:	00 00       	add	r0,r0
800042ae:	01 be       	ld.ub	lr,r0[0x3]
800042b0:	80 00       	ld.sh	r0,r0[0x0]
800042b2:	40 cc       	lddsp	r12,sp[0x30]

800042b4 <udi_hid_kbd_setup>:
	UDI_HID_KBD_DISABLE_EXT();
}


bool udi_hid_kbd_setup(void)
{
800042b4:	d4 01       	pushm	lr
	return udi_hid_setup(&udi_hid_kbd_rate,
800042b6:	48 49       	lddpc	r9,800042c4 <udi_hid_kbd_setup+0x10>
800042b8:	48 4a       	lddpc	r10,800042c8 <udi_hid_kbd_setup+0x14>
800042ba:	48 5b       	lddpc	r11,800042cc <udi_hid_kbd_setup+0x18>
800042bc:	48 5c       	lddpc	r12,800042d0 <udi_hid_kbd_setup+0x1c>
800042be:	f0 1f 00 06 	mcall	800042d4 <udi_hid_kbd_setup+0x20>
								&udi_hid_kbd_protocol,
								(uint8_t *) &udi_hid_kbd_report_desc,
								udi_hid_kbd_setreport);
}
800042c2:	d8 02       	popm	pc
800042c4:	80 00       	ld.sh	r0,r0[0x0]
800042c6:	40 8c       	lddsp	r12,sp[0x20]
800042c8:	00 00       	add	r0,r0
800042ca:	00 0d       	add	sp,r0
800042cc:	00 00       	add	r0,r0
800042ce:	01 c8       	ld.ub	r8,r0[0x4]
800042d0:	00 00       	add	r0,r0
800042d2:	01 d4       	ld.ub	r4,r0[0x5]
800042d4:	80 00       	ld.sh	r0,r0[0x0]
800042d6:	43 34       	lddsp	r4,sp[0xcc]

800042d8 <udi_hid_kbd_setreport_valid>:
		udi_hid_kbd_send_report();
	}
}

static void udi_hid_kbd_setreport_valid(void)
{
800042d8:	d4 01       	pushm	lr
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
800042da:	48 38       	lddpc	r8,800042e4 <udi_hid_kbd_setreport_valid+0xc>
800042dc:	11 8c       	ld.ub	r12,r8[0x0]
800042de:	f0 1f 00 03 	mcall	800042e8 <udi_hid_kbd_setreport_valid+0x10>
}
800042e2:	d8 02       	popm	pc
800042e4:	00 00       	add	r0,r0
800042e6:	01 c9       	ld.ub	r9,r0[0x4]
800042e8:	80 00       	ld.sh	r0,r0[0x0]
800042ea:	4b 76       	lddpc	r6,800043c4 <udi_hid_setup+0x90>

800042ec <udi_hid_kbd_disable>:
	return UDI_HID_KBD_ENABLE_EXT();
}


void udi_hid_kbd_disable(void)
{
800042ec:	d4 01       	pushm	lr
	UDI_HID_KBD_DISABLE_EXT();
800042ee:	f0 1f 00 02 	mcall	800042f4 <udi_hid_kbd_disable+0x8>
}
800042f2:	d8 02       	popm	pc
800042f4:	80 00       	ld.sh	r0,r0[0x0]
800042f6:	4b 74       	lddpc	r4,800043d0 <udi_hid_setup+0x9c>

800042f8 <udi_hid_kbd_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_kbd_enable(void)
{
800042f8:	d4 01       	pushm	lr
	// Initialize internal values
	udi_hid_kbd_rate = 0;
800042fa:	30 08       	mov	r8,0
800042fc:	48 89       	lddpc	r9,8000431c <udi_hid_kbd_enable+0x24>
800042fe:	b2 88       	st.b	r9[0x0],r8
	udi_hid_kbd_protocol = 0;
80004300:	48 89       	lddpc	r9,80004320 <udi_hid_kbd_enable+0x28>
80004302:	b2 88       	st.b	r9[0x0],r8
	udi_hid_kbd_b_report_trans_ongoing = false;
80004304:	48 89       	lddpc	r9,80004324 <udi_hid_kbd_enable+0x2c>
80004306:	b2 88       	st.b	r9[0x0],r8
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
80004308:	30 0a       	mov	r10,0
8000430a:	30 0b       	mov	r11,0
8000430c:	48 79       	lddpc	r9,80004328 <udi_hid_kbd_enable+0x30>
8000430e:	f2 eb 00 00 	st.d	r9[0],r10
	udi_hid_kbd_b_report_valid = false;
80004312:	48 79       	lddpc	r9,8000432c <udi_hid_kbd_enable+0x34>
80004314:	b2 88       	st.b	r9[0x0],r8
	return UDI_HID_KBD_ENABLE_EXT();
80004316:	f0 1f 00 07 	mcall	80004330 <udi_hid_kbd_enable+0x38>
}
8000431a:	d8 02       	popm	pc
8000431c:	00 00       	add	r0,r0
8000431e:	01 d4       	ld.ub	r4,r0[0x5]
80004320:	00 00       	add	r0,r0
80004322:	01 c8       	ld.ub	r8,r0[0x4]
80004324:	00 00       	add	r0,r0
80004326:	01 bf       	ld.ub	pc,r0[0x3]
80004328:	00 00       	add	r0,r0
8000432a:	01 cc       	ld.ub	r12,r0[0x4]
8000432c:	00 00       	add	r0,r0
8000432e:	01 be       	ld.ub	lr,r0[0x3]
80004330:	80 00       	ld.sh	r0,r0[0x0]
80004332:	4b 72       	lddpc	r2,8000440c <udi_hid_setup+0xd8>

80004334 <udi_hid_setup>:
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

//@}

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*set_report)(void) )
{
80004334:	eb cd 40 80 	pushm	r7,lr
80004338:	14 97       	mov	r7,r10
	if (Udd_setup_is_in()) {
8000433a:	4c 08       	lddpc	r8,80004438 <udi_hid_setup+0x104>
8000433c:	11 88       	ld.ub	r8,r8[0x0]
8000433e:	30 0a       	mov	r10,0
80004340:	f4 08 18 00 	cp.b	r8,r10
80004344:	c5 04       	brge	800043e4 <udi_hid_setup+0xb0>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80004346:	e2 18 00 60 	andl	r8,0x60,COH
8000434a:	c3 31       	brne	800043b0 <udi_hid_setup+0x7c>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000434c:	4b b9       	lddpc	r9,80004438 <udi_hid_setup+0x104>
8000434e:	13 9a       	ld.ub	r10,r9[0x1]
80004350:	30 69       	mov	r9,6
80004352:	f2 0a 18 00 	cp.b	r10,r9
80004356:	c2 d1       	brne	800043b0 <udi_hid_setup+0x7c>
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
80004358:	f0 1f 00 39 	mcall	8000443c <udi_hid_setup+0x108>
8000435c:	2f 7c       	sub	r12,-9
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
8000435e:	19 99       	ld.ub	r9,r12[0x1]
80004360:	32 18       	mov	r8,33
80004362:	f0 09 18 00 	cp.b	r9,r8
80004366:	c2 31       	brne	800043ac <udi_hid_setup+0x78>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor 
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80004368:	4b 48       	lddpc	r8,80004438 <udi_hid_setup+0x104>
8000436a:	11 a8       	ld.ub	r8,r8[0x2]
8000436c:	32 19       	mov	r9,33
8000436e:	f2 08 18 00 	cp.b	r8,r9
80004372:	c0 a1       	brne	80004386 <udi_hid_setup+0x52>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
80004374:	4b 18       	lddpc	r8,80004438 <udi_hid_setup+0x104>
80004376:	91 2c       	st.w	r8[0x8],r12
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
80004378:	90 b9       	ld.uh	r9,r8[0x6]
8000437a:	19 8a       	ld.ub	r10,r12[0x0]
8000437c:	f2 0a 0d 49 	min	r9,r9,r10
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
80004380:	b0 69       	st.h	r8[0xc],r9
80004382:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
80004386:	19 e9       	ld.ub	r9,r12[0x6]
80004388:	f0 09 18 00 	cp.b	r9,r8
8000438c:	c1 01       	brne	800043ac <udi_hid_setup+0x78>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
8000438e:	4a b8       	lddpc	r8,80004438 <udi_hid_setup+0x104>
80004390:	91 27       	st.w	r8[0x8],r7
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
80004392:	90 ba       	ld.uh	r10,r8[0x6]
80004394:	19 fb       	ld.ub	r11,r12[0x7]
80004396:	f9 39 00 08 	ld.ub	r9,r12[8]
8000439a:	f3 eb 10 89 	or	r9,r9,r11<<0x8
8000439e:	5c c9       	swap.bh	r9
800043a0:	5c 79       	castu.h	r9
800043a2:	f4 09 0d 49 	min	r9,r10,r9
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
800043a6:	b0 69       	st.h	r8[0xc],r9
800043a8:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800043ac:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800043b0:	e0 48 00 20 	cp.w	r8,32
800043b4:	c4 01       	brne	80004434 <udi_hid_setup+0x100>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
800043b6:	4a 18       	lddpc	r8,80004438 <udi_hid_setup+0x104>
800043b8:	11 98       	ld.ub	r8,r8[0x1]
800043ba:	30 29       	mov	r9,2
800043bc:	f2 08 18 00 	cp.b	r8,r9
800043c0:	c0 60       	breq	800043cc <udi_hid_setup+0x98>
800043c2:	30 39       	mov	r9,3
800043c4:	f2 08 18 00 	cp.b	r8,r9
800043c8:	c3 61       	brne	80004434 <udi_hid_setup+0x100>
800043ca:	c0 78       	rjmp	800043d8 <udi_hid_setup+0xa4>
			case USB_REQ_HID_GET_REPORT:
				// TODO
				break;

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
800043cc:	49 b8       	lddpc	r8,80004438 <udi_hid_setup+0x104>
800043ce:	91 2c       	st.w	r8[0x8],r12
				udd_g_ctrlreq.payload_size = 1;
800043d0:	30 19       	mov	r9,1
800043d2:	b0 69       	st.h	r8[0xc],r9
800043d4:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
				return true;

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
800043d8:	49 88       	lddpc	r8,80004438 <udi_hid_setup+0x104>
800043da:	91 2b       	st.w	r8[0x8],r11
				udd_g_ctrlreq.payload_size = 1;
800043dc:	30 19       	mov	r9,1
800043de:	b0 69       	st.h	r8[0xc],r9
800043e0:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800043e4:	e2 18 00 60 	andl	r8,0x60,COH
800043e8:	e0 48 00 20 	cp.w	r8,32
800043ec:	c2 41       	brne	80004434 <udi_hid_setup+0x100>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
800043ee:	49 38       	lddpc	r8,80004438 <udi_hid_setup+0x104>
800043f0:	11 98       	ld.ub	r8,r8[0x1]
800043f2:	30 9a       	mov	r10,9
800043f4:	f4 08 18 00 	cp.b	r8,r10
800043f8:	c0 b0       	breq	8000440e <udi_hid_setup+0xda>
800043fa:	c1 d3       	brcs	80004434 <udi_hid_setup+0x100>
800043fc:	30 a9       	mov	r9,10
800043fe:	f2 08 18 00 	cp.b	r8,r9
80004402:	c0 90       	breq	80004414 <udi_hid_setup+0xe0>
80004404:	30 b9       	mov	r9,11
80004406:	f2 08 18 00 	cp.b	r8,r9
8000440a:	c1 51       	brne	80004434 <udi_hid_setup+0x100>
8000440c:	c0 98       	rjmp	8000441e <udi_hid_setup+0xea>

			case USB_REQ_HID_SET_REPORT:
				return set_report();
8000440e:	5d 19       	icall	r9
80004410:	e3 cd 80 80 	ldm	sp++,r7,pc

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
80004414:	48 98       	lddpc	r8,80004438 <udi_hid_setup+0x104>
80004416:	11 a8       	ld.ub	r8,r8[0x2]
80004418:	b8 88       	st.b	r12[0x0],r8
8000441a:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
8000441e:	48 78       	lddpc	r8,80004438 <udi_hid_setup+0x104>
80004420:	90 39       	ld.sh	r9,r8[0x6]
80004422:	30 08       	mov	r8,0
80004424:	f0 09 19 00 	cp.h	r9,r8
80004428:	c0 61       	brne	80004434 <udi_hid_setup+0x100>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
8000442a:	48 48       	lddpc	r8,80004438 <udi_hid_setup+0x104>
8000442c:	90 18       	ld.sh	r8,r8[0x2]
8000442e:	b6 88       	st.b	r11[0x0],r8
80004430:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
				return true;
80004434:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80004438:	00 00       	add	r0,r0
8000443a:	04 18       	sub	r8,r2
8000443c:	80 00       	ld.sh	r0,r0[0x0]
8000443e:	44 40       	lddsp	r0,sp[0x110]

80004440 <udc_get_interface_desc>:


usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
80004440:	48 28       	lddpc	r8,80004448 <udc_get_interface_desc+0x8>
80004442:	70 0c       	ld.w	r12,r8[0x0]
80004444:	5e fc       	retal	r12
80004446:	00 00       	add	r0,r0
80004448:	00 00       	add	r0,r0
8000444a:	01 e4       	ld.ub	r4,r0[0x6]

8000444c <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000444c:	48 78       	lddpc	r8,80004468 <udc_get_eof_conf+0x1c>
8000444e:	70 08       	ld.w	r8,r8[0x0]
80004450:	70 08       	ld.w	r8,r8[0x0]
80004452:	11 aa       	ld.ub	r10,r8[0x2]
80004454:	11 b9       	ld.ub	r9,r8[0x3]
80004456:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000445a:	5c c9       	swap.bh	r9
8000445c:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
80004460:	f0 0c 00 0c 	add	r12,r8,r12
80004464:	5e fc       	retal	r12
80004466:	00 00       	add	r0,r0
80004468:	00 00       	add	r0,r0
8000446a:	01 d8       	ld.ub	r8,r0[0x5]

8000446c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
8000446c:	eb cd 40 e0 	pushm	r5-r7,lr
80004470:	18 97       	mov	r7,r12
80004472:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration)
80004474:	49 b8       	lddpc	r8,800044e0 <udc_update_iface_desc+0x74>
80004476:	11 89       	ld.ub	r9,r8[0x0]
80004478:	30 08       	mov	r8,0
8000447a:	f0 09 18 00 	cp.b	r9,r8
8000447e:	c2 f0       	breq	800044dc <udc_update_iface_desc+0x70>
		return false;

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80004480:	49 98       	lddpc	r8,800044e4 <udc_update_iface_desc+0x78>
80004482:	70 08       	ld.w	r8,r8[0x0]
80004484:	70 08       	ld.w	r8,r8[0x0]
80004486:	11 c9       	ld.ub	r9,r8[0x4]
80004488:	18 9e       	mov	lr,r12
8000448a:	f8 09 18 00 	cp.b	r9,r12
8000448e:	e0 88 00 27 	brls	800044dc <udc_update_iface_desc+0x70>
		return false;

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80004492:	49 65       	lddpc	r5,800044e8 <udc_update_iface_desc+0x7c>
80004494:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
80004496:	f0 1f 00 16 	mcall	800044ec <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
8000449a:	6a 08       	ld.w	r8,r5[0x0]
8000449c:	10 3c       	cp.w	r12,r8
8000449e:	e0 88 00 1f 	brls	800044dc <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
800044a2:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800044a4:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
800044a6:	11 9a       	ld.ub	r10,r8[0x1]
800044a8:	f6 0a 18 00 	cp.b	r10,r11
800044ac:	c0 a1       	brne	800044c0 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber)
800044ae:	11 aa       	ld.ub	r10,r8[0x2]
800044b0:	0e 9e       	mov	lr,r7
800044b2:	ee 0a 18 00 	cp.b	r10,r7
800044b6:	c0 51       	brne	800044c0 <udc_update_iface_desc+0x54>
					&& (setting_num ==
							udc_ptr_iface->
800044b8:	11 ba       	ld.ub	r10,r8[0x3]
800044ba:	ec 0a 18 00 	cp.b	r10,r6
800044be:	c0 b0       	breq	800044d4 <udc_update_iface_desc+0x68>
							bAlternateSetting))
				return true;	// Interface found
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) ((uint8_t
800044c0:	13 88       	ld.ub	r8,r9[0x0]
800044c2:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800044c6:	10 3c       	cp.w	r12,r8
800044c8:	fe 9b ff ee 	brhi	800044a4 <udc_update_iface_desc+0x38>
800044cc:	48 79       	lddpc	r9,800044e8 <udc_update_iface_desc+0x7c>
800044ce:	93 08       	st.w	r9[0x0],r8
800044d0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800044d4:	48 59       	lddpc	r9,800044e8 <udc_update_iface_desc+0x7c>
800044d6:	93 08       	st.w	r9[0x0],r8
800044d8:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800044dc:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800044e0:	00 00       	add	r0,r0
800044e2:	01 e0       	ld.ub	r0,r0[0x6]
800044e4:	00 00       	add	r0,r0
800044e6:	01 d8       	ld.ub	r8,r0[0x5]
800044e8:	00 00       	add	r0,r0
800044ea:	01 e4       	ld.ub	r4,r0[0x6]
800044ec:	80 00       	ld.sh	r0,r0[0x0]
800044ee:	44 4c       	lddsp	r12,sp[0x110]

800044f0 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
800044f0:	eb cd 40 c0 	pushm	r6-r7,lr
800044f4:	18 96       	mov	r6,r12
800044f6:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
800044f8:	f0 1f 00 11 	mcall	8000453c <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
800044fc:	0d 88       	ld.ub	r8,r6[0x0]
800044fe:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80004500:	0c 3c       	cp.w	r12,r6
80004502:	e0 88 00 19 	brls	80004534 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
80004506:	0d 98       	ld.ub	r8,r6[0x1]
80004508:	30 49       	mov	r9,4
8000450a:	f2 08 18 00 	cp.b	r8,r9
8000450e:	c1 30       	breq	80004534 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
80004510:	ee 08 18 00 	cp.b	r8,r7
80004514:	c0 a1       	brne	80004528 <udc_next_desc_in_iface+0x38>
80004516:	c1 08       	rjmp	80004536 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
80004518:	0d 98       	ld.ub	r8,r6[0x1]
8000451a:	f2 08 18 00 	cp.b	r8,r9
8000451e:	c0 b0       	breq	80004534 <udc_next_desc_in_iface+0x44>
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
80004520:	ee 08 18 00 	cp.b	r8,r7
80004524:	c0 31       	brne	8000452a <udc_next_desc_in_iface+0x3a>
80004526:	c0 88       	rjmp	80004536 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType)
80004528:	30 49       	mov	r9,4
			break;	// End of global interface descriptor
		if (desc_id == desc->bDescriptorType)
			return desc;	// Specific descriptor found
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000452a:	0d 88       	ld.ub	r8,r6[0x0]
8000452c:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000452e:	0c 3c       	cp.w	r12,r6
80004530:	fe 9b ff f4 	brhi	80004518 <udc_next_desc_in_iface+0x28>
80004534:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL;	// No specific descriptor found
}
80004536:	0c 9c       	mov	r12,r6
80004538:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000453c:	80 00       	ld.sh	r0,r0[0x0]
8000453e:	44 4c       	lddsp	r12,sp[0x110]

80004540 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80004540:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
80004542:	48 48       	lddpc	r8,80004550 <udc_valid_address+0x10>
80004544:	11 bc       	ld.ub	r12,r8[0x3]
80004546:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000454a:	f0 1f 00 03 	mcall	80004554 <udc_valid_address+0x14>
}
8000454e:	d8 02       	popm	pc
80004550:	00 00       	add	r0,r0
80004552:	04 18       	sub	r8,r2
80004554:	80 00       	ld.sh	r0,r0[0x0]
80004556:	32 02       	mov	r2,32

80004558 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80004558:	eb cd 40 e0 	pushm	r5-r7,lr
8000455c:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num))
8000455e:	f0 1f 00 12 	mcall	800045a4 <udc_iface_enable+0x4c>
80004562:	c1 f0       	breq	800045a0 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80004564:	49 18       	lddpc	r8,800045a8 <udc_iface_enable+0x50>
80004566:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80004568:	30 56       	mov	r6,5
8000456a:	0c 9b       	mov	r11,r6
8000456c:	0e 9c       	mov	r12,r7
8000456e:	f0 1f 00 10 	mcall	800045ac <udc_iface_enable+0x54>
80004572:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80004574:	c0 d0       	breq	8000458e <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
						ep_desc->bmAttributes,
						le16_to_cpu
80004576:	19 ca       	ld.ub	r10,r12[0x4]
80004578:	19 d8       	ld.ub	r8,r12[0x5]
8000457a:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
8000457e:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80004580:	5c 7a       	castu.h	r10
80004582:	19 bb       	ld.ub	r11,r12[0x3]
80004584:	19 ac       	ld.ub	r12,r12[0x2]
80004586:	f0 1f 00 0b 	mcall	800045b0 <udc_iface_enable+0x58>
8000458a:	cf 01       	brne	8000456a <udc_iface_enable+0x12>
8000458c:	c0 a8       	rjmp	800045a0 <udc_iface_enable+0x48>
						(ep_desc->wMaxPacketSize)))
			return false;
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000458e:	48 a8       	lddpc	r8,800045b4 <udc_iface_enable+0x5c>
80004590:	70 08       	ld.w	r8,r8[0x0]
80004592:	70 18       	ld.w	r8,r8[0x4]
80004594:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
80004598:	70 0c       	ld.w	r12,r8[0x0]
8000459a:	5d 1c       	icall	r12
8000459c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800045a0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800045a4:	80 00       	ld.sh	r0,r0[0x0]
800045a6:	44 6c       	lddsp	r12,sp[0x118]
800045a8:	00 00       	add	r0,r0
800045aa:	01 e4       	ld.ub	r4,r0[0x6]
800045ac:	80 00       	ld.sh	r0,r0[0x0]
800045ae:	44 f0       	lddsp	r0,sp[0x13c]
800045b0:	80 00       	ld.sh	r0,r0[0x0]
800045b2:	33 b8       	mov	r8,59
800045b4:	00 00       	add	r0,r0
800045b6:	01 d8       	ld.ub	r8,r0[0x5]

800045b8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
800045b8:	eb cd 40 e0 	pushm	r5-r7,lr
800045bc:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
800045be:	18 97       	mov	r7,r12
800045c0:	30 0b       	mov	r11,0
800045c2:	f0 1f 00 12 	mcall	80004608 <udc_iface_disable+0x50>
800045c6:	c1 e0       	breq	80004602 <udc_iface_disable+0x4a>
		return false;

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800045c8:	49 18       	lddpc	r8,8000460c <udc_iface_disable+0x54>
800045ca:	70 08       	ld.w	r8,r8[0x0]
800045cc:	70 18       	ld.w	r8,r8[0x4]
800045ce:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
800045d2:	6a 3c       	ld.w	r12,r5[0xc]
800045d4:	5d 1c       	icall	r12
800045d6:	18 9b       	mov	r11,r12
800045d8:	0c 9c       	mov	r12,r6
800045da:	f0 1f 00 0c 	mcall	80004608 <udc_iface_disable+0x50>
800045de:	c1 20       	breq	80004602 <udc_iface_disable+0x4a>
		return false;

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800045e0:	48 c8       	lddpc	r8,80004610 <udc_iface_disable+0x58>
800045e2:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800045e4:	30 56       	mov	r6,5
800045e6:	0c 9b       	mov	r11,r6
800045e8:	0e 9c       	mov	r12,r7
800045ea:	f0 1f 00 0b 	mcall	80004614 <udc_iface_disable+0x5c>
800045ee:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
							usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc)
800045f0:	c0 50       	breq	800045fa <udc_iface_disable+0x42>
				break;
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
800045f2:	19 ac       	ld.ub	r12,r12[0x2]
800045f4:	f0 1f 00 09 	mcall	80004618 <udc_iface_disable+0x60>
		}
800045f8:	cf 7b       	rjmp	800045e6 <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
800045fa:	6a 18       	ld.w	r8,r5[0x4]
800045fc:	5d 18       	icall	r8
800045fe:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
80004602:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80004606:	00 00       	add	r0,r0
80004608:	80 00       	ld.sh	r0,r0[0x0]
8000460a:	44 6c       	lddsp	r12,sp[0x118]
8000460c:	00 00       	add	r0,r0
8000460e:	01 d8       	ld.ub	r8,r0[0x5]
80004610:	00 00       	add	r0,r0
80004612:	01 e4       	ld.ub	r4,r0[0x6]
80004614:	80 00       	ld.sh	r0,r0[0x0]
80004616:	44 f0       	lddsp	r0,sp[0x13c]
80004618:	80 00       	ld.sh	r0,r0[0x0]
8000461a:	33 88       	mov	r8,56

8000461c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device, 
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
8000461c:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80004620:	49 68       	lddpc	r8,80004678 <udc_reset+0x5c>
80004622:	11 89       	ld.ub	r9,r8[0x0]
80004624:	30 08       	mov	r8,0
80004626:	f0 09 18 00 	cp.b	r9,r8
8000462a:	c1 70       	breq	80004658 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000462c:	49 48       	lddpc	r8,8000467c <udc_reset+0x60>
8000462e:	70 08       	ld.w	r8,r8[0x0]
80004630:	70 08       	ld.w	r8,r8[0x0]
80004632:	11 c9       	ld.ub	r9,r8[0x4]
80004634:	30 08       	mov	r8,0
80004636:	f0 09 18 00 	cp.b	r9,r8
8000463a:	c0 f0       	breq	80004658 <udc_reset+0x3c>
8000463c:	30 07       	mov	r7,0
8000463e:	49 06       	lddpc	r6,8000467c <udc_reset+0x60>
				iface_num++) {
			udc_iface_disable(iface_num);
80004640:	0e 9c       	mov	r12,r7
80004642:	f0 1f 00 10 	mcall	80004680 <udc_reset+0x64>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80004646:	2f f7       	sub	r7,-1
80004648:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000464a:	6c 08       	ld.w	r8,r6[0x0]
8000464c:	70 08       	ld.w	r8,r8[0x0]
8000464e:	11 c8       	ld.ub	r8,r8[0x4]
80004650:	ee 08 18 00 	cp.b	r8,r7
80004654:	fe 9b ff f6 	brhi	80004640 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80004658:	30 09       	mov	r9,0
8000465a:	48 88       	lddpc	r8,80004678 <udc_reset+0x5c>
8000465c:	b0 89       	st.b	r8[0x0],r9
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
	if (0 != (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status)) {
8000465e:	48 a8       	lddpc	r8,80004684 <udc_reset+0x68>
80004660:	90 88       	ld.uh	r8,r8[0x0]
80004662:	e2 18 02 00 	andl	r8,0x200,COH
80004666:	c0 30       	breq	8000466c <udc_reset+0x50>
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
80004668:	f0 1f 00 08 	mcall	80004688 <udc_reset+0x6c>
	}
#endif
	udc_device_status =
8000466c:	30 09       	mov	r9,0
8000466e:	48 68       	lddpc	r8,80004684 <udc_reset+0x68>
80004670:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80004672:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004676:	00 00       	add	r0,r0
80004678:	00 00       	add	r0,r0
8000467a:	01 e0       	ld.ub	r0,r0[0x6]
8000467c:	00 00       	add	r0,r0
8000467e:	01 d8       	ld.ub	r8,r0[0x5]
80004680:	80 00       	ld.sh	r0,r0[0x0]
80004682:	45 b8       	lddsp	r8,sp[0x16c]
80004684:	00 00       	add	r0,r0
80004686:	01 de       	ld.ub	lr,r0[0x5]
80004688:	80 00       	ld.sh	r0,r0[0x0]
8000468a:	4b 70       	lddpc	r0,80004764 <udc_process_setup+0xd8>

8000468c <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
8000468c:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80004690:	fe f8 04 80 	ld.w	r8,pc[1152]
80004694:	30 09       	mov	r9,0
80004696:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80004698:	30 0a       	mov	r10,0
8000469a:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
8000469c:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
8000469e:	11 88       	ld.ub	r8,r8[0x0]
800046a0:	10 9a       	mov	r10,r8
800046a2:	f2 08 18 00 	cp.b	r8,r9
800046a6:	c0 94       	brge	800046b8 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0)
800046a8:	fe f9 04 68 	ld.w	r9,pc[1128]
800046ac:	92 3b       	ld.sh	r11,r9[0x6]
800046ae:	30 09       	mov	r9,0
800046b0:	f2 0b 19 00 	cp.h	r11,r9
800046b4:	e0 80 02 2b 	breq	80004b0a <udc_process_setup+0x47e>
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
800046b8:	10 99       	mov	r9,r8
800046ba:	e2 19 00 60 	andl	r9,0x60,COH
800046be:	e0 81 01 fa 	brne	80004ab2 <udc_process_setup+0x426>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
800046c2:	f2 0a 18 00 	cp.b	r10,r9
800046c6:	e0 84 01 06 	brge	800048d2 <udc_process_setup+0x246>
		// GET Standard Requests 
		if (udd_g_ctrlreq.req.wLength == 0)
800046ca:	fe f9 04 46 	ld.w	r9,pc[1094]
800046ce:	92 39       	ld.sh	r9,r9[0x6]
800046d0:	58 09       	cp.w	r9,0
800046d2:	e0 80 01 f0 	breq	80004ab2 <udc_process_setup+0x426>
			return false;	// Error for USB host

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
800046d6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800046da:	e0 81 00 a3 	brne	80004820 <udc_process_setup+0x194>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800046de:	fe fa 04 32 	ld.w	r10,pc[1074]
800046e2:	15 9a       	ld.ub	r10,r10[0x1]
800046e4:	30 6b       	mov	r11,6
800046e6:	f6 0a 18 00 	cp.b	r10,r11
800046ea:	c1 a0       	breq	8000471e <udc_process_setup+0x92>
800046ec:	30 8b       	mov	r11,8
800046ee:	f6 0a 18 00 	cp.b	r10,r11
800046f2:	e0 80 00 88 	breq	80004802 <udc_process_setup+0x176>
800046f6:	30 0b       	mov	r11,0
800046f8:	f6 0a 18 00 	cp.b	r10,r11
800046fc:	e0 81 00 92 	brne	80004820 <udc_process_setup+0x194>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status))
80004700:	30 28       	mov	r8,2
80004702:	f0 09 19 00 	cp.h	r9,r8
80004706:	c0 40       	breq	8000470e <udc_process_setup+0x82>
80004708:	30 0c       	mov	r12,0
8000470a:	e0 8f 01 d0 	bral	80004aaa <udc_process_setup+0x41e>
		return false;

	udd_set_setup_payload(
8000470e:	30 2b       	mov	r11,2
80004710:	fe fc 04 04 	ld.w	r12,pc[1028]
80004714:	f0 1f 01 01 	mcall	80004b18 <udc_process_setup+0x48c>
80004718:	30 1c       	mov	r12,1
8000471a:	e0 8f 01 c8 	bral	80004aaa <udc_process_setup+0x41e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000471e:	fe f8 03 f2 	ld.w	r8,pc[1010]
80004722:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80004724:	f2 08 16 08 	lsr	r8,r9,0x8
80004728:	30 2a       	mov	r10,2
8000472a:	f4 08 18 00 	cp.b	r8,r10
8000472e:	c1 00       	breq	8000474e <udc_process_setup+0xc2>
80004730:	30 3a       	mov	r10,3
80004732:	f4 08 18 00 	cp.b	r8,r10
80004736:	c2 a0       	breq	8000478a <udc_process_setup+0xfe>
80004738:	30 19       	mov	r9,1
8000473a:	f2 08 18 00 	cp.b	r8,r9
8000473e:	c5 f1       	brne	800047fc <udc_process_setup+0x170>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80004740:	fe f8 03 dc 	ld.w	r8,pc[988]
80004744:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80004746:	19 8b       	ld.ub	r11,r12[0x0]
80004748:	f0 1f 00 f4 	mcall	80004b18 <udc_process_setup+0x48c>
8000474c:	c4 78       	rjmp	800047da <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000474e:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80004750:	fe f8 03 cc 	ld.w	r8,pc[972]
80004754:	70 08       	ld.w	r8,r8[0x0]
80004756:	f1 38 00 11 	ld.ub	r8,r8[17]
8000475a:	f2 08 18 00 	cp.b	r8,r9
8000475e:	e0 88 00 4f 	brls	800047fc <udc_process_setup+0x170>
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80004762:	fe f8 03 ba 	ld.w	r8,pc[954]
80004766:	70 18       	ld.w	r8,r8[0x4]
80004768:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
8000476c:	19 a9       	ld.ub	r9,r12[0x2]
8000476e:	19 b8       	ld.ub	r8,r12[0x3]
80004770:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80004774:	5c c8       	swap.bh	r8
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations)
				return false;
			udd_set_setup_payload(
80004776:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
8000477a:	f0 1f 00 e8 	mcall	80004b18 <udc_process_setup+0x48c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000477e:	fe f8 03 92 	ld.w	r8,pc[914]
80004782:	70 28       	ld.w	r8,r8[0x8]
80004784:	30 29       	mov	r9,2
80004786:	b0 99       	st.b	r8[0x1],r9
80004788:	c2 98       	rjmp	800047da <udc_process_setup+0x14e>
	uint8_t i;
	uint8_t *str;
	uint8_t str_lgt=0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
8000478a:	5c 59       	castu.b	r9
8000478c:	58 19       	cp.w	r9,1
8000478e:	c1 00       	breq	800047ae <udc_process_setup+0x122>
80004790:	58 29       	cp.w	r9,2
80004792:	c0 40       	breq	8000479a <udc_process_setup+0x10e>
80004794:	58 09       	cp.w	r9,0
80004796:	c0 60       	breq	800047a2 <udc_process_setup+0x116>
80004798:	c3 28       	rjmp	800047fc <udc_process_setup+0x170>
8000479a:	fe fc 03 86 	ld.w	r12,pc[902]
8000479e:	30 cb       	mov	r11,12
800047a0:	c0 a8       	rjmp	800047b4 <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload(
800047a2:	30 4b       	mov	r11,4
800047a4:	fe fc 03 80 	ld.w	r12,pc[896]
800047a8:	f0 1f 00 dc 	mcall	80004b18 <udc_process_setup+0x48c>
800047ac:	c1 78       	rjmp	800047da <udc_process_setup+0x14e>
800047ae:	fe fc 03 7a 	ld.w	r12,pc[890]
800047b2:	30 9b       	mov	r11,9
800047b4:	fe fa 03 78 	ld.w	r10,pc[888]
800047b8:	2f ea       	sub	r10,-2
800047ba:	18 98       	mov	r8,r12
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
800047bc:	11 39       	ld.ub	r9,r8++
800047be:	5c c9       	swap.bh	r9
800047c0:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_lgt != 0) {
		for(i = 0; i < str_lgt; i++) {
800047c2:	f0 0c 01 09 	sub	r9,r8,r12
800047c6:	f6 09 18 00 	cp.b	r9,r11
800047ca:	cf 93       	brcs	800047bc <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}
		
		udc_string_desc.header.bLength = 2 + (str_lgt) * 2;
800047cc:	a1 7b       	lsl	r11,0x1
800047ce:	2f eb       	sub	r11,-2
800047d0:	fe fc 03 5c 	ld.w	r12,pc[860]
800047d4:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
800047d6:	f0 1f 00 d1 	mcall	80004b18 <udc_process_setup+0x48c>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size)
800047da:	fe f8 03 36 	ld.w	r8,pc[822]
800047de:	90 39       	ld.sh	r9,r8[0x6]
800047e0:	90 68       	ld.sh	r8,r8[0xc]
800047e2:	f2 08 19 00 	cp.h	r8,r9
800047e6:	e0 8b 00 05 	brhi	800047f0 <udc_process_setup+0x164>
800047ea:	30 1c       	mov	r12,1
800047ec:	e0 8f 01 5f 	bral	80004aaa <udc_process_setup+0x41e>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
800047f0:	fe f8 03 20 	ld.w	r8,pc[800]
800047f4:	b0 69       	st.h	r8[0xc],r9
800047f6:	30 1c       	mov	r12,1
800047f8:	e0 8f 01 59 	bral	80004aaa <udc_process_setup+0x41e>
800047fc:	30 0c       	mov	r12,0
800047fe:	e0 8f 01 56 	bral	80004aaa <udc_process_setup+0x41e>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1)
80004802:	30 18       	mov	r8,1
80004804:	f0 09 19 00 	cp.h	r9,r8
80004808:	c0 40       	breq	80004810 <udc_process_setup+0x184>
8000480a:	30 0c       	mov	r12,0
8000480c:	e0 8f 01 4f 	bral	80004aaa <udc_process_setup+0x41e>
		return false;

	udd_set_setup_payload(&udc_num_configuration,1);
80004810:	30 1b       	mov	r11,1
80004812:	fe fc 03 1e 	ld.w	r12,pc[798]
80004816:	f0 1f 00 c1 	mcall	80004b18 <udc_process_setup+0x48c>
8000481a:	30 1c       	mov	r12,1
8000481c:	e0 8f 01 47 	bral	80004aaa <udc_process_setup+0x41e>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80004820:	58 18       	cp.w	r8,1
80004822:	c3 61       	brne	8000488e <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80004824:	fe fa 02 ec 	ld.w	r10,pc[748]
80004828:	15 9b       	ld.ub	r11,r10[0x1]
8000482a:	30 aa       	mov	r10,10
8000482c:	f4 0b 18 00 	cp.b	r11,r10
80004830:	c2 f1       	brne	8000488e <udc_process_setup+0x202>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1)
80004832:	f0 09 19 00 	cp.h	r9,r8
80004836:	c2 a1       	brne	8000488a <udc_process_setup+0x1fe>
		return false;	// Error in request
	if (!udc_num_configuration)
80004838:	fe f8 02 f8 	ld.w	r8,pc[760]
8000483c:	11 89       	ld.ub	r9,r8[0x0]
8000483e:	30 08       	mov	r8,0
80004840:	f0 09 18 00 	cp.b	r9,r8
80004844:	c2 30       	breq	8000488a <udc_process_setup+0x1fe>
		return false;	// The device is not is configured state yet

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80004846:	fe f8 02 ca 	ld.w	r8,pc[714]
8000484a:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
8000484c:	fe f8 02 e8 	ld.w	r8,pc[744]
80004850:	70 08       	ld.w	r8,r8[0x0]
80004852:	70 08       	ld.w	r8,r8[0x0]
80004854:	11 c8       	ld.ub	r8,r8[0x4]
80004856:	ee 08 18 00 	cp.b	r8,r7
8000485a:	e0 88 00 18 	brls	8000488a <udc_process_setup+0x1fe>
		return false;

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
8000485e:	30 0b       	mov	r11,0
80004860:	0e 9c       	mov	r12,r7
80004862:	f0 1f 00 b6 	mcall	80004b38 <udc_process_setup+0x4ac>
80004866:	c1 20       	breq	8000488a <udc_process_setup+0x1fe>
		return false;
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
80004868:	fe f8 02 cc 	ld.w	r8,pc[716]
8000486c:	70 08       	ld.w	r8,r8[0x0]
8000486e:	70 18       	ld.w	r8,r8[0x4]
80004870:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80004874:	70 3c       	ld.w	r12,r8[0xc]
80004876:	5d 1c       	icall	r12
80004878:	fe f8 02 c4 	ld.w	r8,pc[708]
8000487c:	b0 8c       	st.b	r8[0x0],r12
	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
8000487e:	30 1b       	mov	r11,1
80004880:	10 9c       	mov	r12,r8
80004882:	f0 1f 00 a6 	mcall	80004b18 <udc_process_setup+0x48c>
80004886:	30 1c       	mov	r12,1
80004888:	c1 19       	rjmp	80004aaa <udc_process_setup+0x41e>
8000488a:	30 0c       	mov	r12,0
8000488c:	c0 f9       	rjmp	80004aaa <udc_process_setup+0x41e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000488e:	58 28       	cp.w	r8,2
80004890:	e0 81 01 11 	brne	80004ab2 <udc_process_setup+0x426>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80004894:	fe f8 02 7c 	ld.w	r8,pc[636]
80004898:	11 9a       	ld.ub	r10,r8[0x1]
8000489a:	30 08       	mov	r8,0
8000489c:	f0 0a 18 00 	cp.b	r10,r8
800048a0:	e0 81 01 04 	brne	80004aa8 <udc_process_setup+0x41c>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status))
800048a4:	30 28       	mov	r8,2
800048a6:	f0 09 19 00 	cp.h	r9,r8
800048aa:	c0 30       	breq	800048b0 <udc_process_setup+0x224>
800048ac:	30 0c       	mov	r12,0
800048ae:	cf e8       	rjmp	80004aaa <udc_process_setup+0x41e>
		return false;

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
800048b0:	fe f8 02 60 	ld.w	r8,pc[608]
800048b4:	11 dc       	ld.ub	r12,r8[0x5]
800048b6:	f0 1f 00 a3 	mcall	80004b40 <udc_process_setup+0x4b4>
800048ba:	e0 68 01 00 	mov	r8,256
800048be:	f9 b8 00 00 	moveq	r8,0
800048c2:	fe fc 02 82 	ld.w	r12,pc[642]
800048c6:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload(
800048c8:	30 2b       	mov	r11,2
800048ca:	f0 1f 00 94 	mcall	80004b18 <udc_process_setup+0x48c>
800048ce:	30 1c       	mov	r12,1
800048d0:	ce d8       	rjmp	80004aaa <udc_process_setup+0x41e>
			}
		}
#endif
	} else {
		// SET Standard Requests  
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
800048d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800048d6:	e0 81 00 93 	brne	800049fc <udc_process_setup+0x370>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800048da:	fe f9 02 36 	ld.w	r9,pc[566]
800048de:	13 99       	ld.ub	r9,r9[0x1]
800048e0:	30 3a       	mov	r10,3
800048e2:	f4 09 18 00 	cp.b	r9,r10
800048e6:	c3 80       	breq	80004956 <udc_process_setup+0x2ca>
800048e8:	e0 8b 00 08 	brhi	800048f8 <udc_process_setup+0x26c>
800048ec:	30 1a       	mov	r10,1
800048ee:	f4 09 18 00 	cp.b	r9,r10
800048f2:	e0 81 00 85 	brne	800049fc <udc_process_setup+0x370>
800048f6:	c1 a8       	rjmp	8000492a <udc_process_setup+0x29e>
800048f8:	30 5a       	mov	r10,5
800048fa:	f4 09 18 00 	cp.b	r9,r10
800048fe:	c0 70       	breq	8000490c <udc_process_setup+0x280>
80004900:	30 9a       	mov	r10,9
80004902:	f4 09 18 00 	cp.b	r9,r10
80004906:	e0 81 00 7b 	brne	800049fc <udc_process_setup+0x370>
8000490a:	c3 c8       	rjmp	80004982 <udc_process_setup+0x2f6>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
8000490c:	fe f8 02 04 	ld.w	r8,pc[516]
80004910:	90 39       	ld.sh	r9,r8[0x6]
80004912:	30 08       	mov	r8,0
80004914:	f0 09 19 00 	cp.h	r9,r8
80004918:	c0 30       	breq	8000491e <udc_process_setup+0x292>
8000491a:	30 0c       	mov	r12,0
8000491c:	cc 78       	rjmp	80004aaa <udc_process_setup+0x41e>
		return false;

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000491e:	fe f9 02 2a 	ld.w	r9,pc[554]
80004922:	4f c8       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004924:	91 49       	st.w	r8[0x10],r9
80004926:	30 1c       	mov	r12,1
80004928:	cc 18       	rjmp	80004aaa <udc_process_setup+0x41e>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
8000492a:	4f a8       	lddpc	r8,80004b10 <udc_process_setup+0x484>
8000492c:	90 39       	ld.sh	r9,r8[0x6]
8000492e:	30 08       	mov	r8,0
80004930:	f0 09 19 00 	cp.h	r9,r8
80004934:	c0 f1       	brne	80004952 <udc_process_setup+0x2c6>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80004936:	4f 78       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004938:	90 19       	ld.sh	r9,r8[0x2]
8000493a:	30 18       	mov	r8,1
8000493c:	f0 09 19 00 	cp.h	r9,r8
80004940:	c0 91       	brne	80004952 <udc_process_setup+0x2c6>
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
80004942:	4f 58       	lddpc	r8,80004b14 <udc_process_setup+0x488>
80004944:	90 09       	ld.sh	r9,r8[0x0]
80004946:	a9 d9       	cbr	r9,0x9
80004948:	b0 09       	st.h	r8[0x0],r9
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
8000494a:	f0 1f 00 81 	mcall	80004b4c <udc_process_setup+0x4c0>
8000494e:	30 1c       	mov	r12,1
80004950:	ca d8       	rjmp	80004aaa <udc_process_setup+0x41e>
80004952:	30 0c       	mov	r12,0
80004954:	ca b8       	rjmp	80004aaa <udc_process_setup+0x41e>
 *
 * \return true if success 
 */
static bool udc_req_std_dev_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80004956:	4e f8       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004958:	90 39       	ld.sh	r9,r8[0x6]
8000495a:	30 08       	mov	r8,0
8000495c:	f0 09 19 00 	cp.h	r9,r8
80004960:	c0 f1       	brne	8000497e <udc_process_setup+0x2f2>
		return false;

	switch (udd_g_ctrlreq.req.wValue) {
80004962:	4e c8       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004964:	90 19       	ld.sh	r9,r8[0x2]
80004966:	30 18       	mov	r8,1
80004968:	f0 09 19 00 	cp.h	r9,r8
8000496c:	c0 91       	brne	8000497e <udc_process_setup+0x2f2>

	case USB_DEV_FEATURE_REMOTE_WAKEUP:
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
8000496e:	4e a8       	lddpc	r8,80004b14 <udc_process_setup+0x488>
80004970:	90 09       	ld.sh	r9,r8[0x0]
80004972:	a9 b9       	sbr	r9,0x9
80004974:	b0 09       	st.h	r8[0x0],r9
		UDC_REMOTEWAKEUP_ENABLE();
80004976:	f0 1f 00 77 	mcall	80004b50 <udc_process_setup+0x4c4>
8000497a:	30 1c       	mov	r12,1
8000497c:	c9 78       	rjmp	80004aaa <udc_process_setup+0x41e>
8000497e:	30 0c       	mov	r12,0
80004980:	c9 58       	rjmp	80004aaa <udc_process_setup+0x41e>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength != 0)
80004982:	4e 48       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004984:	90 39       	ld.sh	r9,r8[0x6]
80004986:	30 08       	mov	r8,0
80004988:	f0 09 19 00 	cp.h	r9,r8
8000498c:	c3 41       	brne	800049f4 <udc_process_setup+0x368>
		return false;
	// Authorize configuration only if the address is valid
	if (!udd_getaddress())
8000498e:	f0 1f 00 72 	mcall	80004b54 <udc_process_setup+0x4c8>
80004992:	c3 10       	breq	800049f4 <udc_process_setup+0x368>
			return false;
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80004994:	4d f8       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004996:	11 b9       	ld.ub	r9,r8[0x3]
80004998:	4e 18       	lddpc	r8,80004b1c <udc_process_setup+0x490>
8000499a:	70 08       	ld.w	r8,r8[0x0]
8000499c:	f1 38 00 11 	ld.ub	r8,r8[17]
800049a0:	10 39       	cp.w	r9,r8
800049a2:	e0 89 00 29 	brgt	800049f4 <udc_process_setup+0x368>
				udc_config.confdev_lsfs->bNumConfigurations)
			return false;
	}

	// Reset current configuration
	udc_reset();
800049a6:	f0 1f 00 6d 	mcall	80004b58 <udc_process_setup+0x4cc>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
800049aa:	4d a8       	lddpc	r8,80004b10 <udc_process_setup+0x484>
800049ac:	11 b8       	ld.ub	r8,r8[0x3]
800049ae:	4e 19       	lddpc	r9,80004b30 <udc_process_setup+0x4a4>
800049b0:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
800049b2:	58 08       	cp.w	r8,0
800049b4:	c2 20       	breq	800049f8 <udc_process_setup+0x36c>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
800049b6:	20 18       	sub	r8,1
800049b8:	4d 99       	lddpc	r9,80004b1c <udc_process_setup+0x490>
800049ba:	72 19       	ld.w	r9,r9[0x4]
800049bc:	f2 08 00 38 	add	r8,r9,r8<<0x3
800049c0:	4d d9       	lddpc	r9,80004b34 <udc_process_setup+0x4a8>
800049c2:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800049c4:	70 08       	ld.w	r8,r8[0x0]
800049c6:	11 c9       	ld.ub	r9,r8[0x4]
800049c8:	30 08       	mov	r8,0
800049ca:	f0 09 18 00 	cp.b	r9,r8
800049ce:	c1 50       	breq	800049f8 <udc_process_setup+0x36c>
800049d0:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
800049d2:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800049d4:	4d 86       	lddpc	r6,80004b34 <udc_process_setup+0x4a8>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0))
800049d6:	0a 9b       	mov	r11,r5
800049d8:	0e 9c       	mov	r12,r7
800049da:	f0 1f 00 61 	mcall	80004b5c <udc_process_setup+0x4d0>
800049de:	c0 b0       	breq	800049f4 <udc_process_setup+0x368>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
800049e0:	2f f7       	sub	r7,-1
800049e2:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800049e4:	6c 08       	ld.w	r8,r6[0x0]
800049e6:	70 08       	ld.w	r8,r8[0x0]
800049e8:	11 c8       	ld.ub	r8,r8[0x4]
800049ea:	ee 08 18 00 	cp.b	r8,r7
800049ee:	fe 9b ff f4 	brhi	800049d6 <udc_process_setup+0x34a>
800049f2:	c0 38       	rjmp	800049f8 <udc_process_setup+0x36c>
800049f4:	30 0c       	mov	r12,0
800049f6:	c5 a8       	rjmp	80004aaa <udc_process_setup+0x41e>
800049f8:	30 1c       	mov	r12,1
800049fa:	c5 88       	rjmp	80004aaa <udc_process_setup+0x41e>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
800049fc:	58 18       	cp.w	r8,1
800049fe:	c2 21       	brne	80004a42 <udc_process_setup+0x3b6>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80004a00:	4c 49       	lddpc	r9,80004b10 <udc_process_setup+0x484>
80004a02:	13 9a       	ld.ub	r10,r9[0x1]
80004a04:	30 b9       	mov	r9,11
80004a06:	f2 0a 18 00 	cp.b	r10,r9
80004a0a:	c1 c1       	brne	80004a42 <udc_process_setup+0x3b6>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength != 0)
80004a0c:	4c 18       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004a0e:	90 39       	ld.sh	r9,r8[0x6]
80004a10:	30 08       	mov	r8,0
80004a12:	f0 09 19 00 	cp.h	r9,r8
80004a16:	c1 41       	brne	80004a3e <udc_process_setup+0x3b2>
		return false;	// Error in request
	if (!udc_num_configuration)
80004a18:	4c 68       	lddpc	r8,80004b30 <udc_process_setup+0x4a4>
80004a1a:	11 89       	ld.ub	r9,r8[0x0]
80004a1c:	30 08       	mov	r8,0
80004a1e:	f0 09 18 00 	cp.b	r9,r8
80004a22:	c0 e0       	breq	80004a3e <udc_process_setup+0x3b2>
		return false;	// The device is not is configured state yet


	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
80004a24:	4b b8       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004a26:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num))
80004a28:	11 d7       	ld.ub	r7,r8[0x5]
80004a2a:	0e 9c       	mov	r12,r7
80004a2c:	f0 1f 00 4d 	mcall	80004b60 <udc_process_setup+0x4d4>
80004a30:	c0 70       	breq	80004a3e <udc_process_setup+0x3b2>
		return false;

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
80004a32:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
80004a36:	0e 9c       	mov	r12,r7
80004a38:	f0 1f 00 49 	mcall	80004b5c <udc_process_setup+0x4d0>
80004a3c:	c3 78       	rjmp	80004aaa <udc_process_setup+0x41e>
80004a3e:	30 0c       	mov	r12,0
80004a40:	c3 58       	rjmp	80004aaa <udc_process_setup+0x41e>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80004a42:	58 28       	cp.w	r8,2
80004a44:	c3 71       	brne	80004ab2 <udc_process_setup+0x426>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80004a46:	4b 38       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004a48:	11 98       	ld.ub	r8,r8[0x1]
80004a4a:	30 19       	mov	r9,1
80004a4c:	f2 08 18 00 	cp.b	r8,r9
80004a50:	c0 60       	breq	80004a5c <udc_process_setup+0x3d0>
80004a52:	30 39       	mov	r9,3
80004a54:	f2 08 18 00 	cp.b	r8,r9
80004a58:	c2 81       	brne	80004aa8 <udc_process_setup+0x41c>
80004a5a:	c1 48       	rjmp	80004a82 <udc_process_setup+0x3f6>
 *
 * \return true if success 
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80004a5c:	4a d8       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004a5e:	90 39       	ld.sh	r9,r8[0x6]
80004a60:	30 08       	mov	r8,0
80004a62:	f0 09 19 00 	cp.h	r9,r8
80004a66:	c0 c1       	brne	80004a7e <udc_process_setup+0x3f2>
		return false;

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80004a68:	4a a8       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004a6a:	90 19       	ld.sh	r9,r8[0x2]
80004a6c:	30 08       	mov	r8,0
80004a6e:	f0 09 19 00 	cp.h	r9,r8
80004a72:	c0 61       	brne	80004a7e <udc_process_setup+0x3f2>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80004a74:	4a 78       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004a76:	11 dc       	ld.ub	r12,r8[0x5]
80004a78:	f0 1f 00 3b 	mcall	80004b64 <udc_process_setup+0x4d8>
80004a7c:	c1 78       	rjmp	80004aaa <udc_process_setup+0x41e>
80004a7e:	30 0c       	mov	r12,0
80004a80:	c1 58       	rjmp	80004aaa <udc_process_setup+0x41e>
 * \return true if success 
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength != 0)
80004a82:	4a 48       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004a84:	90 39       	ld.sh	r9,r8[0x6]
80004a86:	30 08       	mov	r8,0
80004a88:	f0 09 19 00 	cp.h	r9,r8
80004a8c:	c0 c1       	brne	80004aa4 <udc_process_setup+0x418>
		return false;
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80004a8e:	4a 18       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004a90:	90 19       	ld.sh	r9,r8[0x2]
80004a92:	30 08       	mov	r8,0
80004a94:	f0 09 19 00 	cp.h	r9,r8
80004a98:	c0 61       	brne	80004aa4 <udc_process_setup+0x418>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80004a9a:	49 e8       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004a9c:	11 dc       	ld.ub	r12,r8[0x5]
80004a9e:	f0 1f 00 33 	mcall	80004b68 <udc_process_setup+0x4dc>
80004aa2:	c0 48       	rjmp	80004aaa <udc_process_setup+0x41e>
80004aa4:	30 0c       	mov	r12,0
80004aa6:	c0 28       	rjmp	80004aaa <udc_process_setup+0x41e>
80004aa8:	30 0c       	mov	r12,0
			return false;	// Error from USB host
	}
	
	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd())
80004aaa:	58 0c       	cp.w	r12,0
80004aac:	c0 30       	breq	80004ab2 <udc_process_setup+0x426>
80004aae:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80004ab2:	49 88       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004ab4:	11 88       	ld.ub	r8,r8[0x0]
80004ab6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004aba:	58 18       	cp.w	r8,1
80004abc:	c2 71       	brne	80004b0a <udc_process_setup+0x47e>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration)
80004abe:	49 d8       	lddpc	r8,80004b30 <udc_process_setup+0x4a4>
80004ac0:	11 89       	ld.ub	r9,r8[0x0]
80004ac2:	30 08       	mov	r8,0
80004ac4:	f0 09 18 00 	cp.b	r9,r8
80004ac8:	c2 10       	breq	80004b0a <udc_process_setup+0x47e>
		return false;	// The device is not is configured state yet
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80004aca:	49 28       	lddpc	r8,80004b10 <udc_process_setup+0x484>
80004acc:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces)
80004ace:	49 a8       	lddpc	r8,80004b34 <udc_process_setup+0x4a8>
80004ad0:	70 08       	ld.w	r8,r8[0x0]
80004ad2:	70 08       	ld.w	r8,r8[0x0]
80004ad4:	11 c8       	ld.ub	r8,r8[0x4]
80004ad6:	ee 08 18 00 	cp.b	r8,r7
80004ada:	e0 88 00 18 	brls	80004b0a <udc_process_setup+0x47e>
		return false;

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0))
80004ade:	0e 96       	mov	r6,r7
80004ae0:	30 0b       	mov	r11,0
80004ae2:	0e 9c       	mov	r12,r7
80004ae4:	f0 1f 00 15 	mcall	80004b38 <udc_process_setup+0x4ac>
80004ae8:	c1 10       	breq	80004b0a <udc_process_setup+0x47e>
		return false;
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80004aea:	49 38       	lddpc	r8,80004b34 <udc_process_setup+0x4a8>
80004aec:	70 08       	ld.w	r8,r8[0x0]
80004aee:	70 18       	ld.w	r8,r8[0x4]
80004af0:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting()))
80004af4:	6e 3c       	ld.w	r12,r7[0xc]
80004af6:	5d 1c       	icall	r12
80004af8:	18 9b       	mov	r11,r12
80004afa:	0c 9c       	mov	r12,r6
80004afc:	f0 1f 00 0f 	mcall	80004b38 <udc_process_setup+0x4ac>
80004b00:	c0 50       	breq	80004b0a <udc_process_setup+0x47e>
		return false;

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80004b02:	6e 2c       	ld.w	r12,r7[0x8]
80004b04:	5d 1c       	icall	r12
80004b06:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004b0a:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80004b0e:	00 00       	add	r0,r0
80004b10:	00 00       	add	r0,r0
80004b12:	04 18       	sub	r8,r2
80004b14:	00 00       	add	r0,r0
80004b16:	01 de       	ld.ub	lr,r0[0x5]
80004b18:	80 00       	ld.sh	r0,r0[0x0]
80004b1a:	32 3c       	mov	r12,35
80004b1c:	00 00       	add	r0,r0
80004b1e:	00 88       	andn	r8,r0
80004b20:	00 00       	add	r0,r0
80004b22:	00 a4       	st.w	r0++,r4
80004b24:	00 00       	add	r0,r0
80004b26:	00 da       	st.w	--r0,r10
80004b28:	00 00       	add	r0,r0
80004b2a:	00 b4       	st.h	r0++,r4
80004b2c:	00 00       	add	r0,r0
80004b2e:	00 c0       	st.b	r0++,r0
80004b30:	00 00       	add	r0,r0
80004b32:	01 e0       	ld.ub	r0,r0[0x6]
80004b34:	00 00       	add	r0,r0
80004b36:	01 d8       	ld.ub	r8,r0[0x5]
80004b38:	80 00       	ld.sh	r0,r0[0x0]
80004b3a:	44 6c       	lddsp	r12,sp[0x118]
80004b3c:	00 00       	add	r0,r0
80004b3e:	01 e8       	ld.ub	r8,r0[0x6]
80004b40:	80 00       	ld.sh	r0,r0[0x0]
80004b42:	32 48       	mov	r8,36
80004b44:	00 00       	add	r0,r0
80004b46:	01 dc       	ld.ub	r12,r0[0x5]
80004b48:	80 00       	ld.sh	r0,r0[0x0]
80004b4a:	45 40       	lddsp	r0,sp[0x150]
80004b4c:	80 00       	ld.sh	r0,r0[0x0]
80004b4e:	4b 70       	lddpc	r0,80004c28 <main+0x9c>
80004b50:	80 00       	ld.sh	r0,r0[0x0]
80004b52:	4b 6e       	lddpc	lr,80004c28 <main+0x9c>
80004b54:	80 00       	ld.sh	r0,r0[0x0]
80004b56:	32 24       	mov	r4,34
80004b58:	80 00       	ld.sh	r0,r0[0x0]
80004b5a:	46 1c       	lddsp	r12,sp[0x184]
80004b5c:	80 00       	ld.sh	r0,r0[0x0]
80004b5e:	45 58       	lddsp	r8,sp[0x154]
80004b60:	80 00       	ld.sh	r0,r0[0x0]
80004b62:	45 b8       	lddsp	r8,sp[0x16c]
80004b64:	80 00       	ld.sh	r0,r0[0x0]
80004b66:	32 5c       	mov	r12,37
80004b68:	80 00       	ld.sh	r0,r0[0x0]
80004b6a:	33 2c       	mov	r12,50

80004b6c <main_resume_action>:
}

//-------------------------------------------------------------------
void main_resume_action(void)
{
}
80004b6c:	5e fc       	retal	r12

80004b6e <main_remotewakeup_enable>:

//-------------------------------------------------------------------
// If remote wakeup enable/disable is supported insert code below
void main_remotewakeup_enable(void)
{
}
80004b6e:	5e fc       	retal	r12

80004b70 <main_remotewakeup_disable>:

//-------------------------------------------------------------------
void main_remotewakeup_disable(void)
{
}
80004b70:	5e fc       	retal	r12

80004b72 <main_kbd_enable>:
//-------------------------------------------------------------------
bool main_kbd_enable(void)
{
	//main_b_kbd_enable = true;
	return true;
}
80004b72:	5e ff       	retal	1

80004b74 <main_kbd_disable>:
//-------------------------------------------------------------------
bool main_kbd_disable(void)
{
	//main_b_kbd_enable = false; mod 
	return false;
}
80004b74:	5e fd       	retal	0

80004b76 <main_kbd_change>:

//-------------------------------------------------------------------
void main_kbd_change(uint8_t value) 
{	
	//no use in this firmware
}
80004b76:	5e fc       	retal	r12

80004b78 <main_suspend_action>:
	}
}

//-------------------------------------------------------------------
void main_suspend_action(void)
{
80004b78:	d4 01       	pushm	lr
	LED_Off(LED0);
80004b7a:	30 1c       	mov	r12,1
80004b7c:	f0 1f 00 03 	mcall	80004b88 <main_suspend_action+0x10>
	LED_Off(LED1);
80004b80:	30 2c       	mov	r12,2
80004b82:	f0 1f 00 02 	mcall	80004b88 <main_suspend_action+0x10>
}
80004b86:	d8 02       	popm	pc
80004b88:	80 00       	ld.sh	r0,r0[0x0]
80004b8a:	20 ac       	sub	r12,10

80004b8c <main>:
	}
}

// Main Method - IRQ, CLCK, INIT setup
//-------------------------------------------------------------------
int main(void) {
80004b8c:	eb cd 40 80 	pushm	r7,lr
80004b90:	20 5d       	sub	sp,20
	
	uint32_t sizeTemp;
	
	// init cpu
	irq_initialize_vectors();
80004b92:	f0 1f 00 2a 	mcall	80004c38 <main+0xac>
	cpu_irq_enable();
80004b96:	d5 03       	csrf	0x10
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
80004b98:	4a 98       	lddpc	r8,80004c3c <main+0xb0>
80004b9a:	30 09       	mov	r9,0
80004b9c:	b0 89       	st.b	r8[0x0],r9
80004b9e:	b0 99       	st.b	r8[0x1],r9
80004ba0:	b0 a9       	st.b	r8[0x2],r9
80004ba2:	b0 b9       	st.b	r8[0x3],r9
80004ba4:	b0 c9       	st.b	r8[0x4],r9
80004ba6:	b0 d9       	st.b	r8[0x5],r9
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
80004ba8:	30 19       	mov	r9,1
80004baa:	b0 e9       	st.b	r8[0x6],r9

	// init board
	sleepmgr_init();
	sysclk_init();
80004bac:	f0 1f 00 25 	mcall	80004c40 <main+0xb4>
	board_init();
80004bb0:	f0 1f 00 25 	mcall	80004c44 <main+0xb8>
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	};
80004bb4:	4a 58       	lddpc	r8,80004c48 <main+0xbc>
80004bb6:	1a 97       	mov	r7,sp
80004bb8:	f0 ea 00 00 	ld.d	r10,r8[0]
80004bbc:	fa eb 00 00 	st.d	sp[0],r10
80004bc0:	f0 e8 00 08 	ld.d	r8,r8[8]
80004bc4:	fa e9 00 08 	st.d	sp[8],r8

	// assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
80004bc8:	30 4b       	mov	r11,4
80004bca:	4a 1c       	lddpc	r12,80004c4c <main+0xc0>
80004bcc:	f0 1f 00 21 	mcall	80004c50 <main+0xc4>
						sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

	// initialize as master.
	spi_initMaster(SD_MMC_SPI, &spiOptions);
80004bd0:	1a 9b       	mov	r11,sp
80004bd2:	fe 7c 24 00 	mov	r12,-56320
80004bd6:	f0 1f 00 20 	mcall	80004c54 <main+0xc8>

	// set SPI selection mode: variable_ps, pcs_decode, delay.
	spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
80004bda:	30 09       	mov	r9,0
80004bdc:	12 9a       	mov	r10,r9
80004bde:	12 9b       	mov	r11,r9
80004be0:	fe 7c 24 00 	mov	r12,-56320
80004be4:	f0 1f 00 1d 	mcall	80004c58 <main+0xcc>

	// enable SPI module.
	spi_enable(SD_MMC_SPI);
80004be8:	fe 7c 24 00 	mov	r12,-56320
80004bec:	f0 1f 00 1c 	mcall	80004c5c <main+0xd0>

	// Initialize SD/MMC driver with SPI clock (PBA).
	sd_mmc_spi_init(spiOptions, pba_hz);
80004bf0:	20 4d       	sub	sp,16
80004bf2:	ee e8 00 00 	ld.d	r8,r7[0]
80004bf6:	fa e9 00 00 	st.d	sp[0],r8
80004bfa:	ee e8 00 08 	ld.d	r8,r7[8]
80004bfe:	fa e9 00 08 	st.d	sp[8],r8
80004c02:	e0 6c 1b 00 	mov	r12,6912
80004c06:	ea 1c 00 b7 	orh	r12,0xb7
80004c0a:	f0 1f 00 16 	mcall	80004c60 <main+0xd4>

	// initialize SD/MMC resources: GPIO, SPI.
	sd_mmc_resources_init(FOSC0);
	
	// test if the memory is ready - using the control access memory abstraction layer (/SERVICES/MEMORY/CTRL_ACCESS/)
	if (mem_test_unit_ready(LUN_ID_SD_MMC_SPI_MEM) == CTRL_GOOD) {
80004c0e:	30 0c       	mov	r12,0
80004c10:	f0 1f 00 15 	mcall	80004c64 <main+0xd8>
80004c14:	2f cd       	sub	sp,-16
80004c16:	58 0c       	cp.w	r12,0
80004c18:	c0 a1       	brne	80004c2c <main+0xa0>
		// Get and display the capacity
		mem_read_capacity(LUN_ID_SD_MMC_SPI_MEM, &sizeTemp);
80004c1a:	fa cb ff f0 	sub	r11,sp,-16
80004c1e:	f0 1f 00 13 	mcall	80004c68 <main+0xdc>

/*! \brief Start the USB Device stack
 */
static inline void udc_start(void)
{
	udd_enable();
80004c22:	f0 1f 00 13 	mcall	80004c6c <main+0xe0>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80004c26:	f0 1f 00 13 	mcall	80004c70 <main+0xe4>
80004c2a:	c0 68       	rjmp	80004c36 <main+0xaa>
	}
	else {
		//  error - we can't proceed - sit and spin...
		while(true) { LED_On( LED1 ); }
80004c2c:	30 27       	mov	r7,2
80004c2e:	0e 9c       	mov	r12,r7
80004c30:	f0 1f 00 11 	mcall	80004c74 <main+0xe8>
80004c34:	cf db       	rjmp	80004c2e <main+0xa2>
80004c36:	c0 08       	rjmp	80004c36 <main+0xaa>
80004c38:	80 00       	ld.sh	r0,r0[0x0]
80004c3a:	2f 88       	sub	r8,-8
80004c3c:	00 00       	add	r0,r0
80004c3e:	04 30       	cp.w	r0,r2
80004c40:	80 00       	ld.sh	r0,r0[0x0]
80004c42:	3f 2c       	mov	r12,-14
80004c44:	80 00       	ld.sh	r0,r0[0x0]
80004c46:	20 04       	sub	r4,0
80004c48:	80 00       	ld.sh	r0,r0[0x0]
80004c4a:	51 04       	stdsp	sp[0x40],r4
80004c4c:	80 00       	ld.sh	r0,r0[0x0]
80004c4e:	51 14       	stdsp	sp[0x44],r4
80004c50:	80 00       	ld.sh	r0,r0[0x0]
80004c52:	2e 58       	sub	r8,-27
80004c54:	80 00       	ld.sh	r0,r0[0x0]
80004c56:	30 2e       	mov	lr,2
80004c58:	80 00       	ld.sh	r0,r0[0x0]
80004c5a:	30 66       	mov	r6,6
80004c5c:	80 00       	ld.sh	r0,r0[0x0]
80004c5e:	31 c0       	mov	r0,28
80004c60:	80 00       	ld.sh	r0,r0[0x0]
80004c62:	2c 08       	sub	r8,-64
80004c64:	80 00       	ld.sh	r0,r0[0x0]
80004c66:	40 5c       	lddsp	r12,sp[0x14]
80004c68:	80 00       	ld.sh	r0,r0[0x0]
80004c6a:	40 70       	lddsp	r0,sp[0x1c]
80004c6c:	80 00       	ld.sh	r0,r0[0x0]
80004c6e:	37 8c       	mov	r12,120
80004c70:	80 00       	ld.sh	r0,r0[0x0]
80004c72:	35 d8       	mov	r8,93
80004c74:	80 00       	ld.sh	r0,r0[0x0]
80004c76:	20 5c       	sub	r12,5

80004c78 <process_frame>:
}

// process a USB frame
//-------------------------------------------------------------------
void process_frame(uint16_t framenumber)
{
80004c78:	d4 01       	pushm	lr
	static bool sequence_running = false;
	static uint8_t u8_sequence_pos = 0;
	uint8_t u8_value;
	static uint16_t cpt_sof = 0;

	if ((framenumber % 1000) == 0) {
80004c7a:	5c 7c       	castu.h	r12
80004c7c:	e0 69 4d d3 	mov	r9,19923
80004c80:	ea 19 10 62 	orh	r9,0x1062
80004c84:	f8 09 06 48 	mulu.d	r8,r12,r9
80004c88:	f2 08 16 06 	lsr	r8,r9,0x6
80004c8c:	e0 69 03 e8 	mov	r9,1000
80004c90:	b3 38       	mul	r8,r9
80004c92:	10 1c       	sub	r12,r8
80004c94:	5c 8c       	casts.h	r12
80004c96:	c0 51       	brne	80004ca0 <process_frame+0x28>
		LED_On(LED1);
80004c98:	30 2c       	mov	r12,2
80004c9a:	f0 1f 00 3a 	mcall	80004d80 <process_frame+0x108>
80004c9e:	c0 98       	rjmp	80004cb0 <process_frame+0x38>
	}
	if ((framenumber % 1000) == 500) {
80004ca0:	e0 68 01 f4 	mov	r8,500
80004ca4:	f0 0c 19 00 	cp.h	r12,r8
80004ca8:	c0 41       	brne	80004cb0 <process_frame+0x38>
		LED_Off(LED1);
80004caa:	30 2c       	mov	r12,2
80004cac:	f0 1f 00 36 	mcall	80004d84 <process_frame+0x10c>
	}
	// Scan process running each 2ms
	cpt_sof++;
80004cb0:	4b 69       	lddpc	r9,80004d88 <process_frame+0x110>
80004cb2:	92 08       	ld.sh	r8,r9[0x0]
80004cb4:	2f f8       	sub	r8,-1
80004cb6:	5c 88       	casts.h	r8
80004cb8:	b2 08       	st.h	r9[0x0],r8
	if ((cpt_sof % 2) == 0) {
80004cba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004cbe:	c5 f0       	breq	80004d7c <process_frame+0x104>
		return;
	}

	// Scan buttons on switch 0 to send keys sequence
	b_btn_state = (!gpio_get_pin_value(GPIO_PUSH_BUTTON_0)) ? true : false;
80004cc0:	32 2c       	mov	r12,34
80004cc2:	f0 1f 00 33 	mcall	80004d8c <process_frame+0x114>
80004cc6:	5f 08       	sreq	r8
	if (b_btn_state != btn_last_state) {
80004cc8:	4b 29       	lddpc	r9,80004d90 <process_frame+0x118>
80004cca:	13 89       	ld.ub	r9,r9[0x0]
80004ccc:	f0 09 18 00 	cp.b	r9,r8
80004cd0:	c0 60       	breq	80004cdc <process_frame+0x64>
		btn_last_state = b_btn_state;
80004cd2:	4b 09       	lddpc	r9,80004d90 <process_frame+0x118>
80004cd4:	b2 88       	st.b	r9[0x0],r8
		sequence_running = true;
80004cd6:	30 19       	mov	r9,1
80004cd8:	4a f8       	lddpc	r8,80004d94 <process_frame+0x11c>
80004cda:	b0 89       	st.b	r8[0x0],r9
	}

	// Sequence process running each period
	if (SEQUENCE_PERIOD > cpt_sof) {
80004cdc:	4a b8       	lddpc	r8,80004d88 <process_frame+0x110>
80004cde:	90 09       	ld.sh	r9,r8[0x0]
80004ce0:	36 38       	mov	r8,99
80004ce2:	f0 09 19 00 	cp.h	r9,r8
80004ce6:	e0 88 00 4b 	brls	80004d7c <process_frame+0x104>
		return;
	}
	cpt_sof = 0;
80004cea:	30 08       	mov	r8,0
80004cec:	4a 79       	lddpc	r9,80004d88 <process_frame+0x110>
80004cee:	b2 08       	st.h	r9[0x0],r8

	if (sequence_running) {
80004cf0:	4a 99       	lddpc	r9,80004d94 <process_frame+0x11c>
80004cf2:	13 89       	ld.ub	r9,r9[0x0]
80004cf4:	f0 09 18 00 	cp.b	r9,r8
80004cf8:	c4 20       	breq	80004d7c <process_frame+0x104>
		// Send next key
		u8_value = ui_sequence[u8_sequence_pos].u8_value;
80004cfa:	4a 88       	lddpc	r8,80004d98 <process_frame+0x120>
80004cfc:	11 88       	ld.ub	r8,r8[0x0]
80004cfe:	f0 08 00 19 	add	r9,r8,r8<<0x1
80004d02:	4a 7a       	lddpc	r10,80004d9c <process_frame+0x124>
80004d04:	f4 09 00 09 	add	r9,r10,r9
80004d08:	13 ac       	ld.ub	r12,r9[0x2]
		if (u8_value!=0) {
80004d0a:	58 0c       	cp.w	r12,0
80004d0c:	c2 a0       	breq	80004d60 <process_frame+0xe8>
			if (ui_sequence[u8_sequence_pos].b_modifier) {
80004d0e:	f0 08 00 19 	add	r9,r8,r8<<0x1
80004d12:	f4 09 07 0a 	ld.ub	r10,r10[r9]
80004d16:	30 09       	mov	r9,0
80004d18:	f2 0a 18 00 	cp.b	r10,r9
80004d1c:	c1 10       	breq	80004d3e <process_frame+0xc6>
				if (ui_sequence[u8_sequence_pos].b_down) {
80004d1e:	f0 08 00 18 	add	r8,r8,r8<<0x1
80004d22:	49 f9       	lddpc	r9,80004d9c <process_frame+0x124>
80004d24:	f2 08 00 08 	add	r8,r9,r8
80004d28:	11 99       	ld.ub	r9,r8[0x1]
80004d2a:	30 08       	mov	r8,0
80004d2c:	f0 09 18 00 	cp.b	r9,r8
80004d30:	c0 40       	breq	80004d38 <process_frame+0xc0>
					sucess = udi_hid_kbd_modifier_down(u8_value);
80004d32:	f0 1f 00 1c 	mcall	80004da0 <process_frame+0x128>
80004d36:	c1 38       	rjmp	80004d5c <process_frame+0xe4>
				} else {
					sucess = udi_hid_kbd_modifier_up(u8_value);
80004d38:	f0 1f 00 1b 	mcall	80004da4 <process_frame+0x12c>
80004d3c:	c1 08       	rjmp	80004d5c <process_frame+0xe4>
				}
			} else {
				if (ui_sequence[u8_sequence_pos].b_down) {
80004d3e:	f0 08 00 18 	add	r8,r8,r8<<0x1
80004d42:	49 79       	lddpc	r9,80004d9c <process_frame+0x124>
80004d44:	f2 08 00 08 	add	r8,r9,r8
80004d48:	11 99       	ld.ub	r9,r8[0x1]
80004d4a:	30 08       	mov	r8,0
80004d4c:	f0 09 18 00 	cp.b	r9,r8
80004d50:	c0 40       	breq	80004d58 <process_frame+0xe0>
					sucess = udi_hid_kbd_down(u8_value);
80004d52:	f0 1f 00 16 	mcall	80004da8 <process_frame+0x130>
80004d56:	c0 38       	rjmp	80004d5c <process_frame+0xe4>
				} else {
					sucess = udi_hid_kbd_up(u8_value);
80004d58:	f0 1f 00 15 	mcall	80004dac <process_frame+0x134>
				}
			}
			if (!sucess) {
80004d5c:	58 0c       	cp.w	r12,0
80004d5e:	c0 f0       	breq	80004d7c <process_frame+0x104>
				return; // Retry it on next schedule
			}
		}
		// Valid sequence position
		u8_sequence_pos++;
80004d60:	48 e9       	lddpc	r9,80004d98 <process_frame+0x120>
80004d62:	13 88       	ld.ub	r8,r9[0x0]
80004d64:	2f f8       	sub	r8,-1
80004d66:	b2 88       	st.b	r9[0x0],r8
		if (u8_sequence_pos >=
80004d68:	33 29       	mov	r9,50
80004d6a:	f2 08 18 00 	cp.b	r8,r9
80004d6e:	e0 88 00 07 	brls	80004d7c <process_frame+0x104>
		sizeof(ui_sequence) / sizeof(ui_sequence[0])) {
			u8_sequence_pos = 0;
80004d72:	30 08       	mov	r8,0
80004d74:	48 99       	lddpc	r9,80004d98 <process_frame+0x120>
80004d76:	b2 88       	st.b	r9[0x0],r8
			sequence_running = false;
80004d78:	48 79       	lddpc	r9,80004d94 <process_frame+0x11c>
80004d7a:	b2 88       	st.b	r9[0x0],r8
80004d7c:	d8 02       	popm	pc
80004d7e:	00 00       	add	r0,r0
80004d80:	80 00       	ld.sh	r0,r0[0x0]
80004d82:	20 5c       	sub	r12,5
80004d84:	80 00       	ld.sh	r0,r0[0x0]
80004d86:	20 ac       	sub	r12,10
80004d88:	00 00       	add	r0,r0
80004d8a:	01 ec       	ld.ub	r12,r0[0x6]
80004d8c:	80 00       	ld.sh	r0,r0[0x0]
80004d8e:	2f 40       	sub	r0,-12
80004d90:	00 00       	add	r0,r0
80004d92:	01 e9       	ld.ub	r9,r0[0x6]
80004d94:	00 00       	add	r0,r0
80004d96:	01 ea       	ld.ub	r10,r0[0x6]
80004d98:	00 00       	add	r0,r0
80004d9a:	01 ee       	ld.ub	lr,r0[0x6]
80004d9c:	80 00       	ld.sh	r0,r0[0x0]
80004d9e:	51 1c       	stdsp	sp[0x44],r12
80004da0:	80 00       	ld.sh	r0,r0[0x0]
80004da2:	42 50       	lddsp	r0,sp[0x94]
80004da4:	80 00       	ld.sh	r0,r0[0x0]
80004da6:	42 80       	lddsp	r0,sp[0xa0]
80004da8:	80 00       	ld.sh	r0,r0[0x0]
80004daa:	41 40       	lddsp	r0,sp[0x50]
80004dac:	80 00       	ld.sh	r0,r0[0x0]
80004dae:	41 b8       	lddsp	r8,sp[0x6c]

80004db0 <main_sof_action>:
{
}
 
//-------------------------------------------------------------------
void main_sof_action(void)
{
80004db0:	d4 01       	pushm	lr
		process_frame( udd_get_frame_number() );
80004db2:	f0 1f 00 04 	mcall	80004dc0 <main_sof_action+0x10>
80004db6:	5c 7c       	castu.h	r12
80004db8:	f0 1f 00 03 	mcall	80004dc4 <main_sof_action+0x14>

}
80004dbc:	d8 02       	popm	pc
80004dbe:	00 00       	add	r0,r0
80004dc0:	80 00       	ld.sh	r0,r0[0x0]
80004dc2:	32 30       	mov	r0,35
80004dc4:	80 00       	ld.sh	r0,r0[0x0]
80004dc6:	4c 78       	lddpc	r8,80004ee0 <_handle_DTLB_Miss_Write+0x70>

Disassembly of section .exception:

80004e00 <_evba>:
80004e00:	c0 08       	rjmp	80004e00 <_evba>
	...

80004e04 <_handle_TLB_Multiple_Hit>:
80004e04:	c0 08       	rjmp	80004e04 <_handle_TLB_Multiple_Hit>
	...

80004e08 <_handle_Bus_Error_Data_Fetch>:
80004e08:	c0 08       	rjmp	80004e08 <_handle_Bus_Error_Data_Fetch>
	...

80004e0c <_handle_Bus_Error_Instruction_Fetch>:
80004e0c:	c0 08       	rjmp	80004e0c <_handle_Bus_Error_Instruction_Fetch>
	...

80004e10 <_handle_NMI>:
80004e10:	c0 08       	rjmp	80004e10 <_handle_NMI>
	...

80004e14 <_handle_Instruction_Address>:
80004e14:	c0 08       	rjmp	80004e14 <_handle_Instruction_Address>
	...

80004e18 <_handle_ITLB_Protection>:
80004e18:	c0 08       	rjmp	80004e18 <_handle_ITLB_Protection>
	...

80004e1c <_handle_Breakpoint>:
80004e1c:	c0 08       	rjmp	80004e1c <_handle_Breakpoint>
	...

80004e20 <_handle_Illegal_Opcode>:
80004e20:	c0 08       	rjmp	80004e20 <_handle_Illegal_Opcode>
	...

80004e24 <_handle_Unimplemented_Instruction>:
80004e24:	c0 08       	rjmp	80004e24 <_handle_Unimplemented_Instruction>
	...

80004e28 <_handle_Privilege_Violation>:
80004e28:	c0 08       	rjmp	80004e28 <_handle_Privilege_Violation>
	...

80004e2c <_handle_Floating_Point>:
80004e2c:	c0 08       	rjmp	80004e2c <_handle_Floating_Point>
	...

80004e30 <_handle_Coprocessor_Absent>:
80004e30:	c0 08       	rjmp	80004e30 <_handle_Coprocessor_Absent>
	...

80004e34 <_handle_Data_Address_Read>:
80004e34:	c0 08       	rjmp	80004e34 <_handle_Data_Address_Read>
	...

80004e38 <_handle_Data_Address_Write>:
80004e38:	c0 08       	rjmp	80004e38 <_handle_Data_Address_Write>
	...

80004e3c <_handle_DTLB_Protection_Read>:
80004e3c:	c0 08       	rjmp	80004e3c <_handle_DTLB_Protection_Read>
	...

80004e40 <_handle_DTLB_Protection_Write>:
80004e40:	c0 08       	rjmp	80004e40 <_handle_DTLB_Protection_Write>
	...

80004e44 <_handle_DTLB_Modified>:
80004e44:	c0 08       	rjmp	80004e44 <_handle_DTLB_Modified>
	...

80004e50 <_handle_ITLB_Miss>:
80004e50:	c0 08       	rjmp	80004e50 <_handle_ITLB_Miss>
	...

80004e60 <_handle_DTLB_Miss_Read>:
80004e60:	c0 08       	rjmp	80004e60 <_handle_DTLB_Miss_Read>
	...

80004e70 <_handle_DTLB_Miss_Write>:
80004e70:	c0 08       	rjmp	80004e70 <_handle_DTLB_Miss_Write>
	...

80004f00 <_handle_Supervisor_Call>:
80004f00:	c0 08       	rjmp	80004f00 <_handle_Supervisor_Call>
80004f02:	d7 03       	nop

80004f04 <_int0>:
80004f04:	30 0c       	mov	r12,0
80004f06:	fe b0 f0 6b 	rcall	80002fdc <_get_interrupt_handler>
80004f0a:	58 0c       	cp.w	r12,0
80004f0c:	f8 0f 17 10 	movne	pc,r12
80004f10:	d6 03       	rete

80004f12 <_int1>:
80004f12:	30 1c       	mov	r12,1
80004f14:	fe b0 f0 64 	rcall	80002fdc <_get_interrupt_handler>
80004f18:	58 0c       	cp.w	r12,0
80004f1a:	f8 0f 17 10 	movne	pc,r12
80004f1e:	d6 03       	rete

80004f20 <_int2>:
80004f20:	30 2c       	mov	r12,2
80004f22:	fe b0 f0 5d 	rcall	80002fdc <_get_interrupt_handler>
80004f26:	58 0c       	cp.w	r12,0
80004f28:	f8 0f 17 10 	movne	pc,r12
80004f2c:	d6 03       	rete

80004f2e <_int3>:
80004f2e:	30 3c       	mov	r12,3
80004f30:	fe b0 f0 56 	rcall	80002fdc <_get_interrupt_handler>
80004f34:	58 0c       	cp.w	r12,0
80004f36:	f8 0f 17 10 	movne	pc,r12
80004f3a:	d6 03       	rete

80004f3c <ipr_val>:
80004f3c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
80004f4c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004f5c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004f6c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004f7c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004f8c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004f9c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004fac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004fbc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004fcc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004fdc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004fec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
80004ffc:	d7 03 d7 03                                         ....
