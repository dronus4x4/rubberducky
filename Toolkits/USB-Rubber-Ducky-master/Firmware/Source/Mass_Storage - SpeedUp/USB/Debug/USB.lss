
USB.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000057f4  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80007800  80007800  00007c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000003c0  80007a00  80007a00  00007e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000000f0  00000008  80007dc0  00008408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000008c0  000000f8  000000f8  00000000  2**2
                  ALLOC
  8 .heap         00006648  000009b8  000009b8  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  000084f8  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000da8  00000000  00000000  00008528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00002589  00000000  00000000  000092d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0001b1e5  00000000  00000000  0000b859  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d32  00000000  00000000  00026a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c4f7  00000000  00000000  00029770  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000260c  00000000  00000000  00035c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00008598  00000000  00000000  00038274  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000061e3  00000000  00000000  0004080c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 01181e96  00000000  00000000  000469ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  00007000  00007000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000e38  00000000  00000000  011c8885  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	fe cf b7 70 	sub	pc,pc,-18576

Disassembly of section .text:

80002004 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#	define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80002004:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002006:	30 3b       	mov	r11,3
80002008:	30 7c       	mov	r12,7
8000200a:	f0 1f 00 1c 	mcall	80002078 <board_init+0x74>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200e:	30 3b       	mov	r11,3
80002010:	30 8c       	mov	r12,8
80002012:	f0 1f 00 1a 	mcall	80002078 <board_init+0x74>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002016:	30 3b       	mov	r11,3
80002018:	31 5c       	mov	r12,21
8000201a:	f0 1f 00 18 	mcall	80002078 <board_init+0x74>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201e:	30 3b       	mov	r11,3
80002020:	31 6c       	mov	r12,22
80002022:	f0 1f 00 16 	mcall	80002078 <board_init+0x74>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
80002026:	30 0b       	mov	r11,0
80002028:	32 2c       	mov	r12,34
8000202a:	f0 1f 00 14 	mcall	80002078 <board_init+0x74>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
8000202e:	30 0b       	mov	r11,0
80002030:	32 3c       	mov	r12,35
80002032:	f0 1f 00 12 	mcall	80002078 <board_init+0x74>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
80002036:	30 0b       	mov	r11,0
80002038:	30 dc       	mov	r12,13
8000203a:	f0 1f 00 10 	mcall	80002078 <board_init+0x74>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
8000203e:	30 0b       	mov	r11,0
80002040:	32 6c       	mov	r12,38
80002042:	f0 1f 00 0e 	mcall	80002078 <board_init+0x74>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
80002046:	30 0b       	mov	r11,0
80002048:	32 7c       	mov	r12,39
8000204a:	f0 1f 00 0c 	mcall	80002078 <board_init+0x74>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
8000204e:	30 0b       	mov	r11,0
80002050:	32 8c       	mov	r12,40
80002052:	f0 1f 00 0a 	mcall	80002078 <board_init+0x74>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
80002056:	30 4b       	mov	r11,4
80002058:	48 9c       	lddpc	r12,8000207c <board_init+0x78>
8000205a:	f0 1f 00 0a 	mcall	80002080 <board_init+0x7c>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000205e:	30 4b       	mov	r11,4
80002060:	48 9c       	lddpc	r12,80002084 <board_init+0x80>
80002062:	f0 1f 00 08 	mcall	80002080 <board_init+0x7c>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
80002066:	30 2b       	mov	r11,2
80002068:	48 8c       	lddpc	r12,80002088 <board_init+0x84>
8000206a:	f0 1f 00 06 	mcall	80002080 <board_init+0x7c>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
8000206e:	30 2b       	mov	r11,2
80002070:	48 7c       	lddpc	r12,8000208c <board_init+0x88>
80002072:	f0 1f 00 04 	mcall	80002080 <board_init+0x7c>

	// Assign GPIO pins to USB.
	gpio_enable_module(USB_GPIO_MAP,
			sizeof(USB_GPIO_MAP) / sizeof(USB_GPIO_MAP[0]));
#endif
}
80002076:	d8 02       	popm	pc
80002078:	80 00       	ld.sh	r0,r0[0x0]
8000207a:	55 f0       	stdsp	sp[0x17c],r0
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	7a 0c       	ld.w	r12,sp[0x0]
80002080:	80 00       	ld.sh	r0,r0[0x0]
80002082:	55 c0       	stdsp	sp[0x170],r0
80002084:	80 00       	ld.sh	r0,r0[0x0]
80002086:	7a 04       	ld.w	r4,sp[0x0]
80002088:	80 00       	ld.sh	r0,r0[0x0]
8000208a:	7a 14       	ld.w	r4,sp[0x4]
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	7a 00       	ld.w	r0,sp[0x0]

80002090 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
80002090:	d4 01       	pushm	lr
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
80002092:	4c 18       	lddpc	r8,80002194 <sd_mmc_spi_get_capacity+0x104>
80002094:	11 db       	ld.ub	r11,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
80002096:	4c 18       	lddpc	r8,80002198 <sd_mmc_spi_get_capacity+0x108>
80002098:	11 8a       	ld.ub	r10,r8[0x0]
8000209a:	30 38       	mov	r8,3
8000209c:	f0 0a 18 00 	cp.b	r10,r8
800020a0:	c2 71       	brne	800020ee <sd_mmc_spi_get_capacity+0x5e>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
800020a2:	4b d8       	lddpc	r8,80002194 <sd_mmc_spi_get_capacity+0x104>
800020a4:	f1 3a 00 08 	ld.ub	r10,r8[8]
800020a8:	f1 39 00 09 	ld.ub	r9,r8[9]
800020ac:	f3 ea 10 89 	or	r9,r9,r10<<0x8
800020b0:	11 fa       	ld.ub	r10,r8[0x7]
800020b2:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
800020b6:	f3 ea 11 0a 	or	r10,r9,r10<<0x10
    ++c_size;
800020ba:	2f fa       	sub	r10,-1
    capacity = (uint64_t)c_size << 19;
800020bc:	f4 0b 16 0d 	lsr	r11,r10,0xd
800020c0:	16 99       	mov	r9,r11
800020c2:	f4 08 15 13 	lsl	r8,r10,0x13
800020c6:	4b 6a       	lddpc	r10,8000219c <sd_mmc_spi_get_capacity+0x10c>
800020c8:	f4 e9 00 00 	st.d	r10[0],r8
    capacity_mult = (c_size >> 13) & 0x01FF;
800020cc:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
800020d0:	4b 48       	lddpc	r8,800021a0 <sd_mmc_spi_get_capacity+0x110>
800020d2:	b0 0b       	st.h	r8[0x0],r11
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
800020d4:	f4 ea 00 00 	ld.d	r10,r10[0]
800020d8:	90 09       	ld.sh	r9,r8[0x0]
800020da:	f4 08 16 09 	lsr	r8,r10,0x9
800020de:	f1 eb 11 78 	or	r8,r8,r11<<0x17
800020e2:	20 18       	sub	r8,1
800020e4:	b7 79       	lsl	r9,0x17
800020e6:	12 08       	add	r8,r9
800020e8:	4a f9       	lddpc	r9,800021a4 <sd_mmc_spi_get_capacity+0x114>
800020ea:	93 08       	st.w	r9[0x0],r8
800020ec:	c4 28       	rjmp	80002170 <sd_mmc_spi_get_capacity+0xe0>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
800020ee:	4a a8       	lddpc	r8,80002194 <sd_mmc_spi_get_capacity+0x104>
800020f0:	f1 3c 00 0a 	ld.ub	r12,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
800020f4:	f1 39 00 08 	ld.ub	r9,r8[8]
800020f8:	a7 89       	lsr	r9,0x6
800020fa:	11 fe       	ld.ub	lr,r8[0x7]
800020fc:	f2 0e 00 29 	add	r9,r9,lr<<0x2
80002100:	11 ee       	ld.ub	lr,r8[0x6]
80002102:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
80002106:	ab 6e       	lsl	lr,0xa
80002108:	1c 09       	add	r9,lr
8000210a:	2f f9       	sub	r9,-1
8000210c:	f1 38 00 09 	ld.ub	r8,r8[9]
80002110:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002114:	f8 0e 16 07 	lsr	lr,r12,0x7
80002118:	fc 08 00 18 	add	r8,lr,r8<<0x1
8000211c:	2f e8       	sub	r8,-2
8000211e:	f2 08 09 49 	lsl	r9,r9,r8
80002122:	20 19       	sub	r9,1
80002124:	4a 08       	lddpc	r8,800021a4 <sd_mmc_spi_get_capacity+0x114>
80002126:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
80002128:	70 0e       	ld.w	lr,r8[0x0]
8000212a:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
8000212e:	2f fe       	sub	lr,-1
80002130:	fc 0b 09 48 	lsl	r8,lr,r11
80002134:	30 09       	mov	r9,0
80002136:	49 ae       	lddpc	lr,8000219c <sd_mmc_spi_get_capacity+0x10c>
80002138:	fc e9 00 00 	st.d	lr[0],r8
    capacity_mult = 0;
8000213c:	49 98       	lddpc	r8,800021a0 <sd_mmc_spi_get_capacity+0x110>
8000213e:	b0 09       	st.h	r8[0x0],r9
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
80002140:	30 98       	mov	r8,9
80002142:	f0 0b 18 00 	cp.b	r11,r8
80002146:	e0 88 00 08 	brls	80002156 <sd_mmc_spi_get_capacity+0xc6>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
8000214a:	49 78       	lddpc	r8,800021a4 <sd_mmc_spi_get_capacity+0x114>
8000214c:	70 09       	ld.w	r9,r8[0x0]
8000214e:	20 9b       	sub	r11,9
80002150:	f2 0b 09 4b 	lsl	r11,r9,r11
80002154:	91 0b       	st.w	r8[0x0],r11
    }
  }
  if (card_type == MMC_CARD)
80002156:	58 0a       	cp.w	r10,0
80002158:	c0 c1       	brne	80002170 <sd_mmc_spi_get_capacity+0xe0>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
8000215a:	f1 dc c0 45 	bfextu	r8,r12,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
8000215e:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
80002162:	48 d9       	lddpc	r9,80002194 <sd_mmc_spi_get_capacity+0x104>
80002164:	f3 39 00 0b 	ld.ub	r9,r9[11]
80002168:	a3 7c       	lsl	r12,0x3
8000216a:	f9 e9 12 59 	or	r9,r12,r9>>0x5
8000216e:	c0 c8       	rjmp	80002186 <sd_mmc_spi_get_capacity+0xf6>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
80002170:	48 9a       	lddpc	r10,80002194 <sd_mmc_spi_get_capacity+0x104>
80002172:	f5 39 00 0a 	ld.ub	r9,r10[10]
80002176:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
8000217a:	f5 38 00 0b 	ld.ub	r8,r10[11]
8000217e:	a7 98       	lsr	r8,0x7
80002180:	f0 09 00 18 	add	r8,r8,r9<<0x1
80002184:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
80002186:	2f f9       	sub	r9,-1
80002188:	2f f8       	sub	r8,-1
8000218a:	b1 39       	mul	r9,r8
8000218c:	48 78       	lddpc	r8,800021a8 <sd_mmc_spi_get_capacity+0x118>
8000218e:	b0 09       	st.h	r8[0x0],r9
}
80002190:	d8 02       	popm	pc
80002192:	00 00       	add	r0,r0
80002194:	00 00       	add	r0,r0
80002196:	06 8c       	andn	r12,r3
80002198:	00 00       	add	r0,r0
8000219a:	06 8a       	andn	r10,r3
8000219c:	00 00       	add	r0,r0
8000219e:	06 78       	tst	r8,r3
800021a0:	00 00       	add	r0,r0
800021a2:	06 80       	andn	r0,r3
800021a4:	00 00       	add	r0,r0
800021a6:	06 84       	andn	r4,r3
800021a8:	00 00       	add	r0,r0
800021aa:	06 82       	andn	r2,r3

800021ac <sd_mmc_spi_write_close>:
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{

}
800021ac:	5e fc       	retal	r12
800021ae:	d7 03       	nop

800021b0 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
800021b0:	d4 01       	pushm	lr
800021b2:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800021b4:	18 9b       	mov	r11,r12
800021b6:	fe 7c 24 00 	mov	r12,-56320
800021ba:	f0 1f 00 09 	mcall	800021dc <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800021be:	fa cb ff fe 	sub	r11,sp,-2
800021c2:	fe 7c 24 00 	mov	r12,-56320
800021c6:	f0 1f 00 07 	mcall	800021e0 <sd_mmc_spi_send_and_read+0x30>
800021ca:	58 1c       	cp.w	r12,1
800021cc:	c0 41       	brne	800021d4 <sd_mmc_spi_send_and_read+0x24>
800021ce:	e0 6c 00 ff 	mov	r12,255
800021d2:	c0 28       	rjmp	800021d6 <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
800021d4:	1b bc       	ld.ub	r12,sp[0x3]
}
800021d6:	2f fd       	sub	sp,-4
800021d8:	d8 02       	popm	pc
800021da:	00 00       	add	r0,r0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	59 7e       	cp.w	lr,23
800021e0:	80 00       	ld.sh	r0,r0[0x0]
800021e2:	59 9a       	cp.w	r10,25

800021e4 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
800021e4:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800021e6:	30 1b       	mov	r11,1
800021e8:	fe 7c 24 00 	mov	r12,-56320
800021ec:	f0 1f 00 10 	mcall	8000222c <sd_mmc_spi_wait_not_busy+0x48>
800021f0:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
800021f2:	e0 65 00 ff 	mov	r5,255
800021f6:	48 f4       	lddpc	r4,80002230 <sd_mmc_spi_wait_not_busy+0x4c>
800021f8:	3f f6       	mov	r6,-1
800021fa:	c0 b8       	rjmp	80002210 <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
800021fc:	2f f7       	sub	r7,-1
    if (retry == 200000)
800021fe:	e2 57 0d 40 	cp.w	r7,200000
80002202:	c0 71       	brne	80002210 <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002204:	30 1b       	mov	r11,1
80002206:	fe 7c 24 00 	mov	r12,-56320
8000220a:	f0 1f 00 0b 	mcall	80002234 <sd_mmc_spi_wait_not_busy+0x50>
8000220e:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002210:	0a 9c       	mov	r12,r5
80002212:	f0 1f 00 0a 	mcall	80002238 <sd_mmc_spi_wait_not_busy+0x54>
80002216:	a8 8c       	st.b	r4[0x0],r12
80002218:	ec 0c 18 00 	cp.b	r12,r6
8000221c:	cf 01       	brne	800021fc <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000221e:	30 1b       	mov	r11,1
80002220:	fe 7c 24 00 	mov	r12,-56320
80002224:	f0 1f 00 04 	mcall	80002234 <sd_mmc_spi_wait_not_busy+0x50>
80002228:	da 2a       	popm	r4-r7,pc,r12=1
8000222a:	00 00       	add	r0,r0
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	58 44       	cp.w	r4,4
80002230:	00 00       	add	r0,r0
80002232:	06 9c       	mov	r12,r3
80002234:	80 00       	ld.sh	r0,r0[0x0]
80002236:	58 90       	cp.w	r0,9
80002238:	80 00       	ld.sh	r0,r0[0x0]
8000223a:	21 b0       	sub	r0,27

8000223c <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
8000223c:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
8000223e:	a9 7c       	lsl	r12,0x9
80002240:	48 38       	lddpc	r8,8000224c <sd_mmc_spi_write_open+0x10>
80002242:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80002244:	f0 1f 00 03 	mcall	80002250 <sd_mmc_spi_write_open+0x14>
}
80002248:	d8 02       	popm	pc
8000224a:	00 00       	add	r0,r0
8000224c:	00 00       	add	r0,r0
8000224e:	00 f8       	st.b	--r0,r8
80002250:	80 00       	ld.sh	r0,r0[0x0]
80002252:	21 e4       	sub	r4,30

80002254 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
80002254:	d4 01       	pushm	lr
  if (false == sd_mmc_spi_wait_not_busy())
80002256:	f0 1f 00 02 	mcall	8000225c <sd_mmc_spi_read_close+0x8>
    return false;
  return true;
}
8000225a:	d8 02       	popm	pc
8000225c:	80 00       	ld.sh	r0,r0[0x0]
8000225e:	21 e4       	sub	r4,30

80002260 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
80002260:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
80002262:	a9 7c       	lsl	r12,0x9
80002264:	48 38       	lddpc	r8,80002270 <sd_mmc_spi_read_open+0x10>
80002266:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80002268:	f0 1f 00 03 	mcall	80002274 <sd_mmc_spi_read_open+0x14>
}
8000226c:	d8 02       	popm	pc
8000226e:	00 00       	add	r0,r0
80002270:	00 00       	add	r0,r0
80002272:	00 f8       	st.b	--r0,r8
80002274:	80 00       	ld.sh	r0,r0[0x0]
80002276:	21 e4       	sub	r4,30

80002278 <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
80002278:	eb cd 40 f8 	pushm	r3-r7,lr
8000227c:	18 96       	mov	r6,r12
8000227e:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
80002280:	e0 6b 00 ff 	mov	r11,255
80002284:	fe 7c 24 00 	mov	r12,-56320
80002288:	f0 1f 00 2b 	mcall	80002334 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
8000228c:	0c 9b       	mov	r11,r6
8000228e:	a7 ab       	sbr	r11,0x6
80002290:	5c 5b       	castu.b	r11
80002292:	fe 7c 24 00 	mov	r12,-56320
80002296:	f0 1f 00 28 	mcall	80002334 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
8000229a:	ee 0b 16 18 	lsr	r11,r7,0x18
8000229e:	fe 7c 24 00 	mov	r12,-56320
800022a2:	f0 1f 00 25 	mcall	80002334 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
800022a6:	ee 0b 16 10 	lsr	r11,r7,0x10
800022aa:	fe 7c 24 00 	mov	r12,-56320
800022ae:	f0 1f 00 22 	mcall	80002334 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
800022b2:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
800022b6:	fe 7c 24 00 	mov	r12,-56320
800022ba:	f0 1f 00 1f 	mcall	80002334 <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
800022be:	0e 9b       	mov	r11,r7
800022c0:	5c 7b       	castu.h	r11
800022c2:	fe 7c 24 00 	mov	r12,-56320
800022c6:	f0 1f 00 1c 	mcall	80002334 <sd_mmc_spi_command+0xbc>
  switch(command)
800022ca:	30 08       	mov	r8,0
800022cc:	f0 06 18 00 	cp.b	r6,r8
800022d0:	c0 60       	breq	800022dc <sd_mmc_spi_command+0x64>
800022d2:	30 88       	mov	r8,8
800022d4:	f0 06 18 00 	cp.b	r6,r8
800022d8:	c1 01       	brne	800022f8 <sd_mmc_spi_command+0x80>
800022da:	c0 88       	rjmp	800022ea <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
800022dc:	e0 6b 00 95 	mov	r11,149
800022e0:	fe 7c 24 00 	mov	r12,-56320
800022e4:	f0 1f 00 14 	mcall	80002334 <sd_mmc_spi_command+0xbc>
         break;
800022e8:	c0 e8       	rjmp	80002304 <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
800022ea:	e0 6b 00 87 	mov	r11,135
800022ee:	fe 7c 24 00 	mov	r12,-56320
800022f2:	f0 1f 00 11 	mcall	80002334 <sd_mmc_spi_command+0xbc>
         break;
800022f6:	c0 78       	rjmp	80002304 <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
800022f8:	e0 6b 00 ff 	mov	r11,255
800022fc:	fe 7c 24 00 	mov	r12,-56320
80002300:	f0 1f 00 0d 	mcall	80002334 <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
80002304:	3f f9       	mov	r9,-1
80002306:	48 d8       	lddpc	r8,80002338 <sd_mmc_spi_command+0xc0>
80002308:	b0 89       	st.b	r8[0x0],r9
8000230a:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000230c:	e0 64 00 ff 	mov	r4,255
80002310:	10 93       	mov	r3,r8
80002312:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
80002314:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002316:	c0 68       	rjmp	80002322 <sd_mmc_spi_command+0xaa>
  {
    retry++;
80002318:	2f f7       	sub	r7,-1
8000231a:	5c 57       	castu.b	r7
    if(retry > 10) break;
8000231c:	ea 07 18 00 	cp.b	r7,r5
80002320:	c0 80       	breq	80002330 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002322:	08 9c       	mov	r12,r4
80002324:	f0 1f 00 06 	mcall	8000233c <sd_mmc_spi_command+0xc4>
80002328:	a6 8c       	st.b	r3[0x0],r12
8000232a:	ec 0c 18 00 	cp.b	r12,r6
8000232e:	cf 50       	breq	80002318 <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
80002330:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002334:	80 00       	ld.sh	r0,r0[0x0]
80002336:	59 7e       	cp.w	lr,23
80002338:	00 00       	add	r0,r0
8000233a:	06 9c       	mov	r12,r3
8000233c:	80 00       	ld.sh	r0,r0[0x0]
8000233e:	21 b0       	sub	r0,27

80002340 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
80002340:	eb cd 40 c0 	pushm	r6-r7,lr
80002344:	18 97       	mov	r7,r12
80002346:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002348:	30 1b       	mov	r11,1
8000234a:	fe 7c 24 00 	mov	r12,-56320
8000234e:	f0 1f 00 09 	mcall	80002370 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
80002352:	0c 9b       	mov	r11,r6
80002354:	0e 9c       	mov	r12,r7
80002356:	f0 1f 00 08 	mcall	80002374 <sd_mmc_spi_send_command+0x34>
8000235a:	48 87       	lddpc	r7,80002378 <sd_mmc_spi_send_command+0x38>
8000235c:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000235e:	30 1b       	mov	r11,1
80002360:	fe 7c 24 00 	mov	r12,-56320
80002364:	f0 1f 00 06 	mcall	8000237c <sd_mmc_spi_send_command+0x3c>
  return r1;
}
80002368:	0f 8c       	ld.ub	r12,r7[0x0]
8000236a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000236e:	00 00       	add	r0,r0
80002370:	80 00       	ld.sh	r0,r0[0x0]
80002372:	58 44       	cp.w	r4,4
80002374:	80 00       	ld.sh	r0,r0[0x0]
80002376:	22 78       	sub	r8,39
80002378:	00 00       	add	r0,r0
8000237a:	06 9c       	mov	r12,r3
8000237c:	80 00       	ld.sh	r0,r0[0x0]
8000237e:	58 90       	cp.w	r0,9

80002380 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
80002380:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
80002384:	49 a8       	lddpc	r8,800023ec <sd_mmc_spi_check_presence+0x6c>
80002386:	11 89       	ld.ub	r9,r8[0x0]
80002388:	30 08       	mov	r8,0
8000238a:	f0 09 18 00 	cp.b	r9,r8
8000238e:	c1 f1       	brne	800023cc <sd_mmc_spi_check_presence+0x4c>
80002390:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002392:	0e 94       	mov	r4,r7
80002394:	49 73       	lddpc	r3,800023f0 <sd_mmc_spi_check_presence+0x70>
80002396:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002398:	e0 62 00 ff 	mov	r2,255
8000239c:	fe 71 24 00 	mov	r1,-56320
      retry++;
      if (retry > 10)
800023a0:	30 b5       	mov	r5,11
800023a2:	c0 c8       	rjmp	800023ba <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800023a4:	04 9b       	mov	r11,r2
800023a6:	02 9c       	mov	r12,r1
800023a8:	f0 1f 00 13 	mcall	800023f4 <sd_mmc_spi_check_presence+0x74>
      retry++;
800023ac:	2f f7       	sub	r7,-1
800023ae:	5c 87       	casts.h	r7
      if (retry > 10)
800023b0:	ea 07 19 00 	cp.h	r7,r5
800023b4:	c0 31       	brne	800023ba <sd_mmc_spi_check_presence+0x3a>
800023b6:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
800023ba:	08 9b       	mov	r11,r4
800023bc:	08 9c       	mov	r12,r4
800023be:	f0 1f 00 0f 	mcall	800023f8 <sd_mmc_spi_check_presence+0x78>
800023c2:	a6 8c       	st.b	r3[0x0],r12
800023c4:	ec 0c 18 00 	cp.b	r12,r6
800023c8:	ce e1       	brne	800023a4 <sd_mmc_spi_check_presence+0x24>
800023ca:	c0 e8       	rjmp	800023e6 <sd_mmc_spi_check_presence+0x66>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
800023cc:	30 0b       	mov	r11,0
800023ce:	33 bc       	mov	r12,59
800023d0:	f0 1f 00 0a 	mcall	800023f8 <sd_mmc_spi_check_presence+0x78>
800023d4:	48 78       	lddpc	r8,800023f0 <sd_mmc_spi_check_presence+0x70>
800023d6:	b0 8c       	st.b	r8[0x0],r12
800023d8:	58 0c       	cp.w	r12,0
800023da:	c0 60       	breq	800023e6 <sd_mmc_spi_check_presence+0x66>
      return true;
    sd_mmc_spi_init_done = false;
800023dc:	30 09       	mov	r9,0
800023de:	48 48       	lddpc	r8,800023ec <sd_mmc_spi_check_presence+0x6c>
800023e0:	b0 89       	st.b	r8[0x0],r9
800023e2:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return false;
800023e6:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
800023ea:	00 00       	add	r0,r0
800023ec:	00 00       	add	r0,r0
800023ee:	03 10       	ld.sh	r0,r1++
800023f0:	00 00       	add	r0,r0
800023f2:	06 9c       	mov	r12,r3
800023f4:	80 00       	ld.sh	r0,r0[0x0]
800023f6:	59 7e       	cp.w	lr,23
800023f8:	80 00       	ld.sh	r0,r0[0x0]
800023fa:	23 40       	sub	r0,52

800023fc <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
800023fc:	eb cd 40 e0 	pushm	r5-r7,lr
80002400:	18 97       	mov	r7,r12
  const uint8_t *_ram = ram;
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002402:	f0 1f 00 49 	mcall	80002524 <sd_mmc_spi_write_sector_from_ram+0x128>
80002406:	e0 80 00 8c 	breq	8000251e <sd_mmc_spi_write_sector_from_ram+0x122>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000240a:	30 1b       	mov	r11,1
8000240c:	fe 7c 24 00 	mov	r12,-56320
80002410:	f0 1f 00 46 	mcall	80002528 <sd_mmc_spi_write_sector_from_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002414:	4c 68       	lddpc	r8,8000252c <sd_mmc_spi_write_sector_from_ram+0x130>
80002416:	11 89       	ld.ub	r9,r8[0x0]
80002418:	30 38       	mov	r8,3
8000241a:	f0 09 18 00 	cp.b	r9,r8
8000241e:	c0 a1       	brne	80002432 <sd_mmc_spi_write_sector_from_ram+0x36>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002420:	4c 48       	lddpc	r8,80002530 <sd_mmc_spi_write_sector_from_ram+0x134>
80002422:	70 0b       	ld.w	r11,r8[0x0]
80002424:	a9 9b       	lsr	r11,0x9
80002426:	31 8c       	mov	r12,24
80002428:	f0 1f 00 43 	mcall	80002534 <sd_mmc_spi_write_sector_from_ram+0x138>
8000242c:	4c 38       	lddpc	r8,80002538 <sd_mmc_spi_write_sector_from_ram+0x13c>
8000242e:	b0 8c       	st.b	r8[0x0],r12
80002430:	c0 88       	rjmp	80002440 <sd_mmc_spi_write_sector_from_ram+0x44>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
80002432:	4c 08       	lddpc	r8,80002530 <sd_mmc_spi_write_sector_from_ram+0x134>
80002434:	70 0b       	ld.w	r11,r8[0x0]
80002436:	31 8c       	mov	r12,24
80002438:	f0 1f 00 3f 	mcall	80002534 <sd_mmc_spi_write_sector_from_ram+0x138>
8000243c:	4b f8       	lddpc	r8,80002538 <sd_mmc_spi_write_sector_from_ram+0x13c>
8000243e:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if(r1 != 0x00)
80002440:	4b e8       	lddpc	r8,80002538 <sd_mmc_spi_write_sector_from_ram+0x13c>
80002442:	11 89       	ld.ub	r9,r8[0x0]
80002444:	30 08       	mov	r8,0
80002446:	f0 09 18 00 	cp.b	r9,r8
8000244a:	c0 80       	breq	8000245a <sd_mmc_spi_write_sector_from_ram+0x5e>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000244c:	30 1b       	mov	r11,1
8000244e:	fe 7c 24 00 	mov	r12,-56320
80002452:	f0 1f 00 3b 	mcall	8000253c <sd_mmc_spi_write_sector_from_ram+0x140>
80002456:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
8000245a:	e0 6b 00 ff 	mov	r11,255
8000245e:	fe 7c 24 00 	mov	r12,-56320
80002462:	f0 1f 00 38 	mcall	80002540 <sd_mmc_spi_write_sector_from_ram+0x144>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
80002466:	e0 6b 00 fe 	mov	r11,254
8000246a:	fe 7c 24 00 	mov	r12,-56320
8000246e:	f0 1f 00 35 	mcall	80002540 <sd_mmc_spi_write_sector_from_ram+0x144>
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
80002472:	ee c6 fe 00 	sub	r6,r7,-512
  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
80002476:	fe 75 24 00 	mov	r5,-56320
8000247a:	0f 3b       	ld.ub	r11,r7++
8000247c:	0a 9c       	mov	r12,r5
8000247e:	f0 1f 00 31 	mcall	80002540 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80002482:	0c 37       	cp.w	r7,r6
80002484:	cf b1       	brne	8000247a <sd_mmc_spi_write_sector_from_ram+0x7e>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
80002486:	e0 6b 00 ff 	mov	r11,255
8000248a:	fe 7c 24 00 	mov	r12,-56320
8000248e:	f0 1f 00 2d 	mcall	80002540 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
80002492:	e0 6b 00 ff 	mov	r11,255
80002496:	fe 7c 24 00 	mov	r12,-56320
8000249a:	f0 1f 00 2a 	mcall	80002540 <sd_mmc_spi_write_sector_from_ram+0x144>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000249e:	e0 6c 00 ff 	mov	r12,255
800024a2:	f0 1f 00 29 	mcall	80002544 <sd_mmc_spi_write_sector_from_ram+0x148>
800024a6:	4a 58       	lddpc	r8,80002538 <sd_mmc_spi_write_sector_from_ram+0x13c>
800024a8:	b0 8c       	st.b	r8[0x0],r12
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
800024aa:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
800024ae:	58 5c       	cp.w	r12,5
800024b0:	c1 40       	breq	800024d8 <sd_mmc_spi_write_sector_from_ram+0xdc>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
800024b2:	e0 6b 00 ff 	mov	r11,255
800024b6:	fe 7c 24 00 	mov	r12,-56320
800024ba:	f0 1f 00 22 	mcall	80002540 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_write(SD_MMC_SPI,0xFF);
800024be:	e0 6b 00 ff 	mov	r11,255
800024c2:	fe 7c 24 00 	mov	r12,-56320
800024c6:	f0 1f 00 1f 	mcall	80002540 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800024ca:	30 1b       	mov	r11,1
800024cc:	fe 7c 24 00 	mov	r12,-56320
800024d0:	f0 1f 00 1b 	mcall	8000253c <sd_mmc_spi_write_sector_from_ram+0x140>
800024d4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
800024d8:	e0 6b 00 ff 	mov	r11,255
800024dc:	fe 7c 24 00 	mov	r12,-56320
800024e0:	f0 1f 00 18 	mcall	80002540 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
800024e4:	e0 6b 00 ff 	mov	r11,255
800024e8:	fe 7c 24 00 	mov	r12,-56320
800024ec:	f0 1f 00 15 	mcall	80002540 <sd_mmc_spi_write_sector_from_ram+0x144>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800024f0:	30 1b       	mov	r11,1
800024f2:	fe 7c 24 00 	mov	r12,-56320
800024f6:	f0 1f 00 12 	mcall	8000253c <sd_mmc_spi_write_sector_from_ram+0x140>
  gl_ptr_mem += 512;        // Update the memory pointer.
800024fa:	48 e8       	lddpc	r8,80002530 <sd_mmc_spi_write_sector_from_ram+0x134>
800024fc:	70 09       	ld.w	r9,r8[0x0]
800024fe:	f2 c9 fe 00 	sub	r9,r9,-512
80002502:	91 09       	st.w	r8[0x0],r9
80002504:	30 07       	mov	r7,0
  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
  {
    i++;
    if (i == 10)
80002506:	30 a6       	mov	r6,10
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80002508:	c0 68       	rjmp	80002514 <sd_mmc_spi_write_sector_from_ram+0x118>
  {
    i++;
8000250a:	2f f7       	sub	r7,-1
8000250c:	5c 87       	casts.h	r7
    if (i == 10)
8000250e:	ec 07 19 00 	cp.h	r7,r6
80002512:	c0 60       	breq	8000251e <sd_mmc_spi_write_sector_from_ram+0x122>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80002514:	f0 1f 00 04 	mcall	80002524 <sd_mmc_spi_write_sector_from_ram+0x128>
80002518:	cf 90       	breq	8000250a <sd_mmc_spi_write_sector_from_ram+0x10e>
8000251a:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
8000251e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80002522:	00 00       	add	r0,r0
80002524:	80 00       	ld.sh	r0,r0[0x0]
80002526:	21 e4       	sub	r4,30
80002528:	80 00       	ld.sh	r0,r0[0x0]
8000252a:	58 44       	cp.w	r4,4
8000252c:	00 00       	add	r0,r0
8000252e:	06 8a       	andn	r10,r3
80002530:	00 00       	add	r0,r0
80002532:	00 f8       	st.b	--r0,r8
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	22 78       	sub	r8,39
80002538:	00 00       	add	r0,r0
8000253a:	06 9c       	mov	r12,r3
8000253c:	80 00       	ld.sh	r0,r0[0x0]
8000253e:	58 90       	cp.w	r0,9
80002540:	80 00       	ld.sh	r0,r0[0x0]
80002542:	59 7e       	cp.w	lr,23
80002544:	80 00       	ld.sh	r0,r0[0x0]
80002546:	21 b0       	sub	r0,27

80002548 <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
80002548:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000254c:	f0 1f 00 1c 	mcall	800025bc <sd_mmc_spi_check_hc+0x74>
80002550:	c0 31       	brne	80002556 <sd_mmc_spi_check_hc+0xe>
80002552:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002556:	30 1b       	mov	r11,1
80002558:	fe 7c 24 00 	mov	r12,-56320
8000255c:	f0 1f 00 19 	mcall	800025c0 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
80002560:	30 0b       	mov	r11,0
80002562:	33 ac       	mov	r12,58
80002564:	f0 1f 00 18 	mcall	800025c4 <sd_mmc_spi_check_hc+0x7c>
80002568:	49 88       	lddpc	r8,800025c8 <sd_mmc_spi_check_hc+0x80>
8000256a:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
8000256c:	58 0c       	cp.w	r12,0
8000256e:	c0 80       	breq	8000257e <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002570:	30 1b       	mov	r11,1
80002572:	fe 7c 24 00 	mov	r12,-56320
80002576:	f0 1f 00 16 	mcall	800025cc <sd_mmc_spi_check_hc+0x84>
8000257a:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
8000257e:	e0 6c 00 ff 	mov	r12,255
80002582:	f0 1f 00 14 	mcall	800025d0 <sd_mmc_spi_check_hc+0x88>
80002586:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002588:	e0 6c 00 ff 	mov	r12,255
8000258c:	f0 1f 00 11 	mcall	800025d0 <sd_mmc_spi_check_hc+0x88>
80002590:	48 e7       	lddpc	r7,800025c8 <sd_mmc_spi_check_hc+0x80>
80002592:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002594:	e0 6c 00 ff 	mov	r12,255
80002598:	f0 1f 00 0e 	mcall	800025d0 <sd_mmc_spi_check_hc+0x88>
8000259c:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000259e:	e0 6c 00 ff 	mov	r12,255
800025a2:	f0 1f 00 0c 	mcall	800025d0 <sd_mmc_spi_check_hc+0x88>
800025a6:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025a8:	30 1b       	mov	r11,1
800025aa:	fe 7c 24 00 	mov	r12,-56320
800025ae:	f0 1f 00 08 	mcall	800025cc <sd_mmc_spi_check_hc+0x84>
800025b2:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
800025b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800025ba:	00 00       	add	r0,r0
800025bc:	80 00       	ld.sh	r0,r0[0x0]
800025be:	21 e4       	sub	r4,30
800025c0:	80 00       	ld.sh	r0,r0[0x0]
800025c2:	58 44       	cp.w	r4,4
800025c4:	80 00       	ld.sh	r0,r0[0x0]
800025c6:	22 78       	sub	r8,39
800025c8:	00 00       	add	r0,r0
800025ca:	06 9c       	mov	r12,r3
800025cc:	80 00       	ld.sh	r0,r0[0x0]
800025ce:	58 90       	cp.w	r0,9
800025d0:	80 00       	ld.sh	r0,r0[0x0]
800025d2:	21 b0       	sub	r0,27

800025d4 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
800025d4:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800025d8:	f0 1f 00 27 	mcall	80002674 <sd_mmc_spi_get_if+0xa0>
800025dc:	c0 31       	brne	800025e2 <sd_mmc_spi_get_if+0xe>
800025de:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800025e2:	30 1b       	mov	r11,1
800025e4:	fe 7c 24 00 	mov	r12,-56320
800025e8:	f0 1f 00 24 	mcall	80002678 <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
800025ec:	e0 6b 01 aa 	mov	r11,426
800025f0:	30 8c       	mov	r12,8
800025f2:	f0 1f 00 23 	mcall	8000267c <sd_mmc_spi_get_if+0xa8>
800025f6:	4a 38       	lddpc	r8,80002680 <sd_mmc_spi_get_if+0xac>
800025f8:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
800025fa:	e2 1c 00 04 	andl	r12,0x4,COH
800025fe:	c0 80       	breq	8000260e <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002600:	30 1b       	mov	r11,1
80002602:	fe 7c 24 00 	mov	r12,-56320
80002606:	f0 1f 00 20 	mcall	80002684 <sd_mmc_spi_get_if+0xb0>
8000260a:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000260e:	e0 6c 00 ff 	mov	r12,255
80002612:	f0 1f 00 1e 	mcall	80002688 <sd_mmc_spi_get_if+0xb4>
80002616:	49 b7       	lddpc	r7,80002680 <sd_mmc_spi_get_if+0xac>
80002618:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000261a:	e0 6c 00 ff 	mov	r12,255
8000261e:	f0 1f 00 1b 	mcall	80002688 <sd_mmc_spi_get_if+0xb4>
80002622:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002624:	e0 6c 00 ff 	mov	r12,255
80002628:	f0 1f 00 18 	mcall	80002688 <sd_mmc_spi_get_if+0xb4>
8000262c:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
8000262e:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80002632:	c0 81       	brne	80002642 <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002634:	30 1b       	mov	r11,1
80002636:	fe 7c 24 00 	mov	r12,-56320
8000263a:	f0 1f 00 13 	mcall	80002684 <sd_mmc_spi_get_if+0xb0>
8000263e:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002642:	e0 6c 00 ff 	mov	r12,255
80002646:	f0 1f 00 11 	mcall	80002688 <sd_mmc_spi_get_if+0xb4>
8000264a:	48 e8       	lddpc	r8,80002680 <sd_mmc_spi_get_if+0xac>
8000264c:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
8000264e:	3a a8       	mov	r8,-86
80002650:	f0 0c 18 00 	cp.b	r12,r8
80002654:	c0 80       	breq	80002664 <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002656:	30 1b       	mov	r11,1
80002658:	fe 7c 24 00 	mov	r12,-56320
8000265c:	f0 1f 00 0a 	mcall	80002684 <sd_mmc_spi_get_if+0xb0>
80002660:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002664:	30 1b       	mov	r11,1
80002666:	fe 7c 24 00 	mov	r12,-56320
8000266a:	f0 1f 00 07 	mcall	80002684 <sd_mmc_spi_get_if+0xb0>
8000266e:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80002672:	00 00       	add	r0,r0
80002674:	80 00       	ld.sh	r0,r0[0x0]
80002676:	21 e4       	sub	r4,30
80002678:	80 00       	ld.sh	r0,r0[0x0]
8000267a:	58 44       	cp.w	r4,4
8000267c:	80 00       	ld.sh	r0,r0[0x0]
8000267e:	22 78       	sub	r8,39
80002680:	00 00       	add	r0,r0
80002682:	06 9c       	mov	r12,r3
80002684:	80 00       	ld.sh	r0,r0[0x0]
80002686:	58 90       	cp.w	r0,9
80002688:	80 00       	ld.sh	r0,r0[0x0]
8000268a:	21 b0       	sub	r0,27

8000268c <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
8000268c:	eb cd 40 f8 	pushm	r3-r7,lr
80002690:	20 1d       	sub	sp,4
80002692:	18 93       	mov	r3,r12
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002694:	f0 1f 00 48 	mcall	800027b4 <sd_mmc_spi_read_sector_to_ram+0x128>
80002698:	e0 80 00 8a 	breq	800027ac <sd_mmc_spi_read_sector_to_ram+0x120>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000269c:	30 1b       	mov	r11,1
8000269e:	fe 7c 24 00 	mov	r12,-56320
800026a2:	f0 1f 00 46 	mcall	800027b8 <sd_mmc_spi_read_sector_to_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
800026a6:	4c 68       	lddpc	r8,800027bc <sd_mmc_spi_read_sector_to_ram+0x130>
800026a8:	11 89       	ld.ub	r9,r8[0x0]
800026aa:	30 38       	mov	r8,3
800026ac:	f0 09 18 00 	cp.b	r9,r8
800026b0:	c0 a1       	brne	800026c4 <sd_mmc_spi_read_sector_to_ram+0x38>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
800026b2:	4c 48       	lddpc	r8,800027c0 <sd_mmc_spi_read_sector_to_ram+0x134>
800026b4:	70 0b       	ld.w	r11,r8[0x0]
800026b6:	a9 9b       	lsr	r11,0x9
800026b8:	31 1c       	mov	r12,17
800026ba:	f0 1f 00 43 	mcall	800027c4 <sd_mmc_spi_read_sector_to_ram+0x138>
800026be:	4c 38       	lddpc	r8,800027c8 <sd_mmc_spi_read_sector_to_ram+0x13c>
800026c0:	b0 8c       	st.b	r8[0x0],r12
800026c2:	c0 88       	rjmp	800026d2 <sd_mmc_spi_read_sector_to_ram+0x46>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
800026c4:	4b f8       	lddpc	r8,800027c0 <sd_mmc_spi_read_sector_to_ram+0x134>
800026c6:	70 0b       	ld.w	r11,r8[0x0]
800026c8:	31 1c       	mov	r12,17
800026ca:	f0 1f 00 3f 	mcall	800027c4 <sd_mmc_spi_read_sector_to_ram+0x138>
800026ce:	4b f8       	lddpc	r8,800027c8 <sd_mmc_spi_read_sector_to_ram+0x13c>
800026d0:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
800026d2:	4b e8       	lddpc	r8,800027c8 <sd_mmc_spi_read_sector_to_ram+0x13c>
800026d4:	11 89       	ld.ub	r9,r8[0x0]
800026d6:	30 08       	mov	r8,0
800026d8:	f0 09 18 00 	cp.b	r9,r8
800026dc:	c1 20       	breq	80002700 <sd_mmc_spi_read_sector_to_ram+0x74>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026de:	30 1b       	mov	r11,1
800026e0:	fe 7c 24 00 	mov	r12,-56320
800026e4:	f0 1f 00 3a 	mcall	800027cc <sd_mmc_spi_read_sector_to_ram+0x140>
800026e8:	30 0c       	mov	r12,0
    return false;
800026ea:	c6 18       	rjmp	800027ac <sd_mmc_spi_read_sector_to_ram+0x120>

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
800026ec:	20 17       	sub	r7,1
800026ee:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
800026f0:	c0 e1       	brne	8000270c <sd_mmc_spi_read_sector_to_ram+0x80>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
800026f2:	30 1b       	mov	r11,1
800026f4:	fe 7c 24 00 	mov	r12,-56320
800026f8:	f0 1f 00 35 	mcall	800027cc <sd_mmc_spi_read_sector_to_ram+0x140>
800026fc:	30 0c       	mov	r12,0
       return false;
800026fe:	c5 78       	rjmp	800027ac <sd_mmc_spi_read_sector_to_ram+0x120>
80002700:	e0 67 75 30 	mov	r7,30000
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002704:	e0 65 00 ff 	mov	r5,255
80002708:	4b 04       	lddpc	r4,800027c8 <sd_mmc_spi_read_sector_to_ram+0x13c>
8000270a:	3f f6       	mov	r6,-1
8000270c:	0a 9c       	mov	r12,r5
8000270e:	f0 1f 00 31 	mcall	800027d0 <sd_mmc_spi_read_sector_to_ram+0x144>
80002712:	a8 8c       	st.b	r4[0x0],r12
80002714:	ec 0c 18 00 	cp.b	r12,r6
80002718:	ce a0       	breq	800026ec <sd_mmc_spi_read_sector_to_ram+0x60>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
8000271a:	3f e8       	mov	r8,-2
8000271c:	f0 0c 18 00 	cp.b	r12,r8
80002720:	c0 e0       	breq	8000273c <sd_mmc_spi_read_sector_to_ram+0xb0>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002722:	e0 6b 00 ff 	mov	r11,255
80002726:	fe 7c 24 00 	mov	r12,-56320
8000272a:	f0 1f 00 2b 	mcall	800027d4 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000272e:	30 1b       	mov	r11,1
80002730:	fe 7c 24 00 	mov	r12,-56320
80002734:	f0 1f 00 26 	mcall	800027cc <sd_mmc_spi_read_sector_to_ram+0x140>
80002738:	30 0c       	mov	r12,0
    return false;
8000273a:	c3 98       	rjmp	800027ac <sd_mmc_spi_read_sector_to_ram+0x120>
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
  uint8_t *_ram = ram;
8000273c:	06 97       	mov	r7,r3
//!
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
8000273e:	e6 c5 fe 00 	sub	r5,r3,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
80002742:	e0 64 00 ff 	mov	r4,255
80002746:	fe 76 24 00 	mov	r6,-56320
    spi_read(SD_MMC_SPI,&data_read);
8000274a:	fa c3 ff fe 	sub	r3,sp,-2
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
8000274e:	08 9b       	mov	r11,r4
80002750:	0c 9c       	mov	r12,r6
80002752:	f0 1f 00 21 	mcall	800027d4 <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_read(SD_MMC_SPI,&data_read);
80002756:	06 9b       	mov	r11,r3
80002758:	0c 9c       	mov	r12,r6
8000275a:	f0 1f 00 20 	mcall	800027d8 <sd_mmc_spi_read_sector_to_ram+0x14c>
    *_ram++=data_read;
8000275e:	9a 18       	ld.sh	r8,sp[0x2]
80002760:	0e c8       	st.b	r7++,r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80002762:	0a 37       	cp.w	r7,r5
80002764:	cf 51       	brne	8000274e <sd_mmc_spi_read_sector_to_ram+0xc2>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
80002766:	49 78       	lddpc	r8,800027c0 <sd_mmc_spi_read_sector_to_ram+0x134>
80002768:	70 09       	ld.w	r9,r8[0x0]
8000276a:	f2 c9 fe 00 	sub	r9,r9,-512
8000276e:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80002770:	e0 6b 00 ff 	mov	r11,255
80002774:	fe 7c 24 00 	mov	r12,-56320
80002778:	f0 1f 00 17 	mcall	800027d4 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
8000277c:	e0 6b 00 ff 	mov	r11,255
80002780:	fe 7c 24 00 	mov	r12,-56320
80002784:	f0 1f 00 14 	mcall	800027d4 <sd_mmc_spi_read_sector_to_ram+0x148>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80002788:	e0 6b 00 ff 	mov	r11,255
8000278c:	fe 7c 24 00 	mov	r12,-56320
80002790:	f0 1f 00 11 	mcall	800027d4 <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
80002794:	e0 6b 00 ff 	mov	r11,255
80002798:	fe 7c 24 00 	mov	r12,-56320
8000279c:	f0 1f 00 0e 	mcall	800027d4 <sd_mmc_spi_read_sector_to_ram+0x148>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027a0:	30 1b       	mov	r11,1
800027a2:	fe 7c 24 00 	mov	r12,-56320
800027a6:	f0 1f 00 0a 	mcall	800027cc <sd_mmc_spi_read_sector_to_ram+0x140>
800027aa:	30 1c       	mov	r12,1

  return true;   // Read done.
}
800027ac:	2f fd       	sub	sp,-4
800027ae:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800027b2:	00 00       	add	r0,r0
800027b4:	80 00       	ld.sh	r0,r0[0x0]
800027b6:	21 e4       	sub	r4,30
800027b8:	80 00       	ld.sh	r0,r0[0x0]
800027ba:	58 44       	cp.w	r4,4
800027bc:	00 00       	add	r0,r0
800027be:	06 8a       	andn	r10,r3
800027c0:	00 00       	add	r0,r0
800027c2:	00 f8       	st.b	--r0,r8
800027c4:	80 00       	ld.sh	r0,r0[0x0]
800027c6:	22 78       	sub	r8,39
800027c8:	00 00       	add	r0,r0
800027ca:	06 9c       	mov	r12,r3
800027cc:	80 00       	ld.sh	r0,r0[0x0]
800027ce:	58 90       	cp.w	r0,9
800027d0:	80 00       	ld.sh	r0,r0[0x0]
800027d2:	21 b0       	sub	r0,27
800027d4:	80 00       	ld.sh	r0,r0[0x0]
800027d6:	59 7e       	cp.w	lr,23
800027d8:	80 00       	ld.sh	r0,r0[0x0]
800027da:	59 9a       	cp.w	r10,25

800027dc <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
800027dc:	eb cd 40 fc 	pushm	r2-r7,lr
800027e0:	20 1d       	sub	sp,4
800027e2:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800027e4:	f0 1f 00 32 	mcall	800028ac <sd_mmc_spi_get_csd+0xd0>
800027e8:	c5 f0       	breq	800028a6 <sd_mmc_spi_get_csd+0xca>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800027ea:	30 1b       	mov	r11,1
800027ec:	fe 7c 24 00 	mov	r12,-56320
800027f0:	f0 1f 00 30 	mcall	800028b0 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
800027f4:	30 0b       	mov	r11,0
800027f6:	30 9c       	mov	r12,9
800027f8:	f0 1f 00 2f 	mcall	800028b4 <sd_mmc_spi_get_csd+0xd8>
800027fc:	4a f8       	lddpc	r8,800028b8 <sd_mmc_spi_get_csd+0xdc>
800027fe:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002800:	58 0c       	cp.w	r12,0
80002802:	c0 81       	brne	80002812 <sd_mmc_spi_get_csd+0x36>
80002804:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002806:	e0 64 00 ff 	mov	r4,255
8000280a:	10 93       	mov	r3,r8
8000280c:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
8000280e:	30 95       	mov	r5,9
80002810:	c1 78       	rjmp	8000283e <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002812:	30 1b       	mov	r11,1
80002814:	fe 7c 24 00 	mov	r12,-56320
80002818:	f0 1f 00 29 	mcall	800028bc <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
8000281c:	30 09       	mov	r9,0
8000281e:	4a 98       	lddpc	r8,800028c0 <sd_mmc_spi_get_csd+0xe4>
80002820:	b0 89       	st.b	r8[0x0],r9
80002822:	30 0c       	mov	r12,0
    return false;
80002824:	c4 18       	rjmp	800028a6 <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
80002826:	ea 07 18 00 	cp.b	r7,r5
8000282a:	c0 81       	brne	8000283a <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000282c:	30 1b       	mov	r11,1
8000282e:	fe 7c 24 00 	mov	r12,-56320
80002832:	f0 1f 00 23 	mcall	800028bc <sd_mmc_spi_get_csd+0xe0>
80002836:	30 0c       	mov	r12,0
      return false;
80002838:	c3 78       	rjmp	800028a6 <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
8000283a:	2f f7       	sub	r7,-1
8000283c:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000283e:	08 9c       	mov	r12,r4
80002840:	f0 1f 00 21 	mcall	800028c4 <sd_mmc_spi_get_csd+0xe8>
80002844:	a6 8c       	st.b	r3[0x0],r12
80002846:	ec 0c 18 00 	cp.b	r12,r6
8000284a:	ce e1       	brne	80002826 <sd_mmc_spi_get_csd+0x4a>
8000284c:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000284e:	e0 65 00 ff 	mov	r5,255
80002852:	fe 76 24 00 	mov	r6,-56320
   spi_read(SD_MMC_SPI,&data_read);
80002856:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
8000285a:	0a 9b       	mov	r11,r5
8000285c:	0c 9c       	mov	r12,r6
8000285e:	f0 1f 00 1b 	mcall	800028c8 <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
80002862:	08 9b       	mov	r11,r4
80002864:	0c 9c       	mov	r12,r6
80002866:	f0 1f 00 1a 	mcall	800028cc <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
8000286a:	9a 18       	ld.sh	r8,sp[0x2]
8000286c:	e4 07 0b 08 	st.b	r2[r7],r8
80002870:	2f f7       	sub	r7,-1
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
80002872:	59 07       	cp.w	r7,16
80002874:	cf 31       	brne	8000285a <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80002876:	e0 6b 00 ff 	mov	r11,255
8000287a:	fe 7c 24 00 	mov	r12,-56320
8000287e:	f0 1f 00 13 	mcall	800028c8 <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
80002882:	e0 6b 00 ff 	mov	r11,255
80002886:	fe 7c 24 00 	mov	r12,-56320
8000288a:	f0 1f 00 10 	mcall	800028c8 <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
8000288e:	e0 6b 00 ff 	mov	r11,255
80002892:	fe 7c 24 00 	mov	r12,-56320
80002896:	f0 1f 00 0d 	mcall	800028c8 <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000289a:	30 1b       	mov	r11,1
8000289c:	fe 7c 24 00 	mov	r12,-56320
800028a0:	f0 1f 00 07 	mcall	800028bc <sd_mmc_spi_get_csd+0xe0>
800028a4:	30 1c       	mov	r12,1
  return true;
}
800028a6:	2f fd       	sub	sp,-4
800028a8:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
800028ac:	80 00       	ld.sh	r0,r0[0x0]
800028ae:	21 e4       	sub	r4,30
800028b0:	80 00       	ld.sh	r0,r0[0x0]
800028b2:	58 44       	cp.w	r4,4
800028b4:	80 00       	ld.sh	r0,r0[0x0]
800028b6:	22 78       	sub	r8,39
800028b8:	00 00       	add	r0,r0
800028ba:	06 9c       	mov	r12,r3
800028bc:	80 00       	ld.sh	r0,r0[0x0]
800028be:	58 90       	cp.w	r0,9
800028c0:	00 00       	add	r0,r0
800028c2:	03 10       	ld.sh	r0,r1++
800028c4:	80 00       	ld.sh	r0,r0[0x0]
800028c6:	21 b0       	sub	r0,27
800028c8:	80 00       	ld.sh	r0,r0[0x0]
800028ca:	59 7e       	cp.w	lr,23
800028cc:	80 00       	ld.sh	r0,r0[0x0]
800028ce:	59 9a       	cp.w	r10,25

800028d0 <sd_mmc_spi_write_multiple_sector>:
//!
//! @param  nb_sector   the number of sector to write
//! @return bit
//!   The write succeeded      -> true
bool sd_mmc_spi_write_multiple_sector(uint16_t nb_sector)
{
800028d0:	eb cd 40 c0 	pushm	r6-r7,lr
800028d4:	18 97       	mov	r7,r12
  while (nb_sector--)
800028d6:	58 0c       	cp.w	r12,0
800028d8:	c0 b0       	breq	800028ee <sd_mmc_spi_write_multiple_sector+0x1e>
  {
    // Write the next sector
    sd_mmc_spi_write_multiple_sector_callback(sector_buf);
800028da:	48 76       	lddpc	r6,800028f4 <sd_mmc_spi_write_multiple_sector+0x24>
800028dc:	0c 9c       	mov	r12,r6
800028de:	f0 1f 00 07 	mcall	800028f8 <sd_mmc_spi_write_multiple_sector+0x28>
    sd_mmc_spi_write_sector_from_ram(sector_buf);
800028e2:	0c 9c       	mov	r12,r6
800028e4:	f0 1f 00 06 	mcall	800028fc <sd_mmc_spi_write_multiple_sector+0x2c>
800028e8:	20 17       	sub	r7,1
800028ea:	5c 87       	casts.h	r7
//! @param  nb_sector   the number of sector to write
//! @return bit
//!   The write succeeded      -> true
bool sd_mmc_spi_write_multiple_sector(uint16_t nb_sector)
{
  while (nb_sector--)
800028ec:	cf 81       	brne	800028dc <sd_mmc_spi_write_multiple_sector+0xc>
    sd_mmc_spi_write_multiple_sector_callback(sector_buf);
    sd_mmc_spi_write_sector_from_ram(sector_buf);
  }

  return true;
}
800028ee:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
800028f2:	00 00       	add	r0,r0
800028f4:	00 00       	add	r0,r0
800028f6:	00 fc       	st.b	--r0,r12
800028f8:	80 00       	ld.sh	r0,r0[0x0]
800028fa:	52 c0       	stdsp	sp[0xb0],r0
800028fc:	80 00       	ld.sh	r0,r0[0x0]
800028fe:	23 fc       	sub	r12,63

80002900 <sd_mmc_spi_read_multiple_sector>:
//!
//! @param  nb_sector   the number of sector to read
//! @return bit
//!   The read succeeded      -> true
bool sd_mmc_spi_read_multiple_sector(uint16_t nb_sector)
{
80002900:	eb cd 40 c0 	pushm	r6-r7,lr
80002904:	18 97       	mov	r7,r12
  while (nb_sector--)
80002906:	58 0c       	cp.w	r12,0
80002908:	c0 b0       	breq	8000291e <sd_mmc_spi_read_multiple_sector+0x1e>
  {
    // Read the next sector
    sd_mmc_spi_read_sector_to_ram(sector_buf);
8000290a:	48 76       	lddpc	r6,80002924 <sd_mmc_spi_read_multiple_sector+0x24>
8000290c:	0c 9c       	mov	r12,r6
8000290e:	f0 1f 00 07 	mcall	80002928 <sd_mmc_spi_read_multiple_sector+0x28>
    sd_mmc_spi_read_multiple_sector_callback(sector_buf);
80002912:	0c 9c       	mov	r12,r6
80002914:	f0 1f 00 06 	mcall	8000292c <sd_mmc_spi_read_multiple_sector+0x2c>
80002918:	20 17       	sub	r7,1
8000291a:	5c 87       	casts.h	r7
//! @param  nb_sector   the number of sector to read
//! @return bit
//!   The read succeeded      -> true
bool sd_mmc_spi_read_multiple_sector(uint16_t nb_sector)
{
  while (nb_sector--)
8000291c:	cf 81       	brne	8000290c <sd_mmc_spi_read_multiple_sector+0xc>
    sd_mmc_spi_read_sector_to_ram(sector_buf);
    sd_mmc_spi_read_multiple_sector_callback(sector_buf);
  }

  return true;
}
8000291e:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80002922:	00 00       	add	r0,r0
80002924:	00 00       	add	r0,r0
80002926:	00 fc       	st.b	--r0,r12
80002928:	80 00       	ld.sh	r0,r0[0x0]
8000292a:	26 8c       	sub	r12,104
8000292c:	80 00       	ld.sh	r0,r0[0x0]
8000292e:	52 d8       	stdsp	sp[0xb4],r8

80002930 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002930:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002932:	fe fb 02 6a 	ld.w	r11,pc[618]
80002936:	e6 68 1a 80 	mov	r8,400000
8000293a:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
8000293c:	fe f8 02 64 	ld.w	r8,pc[612]
80002940:	70 0a       	ld.w	r10,r8[0x0]
80002942:	fe 7c 24 00 	mov	r12,-56320
80002946:	f0 1f 00 98 	mcall	80002ba4 <sd_mmc_spi_internal_init+0x274>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000294a:	30 1b       	mov	r11,1
8000294c:	fe 7c 24 00 	mov	r12,-56320
80002950:	f0 1f 00 96 	mcall	80002ba8 <sd_mmc_spi_internal_init+0x278>
80002954:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
80002956:	e0 66 00 ff 	mov	r6,255
8000295a:	fe 75 24 00 	mov	r5,-56320
8000295e:	0c 9b       	mov	r11,r6
80002960:	0a 9c       	mov	r12,r5
80002962:	f0 1f 00 93 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
80002966:	2f f7       	sub	r7,-1
80002968:	58 a7       	cp.w	r7,10
8000296a:	cf a1       	brne	8000295e <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000296c:	30 1b       	mov	r11,1
8000296e:	fe 7c 24 00 	mov	r12,-56320
80002972:	f0 1f 00 90 	mcall	80002bb0 <sd_mmc_spi_internal_init+0x280>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
80002976:	30 08       	mov	r8,0
80002978:	fe f9 02 3c 	ld.w	r9,pc[572]
8000297c:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
8000297e:	fe f9 02 3a 	ld.w	r9,pc[570]
80002982:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002984:	30 0b       	mov	r11,0
80002986:	16 9c       	mov	r12,r11
80002988:	f0 1f 00 8d 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
8000298c:	fe f8 02 34 	ld.w	r8,pc[564]
80002990:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002992:	e0 6b 00 ff 	mov	r11,255
80002996:	fe 7c 24 00 	mov	r12,-56320
8000299a:	f0 1f 00 85 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
8000299e:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800029a0:	fe f6 02 20 	ld.w	r6,pc[544]
800029a4:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800029a6:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029a8:	e0 62 00 ff 	mov	r2,255
800029ac:	fe 71 24 00 	mov	r1,-56320
    // do retry counter
    retry++;
    if(retry > 100)
800029b0:	36 54       	mov	r4,101
800029b2:	c1 08       	rjmp	800029d2 <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800029b4:	06 9b       	mov	r11,r3
800029b6:	06 9c       	mov	r12,r3
800029b8:	f0 1f 00 81 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
800029bc:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029be:	04 9b       	mov	r11,r2
800029c0:	02 9c       	mov	r12,r1
800029c2:	f0 1f 00 7b 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
    // do retry counter
    retry++;
800029c6:	2f f7       	sub	r7,-1
800029c8:	5c 87       	casts.h	r7
    if(retry > 100)
800029ca:	e8 07 19 00 	cp.h	r7,r4
800029ce:	e0 80 00 e5 	breq	80002b98 <sd_mmc_spi_internal_init+0x268>
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
800029d2:	0d 88       	ld.ub	r8,r6[0x0]
800029d4:	ea 08 18 00 	cp.b	r8,r5
800029d8:	ce e1       	brne	800029b4 <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
800029da:	f0 1f 00 7b 	mcall	80002bc4 <sd_mmc_spi_internal_init+0x294>
  if(if_cond == -1) {
800029de:	5b fc       	cp.w	r12,-1
800029e0:	e0 80 00 dc 	breq	80002b98 <sd_mmc_spi_internal_init+0x268>
      return false; // card is bad
  } else if (if_cond == 1) {
800029e4:	58 1c       	cp.w	r12,1
800029e6:	c0 51       	brne	800029f0 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
800029e8:	30 29       	mov	r9,2
800029ea:	4f 48       	lddpc	r8,80002bb8 <sd_mmc_spi_internal_init+0x288>
800029ec:	b0 89       	st.b	r8[0x0],r9
800029ee:	c4 c8       	rjmp	80002a86 <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
800029f0:	30 0b       	mov	r11,0
800029f2:	33 7c       	mov	r12,55
800029f4:	f0 1f 00 72 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
800029f8:	4f 27       	lddpc	r7,80002bc0 <sd_mmc_spi_internal_init+0x290>
800029fa:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
800029fc:	e0 6b 00 ff 	mov	r11,255
80002a00:	fe 7c 24 00 	mov	r12,-56320
80002a04:	f0 1f 00 6a 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002a08:	30 0b       	mov	r11,0
80002a0a:	32 9c       	mov	r12,41
80002a0c:	f0 1f 00 6c 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002a10:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002a12:	e0 6b 00 ff 	mov	r11,255
80002a16:	fe 7c 24 00 	mov	r12,-56320
80002a1a:	f0 1f 00 65 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002a1e:	0f 88       	ld.ub	r8,r7[0x0]
80002a20:	e2 18 00 fe 	andl	r8,0xfe,COH
80002a24:	c0 51       	brne	80002a2e <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
80002a26:	30 19       	mov	r9,1
80002a28:	4e 48       	lddpc	r8,80002bb8 <sd_mmc_spi_internal_init+0x288>
80002a2a:	b0 89       	st.b	r8[0x0],r9
80002a2c:	c2 d8       	rjmp	80002a86 <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
80002a2e:	30 09       	mov	r9,0
80002a30:	4e 28       	lddpc	r8,80002bb8 <sd_mmc_spi_internal_init+0x288>
80002a32:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002a34:	30 0b       	mov	r11,0
80002a36:	16 9c       	mov	r12,r11
80002a38:	f0 1f 00 61 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002a3c:	4e 18       	lddpc	r8,80002bc0 <sd_mmc_spi_internal_init+0x290>
80002a3e:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a40:	e0 6b 00 ff 	mov	r11,255
80002a44:	fe 7c 24 00 	mov	r12,-56320
80002a48:	f0 1f 00 59 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
80002a4c:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002a4e:	4d d6       	lddpc	r6,80002bc0 <sd_mmc_spi_internal_init+0x290>
80002a50:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002a52:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a54:	e0 62 00 ff 	mov	r2,255
80002a58:	fe 71 24 00 	mov	r1,-56320
        // do retry counter
        retry++;
        if(retry > 100)
80002a5c:	36 54       	mov	r4,101
80002a5e:	c1 08       	rjmp	80002a7e <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002a60:	06 9b       	mov	r11,r3
80002a62:	06 9c       	mov	r12,r3
80002a64:	f0 1f 00 56 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002a68:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a6a:	04 9b       	mov	r11,r2
80002a6c:	02 9c       	mov	r12,r1
80002a6e:	f0 1f 00 50 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
        // do retry counter
        retry++;
80002a72:	2f f7       	sub	r7,-1
80002a74:	5c 87       	casts.h	r7
        if(retry > 100)
80002a76:	e8 07 19 00 	cp.h	r7,r4
80002a7a:	e0 80 00 8f 	breq	80002b98 <sd_mmc_spi_internal_init+0x268>
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002a7e:	0d 88       	ld.ub	r8,r6[0x0]
80002a80:	ea 08 18 00 	cp.b	r8,r5
80002a84:	ce e1       	brne	80002a60 <sd_mmc_spi_internal_init+0x130>
80002a86:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80002a88:	4c c4       	lddpc	r4,80002bb8 <sd_mmc_spi_internal_init+0x288>
80002a8a:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002a8c:	0e 93       	mov	r3,r7
80002a8e:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002a90:	4c c6       	lddpc	r6,80002bc0 <sd_mmc_spi_internal_init+0x290>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a92:	e0 62 00 ff 	mov	r2,255
80002a96:	fe 71 24 00 	mov	r1,-56320

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80002a9a:	09 88       	ld.ub	r8,r4[0x0]
80002a9c:	ea 08 18 00 	cp.b	r8,r5
80002aa0:	c1 10       	breq	80002ac2 <sd_mmc_spi_internal_init+0x192>
80002aa2:	c0 63       	brcs	80002aae <sd_mmc_spi_internal_init+0x17e>
80002aa4:	30 29       	mov	r9,2
80002aa6:	f2 08 18 00 	cp.b	r8,r9
80002aaa:	c2 91       	brne	80002afc <sd_mmc_spi_internal_init+0x1cc>
80002aac:	c1 98       	rjmp	80002ade <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
80002aae:	06 9b       	mov	r11,r3
80002ab0:	30 1c       	mov	r12,1
80002ab2:	f0 1f 00 43 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002ab6:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002ab8:	04 9b       	mov	r11,r2
80002aba:	02 9c       	mov	r12,r1
80002abc:	f0 1f 00 3c 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
      break;
80002ac0:	c1 e8       	rjmp	80002afc <sd_mmc_spi_internal_init+0x1cc>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002ac2:	06 9b       	mov	r11,r3
80002ac4:	00 9c       	mov	r12,r0
80002ac6:	f0 1f 00 3e 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002aca:	06 9b       	mov	r11,r3
80002acc:	32 9c       	mov	r12,41
80002ace:	f0 1f 00 3c 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002ad2:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002ad4:	04 9b       	mov	r11,r2
80002ad6:	02 9c       	mov	r12,r1
80002ad8:	f0 1f 00 35 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
      break;
80002adc:	c1 08       	rjmp	80002afc <sd_mmc_spi_internal_init+0x1cc>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002ade:	06 9b       	mov	r11,r3
80002ae0:	00 9c       	mov	r12,r0
80002ae2:	f0 1f 00 37 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
80002ae6:	30 0b       	mov	r11,0
80002ae8:	ea 1b 40 00 	orh	r11,0x4000
80002aec:	32 9c       	mov	r12,41
80002aee:	f0 1f 00 34 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002af2:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002af4:	04 9b       	mov	r11,r2
80002af6:	02 9c       	mov	r12,r1
80002af8:	f0 1f 00 2d 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
      break;
    }
     // do retry counter
     retry++;
80002afc:	2f f7       	sub	r7,-1
80002afe:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
80002b00:	fe 78 c3 50 	mov	r8,-15536
80002b04:	f0 07 19 00 	cp.h	r7,r8
80002b08:	c4 80       	breq	80002b98 <sd_mmc_spi_internal_init+0x268>
        return false;
  } while (r1);
80002b0a:	0d 89       	ld.ub	r9,r6[0x0]
80002b0c:	30 08       	mov	r8,0
80002b0e:	f0 09 18 00 	cp.b	r9,r8
80002b12:	cc 41       	brne	80002a9a <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80002b14:	4a 98       	lddpc	r8,80002bb8 <sd_mmc_spi_internal_init+0x288>
80002b16:	11 89       	ld.ub	r9,r8[0x0]
80002b18:	30 28       	mov	r8,2
80002b1a:	f0 09 18 00 	cp.b	r9,r8
80002b1e:	c0 a1       	brne	80002b32 <sd_mmc_spi_internal_init+0x202>
    if_cond = sd_mmc_spi_check_hc();
80002b20:	f0 1f 00 2a 	mcall	80002bc8 <sd_mmc_spi_internal_init+0x298>
    if (if_cond == -1) {
80002b24:	5b fc       	cp.w	r12,-1
80002b26:	c3 90       	breq	80002b98 <sd_mmc_spi_internal_init+0x268>
      return false;
    } else if (if_cond == 1){
80002b28:	58 1c       	cp.w	r12,1
80002b2a:	c0 41       	brne	80002b32 <sd_mmc_spi_internal_init+0x202>
          card_type = SD_CARD_2_SDHC;
80002b2c:	30 39       	mov	r9,3
80002b2e:	4a 38       	lddpc	r8,80002bb8 <sd_mmc_spi_internal_init+0x288>
80002b30:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80002b32:	30 0b       	mov	r11,0
80002b34:	33 bc       	mov	r12,59
80002b36:	f0 1f 00 22 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002b3a:	4a 27       	lddpc	r7,80002bc0 <sd_mmc_spi_internal_init+0x290>
80002b3c:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002b3e:	e0 6b 00 ff 	mov	r11,255
80002b42:	fe 7c 24 00 	mov	r12,-56320
80002b46:	f0 1f 00 1a 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002b4a:	e0 6b 02 00 	mov	r11,512
80002b4e:	31 0c       	mov	r12,16
80002b50:	f0 1f 00 1b 	mcall	80002bbc <sd_mmc_spi_internal_init+0x28c>
80002b54:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002b56:	e0 6b 00 ff 	mov	r11,255
80002b5a:	fe 7c 24 00 	mov	r12,-56320
80002b5e:	f0 1f 00 14 	mcall	80002bac <sd_mmc_spi_internal_init+0x27c>
  if (r1 != 0x00)
80002b62:	0f 89       	ld.ub	r9,r7[0x0]
80002b64:	30 08       	mov	r8,0
80002b66:	f0 09 18 00 	cp.b	r9,r8
80002b6a:	c1 71       	brne	80002b98 <sd_mmc_spi_internal_init+0x268>
    return false;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
80002b6c:	49 8c       	lddpc	r12,80002bcc <sd_mmc_spi_internal_init+0x29c>
80002b6e:	f0 1f 00 19 	mcall	80002bd0 <sd_mmc_spi_internal_init+0x2a0>
80002b72:	c1 30       	breq	80002b98 <sd_mmc_spi_internal_init+0x268>
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002b74:	f0 1f 00 18 	mcall	80002bd4 <sd_mmc_spi_internal_init+0x2a4>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80002b78:	30 19       	mov	r9,1
80002b7a:	48 f8       	lddpc	r8,80002bb4 <sd_mmc_spi_internal_init+0x284>
80002b7c:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80002b7e:	48 8b       	lddpc	r11,80002b9c <sd_mmc_spi_internal_init+0x26c>
80002b80:	e0 68 87 00 	mov	r8,34560
80002b84:	ea 18 03 93 	orh	r8,0x393
80002b88:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002b8a:	48 68       	lddpc	r8,80002ba0 <sd_mmc_spi_internal_init+0x270>
80002b8c:	70 0a       	ld.w	r10,r8[0x0]
80002b8e:	fe 7c 24 00 	mov	r12,-56320
80002b92:	f0 1f 00 05 	mcall	80002ba4 <sd_mmc_spi_internal_init+0x274>
80002b96:	da 3a       	popm	r0-r7,pc,r12=1
  return true;
80002b98:	d8 3a       	popm	r0-r7,pc,r12=0
80002b9a:	00 00       	add	r0,r0
80002b9c:	00 00       	add	r0,r0
80002b9e:	02 fc       	st.b	--r1,r12
80002ba0:	00 00       	add	r0,r0
80002ba2:	03 0c       	ld.w	r12,r1++
80002ba4:	80 00       	ld.sh	r0,r0[0x0]
80002ba6:	58 b8       	cp.w	r8,11
80002ba8:	80 00       	ld.sh	r0,r0[0x0]
80002baa:	58 44       	cp.w	r4,4
80002bac:	80 00       	ld.sh	r0,r0[0x0]
80002bae:	59 7e       	cp.w	lr,23
80002bb0:	80 00       	ld.sh	r0,r0[0x0]
80002bb2:	58 90       	cp.w	r0,9
80002bb4:	00 00       	add	r0,r0
80002bb6:	03 10       	ld.sh	r0,r1++
80002bb8:	00 00       	add	r0,r0
80002bba:	06 8a       	andn	r10,r3
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	23 40       	sub	r0,52
80002bc0:	00 00       	add	r0,r0
80002bc2:	06 9c       	mov	r12,r3
80002bc4:	80 00       	ld.sh	r0,r0[0x0]
80002bc6:	25 d4       	sub	r4,93
80002bc8:	80 00       	ld.sh	r0,r0[0x0]
80002bca:	25 48       	sub	r8,84
80002bcc:	00 00       	add	r0,r0
80002bce:	06 8c       	andn	r12,r3
80002bd0:	80 00       	ld.sh	r0,r0[0x0]
80002bd2:	27 dc       	sub	r12,125
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	20 90       	sub	r0,9

80002bd8 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80002bd8:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence())
80002bda:	f0 1f 00 07 	mcall	80002bf4 <sd_mmc_spi_mem_check+0x1c>
80002bde:	c0 a0       	breq	80002bf2 <sd_mmc_spi_mem_check+0x1a>
  {
    if (sd_mmc_spi_init_done == false)
80002be0:	48 68       	lddpc	r8,80002bf8 <sd_mmc_spi_mem_check+0x20>
80002be2:	11 89       	ld.ub	r9,r8[0x0]
80002be4:	30 08       	mov	r8,0
80002be6:	f0 09 18 00 	cp.b	r9,r8
80002bea:	c0 20       	breq	80002bee <sd_mmc_spi_mem_check+0x16>
80002bec:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80002bee:	f0 1f 00 04 	mcall	80002bfc <sd_mmc_spi_mem_check+0x24>
    }
    else
      return true;
  }
  return false;
}
80002bf2:	d8 02       	popm	pc
80002bf4:	80 00       	ld.sh	r0,r0[0x0]
80002bf6:	23 80       	sub	r0,56
80002bf8:	00 00       	add	r0,r0
80002bfa:	03 10       	ld.sh	r0,r1++
80002bfc:	80 00       	ld.sh	r0,r0[0x0]
80002bfe:	29 30       	sub	r0,-109

80002c00 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80002c00:	eb cd 40 10 	pushm	r4,lr
80002c04:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
80002c08:	48 88       	lddpc	r8,80002c28 <sd_mmc_spi_init+0x28>
80002c0a:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002c0c:	48 88       	lddpc	r8,80002c2c <sd_mmc_spi_init+0x2c>
80002c0e:	e8 ea 00 00 	ld.d	r10,r4[0]
80002c12:	f0 eb 00 00 	st.d	r8[0],r10
80002c16:	e8 ea 00 08 	ld.d	r10,r4[8]
80002c1a:	f0 eb 00 08 	st.d	r8[8],r10

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80002c1e:	f0 1f 00 05 	mcall	80002c30 <sd_mmc_spi_init+0x30>
}
80002c22:	e3 cd 80 10 	ldm	sp++,r4,pc
80002c26:	00 00       	add	r0,r0
80002c28:	00 00       	add	r0,r0
80002c2a:	03 0c       	ld.w	r12,r1++
80002c2c:	00 00       	add	r0,r0
80002c2e:	02 fc       	st.b	--r1,r12
80002c30:	80 00       	ld.sh	r0,r0[0x0]
80002c32:	29 30       	sub	r0,-109

80002c34 <fat_check_open>:
//! @return    true  a file is opened
//! @return    false otherwise
//!
bool  fat_check_open( void )
{
   if( Fat_file_isnot_open() )
80002c34:	48 68       	lddpc	r8,80002c4c <fat_check_open+0x18>
80002c36:	11 89       	ld.ub	r9,r8[0x0]
80002c38:	30 08       	mov	r8,0
80002c3a:	f0 09 18 00 	cp.b	r9,r8
80002c3e:	c0 20       	breq	80002c42 <fat_check_open+0xe>
80002c40:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
80002c42:	31 79       	mov	r9,23
80002c44:	48 38       	lddpc	r8,80002c50 <fat_check_open+0x1c>
80002c46:	b0 89       	st.b	r8[0x0],r9
80002c48:	5e fd       	retal	0
80002c4a:	00 00       	add	r0,r0
80002c4c:	00 00       	add	r0,r0
80002c4e:	06 a4       	st.w	r3++,r4
80002c50:	00 00       	add	r0,r0
80002c52:	09 2c       	ld.uh	r12,r4++

80002c54 <fat_check_select>:
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
80002c54:	48 68       	lddpc	r8,80002c6c <fat_check_select+0x18>
80002c56:	90 19       	ld.sh	r9,r8[0x2]
80002c58:	3f f8       	mov	r8,-1
80002c5a:	f0 09 19 00 	cp.h	r9,r8
80002c5e:	c0 20       	breq	80002c62 <fat_check_select+0xe>
80002c60:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80002c62:	30 f9       	mov	r9,15
80002c64:	48 38       	lddpc	r8,80002c70 <fat_check_select+0x1c>
80002c66:	b0 89       	st.b	r8[0x0],r9
80002c68:	5e fd       	retal	0
80002c6a:	00 00       	add	r0,r0
80002c6c:	00 00       	add	r0,r0
80002c6e:	09 28       	ld.uh	r8,r4++
80002c70:	00 00       	add	r0,r0
80002c72:	09 2c       	ld.uh	r12,r4++

80002c74 <fat_check_is_file>:
//! @return    true  It is a file and not a directory
//! @return    false otherwise
//!
bool  fat_check_is_file( void )
{
   if( Fat_is_not_a_file )
80002c74:	48 58       	lddpc	r8,80002c88 <fat_check_is_file+0x14>
80002c76:	11 a8       	ld.ub	r8,r8[0x2]
80002c78:	e2 18 00 18 	andl	r8,0x18,COH
80002c7c:	c0 21       	brne	80002c80 <fat_check_is_file+0xc>
80002c7e:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80002c80:	31 39       	mov	r9,19
80002c82:	48 38       	lddpc	r8,80002c8c <fat_check_is_file+0x18>
80002c84:	b0 89       	st.b	r8[0x0],r9
80002c86:	5e fd       	retal	0
80002c88:	00 00       	add	r0,r0
80002c8a:	06 a4       	st.w	r3++,r4
80002c8c:	00 00       	add	r0,r0
80002c8e:	09 2c       	ld.uh	r12,r4++

80002c90 <fat_checkcluster>:
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
  if ( !fs_g_cluster.u32_val )
80002c90:	49 68       	lddpc	r8,80002ce8 <fat_checkcluster+0x58>
80002c92:	70 18       	ld.w	r8,r8[0x4]
80002c94:	58 08       	cp.w	r8,0
80002c96:	c0 21       	brne	80002c9a <fat_checkcluster+0xa>
80002c98:	5e ff       	retal	1
    return FS_CLUS_BAD;

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
80002c9a:	49 59       	lddpc	r9,80002cec <fat_checkcluster+0x5c>
80002c9c:	13 89       	ld.ub	r9,r9[0x0]
80002c9e:	30 3a       	mov	r10,3
80002ca0:	f4 09 18 00 	cp.b	r9,r10
80002ca4:	c0 a1       	brne	80002cb8 <fat_checkcluster+0x28>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
80002ca6:	e0 69 ff f7 	mov	r9,65527
80002caa:	ea 19 0f ff 	orh	r9,0xfff
80002cae:	12 38       	cp.w	r8,r9
80002cb0:	e0 8b 00 19 	brhi	80002ce2 <fat_checkcluster+0x52>
80002cb4:	5f 0c       	sreq	r12
80002cb6:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
80002cb8:	30 2a       	mov	r10,2
80002cba:	f4 09 18 00 	cp.b	r9,r10
80002cbe:	c0 71       	brne	80002ccc <fat_checkcluster+0x3c>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
80002cc0:	e0 48 ff f7 	cp.w	r8,65527
80002cc4:	e0 8b 00 0f 	brhi	80002ce2 <fat_checkcluster+0x52>
80002cc8:	5f 0c       	sreq	r12
80002cca:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
80002ccc:	30 1a       	mov	r10,1
80002cce:	f4 09 18 00 	cp.b	r9,r10
80002cd2:	c0 20       	breq	80002cd6 <fat_checkcluster+0x46>
80002cd4:	5e fd       	retal	0
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
80002cd6:	e0 48 0f f7 	cp.w	r8,4087
80002cda:	e0 8b 00 04 	brhi	80002ce2 <fat_checkcluster+0x52>
80002cde:	5f 0c       	sreq	r12
80002ce0:	5e fc       	retal	r12
80002ce2:	30 2c       	mov	r12,2
    else if (fs_g_cluster.u32_val == 0xFF7)
      return FS_CLUS_BAD;
  }

  return FS_CLUS_OK;
}
80002ce4:	5e fc       	retal	r12
80002ce6:	00 00       	add	r0,r0
80002ce8:	00 00       	add	r0,r0
80002cea:	09 7c       	ld.ub	r12,--r4
80002cec:	00 00       	add	r0,r0
80002cee:	09 28       	ld.uh	r8,r4++

80002cf0 <fat_cache_clusterlist_reset>:
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80002cf0:	30 0a       	mov	r10,0
80002cf2:	48 88       	lddpc	r8,80002d10 <fat_cache_clusterlist_reset+0x20>
80002cf4:	b0 8a       	st.b	r8[0x0],r10
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80002cf6:	48 88       	lddpc	r8,80002d14 <fat_cache_clusterlist_reset+0x24>
80002cf8:	30 19       	mov	r9,1
80002cfa:	b0 89       	st.b	r8[0x0],r9
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80002cfc:	3f f9       	mov	r9,-1
80002cfe:	b0 a9       	st.b	r8[0x2],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80002d00:	b0 99       	st.b	r8[0x1],r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is splited in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80002d02:	f1 6a 00 14 	st.b	r8[20],r10
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80002d06:	f1 69 00 16 	st.b	r8[22],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80002d0a:	f1 69 00 15 	st.b	r8[21],r9
   }
}
80002d0e:	5e fc       	retal	r12
80002d10:	00 00       	add	r0,r0
80002d12:	09 2e       	ld.uh	lr,r4++
80002d14:	00 00       	add	r0,r0
80002d16:	06 b8       	st.h	r3++,r8

80002d18 <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
80002d18:	48 c9       	lddpc	r9,80002d48 <fat_cache_clusterlist_update_start+0x30>
80002d1a:	13 88       	ld.ub	r8,r9[0x0]
80002d1c:	f8 08 18 00 	cp.b	r8,r12
80002d20:	5f 18       	srne	r8
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
80002d22:	48 ba       	lddpc	r10,80002d4c <fat_cache_clusterlist_update_start+0x34>
80002d24:	b4 88       	st.b	r10[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
80002d26:	f0 0a 15 02 	lsl	r10,r8,0x2
80002d2a:	10 0a       	add	r10,r8
80002d2c:	f2 0a 00 28 	add	r8,r9,r10<<0x2
80002d30:	b0 8c       	st.b	r8[0x0],r12
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // unvalid cache
80002d32:	3f fb       	mov	r11,-1
80002d34:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
80002d36:	2f fa       	sub	r10,-1
80002d38:	48 6b       	lddpc	r11,80002d50 <fat_cache_clusterlist_update_start+0x38>
80002d3a:	76 0b       	ld.w	r11,r11[0x0]
80002d3c:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
80002d40:	48 59       	lddpc	r9,80002d54 <fat_cache_clusterlist_update_start+0x3c>
80002d42:	72 19       	ld.w	r9,r9[0x4]
80002d44:	91 29       	st.w	r8[0x8],r9
}
80002d46:	5e fc       	retal	r12
80002d48:	00 00       	add	r0,r0
80002d4a:	06 b8       	st.h	r3++,r8
80002d4c:	00 00       	add	r0,r0
80002d4e:	09 2e       	ld.uh	lr,r4++
80002d50:	00 00       	add	r0,r0
80002d52:	09 7c       	ld.ub	r12,--r4
80002d54:	00 00       	add	r0,r0
80002d56:	09 84       	ld.ub	r4,r4[0x0]

80002d58 <fat_cache_clusterlist_update_select>:
{
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
80002d58:	49 88       	lddpc	r8,80002db8 <fat_cache_clusterlist_update_select+0x60>
80002d5a:	11 88       	ld.ub	r8,r8[0x0]
80002d5c:	49 8a       	lddpc	r10,80002dbc <fat_cache_clusterlist_update_select+0x64>
80002d5e:	f0 08 00 2b 	add	r11,r8,r8<<0x2
80002d62:	f4 0b 00 2b 	add	r11,r10,r11<<0x2
80002d66:	17 89       	ld.ub	r9,r11[0x0]
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
80002d68:	17 9b       	ld.ub	r11,r11[0x1]
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80002d6a:	15 8a       	ld.ub	r10,r10[0x0]
80002d6c:	f2 0a 18 00 	cp.b	r10,r9
80002d70:	c0 a1       	brne	80002d84 <fat_cache_clusterlist_update_select+0x2c>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80002d72:	49 3a       	lddpc	r10,80002dbc <fat_cache_clusterlist_update_select+0x64>
80002d74:	15 9a       	ld.ub	r10,r10[0x1]
80002d76:	f4 0b 18 00 	cp.b	r11,r10
80002d7a:	e0 88 00 05 	brls	80002d84 <fat_cache_clusterlist_update_select+0x2c>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80002d7e:	2f fa       	sub	r10,-1
80002d80:	48 fc       	lddpc	r12,80002dbc <fat_cache_clusterlist_update_select+0x64>
80002d82:	b8 9a       	st.b	r12[0x1],r10

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80002d84:	48 ea       	lddpc	r10,80002dbc <fat_cache_clusterlist_update_select+0x64>
80002d86:	f5 3a 00 14 	ld.ub	r10,r10[20]
80002d8a:	f2 0a 18 00 	cp.b	r10,r9
80002d8e:	c0 c1       	brne	80002da6 <fat_cache_clusterlist_update_select+0x4e>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80002d90:	48 b9       	lddpc	r9,80002dbc <fat_cache_clusterlist_update_select+0x64>
80002d92:	f3 39 00 15 	ld.ub	r9,r9[21]
80002d96:	f2 0b 18 00 	cp.b	r11,r9
80002d9a:	e0 88 00 06 	brls	80002da6 <fat_cache_clusterlist_update_select+0x4e>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80002d9e:	2f f9       	sub	r9,-1
80002da0:	48 7a       	lddpc	r10,80002dbc <fat_cache_clusterlist_update_select+0x64>
80002da2:	f5 69 00 15 	st.b	r10[21],r9
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80002da6:	f0 08 00 28 	add	r8,r8,r8<<0x2
80002daa:	48 59       	lddpc	r9,80002dbc <fat_cache_clusterlist_update_select+0x64>
80002dac:	f2 08 00 28 	add	r8,r9,r8<<0x2
80002db0:	30 09       	mov	r9,0
80002db2:	b0 99       	st.b	r8[0x1],r9
}
80002db4:	5e fc       	retal	r12
80002db6:	00 00       	add	r0,r0
80002db8:	00 00       	add	r0,r0
80002dba:	09 2e       	ld.uh	lr,r4++
80002dbc:	00 00       	add	r0,r0
80002dbe:	06 b8       	st.h	r3++,r8

80002dc0 <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
80002dc0:	eb cd 40 c0 	pushm	r6-r7,lr
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80002dc4:	49 08       	lddpc	r8,80002e04 <fat_cache_clusterlist_update_finish+0x44>
80002dc6:	11 88       	ld.ub	r8,r8[0x0]
80002dc8:	f0 08 00 28 	add	r8,r8,r8<<0x2
80002dcc:	48 f9       	lddpc	r9,80002e08 <fat_cache_clusterlist_update_finish+0x48>
80002dce:	f2 08 00 28 	add	r8,r9,r8<<0x2
80002dd2:	f0 ca ff f8 	sub	r10,r8,-8
80002dd6:	48 eb       	lddpc	r11,80002e0c <fat_cache_clusterlist_update_finish+0x4c>
80002dd8:	17 97       	ld.ub	r7,r11[0x1]
80002dda:	74 09       	ld.w	r9,r10[0x0]
80002ddc:	f2 07 0d 06 	divu	r6,r9,r7
80002de0:	0e 99       	mov	r9,r7
80002de2:	5c 59       	castu.b	r9
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
80002de4:	17 8b       	ld.ub	r11,r11[0x0]
80002de6:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
80002de8:	74 0b       	ld.w	r11,r10[0x0]
80002dea:	12 1b       	sub	r11,r9
80002dec:	95 0b       	st.w	r10[0x0],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
80002dee:	48 9a       	lddpc	r10,80002e10 <fat_cache_clusterlist_update_finish+0x50>
80002df0:	74 0b       	ld.w	r11,r10[0x0]
80002df2:	12 1b       	sub	r11,r9
80002df4:	91 3b       	st.w	r8[0xc],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
80002df6:	74 1a       	ld.w	r10,r10[0x4]
80002df8:	14 09       	add	r9,r10
80002dfa:	91 49       	st.w	r8[0x10],r9

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
80002dfc:	f0 1f 00 06 	mcall	80002e14 <fat_cache_clusterlist_update_finish+0x54>
}
80002e00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002e04:	00 00       	add	r0,r0
80002e06:	09 2e       	ld.uh	lr,r4++
80002e08:	00 00       	add	r0,r0
80002e0a:	06 b8       	st.h	r3++,r8
80002e0c:	00 00       	add	r0,r0
80002e0e:	08 e0       	st.h	--r4,r0
80002e10:	00 00       	add	r0,r0
80002e12:	09 84       	ld.ub	r4,r4[0x0]
80002e14:	80 00       	ld.sh	r0,r0[0x0]
80002e16:	2d 58       	sub	r8,-43

80002e18 <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
80002e18:	eb cd 40 c0 	pushm	r6-r7,lr
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
80002e1c:	4c 18       	lddpc	r8,80002f20 <fat_cache_clusterlist_update_read+0x108>
80002e1e:	11 89       	ld.ub	r9,r8[0x0]
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80002e20:	4c 18       	lddpc	r8,80002f24 <fat_cache_clusterlist_update_read+0x10c>
80002e22:	70 0a       	ld.w	r10,r8[0x0]
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80002e24:	4c 18       	lddpc	r8,80002f28 <fat_cache_clusterlist_update_read+0x110>
80002e26:	70 1b       	ld.w	r11,r8[0x4]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80002e28:	4c 18       	lddpc	r8,80002f2c <fat_cache_clusterlist_update_read+0x114>
80002e2a:	11 88       	ld.ub	r8,r8[0x0]
80002e2c:	f8 08 18 00 	cp.b	r8,r12
80002e30:	c1 11       	brne	80002e52 <fat_cache_clusterlist_update_read+0x3a>
80002e32:	4b f8       	lddpc	r8,80002f2c <fat_cache_clusterlist_update_read+0x114>
80002e34:	11 a8       	ld.ub	r8,r8[0x2]
80002e36:	f2 08 18 00 	cp.b	r8,r9
80002e3a:	c0 c1       	brne	80002e52 <fat_cache_clusterlist_update_read+0x3a>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80002e3c:	4b c8       	lddpc	r8,80002f2c <fat_cache_clusterlist_update_read+0x114>
80002e3e:	70 18       	ld.w	r8,r8[0x4]
80002e40:	14 38       	cp.w	r8,r10
80002e42:	c0 81       	brne	80002e52 <fat_cache_clusterlist_update_read+0x3a>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80002e44:	4b a8       	lddpc	r8,80002f2c <fat_cache_clusterlist_update_read+0x114>
80002e46:	70 28       	ld.w	r8,r8[0x8]
80002e48:	10 3b       	cp.w	r11,r8
80002e4a:	c0 43       	brcs	80002e52 <fat_cache_clusterlist_update_read+0x3a>
80002e4c:	30 0a       	mov	r10,0
80002e4e:	14 99       	mov	r9,r10
80002e50:	c1 88       	rjmp	80002e80 <fat_cache_clusterlist_update_read+0x68>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80002e52:	4b 78       	lddpc	r8,80002f2c <fat_cache_clusterlist_update_read+0x114>
80002e54:	f1 38 00 14 	ld.ub	r8,r8[20]
80002e58:	f8 08 18 00 	cp.b	r8,r12
80002e5c:	c5 e1       	brne	80002f18 <fat_cache_clusterlist_update_read+0x100>
80002e5e:	4b 48       	lddpc	r8,80002f2c <fat_cache_clusterlist_update_read+0x114>
80002e60:	f1 38 00 16 	ld.ub	r8,r8[22]
80002e64:	f2 08 18 00 	cp.b	r8,r9
80002e68:	c5 81       	brne	80002f18 <fat_cache_clusterlist_update_read+0x100>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80002e6a:	4b 18       	lddpc	r8,80002f2c <fat_cache_clusterlist_update_read+0x114>
80002e6c:	70 68       	ld.w	r8,r8[0x18]
80002e6e:	14 38       	cp.w	r8,r10
80002e70:	c5 41       	brne	80002f18 <fat_cache_clusterlist_update_read+0x100>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80002e72:	4a f8       	lddpc	r8,80002f2c <fat_cache_clusterlist_update_read+0x114>
80002e74:	70 78       	ld.w	r8,r8[0x1c]
80002e76:	16 38       	cp.w	r8,r11
80002e78:	e0 8b 00 50 	brhi	80002f18 <fat_cache_clusterlist_update_read+0x100>
80002e7c:	30 1a       	mov	r10,1
80002e7e:	14 99       	mov	r9,r10
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
80002e80:	f2 0e 15 02 	lsl	lr,r9,0x2
80002e84:	12 0e       	add	lr,r9
80002e86:	4a ac       	lddpc	r12,80002f2c <fat_cache_clusterlist_update_read+0x114>
80002e88:	f8 0e 00 2c 	add	r12,r12,lr<<0x2
80002e8c:	78 4c       	ld.w	r12,r12[0x10]
80002e8e:	f6 08 01 08 	sub	r8,r11,r8
80002e92:	10 3c       	cp.w	r12,r8
80002e94:	e0 88 00 16 	brls	80002ec0 <fat_cache_clusterlist_update_read+0xa8>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80002e98:	4a 4b       	lddpc	r11,80002f28 <fat_cache_clusterlist_update_read+0x110>
80002e9a:	f2 0e 15 02 	lsl	lr,r9,0x2
80002e9e:	fc 09 00 09 	add	r9,lr,r9
80002ea2:	4a 3e       	lddpc	lr,80002f2c <fat_cache_clusterlist_update_read+0x114>
80002ea4:	fc 09 00 29 	add	r9,lr,r9<<0x2
80002ea8:	72 39       	ld.w	r9,r9[0xc]
80002eaa:	f0 09 00 09 	add	r9,r8,r9
80002eae:	97 09       	st.w	r11[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
80002eb0:	10 1c       	sub	r12,r8
80002eb2:	97 1c       	st.w	r11[0x4],r12
                  fs_g_u8_current_cache = u8_i;
80002eb4:	49 f8       	lddpc	r8,80002f30 <fat_cache_clusterlist_update_read+0x118>
80002eb6:	b0 8a       	st.b	r8[0x0],r10
                  fat_cache_clusterlist_update_select();
80002eb8:	f0 1f 00 1f 	mcall	80002f34 <fat_cache_clusterlist_update_read+0x11c>
80002ebc:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
                  return true;   // the segment is in cluster list cache
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the resultat in this cache
                  fs_g_u8_current_cache = u8_i;
80002ec0:	49 c8       	lddpc	r8,80002f30 <fat_cache_clusterlist_update_read+0x118>
80002ec2:	b0 8a       	st.b	r8[0x0],r10
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // unvalid cache
80002ec4:	f2 08 15 02 	lsl	r8,r9,0x2
80002ec8:	f0 09 00 09 	add	r9,r8,r9
80002ecc:	49 88       	lddpc	r8,80002f2c <fat_cache_clusterlist_update_read+0x114>
80002ece:	f0 09 00 28 	add	r8,r8,r9<<0x2
80002ed2:	3f f9       	mov	r9,-1
80002ed4:	b0 a9       	st.b	r8[0x2],r9
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80002ed6:	70 4c       	ld.w	r12,r8[0x10]
80002ed8:	49 2a       	lddpc	r10,80002f20 <fat_cache_clusterlist_update_read+0x108>
80002eda:	15 99       	ld.ub	r9,r10[0x1]
80002edc:	70 3e       	ld.w	lr,r8[0xc]
80002ede:	f8 0e 00 0e 	add	lr,r12,lr
80002ee2:	20 1e       	sub	lr,1
80002ee4:	74 57       	ld.w	r7,r10[0x14]
80002ee6:	fc 07 01 07 	sub	r7,lr,r7
80002eea:	74 4a       	ld.w	r10,r10[0x10]
80002eec:	14 17       	sub	r7,r10
80002eee:	ee 09 0d 06 	divu	r6,r7,r9
80002ef2:	0c 97       	mov	r7,r6
80002ef4:	2f e7       	sub	r7,-2
80002ef6:	48 ca       	lddpc	r10,80002f24 <fat_cache_clusterlist_update_read+0x10c>
80002ef8:	95 07       	st.w	r10[0x0],r7
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80002efa:	2f 88       	sub	r8,-8
80002efc:	70 0a       	ld.w	r10,r8[0x0]
80002efe:	14 0c       	add	r12,r10
80002f00:	f8 c7 00 01 	sub	r7,r12,1
80002f04:	ee 09 0d 06 	divu	r6,r7,r9
80002f08:	ad 39       	mul	r9,r6
80002f0a:	48 8a       	lddpc	r10,80002f28 <fat_cache_clusterlist_update_read+0x110>
80002f0c:	f6 09 01 09 	sub	r9,r11,r9
80002f10:	95 19       	st.w	r10[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
80002f12:	91 0b       	st.w	r8[0x0],r11
80002f14:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
            }
         }
      }
   }
   // No found in cache then read FAT and store the resultat in cache
   fat_cache_clusterlist_update_start(b_for_file);
80002f18:	f0 1f 00 08 	mcall	80002f38 <fat_cache_clusterlist_update_read+0x120>
80002f1c:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002f20:	00 00       	add	r0,r0
80002f22:	08 e0       	st.h	--r4,r0
80002f24:	00 00       	add	r0,r0
80002f26:	09 7c       	ld.ub	r12,--r4
80002f28:	00 00       	add	r0,r0
80002f2a:	09 84       	ld.ub	r4,r4[0x0]
80002f2c:	00 00       	add	r0,r0
80002f2e:	06 b8       	st.h	r3++,r8
80002f30:	00 00       	add	r0,r0
80002f32:	09 2e       	ld.uh	lr,r4++
80002f34:	80 00       	ld.sh	r0,r0[0x0]
80002f36:	2d 58       	sub	r8,-43
80002f38:	80 00       	ld.sh	r0,r0[0x0]
80002f3a:	2d 18       	sub	r8,-47

80002f3c <fat_entry_is_dir>:
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
bool  fat_entry_is_dir(void)
{
   fs_g_status = FS_ERR_NO_DIR;
80002f3c:	30 d9       	mov	r9,13
80002f3e:	48 48       	lddpc	r8,80002f4c <fat_entry_is_dir+0x10>
80002f40:	b0 89       	st.b	r8[0x0],r9
80002f42:	48 48       	lddpc	r8,80002f50 <fat_entry_is_dir+0x14>
80002f44:	11 ac       	ld.ub	r12,r8[0x2]
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
}
80002f46:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80002f4a:	5e fc       	retal	r12
80002f4c:	00 00       	add	r0,r0
80002f4e:	09 2c       	ld.uh	r12,r4++
80002f50:	00 00       	add	r0,r0
80002f52:	06 a4       	st.w	r3++,r4

80002f54 <fat_clear_entry_info_and_ptr>:

//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
80002f54:	3f f9       	mov	r9,-1
80002f56:	48 c8       	lddpc	r8,80002f84 <fat_clear_entry_info_and_ptr+0x30>
80002f58:	b0 19       	st.h	r8[0x2],r9
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
80002f5a:	48 c8       	lddpc	r8,80002f88 <fat_clear_entry_info_and_ptr+0x34>
80002f5c:	f1 59 00 24 	st.h	r8[36],r9
   if( !fs_g_nav.b_mode_nav_single )
80002f60:	f1 39 00 2d 	ld.ub	r9,r8[45]
80002f64:	30 08       	mov	r8,0
80002f66:	f0 09 18 00 	cp.b	r9,r8
80002f6a:	c0 51       	brne	80002f74 <fat_clear_entry_info_and_ptr+0x20>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
80002f6c:	10 99       	mov	r9,r8
80002f6e:	48 78       	lddpc	r8,80002f88 <fat_clear_entry_info_and_ptr+0x34>
80002f70:	f1 69 00 2c 	st.b	r8[44],r9
   }
   fs_g_nav_entry.u8_attr     = 0;
80002f74:	48 68       	lddpc	r8,80002f8c <fat_clear_entry_info_and_ptr+0x38>
80002f76:	30 09       	mov	r9,0
80002f78:	b0 a9       	st.b	r8[0x2],r9
   fs_g_nav_entry.u32_cluster = 0;
80002f7a:	30 0a       	mov	r10,0
80002f7c:	91 1a       	st.w	r8[0x4],r10
   fs_g_nav_entry.u32_size    = 0;
80002f7e:	91 2a       	st.w	r8[0x8],r10
   Fat_file_close();
80002f80:	b0 89       	st.b	r8[0x0],r9
}
80002f82:	5e fc       	retal	r12
80002f84:	00 00       	add	r0,r0
80002f86:	09 28       	ld.uh	r8,r4++
80002f88:	00 00       	add	r0,r0
80002f8a:	08 e0       	st.h	--r4,r0
80002f8c:	00 00       	add	r0,r0
80002f8e:	06 a4       	st.w	r3++,r4

80002f90 <fat_check_eof_name>:
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
80002f90:	30 08       	mov	r8,0
80002f92:	f0 0c 19 00 	cp.h	r12,r8
80002f96:	5f 0a       	sreq	r10
80002f98:	35 c9       	mov	r9,92
80002f9a:	f2 0c 19 00 	cp.h	r12,r9
80002f9e:	5f 09       	sreq	r9
80002fa0:	f5 e9 10 09 	or	r9,r10,r9
80002fa4:	f0 09 18 00 	cp.b	r9,r8
80002fa8:	c0 20       	breq	80002fac <fat_check_eof_name+0x1c>
80002faa:	5e ff       	retal	1
80002fac:	32 f8       	mov	r8,47
80002fae:	f0 0c 19 00 	cp.h	r12,r8
80002fb2:	5f 0c       	sreq	r12
}
80002fb4:	5e fc       	retal	r12
80002fb6:	d7 03       	nop

80002fb8 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
80002fb8:	48 48       	lddpc	r8,80002fc8 <fat_get_ptr_entry+0x10>
80002fba:	90 98       	ld.uh	r8,r8[0x2]
80002fbc:	a5 78       	lsl	r8,0x5
80002fbe:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
}
80002fc2:	48 3c       	lddpc	r12,80002fcc <fat_get_ptr_entry+0x14>
80002fc4:	10 0c       	add	r12,r8
80002fc6:	5e fc       	retal	r12
80002fc8:	00 00       	add	r0,r0
80002fca:	09 28       	ld.uh	r8,r4++
80002fcc:	00 00       	add	r0,r0
80002fce:	06 e0       	st.h	--r3,r0

80002fd0 <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case )
{
80002fd0:	d4 31       	pushm	r0-r7,lr
80002fd2:	20 3d       	sub	sp,12
80002fd4:	18 97       	mov	r7,r12
80002fd6:	16 94       	mov	r4,r11
80002fd8:	14 96       	mov	r6,r10
80002fda:	50 09       	stdsp	sp[0x0],r9
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
80002fdc:	f0 1f 00 5e 	mcall	80003154 <fat_entry_longname+0x184>

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
80002fe0:	19 88       	ld.ub	r8,r12[0x0]
80002fe2:	30 09       	mov	r9,0
80002fe4:	f2 08 18 00 	cp.b	r8,r9
80002fe8:	5f 0b       	sreq	r11
80002fea:	3e 5a       	mov	r10,-27
80002fec:	f4 08 18 00 	cp.b	r8,r10
80002ff0:	5f 0a       	sreq	r10
80002ff2:	f7 ea 10 0a 	or	r10,r11,r10
80002ff6:	f2 0a 18 00 	cp.b	r10,r9
80002ffa:	c0 71       	brne	80003008 <fat_entry_longname+0x38>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
80002ffc:	f9 3a 00 0b 	ld.ub	r10,r12[11]
80003000:	30 f9       	mov	r9,15
80003002:	f2 0a 18 00 	cp.b	r10,r9
80003006:	c0 60       	breq	80003012 <fat_entry_longname+0x42>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80003008:	30 b9       	mov	r9,11
8000300a:	4d 48       	lddpc	r8,80003158 <fat_entry_longname+0x188>
8000300c:	b0 89       	st.b	r8[0x0],r9
8000300e:	30 0c       	mov	r12,0
      return false;
80003010:	c9 c8       	rjmp	80003148 <fat_entry_longname+0x178>
   }

   if( g_b_string_length )
80003012:	4d 39       	lddpc	r9,8000315c <fat_entry_longname+0x18c>
80003014:	13 8a       	ld.ub	r10,r9[0x0]
80003016:	30 09       	mov	r9,0
80003018:	f2 0a 18 00 	cp.b	r10,r9
8000301c:	c0 90       	breq	8000302e <fat_entry_longname+0x5e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
8000301e:	e2 18 00 40 	andl	r8,0x40,COH
80003022:	c0 61       	brne	8000302e <fat_entry_longname+0x5e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
80003024:	31 09       	mov	r9,16
80003026:	4c d8       	lddpc	r8,80003158 <fat_entry_longname+0x188>
80003028:	b0 89       	st.b	r8[0x0],r9
8000302a:	30 0c       	mov	r12,0
         return false;                          // Other entry long name
8000302c:	c8 e8       	rjmp	80003148 <fat_entry_longname+0x178>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
8000302e:	2f fc       	sub	r12,-1
80003030:	30 08       	mov	r8,0

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
80003032:	fa ca ff f6 	sub	r10,sp,-10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80003036:	30 0b       	mov	r11,0
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
80003038:	4c 95       	lddpc	r5,8000315c <fat_entry_longname+0x18c>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
8000303a:	20 14       	sub	r4,1
8000303c:	50 14       	stdsp	sp[0x4],r4
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
8000303e:	30 01       	mov	r1,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80003040:	30 44       	mov	r4,4
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
80003042:	19 89       	ld.ub	r9,r12[0x0]
80003044:	b4 99       	st.b	r10[0x1],r9
      MSB(u16_unicode_entry) = ptr_entry[1];
80003046:	19 99       	ld.ub	r9,r12[0x1]
80003048:	b4 89       	st.b	r10[0x0],r9
      if( FS_NAME_GET == b_mode )
8000304a:	58 06       	cp.w	r6,0
8000304c:	c0 f0       	breq	8000306a <fat_entry_longname+0x9a>
      {
         if( !g_b_string_length )
8000304e:	0b 89       	ld.ub	r9,r5[0x0]
80003050:	f6 09 18 00 	cp.b	r9,r11
80003054:	c3 91       	brne	800030c6 <fat_entry_longname+0xf6>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
80003056:	40 1e       	lddsp	lr,sp[0x4]
80003058:	1c 38       	cp.w	r8,lr
8000305a:	c0 55       	brlt	80003064 <fat_entry_longname+0x94>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
8000305c:	30 08       	mov	r8,0
8000305e:	ae 88       	st.b	r7[0x0],r8
80003060:	30 1c       	mov	r12,1
               }
               return true;                     // the buffer is full
80003062:	c7 38       	rjmp	80003148 <fat_entry_longname+0x178>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
80003064:	9a 59       	ld.sh	r9,sp[0xa]
80003066:	ae 89       	st.b	r7[0x0],r9
80003068:	c2 f8       	rjmp	800030c6 <fat_entry_longname+0xf6>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
8000306a:	0f 89       	ld.ub	r9,r7[0x0]
         }
         // Check the name
         if( '*' == u16_unicode_szname )
8000306c:	32 a3       	mov	r3,42
8000306e:	e6 09 19 00 	cp.h	r9,r3
80003072:	c6 a0       	breq	80003146 <fat_entry_longname+0x176>
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80003074:	9a 5e       	ld.sh	lr,sp[0xa]
80003076:	58 0e       	cp.w	lr,0
80003078:	c0 e1       	brne	80003094 <fat_entry_longname+0xc4>
8000307a:	35 c0       	mov	r0,92
8000307c:	e0 09 19 00 	cp.h	r9,r0
80003080:	5f 12       	srne	r2
80003082:	32 f3       	mov	r3,47
80003084:	e6 09 19 00 	cp.h	r9,r3
80003088:	5f 13       	srne	r3
8000308a:	e5 e3 00 03 	and	r3,r2,r3
8000308e:	f6 03 18 00 	cp.b	r3,r11
80003092:	c1 e0       	breq	800030ce <fat_entry_longname+0xfe>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
80003094:	e7 d9 c0 10 	bfextu	r3,r9,0x0,0x10
80003098:	e5 de c0 10 	bfextu	r2,lr,0x0,0x10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
8000309c:	e4 c0 ff e0 	sub	r0,r2,-32
800030a0:	00 33       	cp.w	r3,r0
800030a2:	c0 41       	brne	800030aa <fat_entry_longname+0xda>
800030a4:	40 00       	lddsp	r0,sp[0x0]
800030a6:	58 00       	cp.w	r0,0
800030a8:	c0 f0       	breq	800030c6 <fat_entry_longname+0xf6>
800030aa:	22 02       	sub	r2,32
800030ac:	04 33       	cp.w	r3,r2
800030ae:	c0 41       	brne	800030b6 <fat_entry_longname+0xe6>
800030b0:	40 03       	lddsp	r3,sp[0x0]
800030b2:	58 03       	cp.w	r3,0
800030b4:	c0 90       	breq	800030c6 <fat_entry_longname+0xf6>
800030b6:	fc 09 19 00 	cp.h	r9,lr
800030ba:	c0 60       	breq	800030c6 <fat_entry_longname+0xf6>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
800030bc:	31 69       	mov	r9,22
800030be:	4a 78       	lddpc	r8,80003158 <fat_entry_longname+0x188>
800030c0:	b0 89       	st.b	r8[0x0],r9
800030c2:	30 0c       	mov	r12,0
           return false;
800030c4:	c4 28       	rjmp	80003148 <fat_entry_longname+0x178>
         }
      }

      if( 0 == u16_unicode_entry)
800030c6:	9a 59       	ld.sh	r9,sp[0xa]
800030c8:	e2 09 19 00 	cp.h	r9,r1
800030cc:	c0 b1       	brne	800030e2 <fat_entry_longname+0x112>
      {
         if( g_b_string_length )
800030ce:	4a 49       	lddpc	r9,8000315c <fat_entry_longname+0x18c>
800030d0:	13 8a       	ld.ub	r10,r9[0x0]
800030d2:	30 09       	mov	r9,0
800030d4:	f2 0a 18 00 	cp.b	r10,r9
800030d8:	c3 70       	breq	80003146 <fat_entry_longname+0x176>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
800030da:	2f f8       	sub	r8,-1
800030dc:	ae 08       	st.h	r7[0x0],r8
800030de:	30 1c       	mov	r12,1
800030e0:	c3 48       	rjmp	80003148 <fat_entry_longname+0x178>
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
800030e2:	e8 08 18 00 	cp.b	r8,r4
800030e6:	c0 31       	brne	800030ec <fat_entry_longname+0x11c>
         ptr_entry += 3;                        // Go to second character
800030e8:	2f dc       	sub	r12,-3
800030ea:	c2 58       	rjmp	80003134 <fat_entry_longname+0x164>

      if( 10 == u8_pos_name )
800030ec:	30 a9       	mov	r9,10
800030ee:	f2 08 18 00 	cp.b	r8,r9
800030f2:	c0 31       	brne	800030f8 <fat_entry_longname+0x128>
         ptr_entry += 2;                        // Go to third character
800030f4:	2f ec       	sub	r12,-2
800030f6:	c1 f8       	rjmp	80003134 <fat_entry_longname+0x164>

      if( 12 == u8_pos_name )
800030f8:	30 c9       	mov	r9,12
800030fa:	f2 08 18 00 	cp.b	r8,r9
800030fe:	c1 b1       	brne	80003134 <fat_entry_longname+0x164>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
80003100:	f9 38 ff e2 	ld.ub	r8,r12[-30]
80003104:	e2 18 00 40 	andl	r8,0x40,COH
80003108:	c0 61       	brne	80003114 <fat_entry_longname+0x144>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
8000310a:	31 09       	mov	r9,16
8000310c:	49 38       	lddpc	r8,80003158 <fat_entry_longname+0x188>
8000310e:	b0 89       	st.b	r8[0x0],r9
80003110:	30 0c       	mov	r12,0
            return false;                       // Other long name entry is present
80003112:	c1 b8       	rjmp	80003148 <fat_entry_longname+0x178>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
80003114:	58 06       	cp.w	r6,0
80003116:	c0 b0       	breq	8000312c <fat_entry_longname+0x15c>
80003118:	49 18       	lddpc	r8,8000315c <fat_entry_longname+0x18c>
8000311a:	11 89       	ld.ub	r9,r8[0x0]
8000311c:	30 08       	mov	r8,0
8000311e:	f0 09 18 00 	cp.b	r9,r8
80003122:	c1 50       	breq	8000314c <fat_entry_longname+0x17c>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
80003124:	30 e8       	mov	r8,14
80003126:	ae 08       	st.h	r7[0x0],r8
80003128:	30 1c       	mov	r12,1
               return true;
8000312a:	c0 f8       	rjmp	80003148 <fat_entry_longname+0x178>
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
               }
               return fat_check_eof_name(u16_unicode_szname);
8000312c:	0f 9c       	ld.ub	r12,r7[0x1]
8000312e:	f0 1f 00 0d 	mcall	80003160 <fat_entry_longname+0x190>
80003132:	c0 b8       	rjmp	80003148 <fat_entry_longname+0x178>
            }
         }
      }

      if( !g_b_string_length )
80003134:	0b 89       	ld.ub	r9,r5[0x0]
80003136:	f6 09 18 00 	cp.b	r9,r11
8000313a:	c0 21       	brne	8000313e <fat_entry_longname+0x16e>
      {
         sz_name += (Is_unicode? 2 : 1 );
8000313c:	2f f7       	sub	r7,-1
      }
      u8_pos_name++;
8000313e:	2f f8       	sub	r8,-1
80003140:	5c 58       	castu.b	r8
      ptr_entry+=2;
80003142:	2f ec       	sub	r12,-2
   }
80003144:	c7 fb       	rjmp	80003042 <fat_entry_longname+0x72>
80003146:	30 1c       	mov	r12,1
}
80003148:	2f dd       	sub	sp,-12
8000314a:	d8 32       	popm	r0-r7,pc
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
8000314c:	30 08       	mov	r8,0
8000314e:	ae 98       	st.b	r7[0x1],r8
80003150:	30 1c       	mov	r12,1
               }
               return true;
80003152:	cf bb       	rjmp	80003148 <fat_entry_longname+0x178>
80003154:	80 00       	ld.sh	r0,r0[0x0]
80003156:	2f b8       	sub	r8,-5
80003158:	00 00       	add	r0,r0
8000315a:	09 2c       	ld.uh	r12,r4++
8000315c:	00 00       	add	r0,r0
8000315e:	09 2d       	ld.uh	sp,r4++
80003160:	80 00       	ld.sh	r0,r0[0x0]
80003162:	2f 90       	sub	r0,-7

80003164 <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode )
{
80003164:	d4 31       	pushm	r0-r7,lr
80003166:	20 2d       	sub	sp,8
80003168:	18 97       	mov	r7,r12
8000316a:	50 1b       	stdsp	sp[0x4],r11
8000316c:	14 96       	mov	r6,r10
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
8000316e:	31 69       	mov	r9,22
80003170:	4b c8       	lddpc	r8,80003260 <fat_entry_shortname+0xfc>
80003172:	b0 89       	st.b	r8[0x0],r9

   u8_pos_name = 0;
   u8_pos_entry = 0;
   ptr_entry = fat_get_ptr_entry();
80003174:	f0 1f 00 3c 	mcall	80003264 <fat_entry_shortname+0x100>
80003178:	30 08       	mov	r8,0
8000317a:	10 9a       	mov	r10,r8
8000317c:	30 1b       	mov	r11,1
8000317e:	50 0b       	stdsp	sp[0x0],r11

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80003180:	30 be       	mov	lr,11
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80003182:	10 93       	mov	r3,r8
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80003184:	30 85       	mov	r5,8
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80003186:	32 04       	mov	r4,32
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
80003188:	32 a2       	mov	r2,42
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
8000318a:	fc 08 18 00 	cp.b	r8,lr
8000318e:	c1 90       	breq	800031c0 <fat_entry_shortname+0x5c>
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
80003190:	f8 08 07 09 	ld.ub	r9,r12[r8]
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character no writed
80003194:	ea 08 18 00 	cp.b	r8,r5
80003198:	c0 41       	brne	800031a0 <fat_entry_shortname+0x3c>
8000319a:	40 01       	lddsp	r1,sp[0x0]
8000319c:	58 01       	cp.w	r1,0
8000319e:	c0 81       	brne	800031ae <fat_entry_shortname+0x4a>
800031a0:	e8 09 18 00 	cp.b	r9,r4
800031a4:	c0 f1       	brne	800031c2 <fat_entry_shortname+0x5e>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
800031a6:	ea 08 18 00 	cp.b	r8,r5
800031aa:	e0 8b 00 0b 	brhi	800031c0 <fat_entry_shortname+0x5c>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
800031ae:	f9 39 00 08 	ld.ub	r9,r12[8]
800031b2:	e8 09 18 00 	cp.b	r9,r4
800031b6:	c0 50       	breq	800031c0 <fat_entry_shortname+0x5c>
800031b8:	30 78       	mov	r8,7
800031ba:	32 e9       	mov	r9,46
800031bc:	50 03       	stdsp	sp[0x0],r3
800031be:	c0 28       	rjmp	800031c2 <fat_entry_shortname+0x5e>
800031c0:	06 99       	mov	r9,r3
               u8_entry_char = 0;                                    // end of name
            }
         }
      }

      if( FS_NAME_GET == b_mode )
800031c2:	58 06       	cp.w	r6,0
800031c4:	c1 80       	breq	800031f4 <fat_entry_shortname+0x90>
      {
         if( !g_b_string_length )
800031c6:	4a 9b       	lddpc	r11,80003268 <fat_entry_shortname+0x104>
800031c8:	17 81       	ld.ub	r1,r11[0x0]
800031ca:	30 0b       	mov	r11,0
800031cc:	f6 01 18 00 	cp.b	r1,r11
800031d0:	c2 c1       	brne	80003228 <fat_entry_shortname+0xc4>
         {
            if(u8_pos_name >= (u8_size_max-1))
800031d2:	40 1b       	lddsp	r11,sp[0x4]
800031d4:	20 1b       	sub	r11,1
800031d6:	16 3a       	cp.w	r10,r11
800031d8:	c0 35       	brlt	800031de <fat_entry_shortname+0x7a>
800031da:	06 99       	mov	r9,r3
800031dc:	c0 a8       	rjmp	800031f0 <fat_entry_shortname+0x8c>
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
800031de:	f2 c1 00 41 	sub	r1,r9,65
800031e2:	31 9b       	mov	r11,25
800031e4:	f6 01 18 00 	cp.b	r1,r11
800031e8:	e0 8b 00 04 	brhi	800031f0 <fat_entry_shortname+0x8c>
               u8_entry_char += ('a'-'A');                           // display short name in down case
800031ec:	2e 09       	sub	r9,-32
800031ee:	5c 59       	castu.b	r9

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
800031f0:	ae 89       	st.b	r7[0x0],r9
800031f2:	c1 b8       	rjmp	80003228 <fat_entry_shortname+0xc4>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
800031f4:	0f 8b       	ld.ub	r11,r7[0x0]
         }
         if ('*' == u8_szname_char)
800031f6:	e4 0b 18 00 	cp.b	r11,r2
800031fa:	c2 f0       	breq	80003258 <fat_entry_shortname+0xf4>
         {  // end of filter name which authorise all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
800031fc:	58 09       	cp.w	r9,0
800031fe:	c0 c1       	brne	80003216 <fat_entry_shortname+0xb2>
80003200:	35 c1       	mov	r1,92
80003202:	e2 0b 18 00 	cp.b	r11,r1
80003206:	5f 10       	srne	r0
80003208:	32 f1       	mov	r1,47
8000320a:	e2 0b 18 00 	cp.b	r11,r1
8000320e:	5f 11       	srne	r1
80003210:	e1 e1 00 01 	and	r1,r0,r1
80003214:	c0 c0       	breq	8000322c <fat_entry_shortname+0xc8>
         {
            if((u8_szname_char != u8_entry_char)
80003216:	f2 0b 18 00 	cp.b	r11,r9
8000321a:	c0 70       	breq	80003228 <fat_entry_shortname+0xc4>
8000321c:	f2 c1 ff e0 	sub	r1,r9,-32
80003220:	02 3b       	cp.w	r11,r1
80003222:	c0 30       	breq	80003228 <fat_entry_shortname+0xc4>
80003224:	30 0c       	mov	r12,0
80003226:	c1 a8       	rjmp	8000325a <fat_entry_shortname+0xf6>
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
80003228:	58 09       	cp.w	r9,0
8000322a:	c0 b1       	brne	80003240 <fat_entry_shortname+0xdc>
      {
         if( g_b_string_length )
8000322c:	48 f8       	lddpc	r8,80003268 <fat_entry_shortname+0x104>
8000322e:	11 89       	ld.ub	r9,r8[0x0]
80003230:	30 08       	mov	r8,0
80003232:	f0 09 18 00 	cp.b	r9,r8
80003236:	c1 10       	breq	80003258 <fat_entry_shortname+0xf4>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
80003238:	2f fa       	sub	r10,-1
8000323a:	ae 0a       	st.h	r7[0x0],r10
8000323c:	30 1c       	mov	r12,1
8000323e:	c0 e8       	rjmp	8000325a <fat_entry_shortname+0xf6>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
80003240:	48 a9       	lddpc	r9,80003268 <fat_entry_shortname+0x104>
80003242:	13 8b       	ld.ub	r11,r9[0x0]
80003244:	30 09       	mov	r9,0
80003246:	f2 0b 18 00 	cp.b	r11,r9
8000324a:	c0 21       	brne	8000324e <fat_entry_shortname+0xea>
      {
         sz_name += (Is_unicode? 2 : 1 );
8000324c:	2f f7       	sub	r7,-1
      }
      u8_pos_name++;
8000324e:	2f fa       	sub	r10,-1
80003250:	5c 5a       	castu.b	r10
      u8_pos_entry++;
80003252:	2f f8       	sub	r8,-1
80003254:	5c 58       	castu.b	r8
   }
80003256:	c9 ab       	rjmp	8000318a <fat_entry_shortname+0x26>
80003258:	30 1c       	mov	r12,1
}
8000325a:	2f ed       	sub	sp,-8
8000325c:	d8 32       	popm	r0-r7,pc
8000325e:	00 00       	add	r0,r0
80003260:	00 00       	add	r0,r0
80003262:	09 2c       	ld.uh	r12,r4++
80003264:	80 00       	ld.sh	r0,r0[0x0]
80003266:	2f b8       	sub	r8,-5
80003268:	00 00       	add	r0,r0
8000326a:	09 2d       	ld.uh	sp,r4++

8000326c <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
8000326c:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
8000326e:	f0 1f 00 10 	mcall	800032ac <fat_get_entry_info+0x40>

   // Get attribut
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];
80003272:	49 08       	lddpc	r8,800032b0 <fat_get_entry_info+0x44>
80003274:	f9 39 00 0b 	ld.ub	r9,r12[11]
80003278:	b0 a9       	st.b	r8[0x2],r9

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
8000327a:	f8 ca ff ec 	sub	r10,r12,-20
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
8000327e:	f0 c9 ff fc 	sub	r9,r8,-4
80003282:	15 8b       	ld.ub	r11,r10[0x0]
80003284:	b2 9b       	st.b	r9[0x1],r11
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80003286:	15 9a       	ld.ub	r10,r10[0x1]
80003288:	b2 8a       	st.b	r9[0x0],r10
   ptr_entry += (26-20);
8000328a:	f8 ca ff e6 	sub	r10,r12,-26
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
8000328e:	15 8b       	ld.ub	r11,r10[0x0]
80003290:	b2 bb       	st.b	r9[0x3],r11
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80003292:	15 9a       	ld.ub	r10,r10[0x1]
80003294:	b2 aa       	st.b	r9[0x2],r10

   // Get the size of file
   ptr_entry += (28-26);
80003296:	2e 4c       	sub	r12,-28
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80003298:	2f 88       	sub	r8,-8
8000329a:	19 89       	ld.ub	r9,r12[0x0]
8000329c:	b0 b9       	st.b	r8[0x3],r9
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
8000329e:	19 99       	ld.ub	r9,r12[0x1]
800032a0:	b0 a9       	st.b	r8[0x2],r9
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
800032a2:	19 a9       	ld.ub	r9,r12[0x2]
800032a4:	b0 99       	st.b	r8[0x1],r9
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
800032a6:	19 b9       	ld.ub	r9,r12[0x3]
800032a8:	b0 89       	st.b	r8[0x0],r9
}
800032aa:	d8 02       	popm	pc
800032ac:	80 00       	ld.sh	r0,r0[0x0]
800032ae:	2f b8       	sub	r8,-5
800032b0:	00 00       	add	r0,r0
800032b2:	06 a4       	st.w	r3++,r4

800032b4 <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_check( bool b_type )
{
800032b4:	eb cd 40 80 	pushm	r7,lr
800032b8:	18 97       	mov	r7,r12
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
800032ba:	f0 1f 00 14 	mcall	80003308 <fat_entry_check+0x54>

   u8_first_byte = u8_ptr_entry[0];
800032be:	19 88       	ld.ub	r8,r12[0x0]
   if ( FS_ENTRY_END == u8_first_byte )
800032c0:	58 08       	cp.w	r8,0
800032c2:	c0 61       	brne	800032ce <fat_entry_check+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
800032c4:	30 a9       	mov	r9,10
800032c6:	49 28       	lddpc	r8,8000330c <fat_entry_check+0x58>
800032c8:	b0 89       	st.b	r8[0x0],r9
800032ca:	30 07       	mov	r7,0
      return false;
800032cc:	c1 a8       	rjmp	80003300 <fat_entry_check+0x4c>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
800032ce:	30 ba       	mov	r10,11
800032d0:	48 f9       	lddpc	r9,8000330c <fat_entry_check+0x58>
800032d2:	b2 8a       	st.b	r9[0x0],r10
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
800032d4:	3e 59       	mov	r9,-27
800032d6:	f2 08 18 00 	cp.b	r8,r9
800032da:	c1 20       	breq	800032fe <fat_entry_check+0x4a>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
800032dc:	32 e9       	mov	r9,46
800032de:	f2 08 18 00 	cp.b	r8,r9
800032e2:	c0 e0       	breq	800032fe <fat_entry_check+0x4a>
   if ( ('.'  == u8_first_byte)
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."

   // Check attribut
   u8_attribut = u8_ptr_entry[11];
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
800032e4:	f9 38 00 0b 	ld.ub	r8,r12[11]
800032e8:	10 99       	mov	r9,r8
800032ea:	e2 19 00 08 	andl	r9,0x8,COH
800032ee:	c0 81       	brne	800032fe <fat_entry_check+0x4a>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
800032f0:	e2 18 00 10 	andl	r8,0x10,COH
800032f4:	c0 60       	breq	80003300 <fat_entry_check+0x4c>
   {
      return (FS_DIR == b_type);
800032f6:	ec 17 00 01 	eorl	r7,0x1
800032fa:	5c 57       	castu.b	r7
800032fc:	c0 28       	rjmp	80003300 <fat_entry_check+0x4c>
800032fe:	30 07       	mov	r7,0
   }else{
      return (FS_FILE == b_type);
   }
}
80003300:	0e 9c       	mov	r12,r7
80003302:	e3 cd 80 80 	ldm	sp++,r7,pc
80003306:	00 00       	add	r0,r0
80003308:	80 00       	ld.sh	r0,r0[0x0]
8000330a:	2f b8       	sub	r8,-5
8000330c:	00 00       	add	r0,r0
8000330e:	09 2c       	ld.uh	r12,r4++

80003310 <fat_cache_reset>:

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003310:	48 58       	lddpc	r8,80003324 <fat_cache_reset+0x14>
80003312:	3f f9       	mov	r9,-1
80003314:	b0 89       	st.b	r8[0x0],r9
   fs_g_sectorcache.u8_dirty              = false;
80003316:	30 09       	mov	r9,0
80003318:	f1 69 00 08 	st.b	r8[8],r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
8000331c:	3f f9       	mov	r9,-1
8000331e:	91 39       	st.w	r8[0xc],r9
}
80003320:	5e fc       	retal	r12
80003322:	00 00       	add	r0,r0
80003324:	00 00       	add	r0,r0
80003326:	09 64       	ld.uh	r4,--r4

80003328 <fat_check_nav_access_file>:

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
80003328:	49 88       	lddpc	r8,80003388 <fat_check_nav_access_file+0x60>
8000332a:	11 89       	ld.ub	r9,r8[0x0]
8000332c:	30 08       	mov	r8,0
8000332e:	f0 09 18 00 	cp.b	r9,r8
80003332:	c2 a0       	breq	80003386 <fat_check_nav_access_file+0x5e>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003334:	49 68       	lddpc	r8,8000338c <fat_check_nav_access_file+0x64>
80003336:	11 89       	ld.ub	r9,r8[0x0]
80003338:	49 68       	lddpc	r8,80003390 <fat_check_nav_access_file+0x68>
8000333a:	11 88       	ld.ub	r8,r8[0x0]
8000333c:	f0 09 18 00 	cp.b	r9,r8
80003340:	c2 31       	brne	80003386 <fat_check_nav_access_file+0x5e>
#if (FS_MULTI_PARTITION == true)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
80003342:	49 38       	lddpc	r8,8000338c <fat_check_nav_access_file+0x64>
80003344:	70 89       	ld.w	r9,r8[0x20]
80003346:	49 38       	lddpc	r8,80003390 <fat_check_nav_access_file+0x68>
80003348:	70 88       	ld.w	r8,r8[0x20]
8000334a:	10 39       	cp.w	r9,r8
8000334c:	c1 d1       	brne	80003386 <fat_check_nav_access_file+0x5e>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
8000334e:	49 28       	lddpc	r8,80003394 <fat_check_nav_access_file+0x6c>
80003350:	90 19       	ld.sh	r9,r8[0x2]
80003352:	48 e8       	lddpc	r8,80003388 <fat_check_nav_access_file+0x60>
80003354:	90 18       	ld.sh	r8,r8[0x2]
80003356:	f0 09 19 00 	cp.h	r9,r8
8000335a:	c1 61       	brne	80003386 <fat_check_nav_access_file+0x5e>
      {
         if( mode )
8000335c:	58 0c       	cp.w	r12,0
8000335e:	c0 b0       	breq	80003374 <fat_check_nav_access_file+0x4c>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
80003360:	48 e8       	lddpc	r8,80003398 <fat_check_nav_access_file+0x70>
80003362:	11 89       	ld.ub	r9,r8[0x0]
80003364:	30 08       	mov	r8,0
80003366:	f0 09 18 00 	cp.b	r9,r8
8000336a:	c0 e0       	breq	80003386 <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
8000336c:	32 89       	mov	r9,40
8000336e:	48 c8       	lddpc	r8,8000339c <fat_check_nav_access_file+0x74>
80003370:	b0 89       	st.b	r8[0x0],r9
80003372:	5e fd       	retal	0
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
80003374:	48 98       	lddpc	r8,80003398 <fat_check_nav_access_file+0x70>
80003376:	11 88       	ld.ub	r8,r8[0x0]
80003378:	e2 18 00 02 	andl	r8,0x2,COH
8000337c:	c0 50       	breq	80003386 <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
8000337e:	32 99       	mov	r9,41
80003380:	48 78       	lddpc	r8,8000339c <fat_check_nav_access_file+0x74>
80003382:	b0 89       	st.b	r8[0x0],r9
80003384:	5e fd       	retal	0
               return false;  // File opened in write mode then read access not possibled
80003386:	5e ff       	retal	1
80003388:	00 00       	add	r0,r0
8000338a:	09 24       	ld.uh	r4,r4++
8000338c:	00 00       	add	r0,r0
8000338e:	08 e0       	st.h	--r4,r0
80003390:	00 00       	add	r0,r0
80003392:	09 30       	ld.ub	r0,r4++
80003394:	00 00       	add	r0,r0
80003396:	09 28       	ld.uh	r8,r4++
80003398:	00 00       	add	r0,r0
8000339a:	09 14       	ld.sh	r4,r4++
8000339c:	00 00       	add	r0,r0
8000339e:	09 2c       	ld.uh	r12,r4++

800033a0 <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
800033a0:	d4 21       	pushm	r4-r7,lr
800033a2:	20 dd       	sub	sp,52
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
800033a4:	58 0c       	cp.w	r12,0
800033a6:	c5 a0       	breq	8000345a <fat_invert_nav+0xba>
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
800033a8:	1a 97       	mov	r7,sp
800033aa:	4a e8       	lddpc	r8,80003460 <fat_invert_nav+0xc0>
800033ac:	f0 ea 00 00 	ld.d	r10,r8[0]
800033b0:	fa eb 00 00 	st.d	sp[0],r10
800033b4:	f0 ea 00 08 	ld.d	r10,r8[8]
800033b8:	fa eb 00 08 	st.d	sp[8],r10
800033bc:	f0 ea 00 10 	ld.d	r10,r8[16]
800033c0:	fa eb 00 10 	st.d	sp[16],r10
800033c4:	f0 ea 00 18 	ld.d	r10,r8[24]
800033c8:	fa eb 00 18 	st.d	sp[24],r10
800033cc:	f0 ea 00 20 	ld.d	r10,r8[32]
800033d0:	fa eb 00 20 	st.d	sp[32],r10
800033d4:	f0 ea 00 28 	ld.d	r10,r8[40]
800033d8:	fa eb 00 28 	st.d	sp[40],r10
800033dc:	70 c9       	ld.w	r9,r8[0x30]
800033de:	50 c9       	stdsp	sp[0x30],r9
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
800033e0:	f8 c6 00 01 	sub	r6,r12,1
800033e4:	5c 56       	castu.b	r6
800033e6:	ec 04 10 34 	mul	r4,r6,52
800033ea:	49 f9       	lddpc	r9,80003464 <fat_invert_nav+0xc4>
800033ec:	12 04       	add	r4,r9
800033ee:	33 45       	mov	r5,52
800033f0:	0a 9a       	mov	r10,r5
800033f2:	08 9b       	mov	r11,r4
800033f4:	10 9c       	mov	r12,r8
800033f6:	f0 1f 00 1d 	mcall	80003468 <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
800033fa:	0a 9a       	mov	r10,r5
800033fc:	1a 9b       	mov	r11,sp
800033fe:	08 9c       	mov	r12,r4
80003400:	f0 1f 00 1a 	mcall	80003468 <fat_invert_nav+0xc8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
80003404:	49 ac       	lddpc	r12,8000346c <fat_invert_nav+0xcc>
80003406:	f8 e8 00 00 	ld.d	r8,r12[0]
8000340a:	fa e9 00 00 	st.d	sp[0],r8
8000340e:	f8 e8 00 08 	ld.d	r8,r12[8]
80003412:	fa e9 00 08 	st.d	sp[8],r8
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
80003416:	ec 04 15 04 	lsl	r4,r6,0x4
8000341a:	49 68       	lddpc	r8,80003470 <fat_invert_nav+0xd0>
8000341c:	10 04       	add	r4,r8
8000341e:	31 05       	mov	r5,16
80003420:	0a 9a       	mov	r10,r5
80003422:	08 9b       	mov	r11,r4
80003424:	f0 1f 00 11 	mcall	80003468 <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
80003428:	0a 9a       	mov	r10,r5
8000342a:	1a 9b       	mov	r11,sp
8000342c:	08 9c       	mov	r12,r4
8000342e:	f0 1f 00 0f 	mcall	80003468 <fat_invert_nav+0xc8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
80003432:	49 14       	lddpc	r4,80003474 <fat_invert_nav+0xd4>
80003434:	30 45       	mov	r5,4
80003436:	0a 9a       	mov	r10,r5
80003438:	08 9b       	mov	r11,r4
8000343a:	1a 9c       	mov	r12,sp
8000343c:	f0 1f 00 0b 	mcall	80003468 <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
80003440:	48 e8       	lddpc	r8,80003478 <fat_invert_nav+0xd8>
80003442:	f0 06 00 26 	add	r6,r8,r6<<0x2
80003446:	0a 9a       	mov	r10,r5
80003448:	0c 9b       	mov	r11,r6
8000344a:	08 9c       	mov	r12,r4
8000344c:	f0 1f 00 07 	mcall	80003468 <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
80003450:	0a 9a       	mov	r10,r5
80003452:	1a 9b       	mov	r11,sp
80003454:	0c 9c       	mov	r12,r6
80003456:	f0 1f 00 05 	mcall	80003468 <fat_invert_nav+0xc8>
}
8000345a:	2f 3d       	sub	sp,-52
8000345c:	d8 22       	popm	r4-r7,pc
8000345e:	00 00       	add	r0,r0
80003460:	00 00       	add	r0,r0
80003462:	08 e0       	st.h	--r4,r0
80003464:	00 00       	add	r0,r0
80003466:	09 30       	ld.ub	r0,r4++
80003468:	80 00       	ld.sh	r0,r0[0x0]
8000346a:	76 b0       	ld.w	r0,r11[0x2c]
8000346c:	00 00       	add	r0,r0
8000346e:	06 a4       	st.w	r3++,r4
80003470:	00 00       	add	r0,r0
80003472:	09 14       	ld.sh	r4,r4++
80003474:	00 00       	add	r0,r0
80003476:	09 28       	ld.uh	r8,r4++
80003478:	00 00       	add	r0,r0
8000347a:	09 24       	ld.uh	r4,r4++

8000347c <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
8000347c:	d4 01       	pushm	lr
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
8000347e:	49 08       	lddpc	r8,800034bc <fat_cache_flush+0x40>
80003480:	f1 39 00 08 	ld.ub	r9,r8[8]
80003484:	30 18       	mov	r8,1
80003486:	f0 09 18 00 	cp.b	r9,r8
8000348a:	c1 81       	brne	800034ba <fat_cache_flush+0x3e>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
8000348c:	48 c8       	lddpc	r8,800034bc <fat_cache_flush+0x40>
8000348e:	30 09       	mov	r9,0
80003490:	f1 69 00 08 	st.b	r8[8],r9
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
80003494:	11 8c       	ld.ub	r12,r8[0x0]
80003496:	f0 1f 00 0b 	mcall	800034c0 <fat_cache_flush+0x44>
8000349a:	c0 50       	breq	800034a4 <fat_cache_flush+0x28>
      {
         fs_g_status = FS_LUN_WP;
8000349c:	31 49       	mov	r9,20
8000349e:	48 a8       	lddpc	r8,800034c4 <fat_cache_flush+0x48>
800034a0:	b0 89       	st.b	r8[0x0],r9
800034a2:	d8 0a       	popm	pc,r12=0
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
800034a4:	48 68       	lddpc	r8,800034bc <fat_cache_flush+0x40>
800034a6:	48 9a       	lddpc	r10,800034c8 <fat_cache_flush+0x4c>
800034a8:	70 1b       	ld.w	r11,r8[0x4]
800034aa:	11 8c       	ld.ub	r12,r8[0x0]
800034ac:	f0 1f 00 08 	mcall	800034cc <fat_cache_flush+0x50>
800034b0:	c0 50       	breq	800034ba <fat_cache_flush+0x3e>
      {
         fs_g_status = FS_ERR_HW;
800034b2:	30 19       	mov	r9,1
800034b4:	48 48       	lddpc	r8,800034c4 <fat_cache_flush+0x48>
800034b6:	b0 89       	st.b	r8[0x0],r9
800034b8:	d8 0a       	popm	pc,r12=0
         return false;
800034ba:	da 0a       	popm	pc,r12=1
800034bc:	00 00       	add	r0,r0
800034be:	09 64       	ld.uh	r4,--r4
800034c0:	80 00       	ld.sh	r0,r0[0x0]
800034c2:	6a b8       	ld.w	r8,r5[0x2c]
800034c4:	00 00       	add	r0,r0
800034c6:	09 2c       	ld.uh	r12,r4++
800034c8:	00 00       	add	r0,r0
800034ca:	06 e0       	st.h	--r3,r0
800034cc:	80 00       	ld.sh	r0,r0[0x0]
800034ce:	6a dc       	ld.w	r12,r5[0x34]

800034d0 <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
800034d0:	eb cd 40 80 	pushm	r7,lr
800034d4:	18 97       	mov	r7,r12
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
800034d6:	49 78       	lddpc	r8,80003530 <fat_cache_read_sector+0x60>
800034d8:	11 89       	ld.ub	r9,r8[0x0]
800034da:	49 78       	lddpc	r8,80003534 <fat_cache_read_sector+0x64>
800034dc:	11 88       	ld.ub	r8,r8[0x0]
800034de:	f0 09 18 00 	cp.b	r9,r8
800034e2:	c0 91       	brne	800034f4 <fat_cache_read_sector+0x24>
800034e4:	49 38       	lddpc	r8,80003530 <fat_cache_read_sector+0x60>
800034e6:	70 19       	ld.w	r9,r8[0x4]
800034e8:	49 48       	lddpc	r8,80003538 <fat_cache_read_sector+0x68>
800034ea:	70 08       	ld.w	r8,r8[0x0]
800034ec:	10 39       	cp.w	r9,r8
800034ee:	c0 31       	brne	800034f4 <fat_cache_read_sector+0x24>
800034f0:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      return true;
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
800034f4:	f0 1f 00 12 	mcall	8000353c <fat_cache_read_sector+0x6c>
800034f8:	c1 90       	breq	8000352a <fat_cache_read_sector+0x5a>
      return false;

   // Delete informations about the caches
   fat_cache_reset();
800034fa:	f0 1f 00 12 	mcall	80003540 <fat_cache_read_sector+0x70>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
800034fe:	48 f8       	lddpc	r8,80003538 <fat_cache_read_sector+0x68>
80003500:	70 0b       	ld.w	r11,r8[0x0]
80003502:	48 c8       	lddpc	r8,80003530 <fat_cache_read_sector+0x60>
80003504:	91 1b       	st.w	r8[0x4],r11
   if( b_load )
80003506:	58 07       	cp.w	r7,0
80003508:	c0 c0       	breq	80003520 <fat_cache_read_sector+0x50>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
8000350a:	48 fa       	lddpc	r10,80003544 <fat_cache_read_sector+0x74>
8000350c:	48 a8       	lddpc	r8,80003534 <fat_cache_read_sector+0x64>
8000350e:	11 8c       	ld.ub	r12,r8[0x0]
80003510:	f0 1f 00 0e 	mcall	80003548 <fat_cache_read_sector+0x78>
80003514:	c0 60       	breq	80003520 <fat_cache_read_sector+0x50>
      {
         fs_g_status = FS_ERR_HW;
80003516:	30 19       	mov	r9,1
80003518:	48 d8       	lddpc	r8,8000354c <fat_cache_read_sector+0x7c>
8000351a:	b0 89       	st.b	r8[0x0],r9
8000351c:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80003520:	48 58       	lddpc	r8,80003534 <fat_cache_read_sector+0x64>
80003522:	11 89       	ld.ub	r9,r8[0x0]
80003524:	48 38       	lddpc	r8,80003530 <fat_cache_read_sector+0x60>
80003526:	b0 89       	st.b	r8[0x0],r9
80003528:	30 1c       	mov	r12,1
   return true;
}
8000352a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000352e:	00 00       	add	r0,r0
80003530:	00 00       	add	r0,r0
80003532:	09 64       	ld.uh	r4,--r4
80003534:	00 00       	add	r0,r0
80003536:	08 e0       	st.h	--r4,r0
80003538:	00 00       	add	r0,r0
8000353a:	06 a0       	st.w	r3++,r0
8000353c:	80 00       	ld.sh	r0,r0[0x0]
8000353e:	34 7c       	mov	r12,71
80003540:	80 00       	ld.sh	r0,r0[0x0]
80003542:	33 10       	mov	r0,49
80003544:	00 00       	add	r0,r0
80003546:	06 e0       	st.h	--r3,r0
80003548:	80 00       	ld.sh	r0,r0[0x0]
8000354a:	6b 50       	ld.w	r0,r5[0x54]
8000354c:	00 00       	add	r0,r0
8000354e:	09 2c       	ld.uh	r12,r4++

80003550 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        readed cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster readed
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
80003550:	d4 01       	pushm	lr
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
80003552:	49 f8       	lddpc	r8,800035cc <fat_cluster_readnext+0x7c>
80003554:	11 89       	ld.ub	r9,r8[0x0]
80003556:	30 38       	mov	r8,3
80003558:	f0 09 18 00 	cp.b	r9,r8
8000355c:	c0 61       	brne	80003568 <fat_cluster_readnext+0x18>
   {
      fs_g_u16_pos_fat += 4;
8000355e:	49 d8       	lddpc	r8,800035d0 <fat_cluster_readnext+0x80>
80003560:	90 09       	ld.sh	r9,r8[0x0]
80003562:	2f c9       	sub	r9,-4
80003564:	b0 09       	st.h	r8[0x0],r9
80003566:	c0 58       	rjmp	80003570 <fat_cluster_readnext+0x20>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
80003568:	49 a8       	lddpc	r8,800035d0 <fat_cluster_readnext+0x80>
8000356a:	90 09       	ld.sh	r9,r8[0x0]
8000356c:	2f e9       	sub	r9,-2
8000356e:	b0 09       	st.h	r8[0x0],r9
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
80003570:	49 88       	lddpc	r8,800035d0 <fat_cluster_readnext+0x80>
80003572:	90 09       	ld.sh	r9,r8[0x0]
80003574:	e0 68 02 00 	mov	r8,512
80003578:	f0 09 19 00 	cp.h	r9,r8
8000357c:	c0 c1       	brne	80003594 <fat_cluster_readnext+0x44>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
8000357e:	30 09       	mov	r9,0
80003580:	49 48       	lddpc	r8,800035d0 <fat_cluster_readnext+0x80>
80003582:	b0 09       	st.h	r8[0x0],r9
      fs_gu32_addrsector++;
80003584:	49 48       	lddpc	r8,800035d4 <fat_cluster_readnext+0x84>
80003586:	70 09       	ld.w	r9,r8[0x0]
80003588:	2f f9       	sub	r9,-1
8000358a:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
8000358c:	30 1c       	mov	r12,1
8000358e:	f0 1f 00 13 	mcall	800035d8 <fat_cluster_readnext+0x88>
80003592:	c1 b0       	breq	800035c8 <fat_cluster_readnext+0x78>
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
80003594:	49 28       	lddpc	r8,800035dc <fat_cluster_readnext+0x8c>
80003596:	2f c8       	sub	r8,-4
80003598:	48 e9       	lddpc	r9,800035d0 <fat_cluster_readnext+0x80>
8000359a:	92 89       	ld.uh	r9,r9[0x0]
8000359c:	49 1a       	lddpc	r10,800035e0 <fat_cluster_readnext+0x90>
8000359e:	f4 09 07 0b 	ld.ub	r11,r10[r9]
800035a2:	b0 bb       	st.b	r8[0x3],r11
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
800035a4:	12 0a       	add	r10,r9
800035a6:	15 9a       	ld.ub	r10,r10[0x1]
800035a8:	b0 aa       	st.b	r8[0x2],r10

   if ( Is_fat32 )
800035aa:	48 9a       	lddpc	r10,800035cc <fat_cluster_readnext+0x7c>
800035ac:	15 8b       	ld.ub	r11,r10[0x0]
800035ae:	30 3a       	mov	r10,3
800035b0:	f4 0b 18 00 	cp.b	r11,r10
800035b4:	c0 20       	breq	800035b8 <fat_cluster_readnext+0x68>
800035b6:	da 0a       	popm	pc,r12=1
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
800035b8:	48 aa       	lddpc	r10,800035e0 <fat_cluster_readnext+0x90>
800035ba:	f4 09 00 09 	add	r9,r10,r9
800035be:	13 aa       	ld.ub	r10,r9[0x2]
800035c0:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
800035c2:	13 b9       	ld.ub	r9,r9[0x3]
800035c4:	b0 89       	st.b	r8[0x0],r9
800035c6:	30 1c       	mov	r12,1
   }
   return true;
}
800035c8:	d8 02       	popm	pc
800035ca:	00 00       	add	r0,r0
800035cc:	00 00       	add	r0,r0
800035ce:	09 28       	ld.uh	r8,r4++
800035d0:	00 00       	add	r0,r0
800035d2:	06 b4       	st.h	r3++,r4
800035d4:	00 00       	add	r0,r0
800035d6:	06 a0       	st.w	r3++,r0
800035d8:	80 00       	ld.sh	r0,r0[0x0]
800035da:	34 d0       	mov	r0,77
800035dc:	00 00       	add	r0,r0
800035de:	09 7c       	ld.ub	r12,--r4
800035e0:	00 00       	add	r0,r0
800035e2:	06 e0       	st.h	--r3,r0

800035e4 <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
bool  fat_cluster_val( bool b_mode )
{
800035e4:	d4 21       	pushm	r4-r7,lr
800035e6:	18 97       	mov	r7,r12
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
800035e8:	4c 88       	lddpc	r8,80003708 <fat_cluster_val+0x124>
800035ea:	11 88       	ld.ub	r8,r8[0x0]
800035ec:	30 39       	mov	r9,3
800035ee:	f2 08 18 00 	cp.b	r8,r9
800035f2:	c0 b1       	brne	80003608 <fat_cluster_val+0x24>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
800035f4:	4c 68       	lddpc	r8,8000370c <fat_cluster_val+0x128>
800035f6:	70 09       	ld.w	r9,r8[0x0]
800035f8:	a7 99       	lsr	r9,0x7

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
800035fa:	11 ba       	ld.ub	r10,r8[0x3]
800035fc:	f5 da c0 07 	bfextu	r10,r10,0x0,0x7
80003600:	a3 6a       	lsl	r10,0x2
80003602:	4c 48       	lddpc	r8,80003710 <fat_cluster_val+0x12c>
80003604:	b0 0a       	st.h	r8[0x0],r10
80003606:	c2 08       	rjmp	80003646 <fat_cluster_val+0x62>
   }
   else if ( Is_fat16 )
80003608:	30 29       	mov	r9,2
8000360a:	f2 08 18 00 	cp.b	r8,r9
8000360e:	c0 81       	brne	8000361e <fat_cluster_val+0x3a>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
80003610:	4b f8       	lddpc	r8,8000370c <fat_cluster_val+0x128>
80003612:	11 a9       	ld.ub	r9,r8[0x2]
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
80003614:	11 ba       	ld.ub	r10,r8[0x3]
80003616:	a1 7a       	lsl	r10,0x1
80003618:	4b e8       	lddpc	r8,80003710 <fat_cluster_val+0x12c>
8000361a:	b0 0a       	st.h	r8[0x0],r10
8000361c:	c1 58       	rjmp	80003646 <fat_cluster_val+0x62>
   }
   else if ( Is_fat12 )
8000361e:	30 19       	mov	r9,1
80003620:	f2 08 18 00 	cp.b	r8,r9
80003624:	c0 30       	breq	8000362a <fat_cluster_val+0x46>
80003626:	30 09       	mov	r9,0
80003628:	c0 f8       	rjmp	80003646 <fat_cluster_val+0x62>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
8000362a:	4b 98       	lddpc	r8,8000370c <fat_cluster_val+0x128>
8000362c:	70 09       	ld.w	r9,r8[0x0]
8000362e:	4b 98       	lddpc	r8,80003710 <fat_cluster_val+0x12c>
80003630:	f5 d9 c0 2f 	bfextu	r10,r9,0x1,0xf
80003634:	12 0a       	add	r10,r9
80003636:	b0 0a       	st.h	r8[0x0],r10
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
80003638:	f5 da c1 08 	bfextu	r10,r10,0x8,0x8
8000363c:	f4 09 16 01 	lsr	r9,r10,0x1
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
80003640:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80003644:	b0 8a       	st.b	r8[0x0],r10
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
80003646:	4b 48       	lddpc	r8,80003714 <fat_cluster_val+0x130>
80003648:	70 48       	ld.w	r8,r8[0x10]
8000364a:	10 09       	add	r9,r8
8000364c:	4b 38       	lddpc	r8,80003718 <fat_cluster_val+0x134>
8000364e:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
80003650:	30 1c       	mov	r12,1
80003652:	f0 1f 00 33 	mcall	8000371c <fat_cluster_val+0x138>
80003656:	c5 70       	breq	80003704 <fat_cluster_val+0x120>
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
80003658:	4a e8       	lddpc	r8,80003710 <fat_cluster_val+0x12c>
8000365a:	90 09       	ld.sh	r9,r8[0x0]
8000365c:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
80003660:	4b 08       	lddpc	r8,80003720 <fat_cluster_val+0x13c>
80003662:	f4 08 00 08 	add	r8,r10,r8
   u8_data1 = u8_ptr_cluster[0];
80003666:	11 86       	ld.ub	r6,r8[0x0]
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
80003668:	11 9b       	ld.ub	r11,r8[0x1]
   u8_data3 = u8_ptr_cluster[2];
8000366a:	11 a5       	ld.ub	r5,r8[0x2]
   u8_data4 = u8_ptr_cluster[3];
8000366c:	11 b4       	ld.ub	r4,r8[0x3]

   if ( Is_fat12 )
8000366e:	4a 78       	lddpc	r8,80003708 <fat_cluster_val+0x124>
80003670:	11 8a       	ld.ub	r10,r8[0x0]
80003672:	30 18       	mov	r8,1
80003674:	f0 0a 18 00 	cp.b	r10,r8
80003678:	c1 01       	brne	80003698 <fat_cluster_val+0xb4>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
8000367a:	e0 68 01 ff 	mov	r8,511
8000367e:	f0 09 19 00 	cp.h	r9,r8
80003682:	c0 b1       	brne	80003698 <fat_cluster_val+0xb4>
      {  // Go to next sector
         fs_gu32_addrsector++;
80003684:	4a 58       	lddpc	r8,80003718 <fat_cluster_val+0x134>
80003686:	70 09       	ld.w	r9,r8[0x0]
80003688:	2f f9       	sub	r9,-1
8000368a:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
8000368c:	30 1c       	mov	r12,1
8000368e:	f0 1f 00 24 	mcall	8000371c <fat_cluster_val+0x138>
80003692:	c3 90       	breq	80003704 <fat_cluster_val+0x120>
           return false;
         u8_data2 = fs_g_sector[0];
80003694:	4a 38       	lddpc	r8,80003720 <fat_cluster_val+0x13c>
80003696:	11 8b       	ld.ub	r11,r8[0x0]
      }
   }

   if (false == b_mode)
80003698:	58 07       	cp.w	r7,0
8000369a:	c3 11       	brne	800036fc <fat_cluster_val+0x118>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
8000369c:	49 c8       	lddpc	r8,8000370c <fat_cluster_val+0x128>
8000369e:	f0 c9 ff fc 	sub	r9,r8,-4
800036a2:	f0 cc ff f9 	sub	r12,r8,-7
800036a6:	b8 86       	st.b	r12[0x0],r6
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
800036a8:	2f a8       	sub	r8,-6
800036aa:	b0 8b       	st.b	r8[0x0],r11

      if ( Is_fat32 )
800036ac:	49 7a       	lddpc	r10,80003708 <fat_cluster_val+0x124>
800036ae:	15 8a       	ld.ub	r10,r10[0x0]
800036b0:	30 3b       	mov	r11,3
800036b2:	f6 0a 18 00 	cp.b	r10,r11
800036b6:	c0 61       	brne	800036c2 <fat_cluster_val+0xde>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
800036b8:	b2 95       	st.b	r9[0x1],r5
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
800036ba:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
800036be:	b2 84       	st.b	r9[0x0],r4
800036c0:	da 2a       	popm	r4-r7,pc,r12=1
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
800036c2:	30 0b       	mov	r11,0
800036c4:	b2 9b       	st.b	r9[0x1],r11
         LSB3( fs_g_cluster.u32_val ) = 0;
800036c6:	b2 8b       	st.b	r9[0x0],r11

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
800036c8:	30 19       	mov	r9,1
800036ca:	f2 0a 18 00 	cp.b	r10,r9
800036ce:	c0 20       	breq	800036d2 <fat_cluster_val+0xee>
800036d0:	da 2a       	popm	r4-r7,pc,r12=1
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
800036d2:	48 f9       	lddpc	r9,8000370c <fat_cluster_val+0x128>
800036d4:	13 b9       	ld.ub	r9,r9[0x3]
800036d6:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800036da:	c0 c0       	breq	800036f2 <fat_cluster_val+0x10e>
            {  // Readed cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
800036dc:	19 8b       	ld.ub	r11,r12[0x0]
800036de:	a5 8b       	lsr	r11,0x4
800036e0:	11 89       	ld.ub	r9,r8[0x0]
800036e2:	f2 0a 15 04 	lsl	r10,r9,0x4
800036e6:	f6 0a 00 0a 	add	r10,r11,r10
800036ea:	b8 8a       	st.b	r12[0x0],r10
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
800036ec:	a5 89       	lsr	r9,0x4
800036ee:	b0 89       	st.b	r8[0x0],r9
800036f0:	da 2a       	popm	r4-r7,pc,r12=1
            }
            else
            {  // Readed cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
800036f2:	11 89       	ld.ub	r9,r8[0x0]
800036f4:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
800036f8:	b0 89       	st.b	r8[0x0],r9
800036fa:	da 2a       	popm	r4-r7,pc,r12=1
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
      u8_ptr_cluster[1] = u8_data2;
      fat_cache_mark_sector_as_dirty();
#else
      fs_g_status = FS_ERR_COMMAND;
800036fc:	32 29       	mov	r9,34
800036fe:	48 a8       	lddpc	r8,80003724 <fat_cluster_val+0x140>
80003700:	b0 89       	st.b	r8[0x0],r9
80003702:	d8 2a       	popm	r4-r7,pc,r12=0
      return false;
80003704:	d8 2a       	popm	r4-r7,pc,r12=0
80003706:	00 00       	add	r0,r0
80003708:	00 00       	add	r0,r0
8000370a:	09 28       	ld.uh	r8,r4++
8000370c:	00 00       	add	r0,r0
8000370e:	09 7c       	ld.ub	r12,--r4
80003710:	00 00       	add	r0,r0
80003712:	06 b4       	st.h	r3++,r4
80003714:	00 00       	add	r0,r0
80003716:	08 e0       	st.h	--r4,r0
80003718:	00 00       	add	r0,r0
8000371a:	06 a0       	st.w	r3++,r0
8000371c:	80 00       	ld.sh	r0,r0[0x0]
8000371e:	34 d0       	mov	r0,77
80003720:	00 00       	add	r0,r0
80003722:	06 e0       	st.h	--r3,r0
80003724:	00 00       	add	r0,r0
80003726:	09 2c       	ld.uh	r12,r4++

80003728 <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list readed or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80003728:	d4 31       	pushm	r0-r7,lr
8000372a:	20 1d       	sub	sp,4
8000372c:	18 94       	mov	r4,r12
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
8000372e:	30 89       	mov	r9,8
80003730:	4f a8       	lddpc	r8,80003918 <fat_cluster_list+0x1f0>
80003732:	b0 89       	st.b	r8[0x0],r9

   if(  Is_fat32
80003734:	4f a8       	lddpc	r8,8000391c <fat_cluster_list+0x1f4>
80003736:	11 89       	ld.ub	r9,r8[0x0]
80003738:	30 38       	mov	r8,3
8000373a:	f0 09 18 00 	cp.b	r9,r8
8000373e:	5f 0a       	sreq	r10
   &&  (FS_CLUST_ACT_CLR == opt_action) )
80003740:	f0 0c 18 00 	cp.b	r12,r8
80003744:	5f 08       	sreq	r8
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
80003746:	f5 e8 00 07 	and	r7,r10,r8
8000374a:	e0 81 00 e4 	brne	80003912 <fat_cluster_list+0x1ea>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
8000374e:	4f 5c       	lddpc	r12,80003920 <fat_cluster_list+0x1f8>
80003750:	78 07       	ld.w	r7,r12[0x0]
80003752:	58 07       	cp.w	r7,0
80003754:	c2 a1       	brne	800037a8 <fat_cluster_list+0x80>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80003756:	58 08       	cp.w	r8,0
80003758:	e0 81 00 dd 	brne	80003912 <fat_cluster_list+0x1ea>
         return false;           // Impossible to erase ROOT DIR

      if ( Is_fat12 || Is_fat16 )
8000375c:	20 19       	sub	r9,1
8000375e:	30 18       	mov	r8,1
80003760:	f0 09 18 00 	cp.b	r9,r8
80003764:	e0 8b 00 1b 	brhi	8000379a <fat_cluster_list+0x72>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
80003768:	78 19       	ld.w	r9,r12[0x4]
8000376a:	4e f8       	lddpc	r8,80003924 <fat_cluster_list+0x1fc>
8000376c:	f1 18 00 1a 	ld.uh	r8,r8[26]
80003770:	10 39       	cp.w	r9,r8
80003772:	c0 f2       	brcc	80003790 <fat_cluster_list+0x68>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
80003774:	18 9a       	mov	r10,r12
80003776:	4e cb       	lddpc	r11,80003924 <fat_cluster_list+0x1fc>
80003778:	76 4c       	ld.w	r12,r11[0x10]
8000377a:	18 09       	add	r9,r12
8000377c:	f7 1b 00 18 	ld.uh	r11,r11[24]
80003780:	16 09       	add	r9,r11
80003782:	95 09       	st.w	r10[0x0],r9
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
80003784:	74 19       	ld.w	r9,r10[0x4]
80003786:	f0 09 01 09 	sub	r9,r8,r9
8000378a:	95 19       	st.w	r10[0x4],r9
8000378c:	30 1c       	mov	r12,1
            return true;
8000378e:	cc 38       	rjmp	80003914 <fat_cluster_list+0x1ec>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
80003790:	31 a9       	mov	r9,26
80003792:	4e 28       	lddpc	r8,80003918 <fat_cluster_list+0x1f0>
80003794:	b0 89       	st.b	r8[0x0],r9
80003796:	30 0c       	mov	r12,0
            return false;        // Position outside the root area
80003798:	cb e8       	rjmp	80003914 <fat_cluster_list+0x1ec>
         }
      }
      if ( Is_fat32 )
8000379a:	58 0a       	cp.w	r10,0
8000379c:	c0 80       	breq	800037ac <fat_cluster_list+0x84>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
8000379e:	4e 28       	lddpc	r8,80003924 <fat_cluster_list+0x1fc>
800037a0:	70 69       	ld.w	r9,r8[0x18]
800037a2:	4e 28       	lddpc	r8,80003928 <fat_cluster_list+0x200>
800037a4:	91 09       	st.w	r8[0x0],r9
800037a6:	c0 38       	rjmp	800037ac <fat_cluster_list+0x84>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
800037a8:	4e 08       	lddpc	r8,80003928 <fat_cluster_list+0x200>
800037aa:	91 07       	st.w	r8[0x0],r7
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
800037ac:	30 38       	mov	r8,3
800037ae:	f0 04 18 00 	cp.b	r4,r8
800037b2:	c0 70       	breq	800037c0 <fat_cluster_list+0x98>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
800037b4:	16 9c       	mov	r12,r11
800037b6:	f0 1f 00 5e 	mcall	8000392c <fat_cluster_list+0x204>
800037ba:	c0 50       	breq	800037c4 <fat_cluster_list+0x9c>
800037bc:	30 1c       	mov	r12,1
800037be:	ca b8       	rjmp	80003914 <fat_cluster_list+0x1ec>
         return true;            // Segment found in cache
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
800037c0:	f0 1f 00 5c 	mcall	80003930 <fat_cluster_list+0x208>
      fat_clear_info_fat_mod();        // Init cache on fat modification range
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
800037c4:	4d 71       	lddpc	r1,80003920 <fat_cluster_list+0x1f8>
800037c6:	3f f8       	mov	r8,-1
800037c8:	a2 88       	st.b	r1[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
800037ca:	02 96       	mov	r6,r1
800037cc:	4d 65       	lddpc	r5,80003924 <fat_cluster_list+0x1fc>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
800037ce:	4d 77       	lddpc	r7,80003928 <fat_cluster_list+0x200>
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
800037d0:	30 22       	mov	r2,2
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
800037d2:	e2 c9 ff f9 	sub	r9,r1,-7
800037d6:	50 09       	stdsp	sp[0x0],r9

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
800037d8:	30 13       	mov	r3,1
   MSB0( fs_g_seg.u32_addr ) = 0xFF;

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
800037da:	6c 19       	ld.w	r9,r6[0x4]
800037dc:	0b 98       	ld.ub	r8,r5[0x1]
800037de:	10 9a       	mov	r10,r8
800037e0:	10 39       	cp.w	r9,r8
800037e2:	c3 d2       	brcc	8000385c <fat_cluster_list+0x134>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
800037e4:	6e 00       	ld.w	r0,r7[0x0]
800037e6:	6a 4b       	ld.w	r11,r5[0x10]
800037e8:	16 09       	add	r9,r11
800037ea:	6a 5b       	ld.w	r11,r5[0x14]
800037ec:	16 09       	add	r9,r11
800037ee:	e0 cb 00 02 	sub	r11,r0,2
800037f2:	b1 3b       	mul	r11,r8
800037f4:	16 09       	add	r9,r11
800037f6:	8d 09       	st.w	r6[0x0],r9
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
800037f8:	e4 04 18 00 	cp.b	r4,r2
800037fc:	c0 b1       	brne	80003812 <fat_cluster_list+0xea>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
800037fe:	4c 97       	lddpc	r7,80003920 <fat_cluster_list+0x1f8>
80003800:	6e 18       	ld.w	r8,r7[0x4]
80003802:	f4 08 01 08 	sub	r8,r10,r8
80003806:	8f 18       	st.w	r7[0x4],r8
            fat_cache_clusterlist_update_finish();
80003808:	f0 1f 00 4b 	mcall	80003934 <fat_cluster_list+0x20c>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
8000380c:	30 1c       	mov	r12,1
8000380e:	8f 1c       	st.w	r7[0x4],r12
            return true;
80003810:	c8 28       	rjmp	80003914 <fat_cluster_list+0x1ec>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80003812:	40 0a       	lddsp	r10,sp[0x0]
80003814:	15 89       	ld.ub	r9,r10[0x0]
80003816:	f0 09 01 09 	sub	r9,r8,r9
8000381a:	8d 19       	st.w	r6[0x4],r9

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
8000381c:	e6 04 18 00 	cp.b	r4,r3
80003820:	c1 e1       	brne	8000385c <fat_cluster_list+0x134>
80003822:	4b fc       	lddpc	r12,8000391c <fat_cluster_list+0x1f4>
80003824:	19 88       	ld.ub	r8,r12[0x0]
80003826:	e6 08 18 00 	cp.b	r8,r3
8000382a:	c1 90       	breq	8000385c <fat_cluster_list+0x134>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
8000382c:	30 0c       	mov	r12,0
8000382e:	f0 1f 00 43 	mcall	80003938 <fat_cluster_list+0x210>
80003832:	c7 00       	breq	80003912 <fat_cluster_list+0x1ea>
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80003834:	6e 09       	ld.w	r9,r7[0x0]
80003836:	f2 c8 ff ff 	sub	r8,r9,-1
8000383a:	8f 08       	st.w	r7[0x0],r8
8000383c:	6e 1a       	ld.w	r10,r7[0x4]
8000383e:	14 38       	cp.w	r8,r10
80003840:	c0 a0       	breq	80003854 <fat_cluster_list+0x12c>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80003842:	8f 09       	st.w	r7[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
80003844:	00 19       	sub	r9,r0
80003846:	0b 98       	ld.ub	r8,r5[0x1]
80003848:	b1 39       	mul	r9,r8
8000384a:	6c 18       	ld.w	r8,r6[0x4]
8000384c:	f2 08 00 08 	add	r8,r9,r8
80003850:	8d 18       	st.w	r6[0x4],r8
                  break;
80003852:	c0 58       	rjmp	8000385c <fat_cluster_list+0x134>
               }
               if( !fat_cluster_readnext() )
80003854:	f0 1f 00 3a 	mcall	8000393c <fat_cluster_list+0x214>
80003858:	ce e1       	brne	80003834 <fat_cluster_list+0x10c>
8000385a:	c5 c8       	rjmp	80003912 <fat_cluster_list+0x1ea>
                  return false;
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
8000385c:	30 0c       	mov	r12,0
8000385e:	f0 1f 00 37 	mcall	80003938 <fat_cluster_list+0x210>
80003862:	c5 80       	breq	80003912 <fat_cluster_list+0x1ea>
         return false;

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
80003864:	f0 1f 00 37 	mcall	80003940 <fat_cluster_list+0x218>
      if (FS_CLUS_BAD == u8_cluster_status)
80003868:	e6 0c 18 00 	cp.b	r12,r3
8000386c:	c5 30       	breq	80003912 <fat_cluster_list+0x1ea>
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
8000386e:	03 89       	ld.ub	r9,r1[0x0]
80003870:	3f f8       	mov	r8,-1
80003872:	f0 09 18 00 	cp.b	r9,r8
80003876:	c3 31       	brne	800038dc <fat_cluster_list+0x1b4>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
80003878:	e4 0c 18 00 	cp.b	r12,r2
8000387c:	c2 b1       	brne	800038d2 <fat_cluster_list+0x1aa>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
8000387e:	4a 98       	lddpc	r8,80003920 <fat_cluster_list+0x1f8>
80003880:	70 17       	ld.w	r7,r8[0x4]

            // Compute the sector address of this last cluster to take time during a futur request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
80003882:	4b 19       	lddpc	r9,80003944 <fat_cluster_list+0x21c>
80003884:	13 89       	ld.ub	r9,r9[0x0]
80003886:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000388a:	4b 0a       	lddpc	r10,80003948 <fat_cluster_list+0x220>
8000388c:	f4 09 00 29 	add	r9,r10,r9<<0x2
80003890:	72 2a       	ld.w	r10,r9[0x8]
80003892:	0e 1a       	sub	r10,r7
80003894:	93 2a       	st.w	r9[0x8],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80003896:	4a 49       	lddpc	r9,80003924 <fat_cluster_list+0x1fc>
80003898:	13 9a       	ld.ub	r10,r9[0x1]
8000389a:	72 5b       	ld.w	r11,r9[0x14]
8000389c:	72 49       	ld.w	r9,r9[0x10]
8000389e:	12 0b       	add	r11,r9
800038a0:	4a 29       	lddpc	r9,80003928 <fat_cluster_list+0x200>
800038a2:	72 09       	ld.w	r9,r9[0x0]
800038a4:	20 29       	sub	r9,2
800038a6:	f4 09 02 49 	mul	r9,r10,r9
800038aa:	f6 09 00 09 	add	r9,r11,r9
800038ae:	91 09       	st.w	r8[0x0],r9
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
800038b0:	91 1a       	st.w	r8[0x4],r10
            if (FS_CLUST_ACT_CLR != opt_action)
800038b2:	30 38       	mov	r8,3
800038b4:	f0 04 18 00 	cp.b	r4,r8
800038b8:	c0 30       	breq	800038be <fat_cluster_list+0x196>
               fat_cache_clusterlist_update_finish();
800038ba:	f0 1f 00 1f 	mcall	80003934 <fat_cluster_list+0x20c>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
800038be:	49 98       	lddpc	r8,80003920 <fat_cluster_list+0x1f8>
800038c0:	49 a9       	lddpc	r9,80003928 <fat_cluster_list+0x200>
800038c2:	72 09       	ld.w	r9,r9[0x0]
800038c4:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
800038c6:	91 17       	st.w	r8[0x4],r7
            fs_g_status = FS_ERR_OUT_LIST;
800038c8:	31 a9       	mov	r9,26
800038ca:	49 48       	lddpc	r8,80003918 <fat_cluster_list+0x1f0>
800038cc:	b0 89       	st.b	r8[0x0],r9
800038ce:	30 0c       	mov	r12,0
            return false;
800038d0:	c2 28       	rjmp	80003914 <fat_cluster_list+0x1ec>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
800038d2:	0b 98       	ld.ub	r8,r5[0x1]
800038d4:	6c 19       	ld.w	r9,r6[0x4]
800038d6:	10 19       	sub	r9,r8
800038d8:	8d 19       	st.w	r6[0x4],r9
800038da:	c1 98       	rjmp	8000390c <fat_cluster_list+0x1e4>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
800038dc:	e6 04 18 00 	cp.b	r4,r3
800038e0:	c0 a1       	brne	800038f4 <fat_cluster_list+0x1cc>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
800038e2:	6e 09       	ld.w	r9,r7[0x0]
800038e4:	2f f9       	sub	r9,-1
800038e6:	6e 18       	ld.w	r8,r7[0x4]
800038e8:	10 39       	cp.w	r9,r8
800038ea:	c0 50       	breq	800038f4 <fat_cluster_list+0x1cc>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
800038ec:	f0 1f 00 12 	mcall	80003934 <fat_cluster_list+0x20c>
800038f0:	30 1c       	mov	r12,1
               return true;                              // End of segment
800038f2:	c1 18       	rjmp	80003914 <fat_cluster_list+0x1ec>
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
800038f4:	e4 0c 18 00 	cp.b	r12,r2
800038f8:	c0 51       	brne	80003902 <fat_cluster_list+0x1da>
            if (FS_CLUST_ACT_CLR == opt_action)
            {
               return fat_update_fat2();
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
800038fa:	f0 1f 00 0f 	mcall	80003934 <fat_cluster_list+0x20c>
800038fe:	30 1c       	mov	r12,1
            return true; // End of segment
80003900:	c0 a8       	rjmp	80003914 <fat_cluster_list+0x1ec>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
80003902:	0b 99       	ld.ub	r9,r5[0x1]
80003904:	6c 18       	ld.w	r8,r6[0x4]
80003906:	f2 08 00 08 	add	r8,r9,r8
8000390a:	8d 18       	st.w	r6[0x4],r8
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
8000390c:	6e 18       	ld.w	r8,r7[0x4]
8000390e:	8f 08       	st.w	r7[0x0],r8
   }  // End of main loop
80003910:	c6 5b       	rjmp	800037da <fat_cluster_list+0xb2>
80003912:	30 0c       	mov	r12,0
}
80003914:	2f fd       	sub	sp,-4
80003916:	d8 32       	popm	r0-r7,pc
80003918:	00 00       	add	r0,r0
8000391a:	09 2c       	ld.uh	r12,r4++
8000391c:	00 00       	add	r0,r0
8000391e:	09 28       	ld.uh	r8,r4++
80003920:	00 00       	add	r0,r0
80003922:	09 84       	ld.ub	r4,r4[0x0]
80003924:	00 00       	add	r0,r0
80003926:	08 e0       	st.h	--r4,r0
80003928:	00 00       	add	r0,r0
8000392a:	09 7c       	ld.ub	r12,--r4
8000392c:	80 00       	ld.sh	r0,r0[0x0]
8000392e:	2e 18       	sub	r8,-31
80003930:	80 00       	ld.sh	r0,r0[0x0]
80003932:	2c f0       	sub	r0,-49
80003934:	80 00       	ld.sh	r0,r0[0x0]
80003936:	2d c0       	sub	r0,-36
80003938:	80 00       	ld.sh	r0,r0[0x0]
8000393a:	35 e4       	mov	r4,94
8000393c:	80 00       	ld.sh	r0,r0[0x0]
8000393e:	35 50       	mov	r0,85
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	2c 90       	sub	r0,-55
80003944:	00 00       	add	r0,r0
80003946:	09 2e       	ld.uh	lr,r4++
80003948:	00 00       	add	r0,r0
8000394a:	06 b8       	st.h	r3++,r8

8000394c <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
bool  fat_read_dir( void )
{
8000394c:	eb cd 40 80 	pushm	r7,lr
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
80003950:	49 98       	lddpc	r8,800039b4 <fat_read_dir+0x68>
80003952:	90 97       	ld.uh	r7,r8[0x2]
80003954:	a5 87       	lsr	r7,0x4

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80003956:	49 98       	lddpc	r8,800039b8 <fat_read_dir+0x6c>
80003958:	11 89       	ld.ub	r9,r8[0x0]
8000395a:	49 98       	lddpc	r8,800039bc <fat_read_dir+0x70>
8000395c:	11 88       	ld.ub	r8,r8[0x0]
8000395e:	f0 09 18 00 	cp.b	r9,r8
80003962:	c0 d1       	brne	8000397c <fat_read_dir+0x30>
80003964:	49 58       	lddpc	r8,800039b8 <fat_read_dir+0x6c>
80003966:	70 39       	ld.w	r9,r8[0xc]
80003968:	49 58       	lddpc	r8,800039bc <fat_read_dir+0x70>
8000396a:	70 88       	ld.w	r8,r8[0x20]
8000396c:	10 39       	cp.w	r9,r8
8000396e:	c0 71       	brne	8000397c <fat_read_dir+0x30>
80003970:	49 28       	lddpc	r8,800039b8 <fat_read_dir+0x6c>
80003972:	70 48       	ld.w	r8,r8[0x10]
80003974:	0e 38       	cp.w	r8,r7
80003976:	c0 31       	brne	8000397c <fat_read_dir+0x30>
80003978:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
         return true;      // The internal cache contains the sector ascked
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
8000397c:	49 18       	lddpc	r8,800039c0 <fat_read_dir+0x74>
8000397e:	49 09       	lddpc	r9,800039bc <fat_read_dir+0x70>
80003980:	72 89       	ld.w	r9,r9[0x20]
80003982:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
80003984:	91 17       	st.w	r8[0x4],r7
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
80003986:	30 0b       	mov	r11,0
80003988:	30 2c       	mov	r12,2
8000398a:	f0 1f 00 0f 	mcall	800039c4 <fat_read_dir+0x78>
8000398e:	c1 00       	breq	800039ae <fat_read_dir+0x62>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
80003990:	48 c8       	lddpc	r8,800039c0 <fat_read_dir+0x74>
80003992:	70 09       	ld.w	r9,r8[0x0]
80003994:	48 d8       	lddpc	r8,800039c8 <fat_read_dir+0x7c>
80003996:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
80003998:	30 1c       	mov	r12,1
8000399a:	f0 1f 00 0d 	mcall	800039cc <fat_read_dir+0x80>
8000399e:	c0 80       	breq	800039ae <fat_read_dir+0x62>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
800039a0:	48 68       	lddpc	r8,800039b8 <fat_read_dir+0x6c>
800039a2:	48 79       	lddpc	r9,800039bc <fat_read_dir+0x70>
800039a4:	72 89       	ld.w	r9,r9[0x20]
800039a6:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
800039a8:	91 47       	st.w	r8[0x10],r7
800039aa:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
         return true;
800039ae:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
800039b2:	00 00       	add	r0,r0
800039b4:	00 00       	add	r0,r0
800039b6:	09 28       	ld.uh	r8,r4++
800039b8:	00 00       	add	r0,r0
800039ba:	09 64       	ld.uh	r4,--r4
800039bc:	00 00       	add	r0,r0
800039be:	08 e0       	st.h	--r4,r0
800039c0:	00 00       	add	r0,r0
800039c2:	09 84       	ld.ub	r4,r4[0x0]
800039c4:	80 00       	ld.sh	r0,r0[0x0]
800039c6:	37 28       	mov	r8,114
800039c8:	00 00       	add	r0,r0
800039ca:	06 a0       	st.w	r3++,r0
800039cc:	80 00       	ld.sh	r0,r0[0x0]
800039ce:	34 d0       	mov	r0,77

800039d0 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
{
800039d0:	eb cd 40 c0 	pushm	r6-r7,lr
800039d4:	18 97       	mov	r7,r12
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
800039d6:	4a e8       	lddpc	r8,80003a8c <fat_read_file+0xbc>
800039d8:	70 38       	ld.w	r8,r8[0xc]
800039da:	f0 06 16 09 	lsr	r6,r8,0x9

   if(FS_CLUST_ACT_ONE  == mode)
800039de:	30 29       	mov	r9,2
800039e0:	f2 0c 18 00 	cp.b	r12,r9
800039e4:	c1 31       	brne	80003a0a <fat_read_file+0x3a>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
800039e6:	4a b8       	lddpc	r8,80003a90 <fat_read_file+0xc0>
800039e8:	11 89       	ld.ub	r9,r8[0x0]
800039ea:	4a b8       	lddpc	r8,80003a94 <fat_read_file+0xc4>
800039ec:	11 88       	ld.ub	r8,r8[0x0]
800039ee:	f0 09 18 00 	cp.b	r9,r8
800039f2:	c1 91       	brne	80003a24 <fat_read_file+0x54>
800039f4:	4a 78       	lddpc	r8,80003a90 <fat_read_file+0xc0>
800039f6:	70 39       	ld.w	r9,r8[0xc]
800039f8:	4a 58       	lddpc	r8,80003a8c <fat_read_file+0xbc>
800039fa:	70 18       	ld.w	r8,r8[0x4]
800039fc:	10 39       	cp.w	r9,r8
800039fe:	c1 31       	brne	80003a24 <fat_read_file+0x54>
80003a00:	4a 48       	lddpc	r8,80003a90 <fat_read_file+0xc0>
80003a02:	70 48       	ld.w	r8,r8[0x10]
80003a04:	0c 38       	cp.w	r8,r6
80003a06:	c0 f1       	brne	80003a24 <fat_read_file+0x54>
80003a08:	c3 38       	rjmp	80003a6e <fat_read_file+0x9e>
         return true;      // The internal cache contains the sector ascked
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
80003a0a:	30 39       	mov	r9,3
80003a0c:	f2 0c 18 00 	cp.b	r12,r9
80003a10:	c3 31       	brne	80003a76 <fat_read_file+0xa6>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
80003a12:	49 f9       	lddpc	r9,80003a8c <fat_read_file+0xbc>
80003a14:	72 19       	ld.w	r9,r9[0x4]
80003a16:	58 09       	cp.w	r9,0
80003a18:	c2 b0       	breq	80003a6e <fat_read_file+0x9e>
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
80003a1a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80003a1e:	c2 c0       	breq	80003a76 <fat_read_file+0xa6>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80003a20:	2f f6       	sub	r6,-1
80003a22:	c2 a8       	rjmp	80003a76 <fat_read_file+0xa6>
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80003a24:	49 d8       	lddpc	r8,80003a98 <fat_read_file+0xc8>
80003a26:	49 a9       	lddpc	r9,80003a8c <fat_read_file+0xbc>
80003a28:	72 19       	ld.w	r9,r9[0x4]
80003a2a:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80003a2c:	91 16       	st.w	r8[0x4],r6
      if( fat_cluster_list( mode, true ) )
         return true;      // Get or clear segment OK
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
80003a2e:	30 1b       	mov	r11,1
80003a30:	16 9c       	mov	r12,r11
80003a32:	f0 1f 00 1b 	mcall	80003a9c <fat_read_file+0xcc>
80003a36:	c1 e0       	breq	80003a72 <fat_read_file+0xa2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
80003a38:	49 88       	lddpc	r8,80003a98 <fat_read_file+0xc8>
80003a3a:	70 09       	ld.w	r9,r8[0x0]
80003a3c:	49 98       	lddpc	r8,80003aa0 <fat_read_file+0xd0>
80003a3e:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( true ) )
80003a40:	30 1c       	mov	r12,1
80003a42:	f0 1f 00 19 	mcall	80003aa4 <fat_read_file+0xd4>
80003a46:	c1 60       	breq	80003a72 <fat_read_file+0xa2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
80003a48:	49 28       	lddpc	r8,80003a90 <fat_read_file+0xc0>
80003a4a:	49 19       	lddpc	r9,80003a8c <fat_read_file+0xbc>
80003a4c:	72 19       	ld.w	r9,r9[0x4]
80003a4e:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
80003a50:	91 46       	st.w	r8[0x10],r6
80003a52:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
80003a56:	30 38       	mov	r8,3
80003a58:	f0 07 18 00 	cp.b	r7,r8
80003a5c:	c0 b1       	brne	80003a72 <fat_read_file+0xa2>
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
80003a5e:	49 38       	lddpc	r8,80003aa8 <fat_read_file+0xd8>
80003a60:	11 89       	ld.ub	r9,r8[0x0]
80003a62:	31 a8       	mov	r8,26
80003a64:	f0 09 18 00 	cp.b	r9,r8
80003a68:	5f 0c       	sreq	r12
80003a6a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003a6e:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80003a72:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80003a76:	48 98       	lddpc	r8,80003a98 <fat_read_file+0xc8>
80003a78:	48 59       	lddpc	r9,80003a8c <fat_read_file+0xbc>
80003a7a:	72 19       	ld.w	r9,r9[0x4]
80003a7c:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80003a7e:	91 16       	st.w	r8[0x4],r6
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
80003a80:	30 1b       	mov	r11,1
80003a82:	0e 9c       	mov	r12,r7
80003a84:	f0 1f 00 06 	mcall	80003a9c <fat_read_file+0xcc>
80003a88:	ce 70       	breq	80003a56 <fat_read_file+0x86>
80003a8a:	cf 2b       	rjmp	80003a6e <fat_read_file+0x9e>
80003a8c:	00 00       	add	r0,r0
80003a8e:	06 a4       	st.w	r3++,r4
80003a90:	00 00       	add	r0,r0
80003a92:	09 64       	ld.uh	r4,--r4
80003a94:	00 00       	add	r0,r0
80003a96:	08 e0       	st.h	--r4,r0
80003a98:	00 00       	add	r0,r0
80003a9a:	09 84       	ld.ub	r4,r4[0x0]
80003a9c:	80 00       	ld.sh	r0,r0[0x0]
80003a9e:	37 28       	mov	r8,114
80003aa0:	00 00       	add	r0,r0
80003aa2:	06 a0       	st.w	r3++,r0
80003aa4:	80 00       	ld.sh	r0,r0[0x0]
80003aa6:	34 d0       	mov	r0,77
80003aa8:	00 00       	add	r0,r0
80003aaa:	09 2c       	ld.uh	r12,r4++

80003aac <fat_check_device>:
//! @verbatim
//! This function updates all navigator datas when the device state change.
//! @endverbatim
//!
bool  fat_check_device( void )
{
80003aac:	d4 31       	pushm	r0-r7,lr
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
80003aae:	4a 28       	lddpc	r8,80003b34 <fat_check_device+0x88>
80003ab0:	11 89       	ld.ub	r9,r8[0x0]
80003ab2:	30 08       	mov	r8,0
80003ab4:	f0 09 18 00 	cp.b	r9,r8
80003ab8:	c3 c1       	brne	80003b30 <fat_check_device+0x84>
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
80003aba:	4a 08       	lddpc	r8,80003b38 <fat_check_device+0x8c>
80003abc:	11 89       	ld.ub	r9,r8[0x0]
80003abe:	3f f8       	mov	r8,-1
80003ac0:	f0 09 18 00 	cp.b	r9,r8
80003ac4:	c0 51       	brne	80003ace <fat_check_device+0x22>
   {
      fs_g_status = FS_ERR_HW;
80003ac6:	30 19       	mov	r9,1
80003ac8:	49 d8       	lddpc	r8,80003b3c <fat_check_device+0x90>
80003aca:	b0 89       	st.b	r8[0x0],r9
80003acc:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;                                // No device selected
80003ace:	30 02       	mov	r2,0
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80003ad0:	49 a5       	lddpc	r5,80003b38 <fat_check_device+0x8c>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80003ad2:	49 c1       	lddpc	r1,80003b40 <fat_check_device+0x94>
80003ad4:	30 06       	mov	r6,0
      Fat_file_close();                            // By default the file is not open
80003ad6:	49 c0       	lddpc	r0,80003b44 <fat_check_device+0x98>
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003ad8:	49 c4       	lddpc	r4,80003b48 <fat_check_device+0x9c>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003ada:	49 d3       	lddpc	r3,80003b4c <fat_check_device+0xa0>
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80003adc:	0b 8c       	ld.ub	r12,r5[0x0]
80003ade:	f0 1f 00 1d 	mcall	80003b50 <fat_check_device+0xa4>
80003ae2:	18 97       	mov	r7,r12
      if( CTRL_GOOD       == status )
80003ae4:	c2 60       	breq	80003b30 <fat_check_device+0x84>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator datas which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80003ae6:	a2 86       	st.b	r1[0x0],r6
      Fat_file_close();                            // By default the file is not open
80003ae8:	a0 86       	st.b	r0[0x0],r6
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003aea:	0b 88       	ld.ub	r8,r5[0x0]
80003aec:	09 89       	ld.ub	r9,r4[0x0]
80003aee:	f0 09 18 00 	cp.b	r9,r8
80003af2:	c0 51       	brne	80003afc <fat_check_device+0x50>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80003af4:	49 89       	lddpc	r9,80003b54 <fat_check_device+0xa8>
80003af6:	b2 86       	st.b	r9[0x0],r6
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80003af8:	49 89       	lddpc	r9,80003b58 <fat_check_device+0xac>
80003afa:	b2 86       	st.b	r9[0x0],r6
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003afc:	07 89       	ld.ub	r9,r3[0x0]
80003afe:	f0 09 18 00 	cp.b	r9,r8
80003b02:	c0 31       	brne	80003b08 <fat_check_device+0x5c>
      {
         fat_cache_reset();
80003b04:	f0 1f 00 16 	mcall	80003b5c <fat_check_device+0xb0>
      }
      fat_cache_clusterlist_reset();
80003b08:	f0 1f 00 16 	mcall	80003b60 <fat_check_device+0xb4>

      fs_g_status = FS_ERR_HW;                     // By default HW error
80003b0c:	30 18       	mov	r8,1
80003b0e:	48 c9       	lddpc	r9,80003b3c <fat_check_device+0x90>
80003b10:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
80003b12:	58 37       	cp.w	r7,3
80003b14:	c0 81       	brne	80003b24 <fat_check_device+0x78>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80003b16:	10 02       	add	r2,r8
80003b18:	5c 52       	castu.b	r2
80003b1a:	36 48       	mov	r8,100
80003b1c:	f0 02 18 00 	cp.b	r2,r8
80003b20:	cd e1       	brne	80003adc <fat_check_device+0x30>
80003b22:	c0 88       	rjmp	80003b32 <fat_check_device+0x86>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80003b24:	58 27       	cp.w	r7,2
80003b26:	c0 61       	brne	80003b32 <fat_check_device+0x86>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80003b28:	31 89       	mov	r9,24
80003b2a:	48 58       	lddpc	r8,80003b3c <fat_check_device+0x90>
80003b2c:	b0 89       	st.b	r8[0x0],r9
80003b2e:	d8 3a       	popm	r0-r7,pc,r12=0
80003b30:	da 3a       	popm	r0-r7,pc,r12=1
80003b32:	d8 3a       	popm	r0-r7,pc,r12=0
80003b34:	00 00       	add	r0,r0
80003b36:	06 b6       	st.h	r3++,r6
80003b38:	00 00       	add	r0,r0
80003b3a:	08 e0       	st.h	--r4,r0
80003b3c:	00 00       	add	r0,r0
80003b3e:	09 2c       	ld.uh	r12,r4++
80003b40:	00 00       	add	r0,r0
80003b42:	09 28       	ld.uh	r8,r4++
80003b44:	00 00       	add	r0,r0
80003b46:	06 a4       	st.w	r3++,r4
80003b48:	00 00       	add	r0,r0
80003b4a:	09 30       	ld.ub	r0,r4++
80003b4c:	00 00       	add	r0,r0
80003b4e:	09 64       	ld.uh	r4,--r4
80003b50:	80 00       	ld.sh	r0,r0[0x0]
80003b52:	6a 84       	ld.w	r4,r5[0x20]
80003b54:	00 00       	add	r0,r0
80003b56:	09 24       	ld.uh	r4,r4++
80003b58:	00 00       	add	r0,r0
80003b5a:	09 14       	ld.sh	r4,r4++
80003b5c:	80 00       	ld.sh	r0,r0[0x0]
80003b5e:	33 10       	mov	r0,49
80003b60:	80 00       	ld.sh	r0,r0[0x0]
80003b62:	2c f0       	sub	r0,-49

80003b64 <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
bool  fat_check_noopen( void )
{
80003b64:	d4 01       	pushm	lr
   if( !fat_check_device() )
80003b66:	f0 1f 00 0b 	mcall	80003b90 <fat_check_noopen+0x2c>
80003b6a:	c1 10       	breq	80003b8c <fat_check_noopen+0x28>
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80003b6c:	48 a8       	lddpc	r8,80003b94 <fat_check_noopen+0x30>
80003b6e:	11 89       	ld.ub	r9,r8[0x0]
80003b70:	30 08       	mov	r8,0
80003b72:	f0 09 18 00 	cp.b	r9,r8
80003b76:	c0 b0       	breq	80003b8c <fat_check_noopen+0x28>
      return true;
   if( Fat_file_is_open() )
80003b78:	48 88       	lddpc	r8,80003b98 <fat_check_noopen+0x34>
80003b7a:	11 89       	ld.ub	r9,r8[0x0]
80003b7c:	30 08       	mov	r8,0
80003b7e:	f0 09 18 00 	cp.b	r9,r8
80003b82:	c0 50       	breq	80003b8c <fat_check_noopen+0x28>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80003b84:	30 59       	mov	r9,5
80003b86:	48 68       	lddpc	r8,80003b9c <fat_check_noopen+0x38>
80003b88:	b0 89       	st.b	r8[0x0],r9
80003b8a:	d8 0a       	popm	pc,r12=0
      return false;
80003b8c:	da 0a       	popm	pc,r12=1
80003b8e:	00 00       	add	r0,r0
80003b90:	80 00       	ld.sh	r0,r0[0x0]
80003b92:	3a ac       	mov	r12,-86
80003b94:	00 00       	add	r0,r0
80003b96:	09 28       	ld.uh	r8,r4++
80003b98:	00 00       	add	r0,r0
80003b9a:	06 a4       	st.w	r3++,r4
80003b9c:	00 00       	add	r0,r0
80003b9e:	09 2c       	ld.uh	r12,r4++

80003ba0 <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
bool  fat_check_mount( void )
{
80003ba0:	d4 01       	pushm	lr
   if( !fat_check_device() )
80003ba2:	f0 1f 00 0a 	mcall	80003bc8 <fat_check_mount+0x28>
80003ba6:	c0 f0       	breq	80003bc4 <fat_check_mount+0x24>
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80003ba8:	48 98       	lddpc	r8,80003bcc <fat_check_mount+0x2c>
80003baa:	11 89       	ld.ub	r9,r8[0x0]
80003bac:	30 08       	mov	r8,0
80003bae:	f0 09 18 00 	cp.b	r9,r8
80003bb2:	c0 81       	brne	80003bc2 <fat_check_mount+0x22>
   {
      if( !fat_mount() )
80003bb4:	f0 1f 00 07 	mcall	80003bd0 <fat_check_mount+0x30>
80003bb8:	c0 51       	brne	80003bc2 <fat_check_mount+0x22>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
80003bba:	30 e9       	mov	r9,14
80003bbc:	48 68       	lddpc	r8,80003bd4 <fat_check_mount+0x34>
80003bbe:	b0 89       	st.b	r8[0x0],r9
         return false;
80003bc0:	d8 02       	popm	pc
80003bc2:	30 1c       	mov	r12,1
      }
   }
   return true;
}
80003bc4:	d8 02       	popm	pc
80003bc6:	00 00       	add	r0,r0
80003bc8:	80 00       	ld.sh	r0,r0[0x0]
80003bca:	3a ac       	mov	r12,-86
80003bcc:	00 00       	add	r0,r0
80003bce:	09 28       	ld.uh	r8,r4++
80003bd0:	80 00       	ld.sh	r0,r0[0x0]
80003bd2:	3c 50       	mov	r0,-59
80003bd4:	00 00       	add	r0,r0
80003bd6:	09 2c       	ld.uh	r12,r4++

80003bd8 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select( void )
{
80003bd8:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80003bda:	f0 1f 00 04 	mcall	80003be8 <fat_check_mount_select+0x10>
80003bde:	c0 30       	breq	80003be4 <fat_check_mount_select+0xc>
      return false;
   return fat_check_select();
80003be0:	f0 1f 00 03 	mcall	80003bec <fat_check_mount_select+0x14>
}
80003be4:	d8 02       	popm	pc
80003be6:	00 00       	add	r0,r0
80003be8:	80 00       	ld.sh	r0,r0[0x0]
80003bea:	3b a0       	mov	r0,-70
80003bec:	80 00       	ld.sh	r0,r0[0x0]
80003bee:	2c 54       	sub	r4,-59

80003bf0 <fat_check_mount_select_open>:
//!
//! @return    true  partition mounted and a file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_select_open( void )
{
80003bf0:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80003bf2:	f0 1f 00 06 	mcall	80003c08 <fat_check_mount_select_open+0x18>
80003bf6:	c0 70       	breq	80003c04 <fat_check_mount_select_open+0x14>
      return false;
   if( !fat_check_select() )
80003bf8:	f0 1f 00 05 	mcall	80003c0c <fat_check_mount_select_open+0x1c>
80003bfc:	c0 40       	breq	80003c04 <fat_check_mount_select_open+0x14>
      return false;
   return fat_check_open();
80003bfe:	f0 1f 00 05 	mcall	80003c10 <fat_check_mount_select_open+0x20>
80003c02:	d8 02       	popm	pc
80003c04:	d8 0a       	popm	pc,r12=0
80003c06:	00 00       	add	r0,r0
80003c08:	80 00       	ld.sh	r0,r0[0x0]
80003c0a:	3b a0       	mov	r0,-70
80003c0c:	80 00       	ld.sh	r0,r0[0x0]
80003c0e:	2c 54       	sub	r4,-59
80003c10:	80 00       	ld.sh	r0,r0[0x0]
80003c12:	2c 34       	sub	r4,-61

80003c14 <fat_check_mount_select_noopen>:
//!
//! @return    true  partition mounted and no file is opened and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select_noopen( void )
{
80003c14:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80003c16:	f0 1f 00 06 	mcall	80003c2c <fat_check_mount_select_noopen+0x18>
80003c1a:	c0 70       	breq	80003c28 <fat_check_mount_select_noopen+0x14>
      return false;
   if( !fat_check_select() )
80003c1c:	f0 1f 00 05 	mcall	80003c30 <fat_check_mount_select_noopen+0x1c>
80003c20:	c0 40       	breq	80003c28 <fat_check_mount_select_noopen+0x14>
      return false;
   return fat_check_noopen();
80003c22:	f0 1f 00 05 	mcall	80003c34 <fat_check_mount_select_noopen+0x20>
80003c26:	d8 02       	popm	pc
80003c28:	d8 0a       	popm	pc,r12=0
80003c2a:	00 00       	add	r0,r0
80003c2c:	80 00       	ld.sh	r0,r0[0x0]
80003c2e:	3b a0       	mov	r0,-70
80003c30:	80 00       	ld.sh	r0,r0[0x0]
80003c32:	2c 54       	sub	r4,-59
80003c34:	80 00       	ld.sh	r0,r0[0x0]
80003c36:	3b 64       	mov	r4,-74

80003c38 <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_noopen( void )
{
80003c38:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80003c3a:	f0 1f 00 04 	mcall	80003c48 <fat_check_mount_noopen+0x10>
80003c3e:	c0 30       	breq	80003c44 <fat_check_mount_noopen+0xc>
      return false;
   return fat_check_noopen();
80003c40:	f0 1f 00 03 	mcall	80003c4c <fat_check_mount_noopen+0x14>
}
80003c44:	d8 02       	popm	pc
80003c46:	00 00       	add	r0,r0
80003c48:	80 00       	ld.sh	r0,r0[0x0]
80003c4a:	3b a0       	mov	r0,-70
80003c4c:	80 00       	ld.sh	r0,r0[0x0]
80003c4e:	3b 64       	mov	r4,-74

80003c50 <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
bool  fat_mount( void )
{
80003c50:	d4 31       	pushm	r0-r7,lr
80003c52:	20 3d       	sub	sp,12
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
80003c54:	30 07       	mov	r7,0
80003c56:	fe f8 02 d2 	ld.w	r8,pc[722]
80003c5a:	91 87       	st.w	r8[0x20],r7
   // No selected file
   fat_clear_entry_info_and_ptr();
80003c5c:	f0 1f 00 b4 	mcall	80003f2c <fat_mount+0x2dc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80003c60:	fe f8 02 d0 	ld.w	r8,pc[720]
80003c64:	b0 87       	st.b	r8[0x0],r7
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80003c66:	fe f8 02 ce 	ld.w	r8,pc[718]
80003c6a:	91 07       	st.w	r8[0x0],r7

   // Check if the drive is availabled
   if( !fat_check_device() )
80003c6c:	f0 1f 00 b3 	mcall	80003f38 <fat_mount+0x2e8>
80003c70:	e0 80 01 58 	breq	80003f20 <fat_mount+0x2d0>
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80003c74:	fe f5 02 c8 	ld.w	r5,pc[712]
      {
         fs_g_status = FS_ERR_NO_FORMAT;
         return false;
      }

      if ( 0 == fs_gu32_addrsector )
80003c78:	ea c8 fe 42 	sub	r8,r5,-446
80003c7c:	50 08       	stdsp	sp[0x0],r8
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80003c7e:	38 04       	mov	r4,-128
80003c80:	30 46       	mov	r6,4
      return false;

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
80003c82:	30 1c       	mov	r12,1
80003c84:	f0 1f 00 af 	mcall	80003f40 <fat_mount+0x2f0>
80003c88:	e0 80 01 4c 	breq	80003f20 <fat_mount+0x2d0>
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80003c8c:	eb 39 01 fe 	ld.ub	r9,r5[510]
80003c90:	35 58       	mov	r8,85
80003c92:	f0 09 18 00 	cp.b	r9,r8
80003c96:	c0 d0       	breq	80003cb0 <fat_mount+0x60>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
80003c98:	eb 39 01 ff 	ld.ub	r9,r5[511]
80003c9c:	3a a8       	mov	r8,-86
80003c9e:	f0 09 18 00 	cp.b	r9,r8
80003ca2:	c0 70       	breq	80003cb0 <fat_mount+0x60>
      {
         fs_g_status = FS_ERR_NO_FORMAT;
80003ca4:	30 29       	mov	r9,2
80003ca6:	fe f8 02 9e 	ld.w	r8,pc[670]
80003caa:	b0 89       	st.b	r8[0x0],r9
80003cac:	30 0c       	mov	r12,0
         return false;
80003cae:	c3 a9       	rjmp	80003f22 <fat_mount+0x2d2>
      }

      if ( 0 == fs_gu32_addrsector )
80003cb0:	fe f8 02 84 	ld.w	r8,pc[644]
80003cb4:	70 08       	ld.w	r8,r8[0x0]
80003cb6:	58 08       	cp.w	r8,0
80003cb8:	c5 21       	brne	80003d5c <fat_mount+0x10c>
80003cba:	40 08       	lddsp	r8,sp[0x0]
80003cbc:	30 0a       	mov	r10,0
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80003cbe:	30 1e       	mov	lr,1
80003cc0:	30 63       	mov	r3,6
80003cc2:	30 e2       	mov	r2,14
80003cc4:	30 b1       	mov	r1,11
80003cc6:	30 c0       	mov	r0,12
80003cc8:	11 89       	ld.ub	r9,r8[0x0]
80003cca:	e8 09 18 00 	cp.b	r9,r4
80003cce:	5f 0b       	sreq	r11
80003cd0:	ee 09 18 00 	cp.b	r9,r7
80003cd4:	5f 09       	sreq	r9
80003cd6:	f7 e9 10 09 	or	r9,r11,r9
80003cda:	ee 09 18 00 	cp.b	r9,r7
80003cde:	c1 90       	breq	80003d10 <fat_mount+0xc0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
80003ce0:	11 c9       	ld.ub	r9,r8[0x4]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80003ce2:	fc 09 18 00 	cp.b	r9,lr
80003ce6:	5f 0c       	sreq	r12
80003ce8:	ec 09 18 00 	cp.b	r9,r6
80003cec:	5f 0b       	sreq	r11
80003cee:	f9 eb 10 0b 	or	r11,r12,r11
80003cf2:	ee 0b 18 00 	cp.b	r11,r7
80003cf6:	c1 41       	brne	80003d1e <fat_mount+0xce>
80003cf8:	e6 09 18 00 	cp.b	r9,r3
80003cfc:	c1 10       	breq	80003d1e <fat_mount+0xce>
80003cfe:	e4 09 18 00 	cp.b	r9,r2
80003d02:	c0 e0       	breq	80003d1e <fat_mount+0xce>
80003d04:	e2 09 18 00 	cp.b	r9,r1
80003d08:	c0 b0       	breq	80003d1e <fat_mount+0xce>
80003d0a:	e0 09 18 00 	cp.b	r9,r0
80003d0e:	c0 80       	breq	80003d1e <fat_mount+0xce>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
80003d10:	2f fa       	sub	r10,-1
80003d12:	5c 5a       	castu.b	r10
80003d14:	2f 08       	sub	r8,-16
80003d16:	ec 0a 18 00 	cp.b	r10,r6
80003d1a:	cd 71       	brne	80003cc8 <fat_mount+0x78>
80003d1c:	c2 08       	rjmp	80003d5c <fat_mount+0x10c>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
80003d1e:	ec 0a 18 00 	cp.b	r10,r6
80003d22:	c1 d0       	breq	80003d5c <fat_mount+0x10c>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80003d24:	fe f3 02 10 	ld.w	r3,pc[528]
80003d28:	a5 6a       	lsl	r10,0x4
80003d2a:	f4 ca fe 42 	sub	r10,r10,-446
80003d2e:	ea 0a 00 0a 	add	r10,r5,r10
80003d32:	f5 38 00 08 	ld.ub	r8,r10[8]
80003d36:	a6 b8       	st.b	r3[0x3],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
80003d38:	f5 38 00 09 	ld.ub	r8,r10[9]
80003d3c:	a6 a8       	st.b	r3[0x2],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
80003d3e:	f5 38 00 0a 	ld.ub	r8,r10[10]
80003d42:	a6 98       	st.b	r3[0x1],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80003d44:	f5 38 00 0b 	ld.ub	r8,r10[11]
80003d48:	a6 88       	st.b	r3[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
80003d4a:	4f 88       	lddpc	r8,80003f28 <fat_mount+0x2d8>
80003d4c:	11 8c       	ld.ub	r12,r8[0x0]
80003d4e:	f0 1f 00 7f 	mcall	80003f48 <fat_mount+0x2f8>
80003d52:	66 08       	ld.w	r8,r3[0x0]
80003d54:	f8 08 02 48 	mul	r8,r12,r8
80003d58:	87 08       	st.w	r3[0x0],r8
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
80003d5a:	c9 4b       	rjmp	80003c82 <fat_mount+0x32>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80003d5c:	4f 88       	lddpc	r8,80003f3c <fat_mount+0x2ec>
80003d5e:	11 89       	ld.ub	r9,r8[0x0]
80003d60:	3e b8       	mov	r8,-21
80003d62:	f0 09 18 00 	cp.b	r9,r8
80003d66:	c0 f1       	brne	80003d84 <fat_mount+0x134>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
80003d68:	4f 58       	lddpc	r8,80003f3c <fat_mount+0x2ec>
80003d6a:	11 a9       	ld.ub	r9,r8[0x2]
80003d6c:	39 08       	mov	r8,-112
80003d6e:	f0 09 18 00 	cp.b	r9,r8
80003d72:	c0 91       	brne	80003d84 <fat_mount+0x134>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
80003d74:	4f 28       	lddpc	r8,80003f3c <fat_mount+0x2ec>
80003d76:	f1 38 00 15 	ld.ub	r8,r8[21]
80003d7a:	e2 18 00 f0 	andl	r8,0xf0,COH
80003d7e:	e0 48 00 f0 	cp.w	r8,240
80003d82:	c0 60       	breq	80003d8e <fat_mount+0x13e>
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80003d84:	30 39       	mov	r9,3
80003d86:	4f 08       	lddpc	r8,80003f44 <fat_mount+0x2f4>
80003d88:	b0 89       	st.b	r8[0x0],r9
80003d8a:	30 0c       	mov	r12,0
      return false;
80003d8c:	cc b8       	rjmp	80003f22 <fat_mount+0x2d2>
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80003d8e:	30 49       	mov	r9,4
80003d90:	4e d8       	lddpc	r8,80003f44 <fat_mount+0x2f4>
80003d92:	b0 89       	st.b	r8[0x0],r9

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80003d94:	4e aa       	lddpc	r10,80003f3c <fat_mount+0x2ec>
80003d96:	f5 39 00 0c 	ld.ub	r9,r10[12]
80003d9a:	a1 99       	lsr	r9,0x1

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
80003d9c:	f5 38 00 0d 	ld.ub	r8,r10[13]
80003da0:	b3 38       	mul	r8,r9
80003da2:	5c 58       	castu.b	r8
80003da4:	4e 1b       	lddpc	r11,80003f28 <fat_mount+0x2d8>
80003da6:	b6 98       	st.b	r11[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
80003da8:	30 0b       	mov	r11,0
80003daa:	50 1b       	stdsp	sp[0x4],r11
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
80003dac:	fa cb ff fc 	sub	r11,sp,-4
80003db0:	fa c7 ff f9 	sub	r7,sp,-7
80003db4:	f5 3c 00 16 	ld.ub	r12,r10[22]
80003db8:	ae 8c       	st.b	r7[0x0],r12
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
80003dba:	fa ce ff fa 	sub	lr,sp,-6
80003dbe:	f5 3a 00 17 	ld.ub	r10,r10[23]
80003dc2:	bc 8a       	st.b	lr[0x0],r10
   if ( 0==u32_tmp )
80003dc4:	40 1a       	lddsp	r10,sp[0x4]
80003dc6:	58 0a       	cp.w	r10,0
80003dc8:	c0 e1       	brne	80003de4 <fat_mount+0x194>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
80003dca:	4d da       	lddpc	r10,80003f3c <fat_mount+0x2ec>
80003dcc:	f5 3c 00 24 	ld.ub	r12,r10[36]
80003dd0:	ae 8c       	st.b	r7[0x0],r12
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
80003dd2:	f5 3c 00 25 	ld.ub	r12,r10[37]
80003dd6:	bc 8c       	st.b	lr[0x0],r12
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
80003dd8:	f5 3c 00 26 	ld.ub	r12,r10[38]
80003ddc:	b6 9c       	st.b	r11[0x1],r12
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
80003dde:	f5 3a 00 27 	ld.ub	r10,r10[39]
80003de2:	b6 8a       	st.b	r11[0x0],r10
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
80003de4:	12 95       	mov	r5,r9
80003de6:	40 1c       	lddsp	r12,sp[0x4]
80003de8:	f2 0c 02 4c 	mul	r12,r9,r12
80003dec:	4c fa       	lddpc	r10,80003f28 <fat_mount+0x2d8>
80003dee:	95 1c       	st.w	r10[0x4],r12

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80003df0:	4d 3a       	lddpc	r10,80003f3c <fat_mount+0x2ec>
80003df2:	f5 3a 00 13 	ld.ub	r10,r10[19]
80003df6:	58 0a       	cp.w	r10,0
80003df8:	c1 61       	brne	80003e24 <fat_mount+0x1d4>
80003dfa:	4d 16       	lddpc	r6,80003f3c <fat_mount+0x2ec>
80003dfc:	ed 34 00 14 	ld.ub	r4,r6[20]
80003e00:	30 06       	mov	r6,0
80003e02:	ec 04 18 00 	cp.b	r4,r6
80003e06:	c0 f1       	brne	80003e24 <fat_mount+0x1d4>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
80003e08:	4c da       	lddpc	r10,80003f3c <fat_mount+0x2ec>
80003e0a:	f5 36 00 20 	ld.ub	r6,r10[32]
80003e0e:	ae 86       	st.b	r7[0x0],r6
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
80003e10:	f5 37 00 21 	ld.ub	r7,r10[33]
80003e14:	bc 87       	st.b	lr[0x0],r7
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
80003e16:	f5 3e 00 22 	ld.ub	lr,r10[34]
80003e1a:	b6 9e       	st.b	r11[0x1],lr
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
80003e1c:	f5 3a 00 23 	ld.ub	r10,r10[35]
80003e20:	b6 8a       	st.b	r11[0x0],r10
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80003e22:	c0 98       	rjmp	80003e34 <fat_mount+0x1e4>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
80003e24:	ae 8a       	st.b	r7[0x0],r10
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
80003e26:	4c 6a       	lddpc	r10,80003f3c <fat_mount+0x2ec>
80003e28:	f5 3a 00 14 	ld.ub	r10,r10[20]
80003e2c:	bc 8a       	st.b	lr[0x0],r10
      LSB2( u32_tmp ) = 0;
80003e2e:	30 0a       	mov	r10,0
80003e30:	b6 9a       	st.b	r11[0x1],r10
      LSB3( u32_tmp ) = 0;
80003e32:	b6 8a       	st.b	r11[0x0],r10
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
80003e34:	40 14       	lddsp	r4,sp[0x4]

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
80003e36:	4b da       	lddpc	r10,80003f28 <fat_mount+0x2d8>
80003e38:	f8 0b 15 01 	lsl	r11,r12,0x1
80003e3c:	f5 5b 00 18 	st.h	r10[24],r11

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80003e40:	fa c6 ff f6 	sub	r6,sp,-10
80003e44:	fa c7 ff f4 	sub	r7,sp,-12
80003e48:	4b db       	lddpc	r11,80003f3c <fat_mount+0x2ec>
80003e4a:	f7 3e 00 11 	ld.ub	lr,r11[17]
80003e4e:	0e fe       	st.b	--r7,lr
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80003e50:	f7 3e 00 12 	ld.ub	lr,r11[18]
80003e54:	ac 8e       	st.b	r6[0x0],lr
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80003e56:	f2 03 15 04 	lsl	r3,r9,0x4
80003e5a:	9a de       	ld.uh	lr,sp[0xa]
80003e5c:	e6 0e 00 0e 	add	lr,r3,lr
80003e60:	a5 7e       	lsl	lr,0x5
80003e62:	20 1e       	sub	lr,1
80003e64:	f2 03 15 09 	lsl	r3,r9,0x9
80003e68:	fc 03 0c 02 	divs	r2,lr,r3
80003e6c:	e4 09 02 4e 	mul	lr,r2,r9
80003e70:	f5 5e 00 1a 	st.h	r10[26],lr

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80003e74:	f7 33 00 0e 	ld.ub	r3,r11[14]
80003e78:	ae 83       	st.b	r7[0x0],r3
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
80003e7a:	f7 37 00 0f 	ld.ub	r7,r11[15]
80003e7e:	ac 87       	st.b	r6[0x0],r7
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80003e80:	9a 57       	ld.sh	r7,sp[0xa]
80003e82:	f7 3b 00 30 	ld.ub	r11,r11[48]
80003e86:	0e 96       	mov	r6,r7
80003e88:	ee 0b 01 0b 	sub	r11,r7,r11
80003e8c:	b3 3b       	mul	r11,r9
80003e8e:	b4 4b       	st.h	r10[0x8],r11
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
80003e90:	ee 09 02 49 	mul	r9,r7,r9
80003e94:	5c 79       	castu.h	r9
80003e96:	4a 8b       	lddpc	r11,80003f34 <fat_mount+0x2e4>
80003e98:	76 0b       	ld.w	r11,r11[0x0]
80003e9a:	f2 0b 00 0b 	add	r11,r9,r11
80003e9e:	95 4b       	st.w	r10[0x10],r11

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
80003ea0:	5c 7e       	castu.h	lr
80003ea2:	fc 0c 00 1c 	add	r12,lr,r12<<0x1
80003ea6:	95 5c       	st.w	r10[0x14],r12
   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
80003ea8:	58 08       	cp.w	r8,0
80003eaa:	c3 b0       	breq	80003f20 <fat_mount+0x2d0>

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80003eac:	a9 35       	mul	r5,r4
80003eae:	ea 09 01 09 	sub	r9,r5,r9
80003eb2:	18 19       	sub	r9,r12
80003eb4:	50 19       	stdsp	sp[0x4],r9

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80003eb6:	30 1a       	mov	r10,1
80003eb8:	f4 08 18 00 	cp.b	r8,r10
80003ebc:	c0 70       	breq	80003eca <fat_mount+0x27a>
   {
     u32_tmp  >>= 1;   // This computation round down
80003ebe:	a1 99       	lsr	r9,0x1

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80003ec0:	a1 98       	lsr	r8,0x1
80003ec2:	f4 08 18 00 	cp.b	r8,r10
80003ec6:	cf c1       	brne	80003ebe <fat_mount+0x26e>
80003ec8:	50 19       	stdsp	sp[0x4],r9
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
80003eca:	40 18       	lddsp	r8,sp[0x4]
80003ecc:	f0 ca ff fe 	sub	r10,r8,-2
80003ed0:	49 69       	lddpc	r9,80003f28 <fat_mount+0x2d8>
80003ed2:	93 3a       	st.w	r9[0xc],r10

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
80003ed4:	e0 48 0f f4 	cp.w	r8,4084
80003ed8:	e0 8b 00 07 	brhi	80003ee6 <fat_mount+0x296>
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
80003edc:	30 19       	mov	r9,1
80003ede:	49 58       	lddpc	r8,80003f30 <fat_mount+0x2e0>
80003ee0:	b0 89       	st.b	r8[0x0],r9
80003ee2:	30 1c       	mov	r12,1
80003ee4:	c1 f8       	rjmp	80003f22 <fat_mount+0x2d2>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
80003ee6:	e0 48 ff f4 	cp.w	r8,65524
80003eea:	e0 8b 00 07 	brhi	80003ef8 <fat_mount+0x2a8>
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80003eee:	30 29       	mov	r9,2
80003ef0:	49 08       	lddpc	r8,80003f30 <fat_mount+0x2e0>
80003ef2:	b0 89       	st.b	r8[0x0],r9
80003ef4:	30 1c       	mov	r12,1
80003ef6:	c1 68       	rjmp	80003f22 <fat_mount+0x2d2>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
80003ef8:	30 39       	mov	r9,3
80003efa:	48 e8       	lddpc	r8,80003f30 <fat_mount+0x2e0>
80003efc:	b0 89       	st.b	r8[0x0],r9
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80003efe:	48 b8       	lddpc	r8,80003f28 <fat_mount+0x2d8>
80003f00:	2e 88       	sub	r8,-24
80003f02:	48 f9       	lddpc	r9,80003f3c <fat_mount+0x2ec>
80003f04:	f3 3a 00 2c 	ld.ub	r10,r9[44]
80003f08:	b0 ba       	st.b	r8[0x3],r10
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
80003f0a:	f3 3a 00 2d 	ld.ub	r10,r9[45]
80003f0e:	b0 aa       	st.b	r8[0x2],r10
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80003f10:	f3 3a 00 2e 	ld.ub	r10,r9[46]
80003f14:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80003f16:	f3 39 00 2f 	ld.ub	r9,r9[47]
80003f1a:	b0 89       	st.b	r8[0x0],r9
80003f1c:	30 1c       	mov	r12,1
80003f1e:	c0 28       	rjmp	80003f22 <fat_mount+0x2d2>
80003f20:	30 0c       	mov	r12,0
   }
   }

   return true;
}
80003f22:	2f dd       	sub	sp,-12
80003f24:	d8 32       	popm	r0-r7,pc
80003f26:	00 00       	add	r0,r0
80003f28:	00 00       	add	r0,r0
80003f2a:	08 e0       	st.h	--r4,r0
80003f2c:	80 00       	ld.sh	r0,r0[0x0]
80003f2e:	2f 54       	sub	r4,-11
80003f30:	00 00       	add	r0,r0
80003f32:	09 28       	ld.uh	r8,r4++
80003f34:	00 00       	add	r0,r0
80003f36:	06 a0       	st.w	r3++,r0
80003f38:	80 00       	ld.sh	r0,r0[0x0]
80003f3a:	3a ac       	mov	r12,-86
80003f3c:	00 00       	add	r0,r0
80003f3e:	06 e0       	st.h	--r3,r0
80003f40:	80 00       	ld.sh	r0,r0[0x0]
80003f42:	34 d0       	mov	r0,77
80003f44:	00 00       	add	r0,r0
80003f46:	09 2c       	ld.uh	r12,r4++
80003f48:	80 00       	ld.sh	r0,r0[0x0]
80003f4a:	6a b0       	ld.w	r0,r5[0x2c]

80003f4c <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
80003f4c:	d4 01       	pushm	lr
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
80003f4e:	f0 1f 00 04 	mcall	80003f5c <file_close+0x10>
80003f52:	c0 40       	breq	80003f5a <file_close+0xe>
            return;           // error
         fat_write_entry_file();
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
80003f54:	30 09       	mov	r9,0
80003f56:	48 38       	lddpc	r8,80003f60 <file_close+0x14>
80003f58:	b0 89       	st.b	r8[0x0],r9
80003f5a:	d8 02       	popm	pc
80003f5c:	80 00       	ld.sh	r0,r0[0x0]
80003f5e:	3b f0       	mov	r0,-65
80003f60:	00 00       	add	r0,r0
80003f62:	06 a4       	st.w	r3++,r4

80003f64 <file_eof>:
//! @return    1     the position is at the end of file
//! @return    0     the position isn't at the end of file
//! @return    FFh   error
//!
uint8_t    file_eof( void )
{
80003f64:	d4 01       	pushm	lr
   if( !fat_check_mount_select_open() )
80003f66:	f0 1f 00 07 	mcall	80003f80 <file_eof+0x1c>
80003f6a:	c0 41       	brne	80003f72 <file_eof+0xe>
80003f6c:	e0 6c 00 ff 	mov	r12,255
80003f70:	d8 02       	popm	pc
      return 0xFF;
   return (fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file );
80003f72:	48 58       	lddpc	r8,80003f84 <file_eof+0x20>
80003f74:	70 29       	ld.w	r9,r8[0x8]
80003f76:	70 38       	ld.w	r8,r8[0xc]
80003f78:	10 39       	cp.w	r9,r8
80003f7a:	5f 8c       	srls	r12
}
80003f7c:	d8 02       	popm	pc
80003f7e:	00 00       	add	r0,r0
80003f80:	80 00       	ld.sh	r0,r0[0x0]
80003f82:	3b f0       	mov	r0,-65
80003f84:	00 00       	add	r0,r0
80003f86:	06 a4       	st.w	r3++,r4

80003f88 <file_bof>:
//! @return    1     the position is at the beginning of file
//! @return    0     the position isn't at the beginning of file
//! @return    FFh   error
//!
uint8_t    file_bof( void )
{
80003f88:	d4 01       	pushm	lr
   if( !fat_check_mount_select_open() )
80003f8a:	f0 1f 00 06 	mcall	80003fa0 <file_bof+0x18>
80003f8e:	c0 41       	brne	80003f96 <file_bof+0xe>
80003f90:	e0 6c 00 ff 	mov	r12,255
80003f94:	d8 02       	popm	pc
      return 0xFF;

   return (0 == fs_g_nav_entry.u32_pos_in_file );
80003f96:	48 48       	lddpc	r8,80003fa4 <file_bof+0x1c>
80003f98:	70 38       	ld.w	r8,r8[0xc]
80003f9a:	58 08       	cp.w	r8,0
80003f9c:	5f 0c       	sreq	r12
}
80003f9e:	d8 02       	popm	pc
80003fa0:	80 00       	ld.sh	r0,r0[0x0]
80003fa2:	3b f0       	mov	r0,-65
80003fa4:	00 00       	add	r0,r0
80003fa6:	06 a4       	st.w	r3++,r4

80003fa8 <file_getc>:
//!
//! @return    The byte readed
//! @return    EOF, in case of error or end of file
//!
uint16_t   file_getc( void )
{
80003fa8:	d4 01       	pushm	lr
   uint16_t   u16_byte;

   while(1)
   {
      if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
80003faa:	49 78       	lddpc	r8,80004004 <file_getc+0x5c>
80003fac:	11 88       	ld.ub	r8,r8[0x0]
80003fae:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003fb2:	c0 51       	brne	80003fbc <file_getc+0x14>
      {
         fs_g_status = FS_ERR_WRITE_ONLY;
80003fb4:	31 e9       	mov	r9,30
80003fb6:	49 58       	lddpc	r8,80004008 <file_getc+0x60>
80003fb8:	b0 89       	st.b	r8[0x0],r9
80003fba:	dc 0a       	popm	pc,r12=-1
         break;
      }
      if( fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file )
80003fbc:	49 28       	lddpc	r8,80004004 <file_getc+0x5c>
80003fbe:	70 29       	ld.w	r9,r8[0x8]
80003fc0:	70 38       	ld.w	r8,r8[0xc]
80003fc2:	10 39       	cp.w	r9,r8
80003fc4:	e0 8b 00 06 	brhi	80003fd0 <file_getc+0x28>
      {
         fs_g_status = FS_ERR_EOF;
80003fc8:	32 09       	mov	r9,32
80003fca:	49 08       	lddpc	r8,80004008 <file_getc+0x60>
80003fcc:	b0 89       	st.b	r8[0x0],r9
80003fce:	dc 0a       	popm	pc,r12=-1
         break;
      }

      if( !fat_read_file( FS_CLUST_ACT_ONE ))
80003fd0:	30 2c       	mov	r12,2
80003fd2:	f0 1f 00 0f 	mcall	8000400c <file_getc+0x64>
80003fd6:	c0 c1       	brne	80003fee <file_getc+0x46>
      {
         if( FS_ERR_OUT_LIST == fs_g_status )
80003fd8:	48 c8       	lddpc	r8,80004008 <file_getc+0x60>
80003fda:	11 89       	ld.ub	r9,r8[0x0]
80003fdc:	31 a8       	mov	r8,26
80003fde:	f0 09 18 00 	cp.b	r9,r8
80003fe2:	c0 20       	breq	80003fe6 <file_getc+0x3e>
80003fe4:	dc 0a       	popm	pc,r12=-1
         {  // Translate the error
            fs_g_status = FS_ERR_EOF;   // End of file
80003fe6:	32 09       	mov	r9,32
80003fe8:	48 88       	lddpc	r8,80004008 <file_getc+0x60>
80003fea:	b0 89       	st.b	r8[0x0],r9
80003fec:	dc 0a       	popm	pc,r12=-1
         }
         break;
      }

      u16_byte = fs_g_sector[ fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK ];
80003fee:	48 68       	lddpc	r8,80004004 <file_getc+0x5c>
80003ff0:	70 39       	ld.w	r9,r8[0xc]
80003ff2:	f5 d9 c0 09 	bfextu	r10,r9,0x0,0x9
80003ff6:	48 7b       	lddpc	r11,80004010 <file_getc+0x68>
80003ff8:	f6 0a 07 0c 	ld.ub	r12,r11[r10]
      fs_g_nav_entry.u32_pos_in_file++;
80003ffc:	2f f9       	sub	r9,-1
80003ffe:	91 39       	st.w	r8[0xc],r9
      return u16_byte;
   }
   return FS_EOF;   // No data readed
}
80004000:	d8 02       	popm	pc
80004002:	00 00       	add	r0,r0
80004004:	00 00       	add	r0,r0
80004006:	06 a4       	st.w	r3++,r4
80004008:	00 00       	add	r0,r0
8000400a:	09 2c       	ld.uh	r12,r4++
8000400c:	80 00       	ld.sh	r0,r0[0x0]
8000400e:	39 d0       	mov	r0,-99
80004010:	00 00       	add	r0,r0
80004012:	06 e0       	st.h	--r3,r0

80004014 <file_read_buf>:
//!
//! @return    number of byte read
//! @return    0, in case of error
//!
uint16_t   file_read_buf( uint8_t _MEM_TYPE_SLOW_ *buffer , uint16_t u16_buf_size )
{
80004014:	d4 31       	pushm	r0-r7,lr
80004016:	20 1d       	sub	sp,4
80004018:	18 95       	mov	r5,r12
8000401a:	16 94       	mov	r4,r11
   _MEM_TYPE_FAST_ uint16_t u16_nb_read_tmp;
   _MEM_TYPE_FAST_ uint16_t u16_nb_read;
   _MEM_TYPE_FAST_ uint16_t u16_pos_in_sector;
   _MEM_TYPE_FAST_ uint32_t u32_byte_remaining;

   if( !fat_check_mount_select_open())
8000401c:	f0 1f 00 58 	mcall	8000417c <file_read_buf+0x168>
80004020:	e0 80 00 a9 	breq	80004172 <file_read_buf+0x15e>
      return false;

   if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
80004024:	4d 78       	lddpc	r8,80004180 <file_read_buf+0x16c>
80004026:	11 88       	ld.ub	r8,r8[0x0]
80004028:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000402c:	c0 40       	breq	80004034 <file_read_buf+0x20>
      return false;
   }

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
8000402e:	58 04       	cp.w	r4,0
80004030:	c0 71       	brne	8000403e <file_read_buf+0x2a>
80004032:	ca 08       	rjmp	80004172 <file_read_buf+0x15e>
   if( !fat_check_mount_select_open())
      return false;

   if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
   {
      fs_g_status = FS_ERR_WRITE_ONLY;
80004034:	31 e9       	mov	r9,30
80004036:	4d 48       	lddpc	r8,80004184 <file_read_buf+0x170>
80004038:	b0 89       	st.b	r8[0x0],r9
8000403a:	30 00       	mov	r0,0
      return false;
8000403c:	c9 c8       	rjmp	80004174 <file_read_buf+0x160>
8000403e:	30 00       	mov	r0,0
      if ( file_eof() )
      {
         fs_g_status = FS_ERR_EOF;
         return u16_nb_read;     // End of the file
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
80004040:	4d 03       	lddpc	r3,80004180 <file_read_buf+0x16c>
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;

      if( (0== u16_pos_in_sector)
80004042:	30 09       	mov	r9,0
80004044:	ba b9       	st.b	sp[0x3],r9
            if( FS_ERR_OUT_LIST == fs_g_status )
               fs_g_status = FS_ERR_EOF;  // translate the error
            return u16_nb_read;
         }
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
80004046:	4d 17       	lddpc	r7,80004188 <file_read_buf+0x174>

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
   {
      if ( file_eof() )
80004048:	f0 1f 00 51 	mcall	8000418c <file_read_buf+0x178>
8000404c:	c0 50       	breq	80004056 <file_read_buf+0x42>
      {
         fs_g_status = FS_ERR_EOF;
8000404e:	32 09       	mov	r9,32
80004050:	4c d8       	lddpc	r8,80004184 <file_read_buf+0x170>
80004052:	b0 89       	st.b	r8[0x0],r9
         return u16_nb_read;     // End of the file
80004054:	c9 08       	rjmp	80004174 <file_read_buf+0x160>
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
80004056:	66 31       	ld.w	r1,r3[0xc]
80004058:	66 26       	ld.w	r6,r3[0x8]
8000405a:	02 16       	sub	r6,r1
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
8000405c:	e3 d1 c0 09 	bfextu	r1,r1,0x0,0x9

      if( (0== u16_pos_in_sector)
80004060:	30 08       	mov	r8,0
80004062:	f0 01 19 00 	cp.h	r1,r8
80004066:	5f 09       	sreq	r9
80004068:	e0 46 01 ff 	cp.w	r6,511
8000406c:	5f b8       	srhi	r8
8000406e:	f3 e8 00 08 	and	r8,r9,r8
80004072:	1b b9       	ld.ub	r9,sp[0x3]
80004074:	f2 08 18 00 	cp.b	r8,r9
80004078:	c4 90       	breq	8000410a <file_read_buf+0xf6>
8000407a:	e0 68 01 ff 	mov	r8,511
8000407e:	f0 04 19 00 	cp.h	r4,r8
80004082:	e0 88 00 44 	brls	8000410a <file_read_buf+0xf6>
80004086:	f1 d5 c0 02 	bfextu	r8,r5,0x0,0x2
8000408a:	c4 01       	brne	8000410a <file_read_buf+0xf6>
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
#endif
      )
      {
         // The file data sector can been directly transfer from memory to buffer (don't use internal cache)
         if( u16_buf_size <= u32_byte_remaining)
8000408c:	08 98       	mov	r8,r4
8000408e:	5c 78       	castu.h	r8
80004090:	10 36       	cp.w	r6,r8
80004092:	c0 43       	brcs	8000409a <file_read_buf+0x86>
80004094:	08 96       	mov	r6,r4
80004096:	5c 86       	casts.h	r6
80004098:	c0 28       	rjmp	8000409c <file_read_buf+0x88>
         {
            u16_nb_read_tmp = u16_buf_size;
         }else{
            u16_nb_read_tmp = u32_byte_remaining;
8000409a:	5c 86       	casts.h	r6
         }
         u16_nb_read_tmp = u16_nb_read_tmp / FS_512B;  // read a modulo sector size

         // Get following sector segment of file
         if( !fat_read_file(FS_CLUST_ACT_SEG))
8000409c:	30 1c       	mov	r12,1
8000409e:	f0 1f 00 3d 	mcall	80004190 <file_read_buf+0x17c>
800040a2:	c0 b1       	brne	800040b8 <file_read_buf+0xa4>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
800040a4:	4b 88       	lddpc	r8,80004184 <file_read_buf+0x170>
800040a6:	11 89       	ld.ub	r9,r8[0x0]
800040a8:	31 a8       	mov	r8,26
800040aa:	f0 09 18 00 	cp.b	r9,r8
800040ae:	c6 31       	brne	80004174 <file_read_buf+0x160>
               fs_g_status = FS_ERR_EOF;  // translate the error
800040b0:	32 09       	mov	r9,32
800040b2:	4b 58       	lddpc	r8,80004184 <file_read_buf+0x170>
800040b4:	b0 89       	st.b	r8[0x0],r9
800040b6:	c5 f8       	rjmp	80004174 <file_read_buf+0x160>
         {
            u16_nb_read_tmp = u16_buf_size;
         }else{
            u16_nb_read_tmp = u32_byte_remaining;
         }
         u16_nb_read_tmp = u16_nb_read_tmp / FS_512B;  // read a modulo sector size
800040b8:	ed d6 c1 27 	bfextu	r6,r6,0x9,0x7
            if( FS_ERR_OUT_LIST == fs_g_status )
               fs_g_status = FS_ERR_EOF;  // translate the error
            return u16_nb_read;
         }
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
800040bc:	f1 d6 c0 10 	bfextu	r8,r6,0x0,0x10
800040c0:	6e 19       	ld.w	r9,r7[0x4]
800040c2:	12 38       	cp.w	r8,r9
800040c4:	e0 88 00 08 	brls	800040d4 <file_read_buf+0xc0>
         {
            u16_nb_read_tmp = fs_g_seg.u32_size_or_pos;
800040c8:	ed d9 b0 10 	bfexts	r6,r9,0x0,0x10
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
         }

         // Directly data tranfert from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
800040cc:	6e 18       	ld.w	r8,r7[0x4]
800040ce:	58 08       	cp.w	r8,0
800040d0:	c0 41       	brne	800040d8 <file_read_buf+0xc4>
800040d2:	c1 88       	rjmp	80004102 <file_read_buf+0xee>
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
         {
            u16_nb_read_tmp = fs_g_seg.u32_size_or_pos;
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
800040d4:	8f 18       	st.w	r7[0x4],r8
800040d6:	cf bb       	rjmp	800040cc <file_read_buf+0xb8>
         }

         // Directly data tranfert from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
         {
            if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_seg.u32_addr, buffer))
800040d8:	0a 9a       	mov	r10,r5
800040da:	6e 0b       	ld.w	r11,r7[0x0]
800040dc:	4a e8       	lddpc	r8,80004194 <file_read_buf+0x180>
800040de:	11 8c       	ld.ub	r12,r8[0x0]
800040e0:	f0 1f 00 2e 	mcall	80004198 <file_read_buf+0x184>
800040e4:	c0 50       	breq	800040ee <file_read_buf+0xda>
            {
               fs_g_status = FS_ERR_HW;
800040e6:	30 19       	mov	r9,1
800040e8:	4a 78       	lddpc	r8,80004184 <file_read_buf+0x170>
800040ea:	b0 89       	st.b	r8[0x0],r9
               return u16_nb_read;
800040ec:	c4 48       	rjmp	80004174 <file_read_buf+0x160>
            }
            fs_g_seg.u32_size_or_pos--;
800040ee:	6e 18       	ld.w	r8,r7[0x4]
800040f0:	20 18       	sub	r8,1
800040f2:	8f 18       	st.w	r7[0x4],r8
            fs_g_seg.u32_addr++;
800040f4:	6e 09       	ld.w	r9,r7[0x0]
800040f6:	2f f9       	sub	r9,-1
800040f8:	8f 09       	st.w	r7[0x0],r9
            buffer += FS_512B;
800040fa:	ea c5 fe 00 	sub	r5,r5,-512
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
         }

         // Directly data tranfert from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
800040fe:	58 08       	cp.w	r8,0
80004100:	ce c1       	brne	800040d8 <file_read_buf+0xc4>
            fs_g_seg.u32_size_or_pos--;
            fs_g_seg.u32_addr++;
            buffer += FS_512B;
         }
         // Translate from sector unit to byte unit
         u16_nb_read_tmp *= FS_512B;
80004102:	a9 76       	lsl	r6,0x9
80004104:	e5 d6 b0 10 	bfexts	r2,r6,0x0,0x10
         return u16_nb_read;     // End of the file
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;

      if( (0== u16_pos_in_sector)
80004108:	c2 78       	rjmp	80004156 <file_read_buf+0x142>
      else
      {
         // The file data can't been directly transfer from memory to buffer, the internal cache must be used

         // Tranfer data from memory to internal cache
         if( !fat_read_file( FS_CLUST_ACT_ONE ))
8000410a:	30 2c       	mov	r12,2
8000410c:	f0 1f 00 21 	mcall	80004190 <file_read_buf+0x17c>
80004110:	c0 b1       	brne	80004126 <file_read_buf+0x112>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
80004112:	49 d8       	lddpc	r8,80004184 <file_read_buf+0x170>
80004114:	11 89       	ld.ub	r9,r8[0x0]
80004116:	31 a8       	mov	r8,26
80004118:	f0 09 18 00 	cp.b	r9,r8
8000411c:	c2 c1       	brne	80004174 <file_read_buf+0x160>
            {  // Translate the error
               fs_g_status = FS_ERR_EOF;   // End of file
8000411e:	32 09       	mov	r9,32
80004120:	49 98       	lddpc	r8,80004184 <file_read_buf+0x170>
80004122:	b0 89       	st.b	r8[0x0],r9
80004124:	c2 88       	rjmp	80004174 <file_read_buf+0x160>
            }
            return u16_nb_read;
         }

         // Compute the number of data to transfer
         u16_nb_read_tmp = FS_512B - u16_pos_in_sector;  // The number is limited at sector size
80004126:	e0 62 02 00 	mov	r2,512
8000412a:	02 12       	sub	r2,r1
8000412c:	5c 82       	casts.h	r2
         if( u16_nb_read_tmp > u32_byte_remaining )
8000412e:	f1 d2 c0 10 	bfextu	r8,r2,0x0,0x10
80004132:	10 36       	cp.w	r6,r8
80004134:	c0 32       	brcc	8000413a <file_read_buf+0x126>
            u16_nb_read_tmp = u32_byte_remaining;
80004136:	e5 d6 b0 10 	bfexts	r2,r6,0x0,0x10
8000413a:	e4 04 19 00 	cp.h	r4,r2
8000413e:	e8 02 17 30 	movlo	r2,r4
80004142:	5c 82       	casts.h	r2
         if( u16_nb_read_tmp > u16_buf_size )
            u16_nb_read_tmp = u16_buf_size;

         // Tranfer data from internal cache to buffer
         memcpy_ram2ram( buffer , &fs_g_sector[ u16_pos_in_sector ], u16_nb_read_tmp );
80004144:	ed d2 c0 10 	bfextu	r6,r2,0x0,0x10
80004148:	0c 9a       	mov	r10,r6
8000414a:	49 5b       	lddpc	r11,8000419c <file_read_buf+0x188>
8000414c:	02 0b       	add	r11,r1
8000414e:	0a 9c       	mov	r12,r5
80004150:	f0 1f 00 14 	mcall	800041a0 <file_read_buf+0x18c>
         buffer += u16_nb_read_tmp;
80004154:	0c 05       	add	r5,r6
      }
      // Update positions
      fs_g_nav_entry.u32_pos_in_file   += u16_nb_read_tmp;
80004156:	f3 d2 c0 10 	bfextu	r9,r2,0x0,0x10
8000415a:	66 38       	ld.w	r8,r3[0xc]
8000415c:	f2 08 00 08 	add	r8,r9,r8
80004160:	87 38       	st.w	r3[0xc],r8
      u16_nb_read                      += u16_nb_read_tmp;
80004162:	e4 00 00 00 	add	r0,r2,r0
80004166:	5c 80       	casts.h	r0
      u16_buf_size                     -= u16_nb_read_tmp;
80004168:	04 14       	sub	r4,r2
8000416a:	5c 84       	casts.h	r4
      return false;
   }

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
8000416c:	fe 91 ff 6e 	brne	80004048 <file_read_buf+0x34>
80004170:	c0 28       	rjmp	80004174 <file_read_buf+0x160>
80004172:	30 00       	mov	r0,0
      fs_g_nav_entry.u32_pos_in_file   += u16_nb_read_tmp;
      u16_nb_read                      += u16_nb_read_tmp;
      u16_buf_size                     -= u16_nb_read_tmp;
   }
   return u16_nb_read;  // Buffer is full
}
80004174:	00 9c       	mov	r12,r0
80004176:	2f fd       	sub	sp,-4
80004178:	d8 32       	popm	r0-r7,pc
8000417a:	00 00       	add	r0,r0
8000417c:	80 00       	ld.sh	r0,r0[0x0]
8000417e:	3b f0       	mov	r0,-65
80004180:	00 00       	add	r0,r0
80004182:	06 a4       	st.w	r3++,r4
80004184:	00 00       	add	r0,r0
80004186:	09 2c       	ld.uh	r12,r4++
80004188:	00 00       	add	r0,r0
8000418a:	09 84       	ld.ub	r4,r4[0x0]
8000418c:	80 00       	ld.sh	r0,r0[0x0]
8000418e:	3f 64       	mov	r4,-10
80004190:	80 00       	ld.sh	r0,r0[0x0]
80004192:	39 d0       	mov	r0,-99
80004194:	00 00       	add	r0,r0
80004196:	08 e0       	st.h	--r4,r0
80004198:	80 00       	ld.sh	r0,r0[0x0]
8000419a:	6b 50       	ld.w	r0,r5[0x54]
8000419c:	00 00       	add	r0,r0
8000419e:	06 e0       	st.h	--r3,r0
800041a0:	80 00       	ld.sh	r0,r0[0x0]
800041a2:	76 b0       	ld.w	r0,r11[0x2c]

800041a4 <file_open>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_open( uint8_t fopen_mode )
{
800041a4:	eb cd 40 c0 	pushm	r6-r7,lr
800041a8:	18 97       	mov	r7,r12
   if( !fat_check_mount_select_noopen())
800041aa:	f0 1f 00 18 	mcall	80004208 <file_open+0x64>
800041ae:	c2 b0       	breq	80004204 <file_open+0x60>
      return false;

   if( !fat_check_is_file())
800041b0:	f0 1f 00 17 	mcall	8000420c <file_open+0x68>
800041b4:	c2 80       	breq	80004204 <file_open+0x60>
      return false;

   if(FOPEN_WRITE_ACCESS & fopen_mode)
800041b6:	0e 96       	mov	r6,r7
800041b8:	0e 98       	mov	r8,r7
800041ba:	e2 18 00 02 	andl	r8,0x2,COH
800041be:	c0 a0       	breq	800041d2 <file_open+0x2e>
   {
      if( !fat_check_nav_access_file( true ) )
800041c0:	30 1c       	mov	r12,1
800041c2:	f0 1f 00 14 	mcall	80004210 <file_open+0x6c>
800041c6:	c1 f0       	breq	80004204 <file_open+0x60>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
         return false;
      }
#else
      fs_g_status = FS_ERR_MODE_NOAVIALABLE;
800041c8:	31 f9       	mov	r9,31
800041ca:	49 38       	lddpc	r8,80004214 <file_open+0x70>
800041cc:	b0 89       	st.b	r8[0x0],r9
800041ce:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( false ) )
800041d2:	30 0c       	mov	r12,0
800041d4:	f0 1f 00 0f 	mcall	80004210 <file_open+0x6c>
800041d8:	c1 60       	breq	80004204 <file_open+0x60>
         return false;
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
800041da:	0e 98       	mov	r8,r7
800041dc:	e2 18 00 04 	andl	r8,0x4,COH
800041e0:	c0 40       	breq	800041e8 <file_open+0x44>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
800041e2:	30 09       	mov	r9,0
800041e4:	48 d8       	lddpc	r8,80004218 <file_open+0x74>
800041e6:	91 29       	st.w	r8[0x8],r9
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
800041e8:	e2 16 00 08 	andl	r6,0x8,COH
800041ec:	c0 50       	breq	800041f6 <file_open+0x52>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
800041ee:	30 09       	mov	r9,0
800041f0:	48 a8       	lddpc	r8,80004218 <file_open+0x74>
800041f2:	91 39       	st.w	r8[0xc],r9
800041f4:	c0 48       	rjmp	800041fc <file_open+0x58>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
800041f6:	48 98       	lddpc	r8,80004218 <file_open+0x74>
800041f8:	70 29       	ld.w	r9,r8[0x8]
800041fa:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
800041fc:	48 78       	lddpc	r8,80004218 <file_open+0x74>
800041fe:	b0 87       	st.b	r8[0x0],r7
80004200:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
   return true;
80004204:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80004208:	80 00       	ld.sh	r0,r0[0x0]
8000420a:	3c 14       	mov	r4,-63
8000420c:	80 00       	ld.sh	r0,r0[0x0]
8000420e:	2c 74       	sub	r4,-57
80004210:	80 00       	ld.sh	r0,r0[0x0]
80004212:	33 28       	mov	r8,50
80004214:	00 00       	add	r0,r0
80004216:	09 2c       	ld.uh	r12,r4++
80004218:	00 00       	add	r0,r0
8000421a:	06 a4       	st.w	r3++,r4

8000421c <nav_getindex>:
//! This routine is interresting to save a file position in small variable.
//! This pointer allow to reinit a navigator quickly with nav_gotoindex() routine.
//! @endverbatim
//!
Fs_index nav_getindex( void )
{
8000421c:	20 3d       	sub	sp,12
   // Fill index structure
   index.u8_lun                  = fs_g_nav.u8_lun;
#if (FS_MULTI_PARTITION  ==  true)
   index.u8_partition            = fs_g_nav.u8_partition;
#endif
   index.u32_cluster_sel_dir     = fs_g_nav.u32_cluster_sel_dir;
8000421e:	48 69       	lddpc	r9,80004234 <nav_getindex+0x18>
80004220:	72 8b       	ld.w	r11,r9[0x20]
   index.u16_entry_pos_sel_file  = fs_g_nav_fast.u16_entry_pos_sel_file;
80004222:	48 6a       	lddpc	r10,80004238 <nav_getindex+0x1c>
80004224:	94 1a       	ld.sh	r10,r10[0x2]
   return index;
80004226:	13 89       	ld.ub	r9,r9[0x0]
80004228:	b8 89       	st.b	r12[0x0],r9
8000422a:	99 1b       	st.w	r12[0x4],r11
8000422c:	b8 4a       	st.h	r12[0x8],r10
}
8000422e:	2f dd       	sub	sp,-12
80004230:	5e fc       	retal	r12
80004232:	00 00       	add	r0,r0
80004234:	00 00       	add	r0,r0
80004236:	08 e0       	st.h	--r4,r0
80004238:	00 00       	add	r0,r0
8000423a:	09 28       	ld.uh	r8,r4++

8000423c <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
8000423c:	d4 31       	pushm	r0-r7,lr
8000423e:	20 1d       	sub	sp,4
80004240:	18 95       	mov	r5,r12
80004242:	16 96       	mov	r6,r11
80004244:	14 97       	mov	r7,r10
80004246:	12 93       	mov	r3,r9
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;

   if ( !fat_check_mount_select())
80004248:	f0 1f 00 2d 	mcall	800042fc <nav_file_name+0xc0>
8000424c:	c5 50       	breq	800042f6 <nav_file_name+0xba>
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
8000424e:	58 07       	cp.w	r7,0
80004250:	c0 50       	breq	8000425a <nav_file_name+0x1e>
80004252:	58 06       	cp.w	r6,0
80004254:	c0 31       	brne	8000425a <nav_file_name+0x1e>
80004256:	30 1c       	mov	r12,1
80004258:	c5 08       	rjmp	800042f8 <nav_file_name+0xbc>
   {
      return true;
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
8000425a:	4a a8       	lddpc	r8,80004300 <nav_file_name+0xc4>
8000425c:	90 14       	ld.sh	r4,r8[0x2]
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
8000425e:	58 04       	cp.w	r4,0
80004260:	c0 31       	brne	80004266 <nav_file_name+0x2a>
80004262:	30 10       	mov	r0,1
80004264:	c0 68       	rjmp	80004270 <nav_file_name+0x34>
   {
      b_readshortname = true;                   // It isn't possibled to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
80004266:	08 99       	mov	r9,r4
80004268:	20 19       	sub	r9,1
8000426a:	4a 68       	lddpc	r8,80004300 <nav_file_name+0xc4>
8000426c:	b0 19       	st.h	r8[0x2],r9
8000426e:	30 00       	mov	r0,0
80004270:	30 09       	mov	r9,0
80004272:	50 09       	stdsp	sp[0x0],r9
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80004274:	31 01       	mov	r1,16
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80004276:	4a 32       	lddpc	r2,80004300 <nav_file_name+0xc4>
80004278:	c0 28       	rjmp	8000427c <nav_file_name+0x40>
   {
      b_readshortname = true;                   // It isn't possibled to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
8000427a:	30 10       	mov	r0,1

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
8000427c:	f0 1f 00 22 	mcall	80004304 <nav_file_name+0xc8>
80004280:	c3 b0       	breq	800042f6 <nav_file_name+0xba>
         break; // error

      if ( b_readshortname )
80004282:	58 00       	cp.w	r0,0
80004284:	c0 70       	breq	80004292 <nav_file_name+0x56>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
80004286:	0e 9a       	mov	r10,r7
80004288:	0c 9b       	mov	r11,r6
8000428a:	0a 9c       	mov	r12,r5
8000428c:	f0 1f 00 1f 	mcall	80004308 <nav_file_name+0xcc>
80004290:	c3 48       	rjmp	800042f8 <nav_file_name+0xbc>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
80004292:	06 99       	mov	r9,r3
80004294:	0e 9a       	mov	r10,r7
80004296:	0c 9b       	mov	r11,r6
80004298:	0a 9c       	mov	r12,r5
8000429a:	f0 1f 00 1d 	mcall	8000430c <nav_file_name+0xd0>
8000429e:	c0 f0       	breq	800042bc <nav_file_name+0x80>
      {
         if( g_b_string_length )
800042a0:	49 c8       	lddpc	r8,80004310 <nav_file_name+0xd4>
800042a2:	11 89       	ld.ub	r9,r8[0x0]
800042a4:	30 08       	mov	r8,0
800042a6:	f0 09 18 00 	cp.b	r9,r8
800042aa:	c0 50       	breq	800042b4 <nav_file_name+0x78>
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
800042ac:	8a 08       	ld.sh	r8,r5[0x0]
800042ae:	40 09       	lddsp	r9,sp[0x0]
800042b0:	12 08       	add	r8,r9
800042b2:	aa 08       	st.h	r5[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
800042b4:	49 38       	lddpc	r8,80004300 <nav_file_name+0xc4>
800042b6:	b0 14       	st.h	r8[0x2],r4
800042b8:	30 1c       	mov	r12,1
         return true;
800042ba:	c1 f8       	rjmp	800042f8 <nav_file_name+0xbc>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
800042bc:	49 69       	lddpc	r9,80004314 <nav_file_name+0xd8>
800042be:	13 88       	ld.ub	r8,r9[0x0]
800042c0:	e2 08 18 00 	cp.b	r8,r1
800042c4:	c0 70       	breq	800042d2 <nav_file_name+0x96>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
800042c6:	a4 14       	st.h	r2[0x2],r4

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
800042c8:	30 b9       	mov	r9,11
800042ca:	f2 08 18 00 	cp.b	r8,r9
800042ce:	c1 41       	brne	800042f6 <nav_file_name+0xba>
800042d0:	cd 5b       	rjmp	8000427a <nav_file_name+0x3e>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
800042d2:	49 09       	lddpc	r9,80004310 <nav_file_name+0xd4>
800042d4:	13 88       	ld.ub	r8,r9[0x0]
800042d6:	30 09       	mov	r9,0
800042d8:	f2 08 18 00 	cp.b	r8,r9
800042dc:	c0 60       	breq	800042e8 <nav_file_name+0xac>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
800042de:	40 08       	lddsp	r8,sp[0x0]
800042e0:	2f 38       	sub	r8,-13
800042e2:	5c 88       	casts.h	r8
800042e4:	50 08       	stdsp	sp[0x0],r8
800042e6:	c0 48       	rjmp	800042ee <nav_file_name+0xb2>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
800042e8:	2f 35       	sub	r5,-13
         u8_size_max -= FS_SIZE_LFN_ENTRY;
800042ea:	20 d6       	sub	r6,13
800042ec:	5c 56       	castu.b	r6
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
800042ee:	84 18       	ld.sh	r8,r2[0x2]
800042f0:	20 18       	sub	r8,1
800042f2:	a4 18       	st.h	r2[0x2],r8
800042f4:	cc 4b       	rjmp	8000427c <nav_file_name+0x40>
800042f6:	30 0c       	mov	r12,0

   }  // end of loop while(1)
   return false;
}
800042f8:	2f fd       	sub	sp,-4
800042fa:	d8 32       	popm	r0-r7,pc
800042fc:	80 00       	ld.sh	r0,r0[0x0]
800042fe:	3b d8       	mov	r8,-67
80004300:	00 00       	add	r0,r0
80004302:	09 28       	ld.uh	r8,r4++
80004304:	80 00       	ld.sh	r0,r0[0x0]
80004306:	39 4c       	mov	r12,-108
80004308:	80 00       	ld.sh	r0,r0[0x0]
8000430a:	31 64       	mov	r4,22
8000430c:	80 00       	ld.sh	r0,r0[0x0]
8000430e:	2f d0       	sub	r0,-3
80004310:	00 00       	add	r0,r0
80004312:	09 2d       	ld.uh	sp,r4++
80004314:	00 00       	add	r0,r0
80004316:	09 2c       	ld.uh	r12,r4++

80004318 <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
bool  nav_filelist_set( uint16_t u16_nb , bool b_direction )
{
80004318:	d4 31       	pushm	r0-r7,lr
8000431a:	20 4d       	sub	sp,16
8000431c:	50 0c       	stdsp	sp[0x0],r12
8000431e:	16 92       	mov	r2,r11
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   bool  b_save_entry_type;
   bool  b_find_last_entry = false;

   if ( !fat_check_mount_noopen())
80004320:	f0 1f 00 51 	mcall	80004464 <nav_filelist_set+0x14c>
80004324:	e0 80 00 9e 	breq	80004460 <nav_filelist_set+0x148>
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
80004328:	4d 08       	lddpc	r8,80004468 <nav_filelist_set+0x150>
8000432a:	90 18       	ld.sh	r8,r8[0x2]
8000432c:	50 28       	stdsp	sp[0x8],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
8000432e:	4d 08       	lddpc	r8,8000446c <nav_filelist_set+0x154>
80004330:	f1 0a 00 24 	ld.sh	r10,r8[36]
80004334:	50 1a       	stdsp	sp[0x4],r10
   b_save_entry_type       = fs_g_nav.b_mode_nav;
80004336:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000433a:	50 38       	stdsp	sp[0xc],r8
8000433c:	30 03       	mov	r3,0
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
8000433e:	4c b7       	lddpc	r7,80004468 <nav_filelist_set+0x150>
80004340:	3f f0       	mov	r0,-1
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80004342:	4c b6       	lddpc	r6,8000446c <nav_filelist_set+0x154>
80004344:	30 04       	mov	r4,0
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
80004346:	3f e1       	mov	r1,-2
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
80004348:	4c a5       	lddpc	r5,80004470 <nav_filelist_set+0x158>
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000434a:	58 02       	cp.w	r2,0
8000434c:	c0 31       	brne	80004352 <nav_filelist_set+0x3a>
8000434e:	58 03       	cp.w	r3,0
80004350:	c0 c0       	breq	80004368 <nav_filelist_set+0x50>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
80004352:	8e 18       	ld.sh	r8,r7[0x2]
80004354:	e2 08 19 00 	cp.h	r8,r1
80004358:	c0 51       	brne	80004362 <nav_filelist_set+0x4a>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
8000435a:	30 89       	mov	r9,8
8000435c:	4c 58       	lddpc	r8,80004470 <nav_filelist_set+0x158>
8000435e:	b0 89       	st.b	r8[0x0],r9
            break;
80004360:	c7 38       	rjmp	80004446 <nav_filelist_set+0x12e>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
80004362:	2f f8       	sub	r8,-1
80004364:	ae 18       	st.h	r7[0x2],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
80004366:	c1 d8       	rjmp	800043a0 <nav_filelist_set+0x88>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
80004368:	8e 18       	ld.sh	r8,r7[0x2]
8000436a:	e0 08 19 00 	cp.h	r8,r0
8000436e:	c0 51       	brne	80004378 <nav_filelist_set+0x60>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
80004370:	30 99       	mov	r9,9
80004372:	4c 08       	lddpc	r8,80004470 <nav_filelist_set+0x158>
80004374:	b0 89       	st.b	r8[0x0],r9
            break;
80004376:	c6 88       	rjmp	80004446 <nav_filelist_set+0x12e>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80004378:	58 08       	cp.w	r8,0
8000437a:	c1 11       	brne	8000439c <nav_filelist_set+0x84>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
8000437c:	ed 38 00 2c 	ld.ub	r8,r6[44]
80004380:	e8 08 18 00 	cp.b	r8,r4
80004384:	c0 80       	breq	80004394 <nav_filelist_set+0x7c>
80004386:	ed 38 00 2d 	ld.ub	r8,r6[45]
8000438a:	e8 08 18 00 	cp.b	r8,r4
8000438e:	c0 31       	brne	80004394 <nav_filelist_set+0x7c>
80004390:	30 13       	mov	r3,1
80004392:	c0 78       	rjmp	800043a0 <nav_filelist_set+0x88>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
80004394:	30 99       	mov	r9,9
80004396:	4b 78       	lddpc	r8,80004470 <nav_filelist_set+0x158>
80004398:	b0 89       	st.b	r8[0x0],r9
               break;
8000439a:	c5 68       	rjmp	80004446 <nav_filelist_set+0x12e>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
8000439c:	20 18       	sub	r8,1
8000439e:	ae 18       	st.h	r7[0x2],r8
         }
      }

      if( !fat_read_dir())
800043a0:	f0 1f 00 35 	mcall	80004474 <nav_filelist_set+0x15c>
800043a4:	c0 71       	brne	800043b2 <nav_filelist_set+0x9a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
800043a6:	0b 89       	ld.ub	r9,r5[0x0]
800043a8:	31 a8       	mov	r8,26
800043aa:	f0 09 18 00 	cp.b	r9,r8
800043ae:	c3 20       	breq	80004412 <nav_filelist_set+0xfa>
800043b0:	c4 b8       	rjmp	80004446 <nav_filelist_set+0x12e>
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
800043b2:	ed 38 00 2c 	ld.ub	r8,r6[44]
800043b6:	e8 08 18 00 	cp.b	r8,r4
800043ba:	5f 1c       	srne	r12
800043bc:	f0 1f 00 2f 	mcall	80004478 <nav_filelist_set+0x160>
800043c0:	c1 c0       	breq	800043f8 <nav_filelist_set+0xe0>
         {
           // HERE, the file entry match with the type seached

           if( b_find_last_entry )
800043c2:	58 03       	cp.w	r3,0
800043c4:	cc 31       	brne	8000434a <nav_filelist_set+0x32>
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
800043c6:	58 02       	cp.w	r2,0
800043c8:	c0 70       	breq	800043d6 <nav_filelist_set+0xbe>
              fs_g_nav.u16_pos_sel_file++;
800043ca:	ed 08 00 24 	ld.sh	r8,r6[36]
800043ce:	2f f8       	sub	r8,-1
800043d0:	ed 58 00 24 	st.h	r6[36],r8
800043d4:	c0 68       	rjmp	800043e0 <nav_filelist_set+0xc8>
           else
              fs_g_nav.u16_pos_sel_file--;
800043d6:	ed 08 00 24 	ld.sh	r8,r6[36]
800043da:	20 18       	sub	r8,1
800043dc:	ed 58 00 24 	st.h	r6[36],r8

           if (0 == u16_nb)
800043e0:	40 09       	lddsp	r9,sp[0x0]
800043e2:	58 09       	cp.w	r9,0
800043e4:	c0 51       	brne	800043ee <nav_filelist_set+0xd6>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
800043e6:	f0 1f 00 26 	mcall	8000447c <nav_filelist_set+0x164>
800043ea:	30 1c       	mov	r12,1
              return true;         // NB FILE FIND
800043ec:	c3 a8       	rjmp	80004460 <nav_filelist_set+0x148>
           }
           u16_nb--;
800043ee:	40 08       	lddsp	r8,sp[0x0]
800043f0:	20 18       	sub	r8,1
800043f2:	5c 88       	casts.h	r8
800043f4:	50 08       	stdsp	sp[0x0],r8
           continue;
800043f6:	ca ab       	rjmp	8000434a <nav_filelist_set+0x32>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
800043f8:	0b 88       	ld.ub	r8,r5[0x0]
800043fa:	30 a9       	mov	r9,10
800043fc:	f2 08 18 00 	cp.b	r8,r9
80004400:	5f 09       	sreq	r9
80004402:	31 aa       	mov	r10,26
80004404:	f4 08 18 00 	cp.b	r8,r10
80004408:	5f 08       	sreq	r8
8000440a:	10 49       	or	r9,r8
8000440c:	e8 09 18 00 	cp.b	r9,r4
80004410:	c9 d0       	breq	8000434a <nav_filelist_set+0x32>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
80004412:	58 03       	cp.w	r3,0
80004414:	c0 50       	breq	8000441e <nav_filelist_set+0x106>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
80004416:	ed 64 00 2c 	st.b	r6[44],r4
8000441a:	30 03       	mov	r3,0
            continue;
8000441c:	c9 7b       	rjmp	8000434a <nav_filelist_set+0x32>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
8000441e:	ed 38 00 2c 	ld.ub	r8,r6[44]
80004422:	30 1a       	mov	r10,1
80004424:	f4 08 18 00 	cp.b	r8,r10
80004428:	c0 60       	breq	80004434 <nav_filelist_set+0x11c>
8000442a:	ed 38 00 2d 	ld.ub	r8,r6[45]
8000442e:	e8 08 18 00 	cp.b	r8,r4
80004432:	c0 50       	breq	8000443c <nav_filelist_set+0x124>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
80004434:	30 99       	mov	r9,9
80004436:	48 f8       	lddpc	r8,80004470 <nav_filelist_set+0x158>
80004438:	b0 89       	st.b	r8[0x0],r9
            break;                        // end of search
8000443a:	c0 68       	rjmp	80004446 <nav_filelist_set+0x12e>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
8000443c:	ae 10       	st.h	r7[0x2],r0
            fs_g_nav.b_mode_nav = FS_FILE;
8000443e:	30 19       	mov	r9,1
80004440:	ed 69 00 2c 	st.b	r6[44],r9
80004444:	c8 3b       	rjmp	8000434a <nav_filelist_set+0x32>
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
80004446:	48 a8       	lddpc	r8,8000446c <nav_filelist_set+0x154>
80004448:	40 3a       	lddsp	r10,sp[0xc]
8000444a:	58 0a       	cp.w	r10,0
8000444c:	5f 19       	srne	r9
8000444e:	f1 69 00 2c 	st.b	r8[44],r9
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
80004452:	48 69       	lddpc	r9,80004468 <nav_filelist_set+0x150>
80004454:	40 2a       	lddsp	r10,sp[0x8]
80004456:	b2 1a       	st.h	r9[0x2],r10
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
80004458:	40 19       	lddsp	r9,sp[0x4]
8000445a:	f1 59 00 24 	st.h	r8[36],r9
8000445e:	30 0c       	mov	r12,0
   return false;
}
80004460:	2f cd       	sub	sp,-16
80004462:	d8 32       	popm	r0-r7,pc
80004464:	80 00       	ld.sh	r0,r0[0x0]
80004466:	3c 38       	mov	r8,-61
80004468:	00 00       	add	r0,r0
8000446a:	09 28       	ld.uh	r8,r4++
8000446c:	00 00       	add	r0,r0
8000446e:	08 e0       	st.h	--r4,r0
80004470:	00 00       	add	r0,r0
80004472:	09 2c       	ld.uh	r12,r4++
80004474:	80 00       	ld.sh	r0,r0[0x0]
80004476:	39 4c       	mov	r12,-108
80004478:	80 00       	ld.sh	r0,r0[0x0]
8000447a:	32 b4       	mov	r4,43
8000447c:	80 00       	ld.sh	r0,r0[0x0]
8000447e:	32 6c       	mov	r12,38

80004480 <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
80004480:	d4 21       	pushm	r4-r7,lr
80004482:	18 95       	mov	r5,r12
80004484:	16 94       	mov	r4,r11
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
80004486:	30 16       	mov	r6,1
80004488:	30 07       	mov	r7,0
8000448a:	0c 9b       	mov	r11,r6
8000448c:	0e 9c       	mov	r12,r7
8000448e:	f0 1f 00 07 	mcall	800044a8 <nav_filelist_findname+0x28>
80004492:	c0 90       	breq	800044a4 <nav_filelist_findname+0x24>
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
80004494:	08 99       	mov	r9,r4
80004496:	0e 9a       	mov	r10,r7
80004498:	0e 9b       	mov	r11,r7
8000449a:	0a 9c       	mov	r12,r5
8000449c:	f0 1f 00 04 	mcall	800044ac <nav_filelist_findname+0x2c>
800044a0:	cf 50       	breq	8000448a <nav_filelist_findname+0xa>
800044a2:	30 1c       	mov	r12,1
         return true;
   }
}
800044a4:	d8 22       	popm	r4-r7,pc
800044a6:	00 00       	add	r0,r0
800044a8:	80 00       	ld.sh	r0,r0[0x0]
800044aa:	43 18       	lddsp	r8,sp[0xc4]
800044ac:	80 00       	ld.sh	r0,r0[0x0]
800044ae:	42 3c       	lddsp	r12,sp[0x8c]

800044b0 <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
800044b0:	d4 01       	pushm	lr
   if ( !fat_check_mount_noopen())
800044b2:	f0 1f 00 04 	mcall	800044c0 <nav_filelist_reset+0x10>
800044b6:	c0 40       	breq	800044be <nav_filelist_reset+0xe>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
800044b8:	f0 1f 00 03 	mcall	800044c4 <nav_filelist_reset+0x14>
800044bc:	30 1c       	mov	r12,1
   return true;
}
800044be:	d8 02       	popm	pc
800044c0:	80 00       	ld.sh	r0,r0[0x0]
800044c2:	3c 38       	mov	r8,-61
800044c4:	80 00       	ld.sh	r0,r0[0x0]
800044c6:	2f 54       	sub	r4,-11

800044c8 <nav_dir_gotoparent>:
//! After, the file list changes and contains the files and directories of the new directory.
//! By default, the file selected in file list is the previous (children) directory.
//! @endverbatim
//!
bool  nav_dir_gotoparent( void )
{
800044c8:	d4 21       	pushm	r4-r7,lr
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
800044ca:	f0 1f 00 1f 	mcall	80004544 <nav_dir_gotoparent+0x7c>
800044ce:	c3 80       	breq	8000453e <nav_dir_gotoparent+0x76>
      return false;

   if (0 == fs_g_nav.u32_cluster_sel_dir)
800044d0:	49 e8       	lddpc	r8,80004548 <nav_dir_gotoparent+0x80>
800044d2:	70 88       	ld.w	r8,r8[0x20]
800044d4:	58 08       	cp.w	r8,0
800044d6:	c0 51       	brne	800044e0 <nav_dir_gotoparent+0x18>
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
800044d8:	31 99       	mov	r9,25
800044da:	49 d8       	lddpc	r8,8000454c <nav_dir_gotoparent+0x84>
800044dc:	b0 89       	st.b	r8[0x0],r9
800044de:	d8 2a       	popm	r4-r7,pc,r12=0
      return false;
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
800044e0:	30 19       	mov	r9,1
800044e2:	49 c8       	lddpc	r8,80004550 <nav_dir_gotoparent+0x88>
800044e4:	b0 19       	st.h	r8[0x2],r9
   if ( !fat_read_dir())
800044e6:	f0 1f 00 1c 	mcall	80004554 <nav_dir_gotoparent+0x8c>
800044ea:	c2 a0       	breq	8000453e <nav_dir_gotoparent+0x76>
      return false;
   fat_get_entry_info();
800044ec:	f0 1f 00 1b 	mcall	80004558 <nav_dir_gotoparent+0x90>
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;
800044f0:	49 68       	lddpc	r8,80004548 <nav_dir_gotoparent+0x80>
800044f2:	70 87       	ld.w	r7,r8[0x20]

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
800044f4:	49 a9       	lddpc	r9,8000455c <nav_dir_gotoparent+0x94>
800044f6:	72 19       	ld.w	r9,r9[0x4]
800044f8:	91 89       	st.w	r8[0x20],r9

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
800044fa:	f0 1f 00 1a 	mcall	80004560 <nav_dir_gotoparent+0x98>
800044fe:	c2 00       	breq	8000453e <nav_dir_gotoparent+0x76>
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
80004500:	49 28       	lddpc	r8,80004548 <nav_dir_gotoparent+0x80>
80004502:	f1 39 00 2d 	ld.ub	r9,r8[45]
80004506:	30 08       	mov	r8,0
80004508:	f0 09 18 00 	cp.b	r9,r8
8000450c:	c0 d0       	breq	80004526 <nav_dir_gotoparent+0x5e>
8000450e:	48 f8       	lddpc	r8,80004548 <nav_dir_gotoparent+0x80>
80004510:	f1 39 00 2c 	ld.ub	r9,r8[44]
80004514:	30 08       	mov	r8,0
80004516:	f0 09 18 00 	cp.b	r9,r8
8000451a:	c0 60       	breq	80004526 <nav_dir_gotoparent+0x5e>
8000451c:	c1 28       	rjmp	80004540 <nav_dir_gotoparent+0x78>
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
8000451e:	6c 18       	ld.w	r8,r6[0x4]
80004520:	0e 38       	cp.w	r8,r7
80004522:	c0 51       	brne	8000452c <nav_dir_gotoparent+0x64>
80004524:	c0 e8       	rjmp	80004540 <nav_dir_gotoparent+0x78>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80004526:	30 15       	mov	r5,1
80004528:	30 04       	mov	r4,0
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
8000452a:	48 d6       	lddpc	r6,8000455c <nav_dir_gotoparent+0x94>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000452c:	0a 9b       	mov	r11,r5
8000452e:	08 9c       	mov	r12,r4
80004530:	f0 1f 00 0d 	mcall	80004564 <nav_dir_gotoparent+0x9c>
80004534:	cf 51       	brne	8000451e <nav_dir_gotoparent+0x56>
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
80004536:	30 89       	mov	r9,8
80004538:	48 58       	lddpc	r8,8000454c <nav_dir_gotoparent+0x84>
8000453a:	b0 89       	st.b	r8[0x0],r9
   return false;
8000453c:	d8 22       	popm	r4-r7,pc
8000453e:	d8 2a       	popm	r4-r7,pc,r12=0
80004540:	da 2a       	popm	r4-r7,pc,r12=1
80004542:	00 00       	add	r0,r0
80004544:	80 00       	ld.sh	r0,r0[0x0]
80004546:	3c 38       	mov	r8,-61
80004548:	00 00       	add	r0,r0
8000454a:	08 e0       	st.h	--r4,r0
8000454c:	00 00       	add	r0,r0
8000454e:	09 2c       	ld.uh	r12,r4++
80004550:	00 00       	add	r0,r0
80004552:	09 28       	ld.uh	r8,r4++
80004554:	80 00       	ld.sh	r0,r0[0x0]
80004556:	39 4c       	mov	r12,-108
80004558:	80 00       	ld.sh	r0,r0[0x0]
8000455a:	32 6c       	mov	r12,38
8000455c:	00 00       	add	r0,r0
8000455e:	06 a4       	st.w	r3++,r4
80004560:	80 00       	ld.sh	r0,r0[0x0]
80004562:	44 b0       	lddsp	r0,sp[0x12c]
80004564:	80 00       	ld.sh	r0,r0[0x0]
80004566:	43 18       	lddsp	r8,sp[0xc4]

80004568 <nav_dir_cd>:
//! After this routine the file list changes and contains the files and directories of the new directory.
//! By default no file is selected.
//! @endverbatim
//!
bool  nav_dir_cd( void )
{
80004568:	d4 01       	pushm	lr
   if ( !fat_check_mount_select_noopen())
8000456a:	f0 1f 00 0a 	mcall	80004590 <nav_dir_cd+0x28>
8000456e:	c0 f0       	breq	8000458c <nav_dir_cd+0x24>
      return false;

   // The current selection, is it a directory ?
   if ( !fat_entry_is_dir())
80004570:	f0 1f 00 09 	mcall	80004594 <nav_dir_cd+0x2c>
80004574:	c0 c0       	breq	8000458c <nav_dir_cd+0x24>
      return false;

   // Select the current directory
   fs_g_nav.u16_entry_pos_sel_dir = fs_g_nav_fast.u16_entry_pos_sel_file;
80004576:	48 98       	lddpc	r8,80004598 <nav_dir_cd+0x30>
80004578:	48 99       	lddpc	r9,8000459c <nav_dir_cd+0x34>
8000457a:	92 19       	ld.sh	r9,r9[0x2]
8000457c:	f1 59 00 1c 	st.h	r8[28],r9
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
80004580:	48 89       	lddpc	r9,800045a0 <nav_dir_cd+0x38>
80004582:	72 19       	ld.w	r9,r9[0x4]
80004584:	91 89       	st.w	r8[0x20],r9

   // Reset file list
   if( false == nav_filelist_reset())
80004586:	f0 1f 00 08 	mcall	800045a4 <nav_dir_cd+0x3c>
8000458a:	d8 02       	popm	pc
8000458c:	d8 0a       	popm	pc,r12=0
8000458e:	00 00       	add	r0,r0
80004590:	80 00       	ld.sh	r0,r0[0x0]
80004592:	3c 14       	mov	r4,-63
80004594:	80 00       	ld.sh	r0,r0[0x0]
80004596:	2f 3c       	sub	r12,-13
80004598:	00 00       	add	r0,r0
8000459a:	08 e0       	st.h	--r4,r0
8000459c:	00 00       	add	r0,r0
8000459e:	09 28       	ld.uh	r8,r4++
800045a0:	00 00       	add	r0,r0
800045a2:	06 a4       	st.w	r3++,r4
800045a4:	80 00       	ld.sh	r0,r0[0x0]
800045a6:	44 b0       	lddsp	r0,sp[0x12c]

800045a8 <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
800045a8:	d4 01       	pushm	lr
   if ( !fat_check_noopen() )
800045aa:	f0 1f 00 0a 	mcall	800045d0 <nav_partition_mount+0x28>
800045ae:	c0 f0       	breq	800045cc <nav_partition_mount+0x24>
      return false;

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
800045b0:	48 98       	lddpc	r8,800045d4 <nav_partition_mount+0x2c>
800045b2:	11 89       	ld.ub	r9,r8[0x0]
800045b4:	30 08       	mov	r8,0
800045b6:	f0 09 18 00 	cp.b	r9,r8
800045ba:	c0 70       	breq	800045c8 <nav_partition_mount+0x20>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
800045bc:	30 09       	mov	r9,0
800045be:	48 78       	lddpc	r8,800045d8 <nav_partition_mount+0x30>
800045c0:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
800045c2:	f0 1f 00 07 	mcall	800045dc <nav_partition_mount+0x34>
800045c6:	da 0a       	popm	pc,r12=1
      return true;
   }

   return fat_mount();
800045c8:	f0 1f 00 06 	mcall	800045e0 <nav_partition_mount+0x38>
}
800045cc:	d8 02       	popm	pc
800045ce:	00 00       	add	r0,r0
800045d0:	80 00       	ld.sh	r0,r0[0x0]
800045d2:	3b 64       	mov	r4,-74
800045d4:	00 00       	add	r0,r0
800045d6:	09 28       	ld.uh	r8,r4++
800045d8:	00 00       	add	r0,r0
800045da:	08 e0       	st.h	--r4,r0
800045dc:	80 00       	ld.sh	r0,r0[0x0]
800045de:	2f 54       	sub	r4,-11
800045e0:	80 00       	ld.sh	r0,r0[0x0]
800045e2:	3c 50       	mov	r0,-59

800045e4 <nav_dir_root>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_dir_root( void )
{
800045e4:	d4 01       	pushm	lr
   return nav_partition_mount();
800045e6:	f0 1f 00 02 	mcall	800045ec <nav_dir_root+0x8>
}
800045ea:	d8 02       	popm	pc
800045ec:	80 00       	ld.sh	r0,r0[0x0]
800045ee:	45 a8       	lddsp	r8,sp[0x168]

800045f0 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_drive_set( uint8_t u8_number )
{
800045f0:	eb cd 40 80 	pushm	r7,lr
800045f4:	18 97       	mov	r7,r12
   if ( !fat_check_noopen() )
800045f6:	f0 1f 00 0f 	mcall	80004630 <nav_drive_set+0x40>
800045fa:	c1 90       	breq	8000462c <nav_drive_set+0x3c>
      return false;

   if (u8_number >= get_nb_lun() )
800045fc:	f0 1f 00 0e 	mcall	80004634 <nav_drive_set+0x44>
80004600:	ee 0c 18 00 	cp.b	r12,r7
80004604:	e0 8b 00 07 	brhi	80004612 <nav_drive_set+0x22>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
80004608:	30 69       	mov	r9,6
8000460a:	48 c8       	lddpc	r8,80004638 <nav_drive_set+0x48>
8000460c:	b0 89       	st.b	r8[0x0],r9
8000460e:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   if ( fs_g_nav.u8_lun == u8_number)
80004612:	48 b8       	lddpc	r8,8000463c <nav_drive_set+0x4c>
80004614:	11 88       	ld.ub	r8,r8[0x0]
80004616:	ee 08 18 00 	cp.b	r8,r7
8000461a:	c0 31       	brne	80004620 <nav_drive_set+0x30>
8000461c:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
      return true;   // It is the same drive number

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
80004620:	48 78       	lddpc	r8,8000463c <nav_drive_set+0x4c>
80004622:	b0 87       	st.b	r8[0x0],r7
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80004624:	30 09       	mov	r9,0
80004626:	48 78       	lddpc	r8,80004640 <nav_drive_set+0x50>
80004628:	b0 89       	st.b	r8[0x0],r9
8000462a:	30 1c       	mov	r12,1
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
}
8000462c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004630:	80 00       	ld.sh	r0,r0[0x0]
80004632:	3b 64       	mov	r4,-74
80004634:	80 00       	ld.sh	r0,r0[0x0]
80004636:	6a 80       	ld.w	r0,r5[0x20]
80004638:	00 00       	add	r0,r0
8000463a:	09 2c       	ld.uh	r12,r4++
8000463c:	00 00       	add	r0,r0
8000463e:	08 e0       	st.h	--r4,r0
80004640:	00 00       	add	r0,r0
80004642:	09 28       	ld.uh	r8,r4++

80004644 <nav_gotoindex>:
//! This routine allow to reinit a navigator quickly via a file index (disk, partition, dir, file/dir selected )
//! To get a file index, you shall used the routine nav_getindex().
//! @endverbatim
//!
bool  nav_gotoindex( const Fs_index _MEM_TYPE_SLOW_ *index )
{
80004644:	d4 21       	pushm	r4-r7,lr
80004646:	18 97       	mov	r7,r12
   // Select the drive and partition corresponding at file index
   if( !nav_drive_set( index->u8_lun ))
80004648:	19 8c       	ld.ub	r12,r12[0x0]
8000464a:	f0 1f 00 10 	mcall	80004688 <nav_gotoindex+0x44>
8000464e:	c1 c0       	breq	80004686 <nav_gotoindex+0x42>
      return false;
#if (FS_MULTI_PARTITION  ==  true)
   if( !nav_partition_set(index->u8_partition))
      return false;
#endif
   if( !nav_partition_mount())
80004650:	f0 1f 00 0f 	mcall	8000468c <nav_gotoindex+0x48>
80004654:	c1 90       	breq	80004686 <nav_gotoindex+0x42>
      return false;

   // Select the directory corresponding at file index
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;
80004656:	6e 19       	ld.w	r9,r7[0x4]
80004658:	48 e8       	lddpc	r8,80004690 <nav_gotoindex+0x4c>
8000465a:	91 89       	st.w	r8[0x20],r9

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
8000465c:	f0 1f 00 0e 	mcall	80004694 <nav_gotoindex+0x50>
80004660:	c0 a1       	brne	80004674 <nav_gotoindex+0x30>
80004662:	c1 28       	rjmp	80004686 <nav_gotoindex+0x42>
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
80004664:	0a 9b       	mov	r11,r5
80004666:	08 9c       	mov	r12,r4
80004668:	f0 1f 00 0c 	mcall	80004698 <nav_gotoindex+0x54>
8000466c:	c0 71       	brne	8000467a <nav_gotoindex+0x36>
      {
         nav_filelist_reset();
8000466e:	f0 1f 00 0a 	mcall	80004694 <nav_gotoindex+0x50>
80004672:	d8 2a       	popm	r4-r7,pc,r12=0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
80004674:	48 a6       	lddpc	r6,8000469c <nav_gotoindex+0x58>
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
80004676:	30 15       	mov	r5,1
80004678:	30 04       	mov	r4,0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
8000467a:	8c 19       	ld.sh	r9,r6[0x2]
8000467c:	8e 48       	ld.sh	r8,r7[0x8]
8000467e:	f0 09 19 00 	cp.h	r9,r8
80004682:	cf 11       	brne	80004664 <nav_gotoindex+0x20>
80004684:	da 2a       	popm	r4-r7,pc,r12=1
80004686:	d8 2a       	popm	r4-r7,pc,r12=0
80004688:	80 00       	ld.sh	r0,r0[0x0]
8000468a:	45 f0       	lddsp	r0,sp[0x17c]
8000468c:	80 00       	ld.sh	r0,r0[0x0]
8000468e:	45 a8       	lddsp	r8,sp[0x168]
80004690:	00 00       	add	r0,r0
80004692:	08 e0       	st.h	--r4,r0
80004694:	80 00       	ld.sh	r0,r0[0x0]
80004696:	44 b0       	lddsp	r0,sp[0x12c]
80004698:	80 00       	ld.sh	r0,r0[0x0]
8000469a:	43 18       	lddsp	r8,sp[0xc4]
8000469c:	00 00       	add	r0,r0
8000469e:	09 28       	ld.uh	r8,r4++

800046a0 <nav_setcwd>:
//! With syntact "./dir_parent/directory_name"  the file list corresponding at "dir_parent" and "directory_name" is selected.
//! With syntact "./dir_parent/directory_name/" the file list corresponding at "directory_name" and no file is selected.
//! @endverbatim
//!
bool  nav_setcwd( FS_STRING sz_path , bool b_match_case , bool b_create )
{
800046a0:	d4 31       	pushm	r0-r7,lr
800046a2:	20 6d       	sub	sp,24
800046a4:	18 97       	mov	r7,r12
800046a6:	16 91       	mov	r1,r11
800046a8:	14 90       	mov	r0,r10
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
   FS_STRING sz_save_path = 0;
#endif
   bool b_create_name = false;

   if ( !fat_check_noopen())
800046aa:	f0 1f 00 5d 	mcall	8000481c <nav_setcwd+0x17c>
800046ae:	e0 80 00 b4 	breq	80004816 <nav_setcwd+0x176>
      return false;

   index = nav_getindex();             // Save current position
800046b2:	1a 96       	mov	r6,sp
800046b4:	1a 9c       	mov	r12,sp
800046b6:	f0 1f 00 5b 	mcall	80004820 <nav_setcwd+0x180>
800046ba:	fa c8 ff f4 	sub	r8,sp,-12
800046be:	fa ea 00 00 	ld.d	r10,sp[0]
800046c2:	f0 eb 00 00 	st.d	r8[0],r10
800046c6:	40 29       	lddsp	r9,sp[0x8]
800046c8:	91 29       	st.w	r8[0x8],r9

   // Check syntact "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
800046ca:	0f 88       	ld.ub	r8,r7[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntact "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
800046cc:	35 c9       	mov	r9,92
800046ce:	f2 08 18 00 	cp.b	r8,r9
800046d2:	5f 0a       	sreq	r10
800046d4:	32 f9       	mov	r9,47
800046d6:	f2 08 18 00 	cp.b	r8,r9
800046da:	5f 09       	sreq	r9
800046dc:	f5 e9 10 09 	or	r9,r10,r9
800046e0:	c0 70       	breq	800046ee <nav_setcwd+0x4e>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
800046e2:	f0 1f 00 51 	mcall	80004824 <nav_setcwd+0x184>
800046e6:	e0 80 00 93 	breq	8000480c <nav_setcwd+0x16c>
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
800046ea:	2f f7       	sub	r7,-1
800046ec:	c5 e8       	rjmp	800047a8 <nav_setcwd+0x108>
   }else

   // Check syntact "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
800046ee:	0f 99       	ld.ub	r9,r7[0x1]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntact "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
800046f0:	33 aa       	mov	r10,58
800046f2:	f4 09 18 00 	cp.b	r9,r10
800046f6:	c2 01       	brne	80004736 <nav_setcwd+0x96>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
800046f8:	0f aa       	ld.ub	r10,r7[0x2]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntact "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
800046fa:	35 cb       	mov	r11,92
800046fc:	f6 0a 18 00 	cp.b	r10,r11
80004700:	5f 0b       	sreq	r11
80004702:	32 fc       	mov	r12,47
80004704:	f8 0a 18 00 	cp.b	r10,r12
80004708:	5f 0a       	sreq	r10
8000470a:	f7 ea 10 0a 	or	r10,r11,r10
8000470e:	c1 40       	breq	80004736 <nav_setcwd+0x96>
      if( Is_unicode )
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
80004710:	4c 69       	lddpc	r9,80004828 <nav_setcwd+0x188>
80004712:	72 09       	ld.w	r9,r9[0x0]
80004714:	f2 08 07 09 	ld.ub	r9,r9[r8]
80004718:	e2 19 00 02 	andl	r9,0x2,COH
8000471c:	c0 20       	breq	80004720 <nav_setcwd+0x80>
8000471e:	22 08       	sub	r8,32
80004720:	24 18       	sub	r8,65
80004722:	f9 d8 c0 08 	bfextu	r12,r8,0x0,0x8
80004726:	f0 1f 00 42 	mcall	8000482c <nav_setcwd+0x18c>
8000472a:	c7 10       	breq	8000480c <nav_setcwd+0x16c>
            goto nav_setcwd_fail;
      }
      if( !nav_partition_mount())
8000472c:	f0 1f 00 41 	mcall	80004830 <nav_setcwd+0x190>
80004730:	c6 e0       	breq	8000480c <nav_setcwd+0x16c>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
80004732:	2f d7       	sub	r7,-3
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntact "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80004734:	c3 a8       	rjmp	800047a8 <nav_setcwd+0x108>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntact ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
80004736:	32 ea       	mov	r10,46
80004738:	f4 08 18 00 	cp.b	r8,r10
8000473c:	c1 a1       	brne	80004770 <nav_setcwd+0xd0>
8000473e:	35 c8       	mov	r8,92
80004740:	f0 09 18 00 	cp.b	r9,r8
80004744:	5f 0a       	sreq	r10
80004746:	32 f8       	mov	r8,47
80004748:	f0 09 18 00 	cp.b	r9,r8
8000474c:	5f 08       	sreq	r8
8000474e:	f5 e8 10 08 	or	r8,r10,r8
80004752:	c0 f0       	breq	80004770 <nav_setcwd+0xd0>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
   {
      // Search in current directory
      sz_path  += 2*(Is_unicode? 2 : 1 );
80004754:	2f e7       	sub	r7,-2
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntact ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
80004756:	c2 98       	rjmp	800047a8 <nav_setcwd+0x108>
         while(( '.'  == sz_path [0] )
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
80004758:	f0 1f 00 37 	mcall	80004834 <nav_setcwd+0x194>
8000475c:	c5 80       	breq	8000480c <nav_setcwd+0x16c>
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
            if( 0 != sz_path [0])
8000475e:	0d 88       	ld.ub	r8,r6[0x0]
80004760:	e8 08 18 00 	cp.b	r8,r4
80004764:	c0 31       	brne	8000476a <nav_setcwd+0xca>
80004766:	0c 97       	mov	r7,r6
80004768:	c0 88       	rjmp	80004778 <nav_setcwd+0xd8>
               sz_path  +=1; // jump "/"
8000476a:	ec c7 ff ff 	sub	r7,r6,-1
8000476e:	c0 58       	rjmp	80004778 <nav_setcwd+0xd8>
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
80004770:	32 e5       	mov	r5,46
80004772:	35 c3       	mov	r3,92
80004774:	32 f2       	mov	r2,47
80004776:	30 04       	mov	r4,0
80004778:	0f 88       	ld.ub	r8,r7[0x0]
8000477a:	ea 08 18 00 	cp.b	r8,r5
8000477e:	c1 51       	brne	800047a8 <nav_setcwd+0x108>
         &&    ( '.'  == sz_path [1] )
80004780:	0f 98       	ld.ub	r8,r7[0x1]
80004782:	ea 08 18 00 	cp.b	r8,r5
80004786:	c1 11       	brne	800047a8 <nav_setcwd+0x108>
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
80004788:	ee c6 ff fe 	sub	r6,r7,-2
8000478c:	0d 88       	ld.ub	r8,r6[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
8000478e:	e6 08 18 00 	cp.b	r8,r3
80004792:	5f 0a       	sreq	r10
80004794:	e4 08 18 00 	cp.b	r8,r2
80004798:	5f 09       	sreq	r9
8000479a:	f5 e9 10 09 	or	r9,r10,r9
8000479e:	e8 09 18 00 	cp.b	r9,r4
800047a2:	cd b1       	brne	80004758 <nav_setcwd+0xb8>
800047a4:	58 08       	cp.w	r8,0
800047a6:	cd 90       	breq	80004758 <nav_setcwd+0xb8>
         }
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
800047a8:	f0 1f 00 24 	mcall	80004838 <nav_setcwd+0x198>
800047ac:	c3 00       	breq	8000480c <nav_setcwd+0x16c>
800047ae:	30 03       	mov	r3,0
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
800047b0:	30 06       	mov	r6,0
         return true;   // path (without file) is found or create
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
      {
         // The file or directory is not found
         if( !b_create )
800047b2:	30 12       	mov	r2,1
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
800047b4:	35 c5       	mov	r5,92
800047b6:	32 f4       	mov	r4,47
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
800047b8:	0f 88       	ld.ub	r8,r7[0x0]
800047ba:	ec 08 18 00 	cp.b	r8,r6
800047be:	c0 31       	brne	800047c4 <nav_setcwd+0x124>
800047c0:	30 1c       	mov	r12,1
800047c2:	c2 a8       	rjmp	80004816 <nav_setcwd+0x176>
      {
         return true;   // path (without file) is found or create
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
800047c4:	02 9b       	mov	r11,r1
800047c6:	0e 9c       	mov	r12,r7
800047c8:	f0 1f 00 1d 	mcall	8000483c <nav_setcwd+0x19c>
800047cc:	c0 41       	brne	800047d4 <nav_setcwd+0x134>
      {
         // The file or directory is not found
         if( !b_create )
800047ce:	58 00       	cp.w	r0,0
800047d0:	c1 e0       	breq	8000480c <nav_setcwd+0x16c>
800047d2:	04 93       	mov	r3,r2
#endif
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
800047d4:	2f f7       	sub	r7,-1
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
800047d6:	0f 88       	ld.ub	r8,r7[0x0]
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
800047d8:	58 08       	cp.w	r8,0
800047da:	c0 41       	brne	800047e2 <nav_setcwd+0x142>
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
         {
            // Is it the last name of path and it is a file
            if( b_create_name )
800047dc:	58 03       	cp.w	r3,0
800047de:	ce d0       	breq	800047b8 <nav_setcwd+0x118>
800047e0:	c1 68       	rjmp	8000480c <nav_setcwd+0x16c>
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
800047e2:	ea 08 18 00 	cp.b	r8,r5
800047e6:	5f 09       	sreq	r9
800047e8:	e8 08 18 00 	cp.b	r8,r4
800047ec:	5f 08       	sreq	r8
800047ee:	f3 e8 10 08 	or	r8,r9,r8
800047f2:	ec 08 18 00 	cp.b	r8,r6
800047f6:	ce f0       	breq	800047d4 <nav_setcwd+0x134>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
         {
            // Is it a folder name
            if( b_create_name )
800047f8:	58 03       	cp.w	r3,0
800047fa:	c0 91       	brne	8000480c <nav_setcwd+0x16c>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
800047fc:	f0 1f 00 11 	mcall	80004840 <nav_setcwd+0x1a0>
80004800:	c0 60       	breq	8000480c <nav_setcwd+0x16c>
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
80004802:	f0 1f 00 11 	mcall	80004844 <nav_setcwd+0x1a4>
80004806:	c0 30       	breq	8000480c <nav_setcwd+0x16c>
#endif
            }
            if( !fat_entry_is_dir() )
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
80004808:	2f f7       	sub	r7,-1
8000480a:	cd 7b       	rjmp	800047b8 <nav_setcwd+0x118>
      }

   }

nav_setcwd_fail:
   nav_gotoindex( &index );   // Restore the position
8000480c:	fa cc ff f4 	sub	r12,sp,-12
80004810:	f0 1f 00 0e 	mcall	80004848 <nav_setcwd+0x1a8>
80004814:	30 0c       	mov	r12,0
   return false;
}
80004816:	2f ad       	sub	sp,-24
80004818:	d8 32       	popm	r0-r7,pc
8000481a:	00 00       	add	r0,r0
8000481c:	80 00       	ld.sh	r0,r0[0x0]
8000481e:	3b 64       	mov	r4,-74
80004820:	80 00       	ld.sh	r0,r0[0x0]
80004822:	42 1c       	lddsp	r12,sp[0x84]
80004824:	80 00       	ld.sh	r0,r0[0x0]
80004826:	45 e4       	lddsp	r4,sp[0x178]
80004828:	00 00       	add	r0,r0
8000482a:	00 f4       	st.b	--r0,r4
8000482c:	80 00       	ld.sh	r0,r0[0x0]
8000482e:	45 f0       	lddsp	r0,sp[0x17c]
80004830:	80 00       	ld.sh	r0,r0[0x0]
80004832:	45 a8       	lddsp	r8,sp[0x168]
80004834:	80 00       	ld.sh	r0,r0[0x0]
80004836:	44 c8       	lddsp	r8,sp[0x130]
80004838:	80 00       	ld.sh	r0,r0[0x0]
8000483a:	44 b0       	lddsp	r0,sp[0x12c]
8000483c:	80 00       	ld.sh	r0,r0[0x0]
8000483e:	44 80       	lddsp	r0,sp[0x120]
80004840:	80 00       	ld.sh	r0,r0[0x0]
80004842:	2f 3c       	sub	r12,-13
80004844:	80 00       	ld.sh	r0,r0[0x0]
80004846:	45 68       	lddsp	r8,sp[0x158]
80004848:	80 00       	ld.sh	r0,r0[0x0]
8000484a:	46 44       	lddsp	r4,sp[0x190]

8000484c <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
bool  nav_select( uint8_t u8_idnav )
{
8000484c:	eb cd 40 80 	pushm	r7,lr
80004850:	18 97       	mov	r7,r12
   if( FS_NB_NAVIGATOR <= u8_idnav )
80004852:	30 18       	mov	r8,1
80004854:	f0 0c 18 00 	cp.b	r12,r8
80004858:	e0 88 00 07 	brls	80004866 <nav_select+0x1a>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
8000485c:	32 79       	mov	r9,39
8000485e:	48 b8       	lddpc	r8,80004888 <nav_select+0x3c>
80004860:	b0 89       	st.b	r8[0x0],r9
80004862:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
80004866:	48 a8       	lddpc	r8,8000488c <nav_select+0x40>
80004868:	11 8c       	ld.ub	r12,r8[0x0]
8000486a:	ee 0c 18 00 	cp.b	r12,r7
8000486e:	c0 31       	brne	80004874 <nav_select+0x28>
80004870:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
80004874:	f0 1f 00 07 	mcall	80004890 <nav_select+0x44>
      fat_invert_nav( u8_idnav );               // Select new navigator
80004878:	0e 9c       	mov	r12,r7
8000487a:	f0 1f 00 06 	mcall	80004890 <nav_select+0x44>
      fs_g_u8_nav_selected = u8_idnav;
8000487e:	48 48       	lddpc	r8,8000488c <nav_select+0x40>
80004880:	b0 87       	st.b	r8[0x0],r7
80004882:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80004886:	00 00       	add	r0,r0
80004888:	00 00       	add	r0,r0
8000488a:	09 2c       	ld.uh	r12,r4++
8000488c:	00 00       	add	r0,r0
8000488e:	09 8c       	ld.ub	r12,r4[0x0]
80004890:	80 00       	ld.sh	r0,r0[0x0]
80004892:	33 a0       	mov	r0,58

80004894 <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
80004894:	eb cd 40 f8 	pushm	r3-r7,lr
#if ( (FS_ASCII   == true) && (FS_UNICODE == true))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
80004898:	30 07       	mov	r7,0
8000489a:	49 18       	lddpc	r8,800048dc <nav_reset+0x48>
8000489c:	b0 87       	st.b	r8[0x0],r7
   g_b_no_check_disk = false;
8000489e:	49 18       	lddpc	r8,800048e0 <nav_reset+0x4c>
800048a0:	b0 87       	st.b	r8[0x0],r7

   fat_cache_reset();
800048a2:	f0 1f 00 11 	mcall	800048e4 <nav_reset+0x50>
   fat_cache_clusterlist_reset();
800048a6:	f0 1f 00 11 	mcall	800048e8 <nav_reset+0x54>
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
800048aa:	30 0c       	mov	r12,0
800048ac:	f0 1f 00 10 	mcall	800048ec <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
800048b0:	49 03       	lddpc	r3,800048f0 <nav_reset+0x5c>
800048b2:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
800048b4:	49 05       	lddpc	r5,800048f4 <nav_reset+0x60>
800048b6:	3f f4       	mov	r4,-1
800048b8:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
800048ba:	49 06       	lddpc	r6,800048f8 <nav_reset+0x64>
800048bc:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
800048be:	eb 67 00 2d 	st.b	r5[45],r7
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
800048c2:	30 1c       	mov	r12,1
800048c4:	f0 1f 00 0a 	mcall	800048ec <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
800048c8:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
800048ca:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
800048cc:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
800048ce:	eb 67 00 2d 	st.b	r5[45],r7
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
800048d2:	48 b8       	lddpc	r8,800048fc <nav_reset+0x68>
800048d4:	b0 87       	st.b	r8[0x0],r7
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
800048d6:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800048da:	00 00       	add	r0,r0
800048dc:	00 00       	add	r0,r0
800048de:	09 2d       	ld.uh	sp,r4++
800048e0:	00 00       	add	r0,r0
800048e2:	06 b6       	st.h	r3++,r6
800048e4:	80 00       	ld.sh	r0,r0[0x0]
800048e6:	33 10       	mov	r0,49
800048e8:	80 00       	ld.sh	r0,r0[0x0]
800048ea:	2c f0       	sub	r0,-49
800048ec:	80 00       	ld.sh	r0,r0[0x0]
800048ee:	48 4c       	lddpc	r12,800048fc <nav_reset+0x68>
800048f0:	00 00       	add	r0,r0
800048f2:	09 28       	ld.uh	r8,r4++
800048f4:	00 00       	add	r0,r0
800048f6:	08 e0       	st.h	--r4,r0
800048f8:	00 00       	add	r0,r0
800048fa:	06 a4       	st.w	r3++,r4
800048fc:	00 00       	add	r0,r0
800048fe:	09 8c       	ld.ub	r12,r4[0x0]

80004900 <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80004900:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80004904:	49 18       	lddpc	r8,80004948 <LED_On+0x48>
80004906:	70 09       	ld.w	r9,r8[0x0]
80004908:	f9 e9 10 09 	or	r9,r12,r9
8000490c:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000490e:	58 0c       	cp.w	r12,0
80004910:	5e 0c       	reteq	r12
80004912:	48 f8       	lddpc	r8,8000494c <LED_On+0x4c>
80004914:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80004916:	18 9a       	mov	r10,r12
80004918:	5c 9a       	brev	r10
8000491a:	f4 0a 12 00 	clz	r10,r10
8000491e:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80004920:	f4 09 15 04 	lsl	r9,r10,0x4
80004924:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80004926:	70 09       	ld.w	r9,r8[0x0]
80004928:	a9 69       	lsl	r9,0x8
8000492a:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
8000492e:	70 1b       	ld.w	r11,r8[0x4]
80004930:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80004934:	70 1b       	ld.w	r11,r8[0x4]
80004936:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000493a:	70 1b       	ld.w	r11,r8[0x4]
8000493c:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
8000493e:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80004942:	ce a1       	brne	80004916 <LED_On+0x16>
80004944:	5e fc       	retal	r12
80004946:	00 00       	add	r0,r0
80004948:	00 00       	add	r0,r0
8000494a:	00 50       	eor	r0,r0
8000494c:	80 00       	ld.sh	r0,r0[0x0]
8000494e:	7a 18       	ld.w	r8,sp[0x4]

80004950 <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80004950:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80004954:	49 28       	lddpc	r8,8000499c <LED_Off+0x4c>
80004956:	70 09       	ld.w	r9,r8[0x0]
80004958:	f8 0a 11 ff 	rsub	r10,r12,-1
8000495c:	f5 e9 00 09 	and	r9,r10,r9
80004960:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80004962:	58 0c       	cp.w	r12,0
80004964:	5e 0c       	reteq	r12
80004966:	48 f8       	lddpc	r8,800049a0 <LED_Off+0x50>
80004968:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
8000496a:	18 9a       	mov	r10,r12
8000496c:	5c 9a       	brev	r10
8000496e:	f4 0a 12 00 	clz	r10,r10
80004972:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80004974:	f4 09 15 04 	lsl	r9,r10,0x4
80004978:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000497a:	70 09       	ld.w	r9,r8[0x0]
8000497c:	a9 69       	lsl	r9,0x8
8000497e:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80004982:	70 1b       	ld.w	r11,r8[0x4]
80004984:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80004988:	70 1b       	ld.w	r11,r8[0x4]
8000498a:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000498e:	70 1b       	ld.w	r11,r8[0x4]
80004990:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80004992:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80004996:	ce a1       	brne	8000496a <LED_Off+0x1a>
80004998:	5e fc       	retal	r12
8000499a:	00 00       	add	r0,r0
8000499c:	00 00       	add	r0,r0
8000499e:	00 50       	eor	r0,r0
800049a0:	80 00       	ld.sh	r0,r0[0x0]
800049a2:	7a 18       	ld.w	r8,sp[0x4]

800049a4 <udi_msc_getsetting>:
 }
 
 uint8_t udi_msc_getsetting(void)
 {
     return 0;   // MSC don't have multiple alternate setting
 }
800049a4:	5e fd       	retal	0
800049a6:	d7 03       	nop

800049a8 <udi_msc_trans_ack>:
 
 
 static void udi_msc_trans_ack(udd_ep_status_t status, iram_size_t n)
 {
     // Update variable to signal the end of transfer
     udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
800049a8:	58 0c       	cp.w	r12,0
800049aa:	5f 19       	srne	r9
800049ac:	48 38       	lddpc	r8,800049b8 <udi_msc_trans_ack+0x10>
800049ae:	b0 89       	st.b	r8[0x0],r9
     udi_msc_b_ack_trans = true;
800049b0:	30 19       	mov	r9,1
800049b2:	48 38       	lddpc	r8,800049bc <udi_msc_trans_ack+0x14>
800049b4:	b0 89       	st.b	r8[0x0],r9
 }
800049b6:	5e fc       	retal	r12
800049b8:	00 00       	add	r0,r0
800049ba:	09 8d       	ld.ub	sp,r4[0x0]
800049bc:	00 00       	add	r0,r0
800049be:	00 54       	eor	r4,r0

800049c0 <udi_msc_trans_block>:
 
 
 bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
         void (*callback) (udd_ep_status_t status, iram_size_t n))
 {
800049c0:	eb cd 40 c0 	pushm	r6-r7,lr
800049c4:	14 96       	mov	r6,r10
800049c6:	12 97       	mov	r7,r9
     if (!udi_msc_b_ack_trans)
800049c8:	49 d8       	lddpc	r8,80004a3c <udi_msc_trans_block+0x7c>
800049ca:	11 88       	ld.ub	r8,r8[0x0]
800049cc:	58 08       	cp.w	r8,0
800049ce:	c3 40       	breq	80004a36 <udi_msc_trans_block+0x76>
         return false;   // No possible, transfer on going
 
     // Start transfer Internal RAM<->USB line
     udi_msc_b_ack_trans = false;
800049d0:	30 09       	mov	r9,0
800049d2:	49 b8       	lddpc	r8,80004a3c <udi_msc_trans_block+0x7c>
800049d4:	b0 89       	st.b	r8[0x0],r9
     if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
800049d6:	49 b8       	lddpc	r8,80004a40 <udi_msc_trans_block+0x80>
800049d8:	58 07       	cp.w	r7,0
800049da:	ee 08 17 10 	movne	r8,r7
800049de:	14 99       	mov	r9,r10
800049e0:	16 9a       	mov	r10,r11
800049e2:	30 0b       	mov	r11,0
800049e4:	e0 6e 00 81 	mov	lr,129
800049e8:	16 3c       	cp.w	r12,r11
800049ea:	fc 0c 17 10 	movne	r12,lr
800049ee:	f9 bc 00 02 	moveq	r12,2
800049f2:	f0 1f 00 15 	mcall	80004a44 <udi_msc_trans_block+0x84>
800049f6:	c0 61       	brne	80004a02 <udi_msc_trans_block+0x42>
                     false,
                     block,
                     block_size,
                     (NULL == callback) ? udi_msc_trans_ack :
                     callback)) {
         udi_msc_b_ack_trans = true;
800049f8:	30 19       	mov	r9,1
800049fa:	49 18       	lddpc	r8,80004a3c <udi_msc_trans_block+0x7c>
800049fc:	b0 89       	st.b	r8[0x0],r9
         return false;
800049fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     if (NULL == callback) {
80004a02:	58 07       	cp.w	r7,0
80004a04:	c1 31       	brne	80004a2a <udi_msc_trans_block+0x6a>
         while (!udi_msc_b_ack_trans);
80004a06:	48 e9       	lddpc	r9,80004a3c <udi_msc_trans_block+0x7c>
80004a08:	13 88       	ld.ub	r8,r9[0x0]
80004a0a:	58 08       	cp.w	r8,0
80004a0c:	cf e0       	breq	80004a08 <udi_msc_trans_block+0x48>
         if (udi_msc_b_abort_trans) {
80004a0e:	48 f8       	lddpc	r8,80004a48 <udi_msc_trans_block+0x88>
80004a10:	11 88       	ld.ub	r8,r8[0x0]
80004a12:	58 08       	cp.w	r8,0
80004a14:	c1 11       	brne	80004a36 <udi_msc_trans_block+0x76>
             return false;
         }
         udi_msc_csw.dCSWDataResidue -= block_size;
80004a16:	48 e8       	lddpc	r8,80004a4c <udi_msc_trans_block+0x8c>
80004a18:	70 29       	ld.w	r9,r8[0x8]
80004a1a:	0c 19       	sub	r9,r6
80004a1c:	91 29       	st.w	r8[0x8],r9
         return (!udi_msc_b_abort_trans);
80004a1e:	48 b8       	lddpc	r8,80004a48 <udi_msc_trans_block+0x88>
80004a20:	11 8c       	ld.ub	r12,r8[0x0]
80004a22:	ec 1c 00 01 	eorl	r12,0x1
80004a26:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     udi_msc_csw.dCSWDataResidue -= block_size;
80004a2a:	48 98       	lddpc	r8,80004a4c <udi_msc_trans_block+0x8c>
80004a2c:	70 29       	ld.w	r9,r8[0x8]
80004a2e:	0c 19       	sub	r9,r6
80004a30:	91 29       	st.w	r8[0x8],r9
80004a32:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
     return true;
80004a36:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80004a3a:	00 00       	add	r0,r0
80004a3c:	00 00       	add	r0,r0
80004a3e:	00 54       	eor	r4,r0
80004a40:	80 00       	ld.sh	r0,r0[0x0]
80004a42:	49 a8       	lddpc	r8,80004aa8 <udi_msc_sense_fail+0x20>
80004a44:	80 00       	ld.sh	r0,r0[0x0]
80004a46:	67 20       	ld.w	r0,r3[0x48]
80004a48:	00 00       	add	r0,r0
80004a4a:	09 8d       	ld.ub	sp,r4[0x0]
80004a4c:	00 00       	add	r0,r0
80004a4e:	00 90       	mov	r0,r0

80004a50 <udi_msc_clear_sense>:
 //---------------------------------------------
 //------- Routines manage sense data
 
 static void udi_msc_clear_sense(void)
 {
     memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
80004a50:	48 79       	lddpc	r9,80004a6c <udi_msc_clear_sense+0x1c>
80004a52:	30 0a       	mov	r10,0
80004a54:	30 0b       	mov	r11,0
80004a56:	12 98       	mov	r8,r9
80004a58:	b1 2a       	st.d	r8++,r10
80004a5a:	b1 2a       	st.d	r8++,r10
80004a5c:	30 0a       	mov	r10,0
80004a5e:	b0 0a       	st.h	r8[0x0],r10
     udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
80004a60:	3f 08       	mov	r8,-16
80004a62:	b2 88       	st.b	r9[0x0],r8
     udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
80004a64:	30 a8       	mov	r8,10
80004a66:	b2 f8       	st.b	r9[0x7],r8
 }
80004a68:	5e fc       	retal	r12
80004a6a:	00 00       	add	r0,r0
80004a6c:	00 00       	add	r0,r0
80004a6e:	03 4c       	ld.w	r12,--r1

80004a70 <udi_msc_sense_pass>:
     udi_msc_sense.AddSenseCode = add_sense >> 8;
     udi_msc_sense.AddSnsCodeQlfr = add_sense;
 }
 
 static void udi_msc_sense_pass(void)
 {
80004a70:	d4 01       	pushm	lr
     udi_msc_clear_sense();
80004a72:	f0 1f 00 04 	mcall	80004a80 <udi_msc_sense_pass+0x10>
     udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
80004a76:	30 09       	mov	r9,0
80004a78:	48 38       	lddpc	r8,80004a84 <udi_msc_sense_pass+0x14>
80004a7a:	f1 69 00 0c 	st.b	r8[12],r9
 }
80004a7e:	d8 02       	popm	pc
80004a80:	80 00       	ld.sh	r0,r0[0x0]
80004a82:	4a 50       	lddpc	r0,80004b14 <udi_msc_sense_fail_cdb_invalid+0x4>
80004a84:	00 00       	add	r0,r0
80004a86:	00 90       	mov	r0,r0

80004a88 <udi_msc_sense_fail>:
     udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
 }
 
 static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
         uint32_t lba)
 {
80004a88:	eb cd 40 e0 	pushm	r5-r7,lr
80004a8c:	18 95       	mov	r5,r12
80004a8e:	16 96       	mov	r6,r11
80004a90:	14 97       	mov	r7,r10
     udi_msc_clear_sense();
80004a92:	f0 1f 00 0e 	mcall	80004ac8 <udi_msc_sense_fail+0x40>
     udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
80004a96:	30 19       	mov	r9,1
80004a98:	48 d8       	lddpc	r8,80004acc <udi_msc_sense_fail+0x44>
80004a9a:	f1 69 00 0c 	st.b	r8[12],r9
     udi_msc_sense.sense_flag_key = sense_key;
80004a9e:	48 d8       	lddpc	r8,80004ad0 <udi_msc_sense_fail+0x48>
80004aa0:	b0 a5       	st.b	r8[0x2],r5
     udi_msc_sense.information[0] = lba >> 24;
80004aa2:	ee 09 16 18 	lsr	r9,r7,0x18
80004aa6:	b0 b9       	st.b	r8[0x3],r9
     udi_msc_sense.information[1] = lba >> 16;
80004aa8:	ee 09 16 10 	lsr	r9,r7,0x10
80004aac:	b0 c9       	st.b	r8[0x4],r9
     udi_msc_sense.information[2] = lba >> 8;
80004aae:	ee 09 16 08 	lsr	r9,r7,0x8
80004ab2:	b0 d9       	st.b	r8[0x5],r9
     udi_msc_sense.information[3] = lba;
80004ab4:	b0 e7       	st.b	r8[0x6],r7
     udi_msc_sense.AddSenseCode = add_sense >> 8;
80004ab6:	f3 d6 c1 08 	bfextu	r9,r6,0x8,0x8
80004aba:	f1 69 00 0c 	st.b	r8[12],r9
     udi_msc_sense.AddSnsCodeQlfr = add_sense;
80004abe:	f1 66 00 0d 	st.b	r8[13],r6
 }
80004ac2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004ac6:	00 00       	add	r0,r0
80004ac8:	80 00       	ld.sh	r0,r0[0x0]
80004aca:	4a 50       	lddpc	r0,80004b5c <udi_msc_csw_sent+0x8>
80004acc:	00 00       	add	r0,r0
80004ace:	00 90       	mov	r0,r0
80004ad0:	00 00       	add	r0,r0
80004ad2:	03 4c       	ld.w	r12,--r1

80004ad4 <udi_msc_sense_fail_busy_or_change>:
 {
     udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
 }
 
 static void udi_msc_sense_fail_busy_or_change(void)
 {
80004ad4:	d4 01       	pushm	lr
     udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
80004ad6:	30 0a       	mov	r10,0
80004ad8:	e0 6b 28 00 	mov	r11,10240
80004adc:	30 6c       	mov	r12,6
80004ade:	f0 1f 00 02 	mcall	80004ae4 <udi_msc_sense_fail_busy_or_change+0x10>
             SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
 }
80004ae2:	d8 02       	popm	pc
80004ae4:	80 00       	ld.sh	r0,r0[0x0]
80004ae6:	4a 88       	lddpc	r8,80004b84 <udi_msc_csw_send+0x24>

80004ae8 <udi_msc_sense_fail_not_present>:
     udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
 }
 
 
 static void udi_msc_sense_fail_not_present(void)
 {
80004ae8:	d4 01       	pushm	lr
     udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
80004aea:	30 0a       	mov	r10,0
80004aec:	e0 6b 3a 00 	mov	r11,14848
80004af0:	30 2c       	mov	r12,2
80004af2:	f0 1f 00 02 	mcall	80004af8 <udi_msc_sense_fail_not_present+0x10>
 }
80004af6:	d8 02       	popm	pc
80004af8:	80 00       	ld.sh	r0,r0[0x0]
80004afa:	4a 88       	lddpc	r8,80004b98 <udi_msc_csw_process+0x4>

80004afc <udi_msc_sense_fail_hardware>:
     udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
             SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
 }
 
 static void udi_msc_sense_fail_hardware(void)
 {
80004afc:	d4 01       	pushm	lr
     udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
80004afe:	30 0a       	mov	r10,0
80004b00:	14 9b       	mov	r11,r10
80004b02:	30 4c       	mov	r12,4
80004b04:	f0 1f 00 02 	mcall	80004b0c <udi_msc_sense_fail_hardware+0x10>
             SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
 }
80004b08:	d8 02       	popm	pc
80004b0a:	00 00       	add	r0,r0
80004b0c:	80 00       	ld.sh	r0,r0[0x0]
80004b0e:	4a 88       	lddpc	r8,80004bac <udi_msc_csw_process+0x18>

80004b10 <udi_msc_sense_fail_cdb_invalid>:
 {
     udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
 }
 
 static void udi_msc_sense_fail_cdb_invalid(void)
 {
80004b10:	d4 01       	pushm	lr
     udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
80004b12:	30 0a       	mov	r10,0
80004b14:	e0 6b 24 00 	mov	r11,9216
80004b18:	30 5c       	mov	r12,5
80004b1a:	f0 1f 00 02 	mcall	80004b20 <udi_msc_sense_fail_cdb_invalid+0x10>
             SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
 }
80004b1e:	d8 02       	popm	pc
80004b20:	80 00       	ld.sh	r0,r0[0x0]
80004b22:	4a 88       	lddpc	r8,80004bc0 <udi_msc_csw_process+0x2c>

80004b24 <udi_msc_cbw_wait>:
     // If stall cleared then restall it. Only Setup MSC Reset can clear it
     udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
 }
 
 static void udi_msc_cbw_wait(void)
 {
80004b24:	d4 01       	pushm	lr
     // Register buffer and callback on OUT endpoint
     if (!udd_ep_run(UDI_MSC_EP_OUT, true,
80004b26:	48 88       	lddpc	r8,80004b44 <udi_msc_cbw_wait+0x20>
80004b28:	31 f9       	mov	r9,31
80004b2a:	48 8a       	lddpc	r10,80004b48 <udi_msc_cbw_wait+0x24>
80004b2c:	30 1b       	mov	r11,1
80004b2e:	30 2c       	mov	r12,2
80004b30:	f0 1f 00 07 	mcall	80004b4c <udi_msc_cbw_wait+0x28>
80004b34:	c0 61       	brne	80004b40 <udi_msc_cbw_wait+0x1c>
                     (uint8_t *) & udi_msc_cbw,
                     sizeof(udi_msc_cbw),
                     udi_msc_cbw_received)) {
         // OUT endpoint not available (halted), then wait a clear of halt.
         udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
80004b36:	fe cb 00 12 	sub	r11,pc,18
80004b3a:	30 2c       	mov	r12,2
80004b3c:	f0 1f 00 05 	mcall	80004b50 <udi_msc_cbw_wait+0x2c>
80004b40:	d8 02       	popm	pc
80004b42:	00 00       	add	r0,r0
80004b44:	80 00       	ld.sh	r0,r0[0x0]
80004b46:	4e d0       	lddpc	r0,80004cf8 <udi_msc_data_send+0x14>
80004b48:	00 00       	add	r0,r0
80004b4a:	03 24       	ld.uh	r4,r1++
80004b4c:	80 00       	ld.sh	r0,r0[0x0]
80004b4e:	67 20       	ld.w	r0,r3[0x48]
80004b50:	80 00       	ld.sh	r0,r0[0x0]
80004b52:	5b 0c       	cp.w	r12,-16

80004b54 <udi_msc_csw_sent>:
     }
 }
 
 
 void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent)
 {
80004b54:	d4 01       	pushm	lr
     // CSW is sent or not
     // In all case, restart process and wait CBW
     udi_msc_cbw_wait();
80004b56:	f0 1f 00 02 	mcall	80004b5c <udi_msc_csw_sent+0x8>
 }
80004b5a:	d8 02       	popm	pc
80004b5c:	80 00       	ld.sh	r0,r0[0x0]
80004b5e:	4b 24       	lddpc	r4,80004c24 <udi_msc_process_trans+0x44>

80004b60 <udi_msc_csw_send>:
     udi_msc_csw_send();
 }
 
 
 void udi_msc_csw_send(void)
 {
80004b60:	d4 01       	pushm	lr
     // Sends CSW on IN endpoint
     if (!udd_ep_run(UDI_MSC_EP_IN, false,
80004b62:	48 88       	lddpc	r8,80004b80 <udi_msc_csw_send+0x20>
80004b64:	30 d9       	mov	r9,13
80004b66:	48 8a       	lddpc	r10,80004b84 <udi_msc_csw_send+0x24>
80004b68:	30 0b       	mov	r11,0
80004b6a:	e0 6c 00 81 	mov	r12,129
80004b6e:	f0 1f 00 07 	mcall	80004b88 <udi_msc_csw_send+0x28>
80004b72:	c0 61       	brne	80004b7e <udi_msc_csw_send+0x1e>
                     (uint8_t *) & udi_msc_csw,
                     sizeof(udi_msc_csw),
                     udi_msc_csw_sent)) {
         // Endpoint not available
         // then restart CSW sent when endpoint IN STALL will be cleared
         udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
80004b74:	48 6b       	lddpc	r11,80004b8c <udi_msc_csw_send+0x2c>
80004b76:	e0 6c 00 81 	mov	r12,129
80004b7a:	f0 1f 00 06 	mcall	80004b90 <udi_msc_csw_send+0x30>
80004b7e:	d8 02       	popm	pc
80004b80:	80 00       	ld.sh	r0,r0[0x0]
80004b82:	4b 54       	lddpc	r4,80004c54 <udi_msc_process_trans+0x74>
80004b84:	00 00       	add	r0,r0
80004b86:	00 90       	mov	r0,r0
80004b88:	80 00       	ld.sh	r0,r0[0x0]
80004b8a:	67 20       	ld.w	r0,r3[0x48]
80004b8c:	80 00       	ld.sh	r0,r0[0x0]
80004b8e:	4b 60       	lddpc	r0,80004c64 <udi_msc_process_trans+0x84>
80004b90:	80 00       	ld.sh	r0,r0[0x0]
80004b92:	5b 0c       	cp.w	r12,-16

80004b94 <udi_msc_csw_process>:
 
 //---------------------------------------------
 //------- Routines to process CSW packet
 
 static void udi_msc_csw_process(void)
 {
80004b94:	d4 01       	pushm	lr
     if (0 != udi_msc_csw.dCSWDataResidue) {
80004b96:	48 f8       	lddpc	r8,80004bd0 <udi_msc_csw_process+0x3c>
80004b98:	70 28       	ld.w	r8,r8[0x8]
80004b9a:	58 08       	cp.w	r8,0
80004b9c:	c1 00       	breq	80004bbc <udi_msc_csw_process+0x28>
         // Residue not NULL
         // then STALL next request from USB host on corresponding endpoint
         if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
80004b9e:	48 e8       	lddpc	r8,80004bd4 <udi_msc_csw_process+0x40>
80004ba0:	f1 39 00 0c 	ld.ub	r9,r8[12]
80004ba4:	30 08       	mov	r8,0
80004ba6:	f0 09 18 00 	cp.b	r9,r8
80004baa:	c0 64       	brge	80004bb6 <udi_msc_csw_process+0x22>
             udd_ep_set_halt(UDI_MSC_EP_IN);
80004bac:	e0 6c 00 81 	mov	r12,129
80004bb0:	f0 1f 00 0a 	mcall	80004bd8 <udi_msc_csw_process+0x44>
80004bb4:	c0 48       	rjmp	80004bbc <udi_msc_csw_process+0x28>
         else
             udd_ep_set_halt(UDI_MSC_EP_OUT);
80004bb6:	30 2c       	mov	r12,2
80004bb8:	f0 1f 00 08 	mcall	80004bd8 <udi_msc_csw_process+0x44>
     }
     // Prepare and send CSW
     udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
80004bbc:	48 58       	lddpc	r8,80004bd0 <udi_msc_csw_process+0x3c>
80004bbe:	48 69       	lddpc	r9,80004bd4 <udi_msc_csw_process+0x40>
80004bc0:	72 19       	ld.w	r9,r9[0x4]
80004bc2:	91 19       	st.w	r8[0x4],r9
     udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
80004bc4:	f1 d9 80 02 	ldswp.w	r9,r8[8]
80004bc8:	91 29       	st.w	r8[0x8],r9
     udi_msc_csw_send();
80004bca:	f0 1f 00 05 	mcall	80004bdc <udi_msc_csw_process+0x48>
 }
80004bce:	d8 02       	popm	pc
80004bd0:	00 00       	add	r0,r0
80004bd2:	00 90       	mov	r0,r0
80004bd4:	00 00       	add	r0,r0
80004bd6:	03 24       	ld.uh	r4,r1++
80004bd8:	80 00       	ld.sh	r0,r0[0x0]
80004bda:	5a 18       	cp.w	r8,-31
80004bdc:	80 00       	ld.sh	r0,r0[0x0]
80004bde:	4b 60       	lddpc	r0,80004cb4 <udi_msc_cbw_validate+0x8>

80004be0 <udi_msc_process_trans>:
     udi_msc_b_trans_req = true;
 }
 
 
 bool udi_msc_process_trans(void)
 {
80004be0:	d4 01       	pushm	lr
     Ctrl_status status;
 
     if (!udi_msc_b_trans_req)
80004be2:	49 c8       	lddpc	r8,80004c50 <udi_msc_process_trans+0x70>
80004be4:	11 89       	ld.ub	r9,r8[0x0]
80004be6:	30 08       	mov	r8,0
80004be8:	f0 09 18 00 	cp.b	r9,r8
80004bec:	c0 21       	brne	80004bf0 <udi_msc_process_trans+0x10>
80004bee:	d8 0a       	popm	pc,r12=0
         return false;   // No Transfer request to do
     udi_msc_b_trans_req = false;
80004bf0:	30 08       	mov	r8,0
80004bf2:	49 89       	lddpc	r9,80004c50 <udi_msc_process_trans+0x70>
80004bf4:	b2 88       	st.b	r9[0x0],r8
 
     // Start transfer
     if (udi_msc_b_read) {
80004bf6:	49 89       	lddpc	r9,80004c54 <udi_msc_process_trans+0x74>
80004bf8:	13 89       	ld.ub	r9,r9[0x0]
80004bfa:	f0 09 18 00 	cp.b	r9,r8
80004bfe:	c0 b0       	breq	80004c14 <udi_msc_process_trans+0x34>
         status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
80004c00:	49 68       	lddpc	r8,80004c58 <udi_msc_process_trans+0x78>
80004c02:	90 8a       	ld.uh	r10,r8[0x0]
80004c04:	49 68       	lddpc	r8,80004c5c <udi_msc_process_trans+0x7c>
80004c06:	70 0b       	ld.w	r11,r8[0x0]
80004c08:	49 68       	lddpc	r8,80004c60 <udi_msc_process_trans+0x80>
80004c0a:	f1 3c 00 0d 	ld.ub	r12,r8[13]
80004c0e:	f0 1f 00 16 	mcall	80004c64 <udi_msc_process_trans+0x84>
80004c12:	c0 a8       	rjmp	80004c26 <udi_msc_process_trans+0x46>
                 udi_msc_nb_block);
     } else {
         status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
80004c14:	49 18       	lddpc	r8,80004c58 <udi_msc_process_trans+0x78>
80004c16:	90 8a       	ld.uh	r10,r8[0x0]
80004c18:	49 18       	lddpc	r8,80004c5c <udi_msc_process_trans+0x7c>
80004c1a:	70 0b       	ld.w	r11,r8[0x0]
80004c1c:	49 18       	lddpc	r8,80004c60 <udi_msc_process_trans+0x80>
80004c1e:	f1 3c 00 0d 	ld.ub	r12,r8[13]
80004c22:	f0 1f 00 12 	mcall	80004c68 <udi_msc_process_trans+0x88>
                 udi_msc_nb_block);
     }
 
     // Check status of transfer
     switch (status) {
80004c26:	58 2c       	cp.w	r12,2
80004c28:	c0 b0       	breq	80004c3e <udi_msc_process_trans+0x5e>
80004c2a:	58 3c       	cp.w	r12,3
80004c2c:	c0 60       	breq	80004c38 <udi_msc_process_trans+0x58>
80004c2e:	58 0c       	cp.w	r12,0
80004c30:	c0 a1       	brne	80004c44 <udi_msc_process_trans+0x64>
     case CTRL_GOOD:
         udi_msc_sense_pass();
80004c32:	f0 1f 00 0f 	mcall	80004c6c <udi_msc_process_trans+0x8c>
         break;
80004c36:	c0 98       	rjmp	80004c48 <udi_msc_process_trans+0x68>
     case CTRL_BUSY:
         udi_msc_sense_fail_busy_or_change();
80004c38:	f0 1f 00 0e 	mcall	80004c70 <udi_msc_process_trans+0x90>
         break;
80004c3c:	c0 68       	rjmp	80004c48 <udi_msc_process_trans+0x68>
     case CTRL_NO_PRESENT:
         udi_msc_sense_fail_not_present();
80004c3e:	f0 1f 00 0e 	mcall	80004c74 <udi_msc_process_trans+0x94>
         break;
80004c42:	c0 38       	rjmp	80004c48 <udi_msc_process_trans+0x68>
     default:
     case CTRL_FAIL:
         udi_msc_sense_fail_hardware();
80004c44:	f0 1f 00 0d 	mcall	80004c78 <udi_msc_process_trans+0x98>
         break;
     }
     // Send status of transfer in CSW packet
     udi_msc_csw_process();
80004c48:	f0 1f 00 0d 	mcall	80004c7c <udi_msc_process_trans+0x9c>
80004c4c:	da 0a       	popm	pc,r12=1
80004c4e:	00 00       	add	r0,r0
80004c50:	00 00       	add	r0,r0
80004c52:	03 18       	ld.sh	r8,r1++
80004c54:	00 00       	add	r0,r0
80004c56:	03 60       	ld.uh	r0,--r1
80004c58:	00 00       	add	r0,r0
80004c5a:	03 46       	ld.w	r6,--r1
80004c5c:	00 00       	add	r0,r0
80004c5e:	03 48       	ld.w	r8,--r1
80004c60:	00 00       	add	r0,r0
80004c62:	03 24       	ld.uh	r4,r1++
80004c64:	80 00       	ld.sh	r0,r0[0x0]
80004c66:	6b 88       	ld.w	r8,r5[0x60]
80004c68:	80 00       	ld.sh	r0,r0[0x0]
80004c6a:	6b 14       	ld.w	r4,r5[0x44]
80004c6c:	80 00       	ld.sh	r0,r0[0x0]
80004c6e:	4a 70       	lddpc	r0,80004d08 <udi_msc_data_send+0x24>
80004c70:	80 00       	ld.sh	r0,r0[0x0]
80004c72:	4a d4       	lddpc	r4,80004d24 <udi_msc_cbw_invalid+0x10>
80004c74:	80 00       	ld.sh	r0,r0[0x0]
80004c76:	4a e8       	lddpc	r8,80004d2c <udi_msc_cbw_invalid+0x18>
80004c78:	80 00       	ld.sh	r0,r0[0x0]
80004c7a:	4a fc       	lddpc	r12,80004d34 <udi_msc_cbw_invalid+0x20>
80004c7c:	80 00       	ld.sh	r0,r0[0x0]
80004c7e:	4b 94       	lddpc	r4,80004d60 <udi_msc_csw_invalid+0x20>

80004c80 <udi_msc_data_sent>:
     }
 }
 
 
 void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent)
 {
80004c80:	eb cd 40 80 	pushm	r7,lr
80004c84:	16 97       	mov	r7,r11
     if (UDD_EP_TRANSFER_OK != status) {
80004c86:	58 0c       	cp.w	r12,0
80004c88:	c0 91       	brne	80004c9a <udi_msc_data_sent+0x1a>
         // Error protocol
         // Now wait MSC setup reset to relaunch CBW reception
         return;
     }
     // Update sense data
     udi_msc_sense_pass();
80004c8a:	f0 1f 00 06 	mcall	80004ca0 <udi_msc_data_sent+0x20>
     // Update CSW
     udi_msc_csw.dCSWDataResidue -= nb_sent;
80004c8e:	48 68       	lddpc	r8,80004ca4 <udi_msc_data_sent+0x24>
80004c90:	70 29       	ld.w	r9,r8[0x8]
80004c92:	0e 19       	sub	r9,r7
80004c94:	91 29       	st.w	r8[0x8],r9
     udi_msc_csw_process();
80004c96:	f0 1f 00 05 	mcall	80004ca8 <udi_msc_data_sent+0x28>
80004c9a:	e3 cd 80 80 	ldm	sp++,r7,pc
80004c9e:	00 00       	add	r0,r0
80004ca0:	80 00       	ld.sh	r0,r0[0x0]
80004ca2:	4a 70       	lddpc	r0,80004d3c <udi_msc_cbw_invalid+0x28>
80004ca4:	00 00       	add	r0,r0
80004ca6:	00 90       	mov	r0,r0
80004ca8:	80 00       	ld.sh	r0,r0[0x0]
80004caa:	4b 94       	lddpc	r4,80004d8c <udi_msc_spc_mode_sense+0x1c>

80004cac <udi_msc_cbw_validate>:
     }
 }
 
 
 static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
 {
80004cac:	d4 01       	pushm	lr
      *  - Case  7: Hi < Di
      *  - Case  8: Hi <> Do
      *  - Case 10: Ho <> Di
      *  - Case 13: Ho < Do
      */
     if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
80004cae:	48 a8       	lddpc	r8,80004cd4 <udi_msc_cbw_validate+0x28>
80004cb0:	f1 38 00 0c 	ld.ub	r8,r8[12]
80004cb4:	f7 e8 20 08 	eor	r8,r11,r8
80004cb8:	30 09       	mov	r9,0
80004cba:	f2 08 18 00 	cp.b	r8,r9
80004cbe:	c0 65       	brlt	80004cca <udi_msc_cbw_validate+0x1e>
80004cc0:	48 68       	lddpc	r8,80004cd8 <udi_msc_cbw_validate+0x2c>
80004cc2:	70 28       	ld.w	r8,r8[0x8]
80004cc4:	18 38       	cp.w	r8,r12
80004cc6:	c0 23       	brcs	80004cca <udi_msc_cbw_validate+0x1e>
80004cc8:	da 0a       	popm	pc,r12=1
             || (udi_msc_csw.dCSWDataResidue < alloc_len)) {
         udi_msc_sense_fail_cdb_invalid();
80004cca:	f0 1f 00 05 	mcall	80004cdc <udi_msc_cbw_validate+0x30>
         udi_msc_csw_process();
80004cce:	f0 1f 00 05 	mcall	80004ce0 <udi_msc_cbw_validate+0x34>
80004cd2:	d8 0a       	popm	pc,r12=0
80004cd4:	00 00       	add	r0,r0
80004cd6:	03 24       	ld.uh	r4,r1++
80004cd8:	00 00       	add	r0,r0
80004cda:	00 90       	mov	r0,r0
80004cdc:	80 00       	ld.sh	r0,r0[0x0]
80004cde:	4b 10       	lddpc	r0,80004da0 <udi_msc_spc_mode_sense+0x30>
80004ce0:	80 00       	ld.sh	r0,r0[0x0]
80004ce2:	4b 94       	lddpc	r4,80004dc4 <udi_msc_spc_mode_sense+0x54>

80004ce4 <udi_msc_data_send>:
 
 //---------------------------------------------
 //------- Routines to process small data packet
 
 static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
 {
80004ce4:	d4 01       	pushm	lr
     // Sends data on IN endpoint
     if (!udd_ep_run(UDI_MSC_EP_IN, true,
80004ce6:	48 88       	lddpc	r8,80004d04 <udi_msc_data_send+0x20>
80004ce8:	16 99       	mov	r9,r11
80004cea:	18 9a       	mov	r10,r12
80004cec:	30 1b       	mov	r11,1
80004cee:	e0 6c 00 81 	mov	r12,129
80004cf2:	f0 1f 00 06 	mcall	80004d08 <udi_msc_data_send+0x24>
80004cf6:	c0 51       	brne	80004d00 <udi_msc_data_send+0x1c>
                     buffer, buf_size, udi_msc_data_sent)) {
         // If endpoint not available, then exit process command
         udi_msc_sense_fail_hardware();
80004cf8:	f0 1f 00 05 	mcall	80004d0c <udi_msc_data_send+0x28>
         udi_msc_csw_process();
80004cfc:	f0 1f 00 05 	mcall	80004d10 <udi_msc_data_send+0x2c>
80004d00:	d8 02       	popm	pc
80004d02:	00 00       	add	r0,r0
80004d04:	80 00       	ld.sh	r0,r0[0x0]
80004d06:	4c 80       	lddpc	r0,80004e24 <udi_msc_spc_mode_sense+0xb4>
80004d08:	80 00       	ld.sh	r0,r0[0x0]
80004d0a:	67 20       	ld.w	r0,r3[0x48]
80004d0c:	80 00       	ld.sh	r0,r0[0x0]
80004d0e:	4a fc       	lddpc	r12,80004dc8 <udi_msc_spc_mode_sense+0x58>
80004d10:	80 00       	ld.sh	r0,r0[0x0]
80004d12:	4b 94       	lddpc	r4,80004df4 <udi_msc_spc_mode_sense+0x84>

80004d14 <udi_msc_cbw_invalid>:
 
 //---------------------------------------------
 //------- Routines to process CBW packet
 
 static void udi_msc_cbw_invalid(void)
 {
80004d14:	d4 01       	pushm	lr
     if (!udi_msc_b_cbw_invalid)
80004d16:	48 88       	lddpc	r8,80004d34 <udi_msc_cbw_invalid+0x20>
80004d18:	11 89       	ld.ub	r9,r8[0x0]
80004d1a:	30 08       	mov	r8,0
80004d1c:	f0 09 18 00 	cp.b	r9,r8
80004d20:	c0 90       	breq	80004d32 <udi_msc_cbw_invalid+0x1e>
         return; // Don't restall endpoint if error reseted by setup
     udd_ep_set_halt(UDI_MSC_EP_OUT);
80004d22:	30 2c       	mov	r12,2
80004d24:	f0 1f 00 05 	mcall	80004d38 <udi_msc_cbw_invalid+0x24>
     // If stall cleared then restall it. Only Setup MSC Reset can clear it
     udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
80004d28:	fe cb 00 14 	sub	r11,pc,20
80004d2c:	30 2c       	mov	r12,2
80004d2e:	f0 1f 00 04 	mcall	80004d3c <udi_msc_cbw_invalid+0x28>
80004d32:	d8 02       	popm	pc
80004d34:	00 00       	add	r0,r0
80004d36:	03 44       	ld.w	r4,--r1
80004d38:	80 00       	ld.sh	r0,r0[0x0]
80004d3a:	5a 18       	cp.w	r8,-31
80004d3c:	80 00       	ld.sh	r0,r0[0x0]
80004d3e:	5b 0c       	cp.w	r12,-16

80004d40 <udi_msc_csw_invalid>:
 }
 
 static void udi_msc_csw_invalid(void)
 {
80004d40:	d4 01       	pushm	lr
     if (!udi_msc_b_cbw_invalid)
80004d42:	48 98       	lddpc	r8,80004d64 <udi_msc_csw_invalid+0x24>
80004d44:	11 89       	ld.ub	r9,r8[0x0]
80004d46:	30 08       	mov	r8,0
80004d48:	f0 09 18 00 	cp.b	r9,r8
80004d4c:	c0 b0       	breq	80004d62 <udi_msc_csw_invalid+0x22>
         return; // Don't restall endpoint if error reseted by setup
     udd_ep_set_halt(UDI_MSC_EP_IN);
80004d4e:	e0 6c 00 81 	mov	r12,129
80004d52:	f0 1f 00 06 	mcall	80004d68 <udi_msc_csw_invalid+0x28>
     // If stall cleared then restall it. Only Setup MSC Reset can clear it
     udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
80004d56:	fe cb 00 16 	sub	r11,pc,22
80004d5a:	e0 6c 00 81 	mov	r12,129
80004d5e:	f0 1f 00 04 	mcall	80004d6c <udi_msc_csw_invalid+0x2c>
80004d62:	d8 02       	popm	pc
80004d64:	00 00       	add	r0,r0
80004d66:	03 44       	ld.w	r4,--r1
80004d68:	80 00       	ld.sh	r0,r0[0x0]
80004d6a:	5a 18       	cp.w	r8,-31
80004d6c:	80 00       	ld.sh	r0,r0[0x0]
80004d6e:	5b 0c       	cp.w	r12,-16

80004d70 <udi_msc_spc_mode_sense>:
     udi_msc_csw_process();
 }
 
 
 static void udi_msc_spc_mode_sense(bool b_sense10)
 {
80004d70:	eb cd 40 e0 	pushm	r5-r7,lr
80004d74:	18 96       	mov	r6,r12
     uint8_t wp;
     struct spc_control_page_info_execpt *ptr_mode;
     UDC_BSS(4)  static union sense_6_10 sense;
 
     // Clear all fields
     memset(&sense, 0, sizeof(sense));
80004d76:	30 0a       	mov	r10,0
80004d78:	30 0b       	mov	r11,0
80004d7a:	4a a8       	lddpc	r8,80004e20 <udi_msc_spc_mode_sense+0xb0>
80004d7c:	b1 2a       	st.d	r8++,r10
80004d7e:	b1 2a       	st.d	r8++,r10
80004d80:	30 09       	mov	r9,0
80004d82:	91 09       	st.w	r8[0x0],r9
 
     // Initialize process
     if (b_sense10) {
80004d84:	58 0c       	cp.w	r12,0
80004d86:	c0 80       	breq	80004d96 <udi_msc_spc_mode_sense+0x26>
         request_lgt = udi_msc_cbw.CDB[8];
80004d88:	4a 78       	lddpc	r8,80004e24 <udi_msc_spc_mode_sense+0xb4>
80004d8a:	f1 35 00 17 	ld.ub	r5,r8[23]
80004d8e:	4a 59       	lddpc	r9,80004e20 <udi_msc_spc_mode_sense+0xb0>
80004d90:	2f 89       	sub	r9,-8
80004d92:	30 87       	mov	r7,8
80004d94:	c0 78       	rjmp	80004da2 <udi_msc_spc_mode_sense+0x32>
         ptr_mode = &sense.s10.sense_data;
         data_sense_lgt = sizeof(struct scsi_mode_param_header10);
     } else {
         request_lgt = udi_msc_cbw.CDB[4];
80004d96:	4a 48       	lddpc	r8,80004e24 <udi_msc_spc_mode_sense+0xb4>
80004d98:	f1 35 00 13 	ld.ub	r5,r8[19]
80004d9c:	4a 19       	lddpc	r9,80004e20 <udi_msc_spc_mode_sense+0xb0>
80004d9e:	2f c9       	sub	r9,-4
80004da0:	30 47       	mov	r7,4
     }
 
     // No Block descriptor
 
     // Fill page(s)
     mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
80004da2:	4a 18       	lddpc	r8,80004e24 <udi_msc_spc_mode_sense+0xb4>
80004da4:	f1 38 00 11 	ld.ub	r8,r8[17]
80004da8:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
     if ((SCSI_MS_MODE_INFEXP == mode)
80004dac:	31 ca       	mov	r10,28
80004dae:	f4 08 18 00 	cp.b	r8,r10
80004db2:	5f 0a       	sreq	r10
80004db4:	33 fb       	mov	r11,63
80004db6:	f6 08 18 00 	cp.b	r8,r11
80004dba:	5f 08       	sreq	r8
80004dbc:	f5 e8 10 08 	or	r8,r10,r8
80004dc0:	c0 90       	breq	80004dd2 <udi_msc_spc_mode_sense+0x62>
             || (SCSI_MS_MODE_ALL == mode)) {
         // Informational exceptions control page (from SPC)
         ptr_mode->page_code =
80004dc2:	31 c8       	mov	r8,28
80004dc4:	b2 88       	st.b	r9[0x0],r8
                 SCSI_MS_MODE_INFEXP;
         ptr_mode->page_length =
80004dc6:	30 a8       	mov	r8,10
80004dc8:	b2 98       	st.b	r9[0x1],r8
                 SPC_MP_INFEXP_PAGE_LENGTH;
         ptr_mode->mrie =
80004dca:	30 58       	mov	r8,5
80004dcc:	b2 b8       	st.b	r9[0x3],r8
                 SPC_MP_INFEXP_MRIE_NO_SENSE;
         data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
80004dce:	2f 47       	sub	r7,-12
80004dd0:	5c 57       	castu.b	r7
80004dd2:	ee 05 18 00 	cp.b	r5,r7
80004dd6:	ee 05 17 20 	movhs	r5,r7
     }
     // Can't send more than mode sense data length
     if (request_lgt > data_sense_lgt)
         request_lgt = data_sense_lgt;
     if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
80004dda:	e0 6b 00 80 	mov	r11,128
80004dde:	0a 9c       	mov	r12,r5
80004de0:	f0 1f 00 12 	mcall	80004e28 <udi_msc_spc_mode_sense+0xb8>
80004de4:	c1 b0       	breq	80004e1a <udi_msc_spc_mode_sense+0xaa>
         return;
 
     // Fill mode parameter header length
     wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
80004de6:	49 08       	lddpc	r8,80004e24 <udi_msc_spc_mode_sense+0xb4>
80004de8:	f1 3c 00 0d 	ld.ub	r12,r8[13]
80004dec:	f0 1f 00 10 	mcall	80004e2c <udi_msc_spc_mode_sense+0xbc>
80004df0:	e0 68 00 80 	mov	r8,128
80004df4:	f0 0c 17 10 	movne	r12,r8
80004df8:	f9 bc 00 00 	moveq	r12,0
 
     if (b_sense10) {
80004dfc:	58 06       	cp.w	r6,0
80004dfe:	c0 60       	breq	80004e0a <udi_msc_spc_mode_sense+0x9a>
         sense.s10.header.mode_data_length =
80004e00:	48 88       	lddpc	r8,80004e20 <udi_msc_spc_mode_sense+0xb0>
80004e02:	20 27       	sub	r7,2
80004e04:	b0 07       	st.h	r8[0x0],r7
                 cpu_to_be16((data_sense_lgt - 2));
         //sense.s10.header.medium_type                 = 0;
         sense.s10.header.device_specific_parameter = wp;
80004e06:	b0 bc       	st.b	r8[0x3],r12
80004e08:	c0 58       	rjmp	80004e12 <udi_msc_spc_mode_sense+0xa2>
         //sense.s10.header.block_descriptor_length     = 0;
     } else {
         sense.s6.header.mode_data_length = data_sense_lgt - 1;
80004e0a:	48 68       	lddpc	r8,80004e20 <udi_msc_spc_mode_sense+0xb0>
80004e0c:	20 17       	sub	r7,1
80004e0e:	b0 87       	st.b	r8[0x0],r7
         //sense.s6.header.medium_type                  = 0;
         sense.s6.header.device_specific_parameter = wp;
80004e10:	b0 ac       	st.b	r8[0x2],r12
         //sense.s6.header.block_descriptor_length      = 0;
     }
 
     // Send mode sense data
     udi_msc_data_send((uint8_t *) & sense, request_lgt);
80004e12:	0a 9b       	mov	r11,r5
80004e14:	48 3c       	lddpc	r12,80004e20 <udi_msc_spc_mode_sense+0xb0>
80004e16:	f0 1f 00 07 	mcall	80004e30 <udi_msc_spc_mode_sense+0xc0>
80004e1a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004e1e:	00 00       	add	r0,r0
80004e20:	00 00       	add	r0,r0
80004e22:	03 64       	ld.uh	r4,--r1
80004e24:	00 00       	add	r0,r0
80004e26:	03 24       	ld.uh	r4,r1++
80004e28:	80 00       	ld.sh	r0,r0[0x0]
80004e2a:	4c ac       	lddpc	r12,80004f50 <udi_msc_cbw_received+0x80>
80004e2c:	80 00       	ld.sh	r0,r0[0x0]
80004e2e:	6a b8       	ld.w	r8,r5[0x2c]
80004e30:	80 00       	ld.sh	r0,r0[0x0]
80004e32:	4c e4       	lddpc	r4,80004f68 <udi_msc_cbw_received+0x98>

80004e34 <udi_msc_sbc_trans>:
             sizeof(udi_msc_capacity));
 }
 
 
 static void udi_msc_sbc_trans(bool b_read)
 {
80004e34:	eb cd 40 80 	pushm	r7,lr
80004e38:	18 97       	mov	r7,r12
     uint32_t trans_size;
 
     if (!b_read) {
80004e3a:	58 0c       	cp.w	r12,0
80004e3c:	c1 11       	brne	80004e5e <udi_msc_sbc_trans+0x2a>
         // Write operation then check Write Protect
         if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
80004e3e:	49 c8       	lddpc	r8,80004eac <udi_msc_sbc_trans+0x78>
80004e40:	f1 3c 00 0d 	ld.ub	r12,r8[13]
80004e44:	f0 1f 00 1b 	mcall	80004eb0 <udi_msc_sbc_trans+0x7c>
80004e48:	c0 b0       	breq	80004e5e <udi_msc_sbc_trans+0x2a>
             SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
 }
 
 static void udi_msc_sense_fail_protected(void)
 {
     udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
80004e4a:	30 0a       	mov	r10,0
80004e4c:	e0 6b 27 00 	mov	r11,9984
80004e50:	30 7c       	mov	r12,7
80004e52:	f0 1f 00 19 	mcall	80004eb4 <udi_msc_sbc_trans+0x80>
     if (!b_read) {
         // Write operation then check Write Protect
         if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
             // Write not authorized
             udi_msc_sense_fail_protected();
             udi_msc_csw_process();
80004e56:	f0 1f 00 19 	mcall	80004eb8 <udi_msc_sbc_trans+0x84>
             return;
80004e5a:	e3 cd 80 80 	ldm	sp++,r7,pc
         }
     }
     // Read/Write command fields (address and number of block)
     MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
80004e5e:	49 89       	lddpc	r9,80004ebc <udi_msc_sbc_trans+0x88>
80004e60:	49 38       	lddpc	r8,80004eac <udi_msc_sbc_trans+0x78>
80004e62:	f1 3a 00 11 	ld.ub	r10,r8[17]
80004e66:	b2 8a       	st.b	r9[0x0],r10
     MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
80004e68:	f1 3a 00 12 	ld.ub	r10,r8[18]
80004e6c:	b2 9a       	st.b	r9[0x1],r10
     MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
80004e6e:	f1 3a 00 13 	ld.ub	r10,r8[19]
80004e72:	b2 aa       	st.b	r9[0x2],r10
     MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
80004e74:	f1 3a 00 14 	ld.ub	r10,r8[20]
80004e78:	b2 ba       	st.b	r9[0x3],r10
     MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
80004e7a:	49 29       	lddpc	r9,80004ec0 <udi_msc_sbc_trans+0x8c>
80004e7c:	f1 3a 00 16 	ld.ub	r10,r8[22]
80004e80:	b2 8a       	st.b	r9[0x0],r10
     LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
80004e82:	f1 38 00 17 	ld.ub	r8,r8[23]
80004e86:	b2 98       	st.b	r9[0x1],r8
 
     // Compute number of byte to transfer and valid it
     trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
     if (!udi_msc_cbw_validate(trans_size,
80004e88:	92 8c       	ld.uh	r12,r9[0x0]
80004e8a:	e0 6b 00 80 	mov	r11,128
80004e8e:	58 07       	cp.w	r7,0
80004e90:	f9 bb 00 00 	moveq	r11,0
80004e94:	a9 7c       	lsl	r12,0x9
80004e96:	f0 1f 00 0c 	mcall	80004ec4 <udi_msc_sbc_trans+0x90>
80004e9a:	c0 60       	breq	80004ea6 <udi_msc_sbc_trans+0x72>
                     (b_read) ? USB_CBW_DIRECTION_IN :
                     USB_CBW_DIRECTION_OUT))
         return;
 
     // Record transfer request to do it in main loop and not under interrupt
     udi_msc_b_read = b_read;
80004e9c:	48 b8       	lddpc	r8,80004ec8 <udi_msc_sbc_trans+0x94>
80004e9e:	b0 87       	st.b	r8[0x0],r7
     udi_msc_b_trans_req = true;
80004ea0:	30 19       	mov	r9,1
80004ea2:	48 b8       	lddpc	r8,80004ecc <udi_msc_sbc_trans+0x98>
80004ea4:	b0 89       	st.b	r8[0x0],r9
80004ea6:	e3 cd 80 80 	ldm	sp++,r7,pc
80004eaa:	00 00       	add	r0,r0
80004eac:	00 00       	add	r0,r0
80004eae:	03 24       	ld.uh	r4,r1++
80004eb0:	80 00       	ld.sh	r0,r0[0x0]
80004eb2:	6a b8       	ld.w	r8,r5[0x2c]
80004eb4:	80 00       	ld.sh	r0,r0[0x0]
80004eb6:	4a 88       	lddpc	r8,80004f54 <udi_msc_cbw_received+0x84>
80004eb8:	80 00       	ld.sh	r0,r0[0x0]
80004eba:	4b 94       	lddpc	r4,80004f9c <udi_msc_cbw_received+0xcc>
80004ebc:	00 00       	add	r0,r0
80004ebe:	03 48       	ld.w	r8,--r1
80004ec0:	00 00       	add	r0,r0
80004ec2:	03 46       	ld.w	r6,--r1
80004ec4:	80 00       	ld.sh	r0,r0[0x0]
80004ec6:	4c ac       	lddpc	r12,80004fec <udi_msc_cbw_received+0x11c>
80004ec8:	00 00       	add	r0,r0
80004eca:	03 60       	ld.uh	r0,--r1
80004ecc:	00 00       	add	r0,r0
80004ece:	03 18       	ld.sh	r8,r1++

80004ed0 <udi_msc_cbw_received>:
     }
 }
 
 
 void udi_msc_cbw_received(udd_ep_status_t status, iram_size_t nb_received)
 {
80004ed0:	eb cd 40 c0 	pushm	r6-r7,lr
     // Check status of transfer
     if (UDD_EP_TRANSFER_OK != status) {
80004ed4:	58 0c       	cp.w	r12,0
80004ed6:	e0 81 01 14 	brne	800050fe <udi_msc_cbw_received+0x22e>
         // Now wait MSC setup reset to relaunch CBW reception
         return;
     }
     // Check CBW integrity:
     // transfer status/CBW length/CBW signature
     if ((sizeof(udi_msc_cbw) != nb_received)
80004eda:	59 fb       	cp.w	r11,31
80004edc:	c0 a1       	brne	80004ef0 <udi_msc_cbw_received+0x20>
80004ede:	fe f8 02 26 	ld.w	r8,pc[550]
80004ee2:	70 08       	ld.w	r8,r8[0x0]
80004ee4:	e0 69 42 43 	mov	r9,16963
80004ee8:	ea 19 55 53 	orh	r9,0x5553
80004eec:	12 38       	cp.w	r8,r9
80004eee:	c0 b0       	breq	80004f04 <udi_msc_cbw_received+0x34>
                     CPU_TO_BE32(USB_CBW_SIGNATURE))) {
         // (5.2.1) Devices receiving a CBW with an invalid signature should stall
         // further traffic on the Bulk In pipe, and either stall further traffic
         // or accept and discard further traffic on the Bulk Out pipe, until
         // reset recovery.
         udi_msc_b_cbw_invalid = true;
80004ef0:	30 19       	mov	r9,1
80004ef2:	fe f8 02 16 	ld.w	r8,pc[534]
80004ef6:	b0 89       	st.b	r8[0x0],r9
         udi_msc_cbw_invalid();
80004ef8:	f0 1f 00 85 	mcall	8000510c <udi_msc_cbw_received+0x23c>
         udi_msc_csw_invalid();
80004efc:	f0 1f 00 85 	mcall	80005110 <udi_msc_cbw_received+0x240>
         return;
80004f00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     // Check LUN asked
     udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
80004f04:	fe f9 02 00 	ld.w	r9,pc[512]
80004f08:	f3 38 00 0d 	ld.ub	r8,r9[13]
80004f0c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004f10:	f3 68 00 0d 	st.b	r9[13],r8
     if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
80004f14:	fe f9 02 00 	ld.w	r9,pc[512]
80004f18:	13 89       	ld.ub	r9,r9[0x0]
80004f1a:	f0 09 18 00 	cp.b	r9,r8
80004f1e:	c0 72       	brcc	80004f2c <udi_msc_cbw_received+0x5c>
         // Bad LUN, then stop command process
         udi_msc_sense_fail_cdb_invalid();
80004f20:	f0 1f 00 7e 	mcall	80005118 <udi_msc_cbw_received+0x248>
         udi_msc_csw_process();
80004f24:	f0 1f 00 7e 	mcall	8000511c <udi_msc_cbw_received+0x24c>
         return;
80004f28:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     // Prepare CSW residue field with the size requested
     udi_msc_csw.dCSWDataResidue =
             le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
80004f2c:	4f 68       	lddpc	r8,80005104 <udi_msc_cbw_received+0x234>
80004f2e:	f1 da 80 02 	ldswp.w	r10,r8[8]
         udi_msc_sense_fail_cdb_invalid();
         udi_msc_csw_process();
         return;
     }
     // Prepare CSW residue field with the size requested
     udi_msc_csw.dCSWDataResidue =
80004f32:	4f c9       	lddpc	r9,80005120 <udi_msc_cbw_received+0x250>
80004f34:	93 2a       	st.w	r9[0x8],r10
             le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
 
     // Decode opcode
     switch (udi_msc_cbw.CDB[0]) {
80004f36:	f1 38 00 0f 	ld.ub	r8,r8[15]
80004f3a:	e0 48 00 5a 	cp.w	r8,90
80004f3e:	e0 8b 00 d4 	brhi	800050e6 <udi_msc_cbw_received+0x216>
80004f42:	4f 99       	lddpc	r9,80005124 <udi_msc_cbw_received+0x254>
80004f44:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
 //---------------------------------------------
 //------- Routines manage SCSI Commands
 
 static void udi_msc_spc_requestsense(void)
 {
     uint8_t length = udi_msc_cbw.CDB[4];
80004f48:	4e f8       	lddpc	r8,80005104 <udi_msc_cbw_received+0x234>
80004f4a:	f1 37 00 13 	ld.ub	r7,r8[19]
80004f4e:	31 28       	mov	r8,18
80004f50:	f0 07 18 00 	cp.b	r7,r8
80004f54:	f9 b7 0b 12 	movhi	r7,18
 
     // Can't send more than sense data length
     if (length > sizeof(udi_msc_sense))
         length = sizeof(udi_msc_sense);
 
     if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
80004f58:	e0 6b 00 80 	mov	r11,128
80004f5c:	0e 9c       	mov	r12,r7
80004f5e:	f0 1f 00 73 	mcall	80005128 <udi_msc_cbw_received+0x258>
80004f62:	e0 80 00 ce 	breq	800050fe <udi_msc_cbw_received+0x22e>
         return;
     // Send sense data
     udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
80004f66:	0e 9b       	mov	r11,r7
80004f68:	4f 1c       	lddpc	r12,8000512c <udi_msc_cbw_received+0x25c>
80004f6a:	f0 1f 00 72 	mcall	80005130 <udi_msc_cbw_received+0x260>
80004f6e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
         .addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
         .vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
         .product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
     };
 
     length = udi_msc_cbw.CDB[4];
80004f72:	4e 58       	lddpc	r8,80005104 <udi_msc_cbw_received+0x234>
80004f74:	f1 37 00 13 	ld.ub	r7,r8[19]
80004f78:	32 48       	mov	r8,36
80004f7a:	f0 07 18 00 	cp.b	r7,r8
80004f7e:	f9 b7 0b 24 	movhi	r7,36
 
     // Can't send more than inquiry data length
     if (length > sizeof(udi_msc_inquiry_data))
         length = sizeof(udi_msc_inquiry_data);
 
     if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
80004f82:	e0 6b 00 80 	mov	r11,128
80004f86:	0e 9c       	mov	r12,r7
80004f88:	f0 1f 00 68 	mcall	80005128 <udi_msc_cbw_received+0x258>
80004f8c:	e0 80 00 b9 	breq	800050fe <udi_msc_cbw_received+0x22e>
         return;
     if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
80004f90:	4d d8       	lddpc	r8,80005104 <udi_msc_cbw_received+0x234>
80004f92:	f1 38 00 10 	ld.ub	r8,r8[16]
80004f96:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80004f9a:	c0 81       	brne	80004faa <udi_msc_cbw_received+0xda>
             || (0 != udi_msc_cbw.CDB[2])) {
80004f9c:	4d a8       	lddpc	r8,80005104 <udi_msc_cbw_received+0x234>
80004f9e:	f1 39 00 11 	ld.ub	r9,r8[17]
80004fa2:	30 08       	mov	r8,0
80004fa4:	f0 09 18 00 	cp.b	r9,r8
80004fa8:	c0 70       	breq	80004fb6 <udi_msc_cbw_received+0xe6>
         // CMDT and EPVD bits are not at 0
         // PAGE or OPERATION CODE fields are not empty
         //  = No standard inquiry asked
         udi_msc_sense_fail_cdb_invalid();   // Command is unsupported
80004faa:	f0 1f 00 5c 	mcall	80005118 <udi_msc_cbw_received+0x248>
         udi_msc_csw_process();
80004fae:	f0 1f 00 5c 	mcall	8000511c <udi_msc_cbw_received+0x24c>
80004fb2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
         return;
     }
     //* Fill product ID field
     // Copy name in product id field
     memcpy(udi_msc_inquiry_data.product_id,
             mem_name(udi_msc_cbw.bCBWLUN),
80004fb6:	4d 48       	lddpc	r8,80005104 <udi_msc_cbw_received+0x234>
80004fb8:	f1 3c 00 0d 	ld.ub	r12,r8[13]
80004fbc:	f0 1f 00 5e 	mcall	80005134 <udi_msc_cbw_received+0x264>
         udi_msc_csw_process();
         return;
     }
     //* Fill product ID field
     // Copy name in product id field
     memcpy(udi_msc_inquiry_data.product_id,
80004fc0:	4d e6       	lddpc	r6,80005138 <udi_msc_cbw_received+0x268>
80004fc2:	31 0a       	mov	r10,16
80004fc4:	18 9b       	mov	r11,r12
80004fc6:	ec 0a 00 0c 	add	r12,r6,r10
80004fca:	f0 1f 00 5d 	mcall	8000513c <udi_msc_cbw_received+0x26c>
             mem_name(udi_msc_cbw.bCBWLUN),
             sizeof(udi_msc_inquiry_data.product_id));
     // Search end of name '/0'
     i = 0;
     while (sizeof(udi_msc_inquiry_data.product_id) != i) {
         if (0 == udi_msc_inquiry_data.product_id[i])
80004fce:	ed 39 00 10 	ld.ub	r9,r6[16]
80004fd2:	30 08       	mov	r8,0
80004fd4:	f0 09 18 00 	cp.b	r9,r8
80004fd8:	e0 80 00 91 	breq	800050fa <udi_msc_cbw_received+0x22a>
80004fdc:	0c 99       	mov	r9,r6
80004fde:	2e f9       	sub	r9,-17
80004fe0:	30 18       	mov	r8,1
80004fe2:	30 0b       	mov	r11,0
     memcpy(udi_msc_inquiry_data.product_id,
             mem_name(udi_msc_cbw.bCBWLUN),
             sizeof(udi_msc_inquiry_data.product_id));
     // Search end of name '/0'
     i = 0;
     while (sizeof(udi_msc_inquiry_data.product_id) != i) {
80004fe4:	31 0c       	mov	r12,16
         if (0 == udi_msc_inquiry_data.product_id[i])
80004fe6:	13 8a       	ld.ub	r10,r9[0x0]
80004fe8:	f6 0a 18 00 	cp.b	r10,r11
80004fec:	c0 80       	breq	80004ffc <udi_msc_cbw_received+0x12c>
             break;
         i++;
80004fee:	2f f8       	sub	r8,-1
80004ff0:	5c 58       	castu.b	r8
80004ff2:	2f f9       	sub	r9,-1
     memcpy(udi_msc_inquiry_data.product_id,
             mem_name(udi_msc_cbw.bCBWLUN),
             sizeof(udi_msc_inquiry_data.product_id));
     // Search end of name '/0'
     i = 0;
     while (sizeof(udi_msc_inquiry_data.product_id) != i) {
80004ff4:	f8 08 18 00 	cp.b	r8,r12
80004ff8:	cf 71       	brne	80004fe6 <udi_msc_cbw_received+0x116>
80004ffa:	c0 d8       	rjmp	80005014 <udi_msc_cbw_received+0x144>
             break;
         i++;
     }
     // Padding with space char
     while (sizeof(udi_msc_inquiry_data.product_id) != i) {
         udi_msc_inquiry_data.product_id[i] = ' ';
80004ffc:	4c fc       	lddpc	r12,80005138 <udi_msc_cbw_received+0x268>
80004ffe:	32 0b       	mov	r11,32
         if (0 == udi_msc_inquiry_data.product_id[i])
             break;
         i++;
     }
     // Padding with space char
     while (sizeof(udi_msc_inquiry_data.product_id) != i) {
80005000:	31 0a       	mov	r10,16
         udi_msc_inquiry_data.product_id[i] = ' ';
80005002:	f8 08 00 09 	add	r9,r12,r8
80005006:	f3 6b 00 10 	st.b	r9[16],r11
         i++;
8000500a:	2f f8       	sub	r8,-1
8000500c:	5c 58       	castu.b	r8
         if (0 == udi_msc_inquiry_data.product_id[i])
             break;
         i++;
     }
     // Padding with space char
     while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000500e:	f4 08 18 00 	cp.b	r8,r10
80005012:	cf 81       	brne	80005002 <udi_msc_cbw_received+0x132>
         udi_msc_inquiry_data.product_id[i] = ' ';
         i++;
     }
 
     // Send inquiry data
     udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
80005014:	0e 9b       	mov	r11,r7
80005016:	4c 9c       	lddpc	r12,80005138 <udi_msc_cbw_received+0x268>
80005018:	f0 1f 00 46 	mcall	80005130 <udi_msc_cbw_received+0x260>
8000501c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     case SPC_INQUIRY:
         udi_msc_spc_inquiry();
         break;
 
     case SPC_MODE_SENSE6:
         udi_msc_spc_mode_sense(false);
80005020:	30 0c       	mov	r12,0
80005022:	f0 1f 00 48 	mcall	80005140 <udi_msc_cbw_received+0x270>
         break;
80005026:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     case SPC_MODE_SENSE10:
         udi_msc_spc_mode_sense(true);
8000502a:	30 1c       	mov	r12,1
8000502c:	f0 1f 00 45 	mcall	80005140 <udi_msc_cbw_received+0x270>
         break;
80005030:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
 }
 
 
 static bool udi_msc_spc_testunitready_global(void)
 {
     switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
80005034:	4b 48       	lddpc	r8,80005104 <udi_msc_cbw_received+0x234>
80005036:	f1 3c 00 0d 	ld.ub	r12,r8[13]
8000503a:	f0 1f 00 43 	mcall	80005144 <udi_msc_cbw_received+0x274>
8000503e:	58 2c       	cp.w	r12,2
80005040:	c0 90       	breq	80005052 <udi_msc_cbw_received+0x182>
80005042:	58 3c       	cp.w	r12,3
80005044:	c0 40       	breq	8000504c <udi_msc_cbw_received+0x17c>
80005046:	58 0c       	cp.w	r12,0
80005048:	c0 b0       	breq	8000505e <udi_msc_cbw_received+0x18e>
8000504a:	c0 78       	rjmp	80005058 <udi_msc_cbw_received+0x188>
     case CTRL_GOOD:
         return true;    // Don't change sense data
     case CTRL_BUSY:
         udi_msc_sense_fail_busy_or_change();
8000504c:	f0 1f 00 3f 	mcall	80005148 <udi_msc_cbw_received+0x278>
80005050:	c0 98       	rjmp	80005062 <udi_msc_cbw_received+0x192>
         break;
     case CTRL_NO_PRESENT:
         udi_msc_sense_fail_not_present();
80005052:	f0 1f 00 3f 	mcall	8000514c <udi_msc_cbw_received+0x27c>
80005056:	c0 68       	rjmp	80005062 <udi_msc_cbw_received+0x192>
         break;
     case CTRL_FAIL:
     default:
         udi_msc_sense_fail_hardware();
80005058:	f0 1f 00 3e 	mcall	80005150 <udi_msc_cbw_received+0x280>
8000505c:	c0 38       	rjmp	80005062 <udi_msc_cbw_received+0x192>
 
 static void udi_msc_spc_testunitready(void)
 {
     if (udi_msc_spc_testunitready_global()) {
         // LUN ready, then update sense data with status pass
         udi_msc_sense_pass();
8000505e:	f0 1f 00 3e 	mcall	80005154 <udi_msc_cbw_received+0x284>
     }
     // Send status in CSW packet
     udi_msc_csw_process();
80005062:	f0 1f 00 2f 	mcall	8000511c <udi_msc_cbw_received+0x24c>
         udi_msc_spc_mode_sense(true);
         break;
 
     case SPC_TEST_UNIT_READY:
         udi_msc_spc_testunitready();
         break;
80005066:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
 
 static void udi_msc_sbc_read_capacity(void)
 {
     UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;
 
     if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
8000506a:	e0 6b 00 80 	mov	r11,128
8000506e:	30 8c       	mov	r12,8
80005070:	f0 1f 00 2e 	mcall	80005128 <udi_msc_cbw_received+0x258>
80005074:	c4 50       	breq	800050fe <udi_msc_cbw_received+0x22e>
                     USB_CBW_DIRECTION_IN))
         return;
 
     // Get capacity of LUN
     switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
80005076:	4b 9b       	lddpc	r11,80005158 <udi_msc_cbw_received+0x288>
80005078:	4a 38       	lddpc	r8,80005104 <udi_msc_cbw_received+0x234>
8000507a:	f1 3c 00 0d 	ld.ub	r12,r8[13]
8000507e:	f0 1f 00 38 	mcall	8000515c <udi_msc_cbw_received+0x28c>
                     &udi_msc_capacity.max_lba)) {
80005082:	58 2c       	cp.w	r12,2
80005084:	c0 c0       	breq	8000509c <udi_msc_cbw_received+0x1cc>
80005086:	58 3c       	cp.w	r12,3
80005088:	c0 40       	breq	80005090 <udi_msc_cbw_received+0x1c0>
8000508a:	58 0c       	cp.w	r12,0
8000508c:	c1 40       	breq	800050b4 <udi_msc_cbw_received+0x1e4>
8000508e:	c0 d8       	rjmp	800050a8 <udi_msc_cbw_received+0x1d8>
     case CTRL_GOOD:
         break;
     case CTRL_BUSY:
         udi_msc_sense_fail_busy_or_change();
80005090:	f0 1f 00 2e 	mcall	80005148 <udi_msc_cbw_received+0x278>
         udi_msc_csw_process();
80005094:	f0 1f 00 22 	mcall	8000511c <udi_msc_cbw_received+0x24c>
80005098:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
         return;
     case CTRL_NO_PRESENT:
         udi_msc_sense_fail_not_present();
8000509c:	f0 1f 00 2c 	mcall	8000514c <udi_msc_cbw_received+0x27c>
         udi_msc_csw_process();
800050a0:	f0 1f 00 1f 	mcall	8000511c <udi_msc_cbw_received+0x24c>
800050a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
         return;
     default:
         udi_msc_sense_fail_hardware();
800050a8:	f0 1f 00 2a 	mcall	80005150 <udi_msc_cbw_received+0x280>
         udi_msc_csw_process();
800050ac:	f0 1f 00 1c 	mcall	8000511c <udi_msc_cbw_received+0x24c>
800050b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
         return;
     }
 
     // Format capacity data
     udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
800050b4:	4a 9c       	lddpc	r12,80005158 <udi_msc_cbw_received+0x288>
800050b6:	e0 68 02 00 	mov	r8,512
800050ba:	99 18       	st.w	r12[0x4],r8
     udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
     // Send the corresponding sense data
     udi_msc_data_send((uint8_t *) & udi_msc_capacity,
800050bc:	30 8b       	mov	r11,8
800050be:	f0 1f 00 1d 	mcall	80005130 <udi_msc_cbw_received+0x260>
800050c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     case SBC_START_STOP_UNIT:
         // Accepts request to support plug/plug in case of card reader
     case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
         // Accepts request to support full format from Windows
     case SBC_VERIFY10:
         udi_msc_sense_pass();
800050c6:	f0 1f 00 24 	mcall	80005154 <udi_msc_cbw_received+0x284>
         udi_msc_csw_process();
800050ca:	f0 1f 00 15 	mcall	8000511c <udi_msc_cbw_received+0x24c>
         break;
800050ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
 
     case SBC_READ10:
         udi_msc_sbc_trans(true);
800050d2:	30 1c       	mov	r12,1
800050d4:	f0 1f 00 23 	mcall	80005160 <udi_msc_cbw_received+0x290>
         break;
800050d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
 
     case SBC_WRITE10:
         udi_msc_sbc_trans(false);
800050dc:	30 0c       	mov	r12,0
800050de:	f0 1f 00 21 	mcall	80005160 <udi_msc_cbw_received+0x290>
         break;
800050e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
             SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
 }
 
 static void udi_msc_sense_command_invalid(void)
 {
     udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
800050e6:	30 0a       	mov	r10,0
800050e8:	e0 6b 20 00 	mov	r11,8192
800050ec:	30 5c       	mov	r12,5
800050ee:	f0 1f 00 1e 	mcall	80005164 <udi_msc_cbw_received+0x294>
         udi_msc_sbc_trans(false);
         break;
 
     default:
         udi_msc_sense_command_invalid();
         udi_msc_csw_process();
800050f2:	f0 1f 00 0b 	mcall	8000511c <udi_msc_cbw_received+0x24c>
800050f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800050fa:	30 08       	mov	r8,0
800050fc:	c8 0b       	rjmp	80004ffc <udi_msc_cbw_received+0x12c>
800050fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005102:	00 00       	add	r0,r0
80005104:	00 00       	add	r0,r0
80005106:	03 24       	ld.uh	r4,r1++
80005108:	00 00       	add	r0,r0
8000510a:	03 44       	ld.w	r4,--r1
8000510c:	80 00       	ld.sh	r0,r0[0x0]
8000510e:	4d 14       	lddpc	r4,80005250 <udi_msc_enable+0x24>
80005110:	80 00       	ld.sh	r0,r0[0x0]
80005112:	4d 40       	lddpc	r0,80005260 <udi_msc_enable+0x34>
80005114:	00 00       	add	r0,r0
80005116:	03 14       	ld.sh	r4,r1++
80005118:	80 00       	ld.sh	r0,r0[0x0]
8000511a:	4b 10       	lddpc	r0,800051dc <udi_msc_setup+0x74>
8000511c:	80 00       	ld.sh	r0,r0[0x0]
8000511e:	4b 94       	lddpc	r4,80005200 <udi_msc_setup+0x98>
80005120:	00 00       	add	r0,r0
80005122:	00 90       	mov	r0,r0
80005124:	80 00       	ld.sh	r0,r0[0x0]
80005126:	7a 58       	ld.w	r8,sp[0x14]
80005128:	80 00       	ld.sh	r0,r0[0x0]
8000512a:	4c ac       	lddpc	r12,80005250 <udi_msc_enable+0x24>
8000512c:	00 00       	add	r0,r0
8000512e:	03 4c       	ld.w	r12,--r1
80005130:	80 00       	ld.sh	r0,r0[0x0]
80005132:	4c e4       	lddpc	r4,80005268 <udi_msc_enable+0x3c>
80005134:	80 00       	ld.sh	r0,r0[0x0]
80005136:	6a cc       	ld.w	r12,r5[0x30]
80005138:	00 00       	add	r0,r0
8000513a:	00 6c       	and	r12,r0
8000513c:	80 00       	ld.sh	r0,r0[0x0]
8000513e:	76 b0       	ld.w	r0,r11[0x2c]
80005140:	80 00       	ld.sh	r0,r0[0x0]
80005142:	4d 70       	lddpc	r0,8000529c <ui_start_write+0x4>
80005144:	80 00       	ld.sh	r0,r0[0x0]
80005146:	6a 84       	ld.w	r4,r5[0x20]
80005148:	80 00       	ld.sh	r0,r0[0x0]
8000514a:	4a d4       	lddpc	r4,800051fc <udi_msc_setup+0x94>
8000514c:	80 00       	ld.sh	r0,r0[0x0]
8000514e:	4a e8       	lddpc	r8,80005204 <udi_msc_setup+0x9c>
80005150:	80 00       	ld.sh	r0,r0[0x0]
80005152:	4a fc       	lddpc	r12,8000520c <udi_msc_setup+0xa4>
80005154:	80 00       	ld.sh	r0,r0[0x0]
80005156:	4a 70       	lddpc	r0,800051f0 <udi_msc_setup+0x88>
80005158:	00 00       	add	r0,r0
8000515a:	03 1c       	ld.sh	r12,r1++
8000515c:	80 00       	ld.sh	r0,r0[0x0]
8000515e:	6a 98       	ld.w	r8,r5[0x24]
80005160:	80 00       	ld.sh	r0,r0[0x0]
80005162:	4e 34       	lddpc	r4,800052ec <sd_mmc_spi_read_multiple_sector_callback+0x14>
80005164:	80 00       	ld.sh	r0,r0[0x0]
80005166:	4a 88       	lddpc	r8,80005204 <udi_msc_setup+0x9c>

80005168 <udi_msc_setup>:
     UDI_MSC_DISABLE_EXT();
 }
 
 
 bool udi_msc_setup(void)
 {
80005168:	d4 01       	pushm	lr
     if (Udd_setup_is_in()) {
8000516a:	4a 58       	lddpc	r8,800051fc <udi_msc_setup+0x94>
8000516c:	11 88       	ld.ub	r8,r8[0x0]
8000516e:	30 09       	mov	r9,0
80005170:	f2 08 18 00 	cp.b	r8,r9
80005174:	c1 e4       	brge	800051b0 <udi_msc_setup+0x48>
         // Requests Interface GET
         if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80005176:	e2 18 00 60 	andl	r8,0x60,COH
8000517a:	e0 48 00 20 	cp.w	r8,32
8000517e:	c3 e1       	brne	800051fa <udi_msc_setup+0x92>
             // Requests Class Interface Get
             switch (udd_g_ctrlreq.req.bRequest) {
80005180:	49 f8       	lddpc	r8,800051fc <udi_msc_setup+0x94>
80005182:	11 99       	ld.ub	r9,r8[0x1]
80005184:	3f e8       	mov	r8,-2
80005186:	f0 09 18 00 	cp.b	r9,r8
8000518a:	c3 81       	brne	800051fa <udi_msc_setup+0x92>
             case USB_REQ_MSC_GET_MAX_LUN:
                 // Give the number of memories available
                 if (1 != udd_g_ctrlreq.req.wLength)
8000518c:	49 c8       	lddpc	r8,800051fc <udi_msc_setup+0x94>
8000518e:	90 39       	ld.sh	r9,r8[0x6]
80005190:	30 18       	mov	r8,1
80005192:	f0 09 19 00 	cp.h	r9,r8
80005196:	c3 21       	brne	800051fa <udi_msc_setup+0x92>
                     return false;   // Error for USB host
                 if (0 != udd_g_ctrlreq.req.wValue)
80005198:	49 98       	lddpc	r8,800051fc <udi_msc_setup+0x94>
8000519a:	90 19       	ld.sh	r9,r8[0x2]
8000519c:	30 08       	mov	r8,0
8000519e:	f0 09 19 00 	cp.h	r9,r8
800051a2:	c2 c1       	brne	800051fa <udi_msc_setup+0x92>
                     return false;
                 udd_g_ctrlreq.payload = &udi_msc_nb_lun;
800051a4:	49 68       	lddpc	r8,800051fc <udi_msc_setup+0x94>
800051a6:	49 79       	lddpc	r9,80005200 <udi_msc_setup+0x98>
800051a8:	91 29       	st.w	r8[0x8],r9
                 udd_g_ctrlreq.payload_size = 1;
800051aa:	30 19       	mov	r9,1
800051ac:	b0 69       	st.h	r8[0xc],r9
800051ae:	da 0a       	popm	pc,r12=1
             }
         }
     }
     if (Udd_setup_is_out()) {
         // Requests Interface SET
         if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800051b0:	e2 18 00 60 	andl	r8,0x60,COH
800051b4:	e0 48 00 20 	cp.w	r8,32
800051b8:	c2 11       	brne	800051fa <udi_msc_setup+0x92>
             // Requests Class Interface Set
             switch (udd_g_ctrlreq.req.bRequest) {
800051ba:	49 18       	lddpc	r8,800051fc <udi_msc_setup+0x94>
800051bc:	11 99       	ld.ub	r9,r8[0x1]
800051be:	3f f8       	mov	r8,-1
800051c0:	f0 09 18 00 	cp.b	r9,r8
800051c4:	c1 b1       	brne	800051fa <udi_msc_setup+0x92>
             case USB_REQ_MSC_BULK_RESET:
                 // Reset MSC interface
                 if (0 != udd_g_ctrlreq.req.wLength)
800051c6:	48 e8       	lddpc	r8,800051fc <udi_msc_setup+0x94>
800051c8:	90 39       	ld.sh	r9,r8[0x6]
800051ca:	30 08       	mov	r8,0
800051cc:	f0 09 19 00 	cp.h	r9,r8
800051d0:	c1 51       	brne	800051fa <udi_msc_setup+0x92>
                     return false;
                 if (0 != udd_g_ctrlreq.req.wValue)
800051d2:	48 b8       	lddpc	r8,800051fc <udi_msc_setup+0x94>
800051d4:	90 19       	ld.sh	r9,r8[0x2]
800051d6:	30 08       	mov	r8,0
800051d8:	f0 09 19 00 	cp.h	r9,r8
800051dc:	c0 f1       	brne	800051fa <udi_msc_setup+0x92>
                     return false;
                 udi_msc_b_cbw_invalid = false;
800051de:	48 a9       	lddpc	r9,80005204 <udi_msc_setup+0x9c>
800051e0:	b2 88       	st.b	r9[0x0],r8
                 udi_msc_b_trans_req = false;
800051e2:	48 a9       	lddpc	r9,80005208 <udi_msc_setup+0xa0>
800051e4:	b2 88       	st.b	r9[0x0],r8
                 // Abort all tasks (transfer or clear stall wait) on endpoints
                 udd_ep_abort(UDI_MSC_EP_OUT);
800051e6:	30 2c       	mov	r12,2
800051e8:	f0 1f 00 09 	mcall	8000520c <udi_msc_setup+0xa4>
                 udd_ep_abort(UDI_MSC_EP_IN);
800051ec:	e0 6c 00 81 	mov	r12,129
800051f0:	f0 1f 00 07 	mcall	8000520c <udi_msc_setup+0xa4>
                 // Restart by CBW wait
                 udi_msc_cbw_wait();
800051f4:	f0 1f 00 07 	mcall	80005210 <udi_msc_setup+0xa8>
800051f8:	da 0a       	popm	pc,r12=1
                 return true;
800051fa:	d8 0a       	popm	pc,r12=0
800051fc:	00 00       	add	r0,r0
800051fe:	09 90       	ld.ub	r0,r4[0x1]
80005200:	00 00       	add	r0,r0
80005202:	03 14       	ld.sh	r4,r1++
80005204:	00 00       	add	r0,r0
80005206:	03 44       	ld.w	r4,--r1
80005208:	00 00       	add	r0,r0
8000520a:	03 18       	ld.sh	r8,r1++
8000520c:	80 00       	ld.sh	r0,r0[0x0]
8000520e:	5b dc       	cp.w	r12,-3
80005210:	80 00       	ld.sh	r0,r0[0x0]
80005212:	4b 24       	lddpc	r4,800052d8 <sd_mmc_spi_read_multiple_sector_callback>

80005214 <udi_msc_disable>:
     return true;
 }
 
 
 void udi_msc_disable(void)
 {
80005214:	d4 01       	pushm	lr
     udi_msc_b_trans_req = false;
80005216:	30 09       	mov	r9,0
80005218:	48 38       	lddpc	r8,80005224 <udi_msc_disable+0x10>
8000521a:	b0 89       	st.b	r8[0x0],r9
     UDI_MSC_DISABLE_EXT();
8000521c:	f0 1f 00 03 	mcall	80005228 <udi_msc_disable+0x14>
 }
80005220:	d8 02       	popm	pc
80005222:	00 00       	add	r0,r0
80005224:	00 00       	add	r0,r0
80005226:	03 18       	ld.sh	r8,r1++
80005228:	80 00       	ld.sh	r0,r0[0x0]
8000522a:	73 08       	ld.w	r8,r9[0x40]

8000522c <udi_msc_enable>:
 static void udi_msc_sbc_trans(bool b_read);
 
 
 
 bool udi_msc_enable(void)
 {
8000522c:	d4 01       	pushm	lr
     udi_msc_b_trans_req = false;
8000522e:	30 08       	mov	r8,0
80005230:	48 a9       	lddpc	r9,80005258 <udi_msc_enable+0x2c>
80005232:	b2 88       	st.b	r9[0x0],r8
     udi_msc_b_cbw_invalid = false;
80005234:	48 a9       	lddpc	r9,8000525c <udi_msc_enable+0x30>
80005236:	b2 88       	st.b	r9[0x0],r8
     udi_msc_nb_lun = get_nb_lun();
80005238:	f0 1f 00 0a 	mcall	80005260 <udi_msc_enable+0x34>
8000523c:	48 a8       	lddpc	r8,80005264 <udi_msc_enable+0x38>
8000523e:	b0 8c       	st.b	r8[0x0],r12
     if (0 == udi_msc_nb_lun)
80005240:	58 0c       	cp.w	r12,0
80005242:	c0 90       	breq	80005254 <udi_msc_enable+0x28>
         return false;   // No lun available, then not authorize to enable interface
     udi_msc_nb_lun--;
80005244:	20 1c       	sub	r12,1
80005246:	b0 8c       	st.b	r8[0x0],r12
     // Call application callback
     // to initialize memories or signal that interface is enabled
     if (!UDI_MSC_ENABLE_EXT())
80005248:	f0 1f 00 08 	mcall	80005268 <udi_msc_enable+0x3c>
8000524c:	c0 40       	breq	80005254 <udi_msc_enable+0x28>
         return false;
     // Start MSC process by CBW reception
     udi_msc_cbw_wait();
8000524e:	f0 1f 00 08 	mcall	8000526c <udi_msc_enable+0x40>
80005252:	da 0a       	popm	pc,r12=1
     return true;
80005254:	d8 0a       	popm	pc,r12=0
80005256:	00 00       	add	r0,r0
80005258:	00 00       	add	r0,r0
8000525a:	03 18       	ld.sh	r8,r1++
8000525c:	00 00       	add	r0,r0
8000525e:	03 44       	ld.w	r4,--r1
80005260:	80 00       	ld.sh	r0,r0[0x0]
80005262:	6a 80       	ld.w	r0,r5[0x20]
80005264:	00 00       	add	r0,r0
80005266:	03 14       	ld.sh	r4,r1++
80005268:	80 00       	ld.sh	r0,r0[0x0]
8000526a:	72 fc       	ld.w	r12,r9[0x3c]
8000526c:	80 00       	ld.sh	r0,r0[0x0]
8000526e:	4b 24       	lddpc	r4,80005334 <sd_mmc_spi_test_unit_ready+0x44>

80005270 <ui_process>:
         //LED_On(LED1);
     }
     if ((framenumber % 1000) == 500) {
         //LED_Off(LED1);
     }
 }
80005270:	5e fc       	retal	r12
80005272:	d7 03       	nop

80005274 <ui_stop_write>:
     LED_On(LED0);
	 LED_On(LED1);
 }
 
 void ui_stop_write(void)
 {
80005274:	d4 01       	pushm	lr
     LED_Off(LED0);
80005276:	30 1c       	mov	r12,1
80005278:	f0 1f 00 03 	mcall	80005284 <ui_stop_write+0x10>
	 LED_Off(LED1);
8000527c:	30 2c       	mov	r12,2
8000527e:	f0 1f 00 02 	mcall	80005284 <ui_stop_write+0x10>
 }
80005282:	d8 02       	popm	pc
80005284:	80 00       	ld.sh	r0,r0[0x0]
80005286:	49 50       	lddpc	r0,800052d8 <sd_mmc_spi_read_multiple_sector_callback>

80005288 <ui_stop_read>:
 {
     LED_On(LED1);
 }
 
 void ui_stop_read(void)
 {
80005288:	d4 01       	pushm	lr
     LED_Off(LED1);
8000528a:	30 2c       	mov	r12,2
8000528c:	f0 1f 00 02 	mcall	80005294 <ui_stop_read+0xc>
 }
80005290:	d8 02       	popm	pc
80005292:	00 00       	add	r0,r0
80005294:	80 00       	ld.sh	r0,r0[0x0]
80005296:	49 50       	lddpc	r0,800052e8 <sd_mmc_spi_read_multiple_sector_callback+0x10>

80005298 <ui_start_write>:
 
 void ui_start_write(void)
 {
80005298:	d4 01       	pushm	lr
     LED_On(LED0);
8000529a:	30 1c       	mov	r12,1
8000529c:	f0 1f 00 03 	mcall	800052a8 <ui_start_write+0x10>
	 LED_On(LED1);
800052a0:	30 2c       	mov	r12,2
800052a2:	f0 1f 00 02 	mcall	800052a8 <ui_start_write+0x10>
 }
800052a6:	d8 02       	popm	pc
800052a8:	80 00       	ld.sh	r0,r0[0x0]
800052aa:	49 00       	lddpc	r0,800052e8 <sd_mmc_spi_read_multiple_sector_callback+0x10>

800052ac <ui_start_read>:
 {
     LED_On(LED0);
 }
 
 void ui_start_read(void)
 {
800052ac:	d4 01       	pushm	lr
     LED_On(LED1);
800052ae:	30 2c       	mov	r12,2
800052b0:	f0 1f 00 02 	mcall	800052b8 <ui_start_read+0xc>
 }
800052b4:	d8 02       	popm	pc
800052b6:	00 00       	add	r0,r0
800052b8:	80 00       	ld.sh	r0,r0[0x0]
800052ba:	49 00       	lddpc	r0,800052f8 <sd_mmc_spi_test_unit_ready+0x8>

800052bc <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
800052bc:	5e fd       	retal	0

800052be <sd_mmc_spi_removal>:
//!/
bool  sd_mmc_spi_removal(void)
{
  return false;
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
800052be:	5e fd       	retal	0

800052c0 <sd_mmc_spi_write_multiple_sector_callback>:
     return CTRL_NO_PRESENT;
}


void sd_mmc_spi_write_multiple_sector_callback(void *psector)
{
800052c0:	d4 01       	pushm	lr
#ifdef USB_DEVICE_VENDOR_ID
   // USB Device Stack V2
   udi_msc_trans_block( false, (uint8_t*)psector, MMC_SECTOR_SIZE, NULL);
800052c2:	30 09       	mov	r9,0
800052c4:	e0 6a 02 00 	mov	r10,512
800052c8:	18 9b       	mov	r11,r12
800052ca:	12 9c       	mov	r12,r9
800052cc:	f0 1f 00 02 	mcall	800052d4 <sd_mmc_spi_write_multiple_sector_callback+0x14>
    data_to_transfer = usb_read_ep_rxpacket(g_scsi_ep_ms_out, psector,
                                            data_to_transfer, &psector);
    Usb_ack_out_received_free(g_scsi_ep_ms_out);
  }
#endif
}
800052d0:	d8 02       	popm	pc
800052d2:	00 00       	add	r0,r0
800052d4:	80 00       	ld.sh	r0,r0[0x0]
800052d6:	49 c0       	lddpc	r0,80005344 <sd_mmc_spi_test_unit_ready+0x54>

800052d8 <sd_mmc_spi_read_multiple_sector_callback>:
   return CTRL_FAIL;
}


void sd_mmc_spi_read_multiple_sector_callback(const void *psector)
{
800052d8:	d4 01       	pushm	lr
#ifdef USB_DEVICE_VENDOR_ID
   // USB Device Stack V2
   udi_msc_trans_block( true, (uint8_t*)psector, MMC_SECTOR_SIZE, NULL);
800052da:	30 09       	mov	r9,0
800052dc:	e0 6a 02 00 	mov	r10,512
800052e0:	18 9b       	mov	r11,r12
800052e2:	30 1c       	mov	r12,1
800052e4:	f0 1f 00 02 	mcall	800052ec <sd_mmc_spi_read_multiple_sector_callback+0x14>
    data_to_transfer = usb_write_ep_txpacket(g_scsi_ep_ms_in, psector,
                                             data_to_transfer, &psector);
    Usb_ack_in_ready_send(g_scsi_ep_ms_in);
  }
#endif
}
800052e8:	d8 02       	popm	pc
800052ea:	00 00       	add	r0,r0
800052ec:	80 00       	ld.sh	r0,r0[0x0]
800052ee:	49 c0       	lddpc	r0,8000535c <sd_mmc_spi_mem_init>

800052f0 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
800052f0:	d4 01       	pushm	lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
800052f2:	49 88       	lddpc	r8,80005350 <sd_mmc_spi_test_unit_ready+0x60>
800052f4:	11 88       	ld.ub	r8,r8[0x0]
800052f6:	30 19       	mov	r9,1
800052f8:	f2 08 18 00 	cp.b	r8,r9
800052fc:	c1 40       	breq	80005324 <sd_mmc_spi_test_unit_ready+0x34>
800052fe:	c0 63       	brcs	8000530a <sd_mmc_spi_test_unit_ready+0x1a>
80005300:	30 29       	mov	r9,2
80005302:	f2 08 18 00 	cp.b	r8,r9
80005306:	c2 01       	brne	80005346 <sd_mmc_spi_test_unit_ready+0x56>
80005308:	c1 a8       	rjmp	8000533c <sd_mmc_spi_test_unit_ready+0x4c>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
8000530a:	30 09       	mov	r9,0
8000530c:	49 28       	lddpc	r8,80005354 <sd_mmc_spi_test_unit_ready+0x64>
8000530e:	b0 89       	st.b	r8[0x0],r9
      if (sd_mmc_spi_mem_check())
80005310:	f0 1f 00 12 	mcall	80005358 <sd_mmc_spi_test_unit_ready+0x68>
80005314:	c0 31       	brne	8000531a <sd_mmc_spi_test_unit_ready+0x2a>
80005316:	30 2c       	mov	r12,2
80005318:	d8 02       	popm	pc
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
8000531a:	30 19       	mov	r9,1
8000531c:	48 d8       	lddpc	r8,80005350 <sd_mmc_spi_test_unit_ready+0x60>
8000531e:	b0 89       	st.b	r8[0x0],r9
80005320:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80005322:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80005324:	f0 1f 00 0d 	mcall	80005358 <sd_mmc_spi_test_unit_ready+0x68>
80005328:	c0 20       	breq	8000532c <sd_mmc_spi_test_unit_ready+0x3c>
8000532a:	d8 0a       	popm	pc,r12=0
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
8000532c:	30 29       	mov	r9,2
8000532e:	48 98       	lddpc	r8,80005350 <sd_mmc_spi_test_unit_ready+0x60>
80005330:	b0 89       	st.b	r8[0x0],r9
        sd_mmc_spi_init_done = false;
80005332:	30 09       	mov	r9,0
80005334:	48 88       	lddpc	r8,80005354 <sd_mmc_spi_test_unit_ready+0x64>
80005336:	b0 89       	st.b	r8[0x0],r9
80005338:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
8000533a:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
8000533c:	30 09       	mov	r9,0
8000533e:	48 58       	lddpc	r8,80005350 <sd_mmc_spi_test_unit_ready+0x60>
80005340:	b0 89       	st.b	r8[0x0],r9
80005342:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80005344:	d8 02       	popm	pc

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80005346:	30 09       	mov	r9,0
80005348:	48 28       	lddpc	r8,80005350 <sd_mmc_spi_test_unit_ready+0x60>
8000534a:	b0 89       	st.b	r8[0x0],r9
8000534c:	30 3c       	mov	r12,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
8000534e:	d8 02       	popm	pc
80005350:	00 00       	add	r0,r0
80005352:	00 a0       	st.w	r0++,r0
80005354:	00 00       	add	r0,r0
80005356:	03 10       	ld.sh	r0,r1++
80005358:	80 00       	ld.sh	r0,r0[0x0]
8000535a:	2b d8       	sub	r8,-67

8000535c <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
8000535c:	d4 01       	pushm	lr
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
8000535e:	f0 1f 00 02 	mcall	80005364 <sd_mmc_spi_mem_init+0x8>
}
80005362:	d8 02       	popm	pc
80005364:	80 00       	ld.sh	r0,r0[0x0]
80005366:	29 30       	sub	r0,-109

80005368 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80005368:	eb cd 40 c0 	pushm	r6-r7,lr
8000536c:	18 96       	mov	r6,r12
8000536e:	16 97       	mov	r7,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80005370:	f0 1f 00 12 	mcall	800053b8 <sd_mmc_spi_ram_2_mem+0x50>

   if (!sd_mmc_spi_init_done)
80005374:	49 28       	lddpc	r8,800053bc <sd_mmc_spi_ram_2_mem+0x54>
80005376:	11 89       	ld.ub	r9,r8[0x0]
80005378:	30 08       	mov	r8,0
8000537a:	f0 09 18 00 	cp.b	r9,r8
8000537e:	c0 c1       	brne	80005396 <sd_mmc_spi_ram_2_mem+0x2e>
   {
      sd_mmc_spi_mem_init();
80005380:	f0 1f 00 10 	mcall	800053c0 <sd_mmc_spi_ram_2_mem+0x58>
   }

   if (sd_mmc_spi_init_done)
80005384:	48 e8       	lddpc	r8,800053bc <sd_mmc_spi_ram_2_mem+0x54>
80005386:	11 89       	ld.ub	r9,r8[0x0]
80005388:	30 08       	mov	r8,0
8000538a:	f0 09 18 00 	cp.b	r9,r8
8000538e:	c0 41       	brne	80005396 <sd_mmc_spi_ram_2_mem+0x2e>
80005390:	30 2c       	mov	r12,2
80005392:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   {
     sd_mmc_spi_write_open(addr);
80005396:	0c 9c       	mov	r12,r6
80005398:	f0 1f 00 0b 	mcall	800053c4 <sd_mmc_spi_ram_2_mem+0x5c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
8000539c:	0e 9c       	mov	r12,r7
8000539e:	f0 1f 00 0b 	mcall	800053c8 <sd_mmc_spi_ram_2_mem+0x60>
800053a2:	c0 61       	brne	800053ae <sd_mmc_spi_ram_2_mem+0x46>
     {
       sd_mmc_spi_write_close();
800053a4:	f0 1f 00 0a 	mcall	800053cc <sd_mmc_spi_ram_2_mem+0x64>
800053a8:	30 2c       	mov	r12,2
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
800053aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     sd_mmc_spi_write_close();
800053ae:	f0 1f 00 08 	mcall	800053cc <sd_mmc_spi_ram_2_mem+0x64>
800053b2:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
800053b6:	00 00       	add	r0,r0
800053b8:	80 00       	ld.sh	r0,r0[0x0]
800053ba:	23 80       	sub	r0,56
800053bc:	00 00       	add	r0,r0
800053be:	03 10       	ld.sh	r0,r1++
800053c0:	80 00       	ld.sh	r0,r0[0x0]
800053c2:	53 5c       	stdsp	sp[0xd4],r12
800053c4:	80 00       	ld.sh	r0,r0[0x0]
800053c6:	22 3c       	sub	r12,35
800053c8:	80 00       	ld.sh	r0,r0[0x0]
800053ca:	23 fc       	sub	r12,63
800053cc:	80 00       	ld.sh	r0,r0[0x0]
800053ce:	21 ac       	sub	r12,26

800053d0 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
800053d0:	eb cd 40 c0 	pushm	r6-r7,lr
800053d4:	18 97       	mov	r7,r12
800053d6:	16 96       	mov	r6,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
800053d8:	f0 1f 00 12 	mcall	80005420 <sd_mmc_spi_mem_2_ram+0x50>

   if (!sd_mmc_spi_init_done)
800053dc:	49 28       	lddpc	r8,80005424 <sd_mmc_spi_mem_2_ram+0x54>
800053de:	11 89       	ld.ub	r9,r8[0x0]
800053e0:	30 08       	mov	r8,0
800053e2:	f0 09 18 00 	cp.b	r9,r8
800053e6:	c0 c1       	brne	800053fe <sd_mmc_spi_mem_2_ram+0x2e>
   {
      sd_mmc_spi_mem_init();
800053e8:	f0 1f 00 10 	mcall	80005428 <sd_mmc_spi_mem_2_ram+0x58>
   }

   if (!sd_mmc_spi_init_done)
800053ec:	48 e8       	lddpc	r8,80005424 <sd_mmc_spi_mem_2_ram+0x54>
800053ee:	11 89       	ld.ub	r9,r8[0x0]
800053f0:	30 08       	mov	r8,0
800053f2:	f0 09 18 00 	cp.b	r9,r8
800053f6:	c0 41       	brne	800053fe <sd_mmc_spi_mem_2_ram+0x2e>
800053f8:	30 2c       	mov	r12,2
800053fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
800053fe:	0e 9c       	mov	r12,r7
80005400:	f0 1f 00 0b 	mcall	8000542c <sd_mmc_spi_mem_2_ram+0x5c>
80005404:	c0 c0       	breq	8000541c <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80005406:	0c 9c       	mov	r12,r6
80005408:	f0 1f 00 0a 	mcall	80005430 <sd_mmc_spi_mem_2_ram+0x60>
8000540c:	c0 80       	breq	8000541c <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
8000540e:	f0 1f 00 0a 	mcall	80005434 <sd_mmc_spi_mem_2_ram+0x64>
80005412:	ec 1c 00 01 	eorl	r12,0x1
80005416:	5c 5c       	castu.b	r12
80005418:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000541c:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80005420:	80 00       	ld.sh	r0,r0[0x0]
80005422:	23 80       	sub	r0,56
80005424:	00 00       	add	r0,r0
80005426:	03 10       	ld.sh	r0,r1++
80005428:	80 00       	ld.sh	r0,r0[0x0]
8000542a:	53 5c       	stdsp	sp[0xd4],r12
8000542c:	80 00       	ld.sh	r0,r0[0x0]
8000542e:	22 60       	sub	r0,38
80005430:	80 00       	ld.sh	r0,r0[0x0]
80005432:	26 8c       	sub	r12,104
80005434:	80 00       	ld.sh	r0,r0[0x0]
80005436:	22 54       	sub	r4,37

80005438 <sd_mmc_spi_usb_write_10>:
}



Ctrl_status sd_mmc_spi_usb_write_10(uint32_t addr, uint16_t nb_sector)
{
80005438:	eb cd 40 c0 	pushm	r6-r7,lr
8000543c:	18 96       	mov	r6,r12
8000543e:	16 97       	mov	r7,r11
  bool status;

   if (!sd_mmc_spi_init_done)
80005440:	49 08       	lddpc	r8,80005480 <sd_mmc_spi_usb_write_10+0x48>
80005442:	11 89       	ld.ub	r9,r8[0x0]
80005444:	30 08       	mov	r8,0
80005446:	f0 09 18 00 	cp.b	r9,r8
8000544a:	c0 91       	brne	8000545c <sd_mmc_spi_usb_write_10+0x24>
   {
      sd_mmc_spi_mem_init();
8000544c:	f0 1f 00 0e 	mcall	80005484 <sd_mmc_spi_usb_write_10+0x4c>
   }

   if (sd_mmc_spi_init_done)
80005450:	48 c8       	lddpc	r8,80005480 <sd_mmc_spi_usb_write_10+0x48>
80005452:	11 89       	ld.ub	r9,r8[0x0]
80005454:	30 08       	mov	r8,0
80005456:	f0 09 18 00 	cp.b	r9,r8
8000545a:	c0 f0       	breq	80005478 <sd_mmc_spi_usb_write_10+0x40>
   {
     Sd_mmc_spi_access_signal_on();
     sd_mmc_spi_write_open(addr);
8000545c:	0c 9c       	mov	r12,r6
8000545e:	f0 1f 00 0b 	mcall	80005488 <sd_mmc_spi_usb_write_10+0x50>
     status = sd_mmc_spi_write_multiple_sector(nb_sector);
80005462:	0e 9c       	mov	r12,r7
80005464:	5c 7c       	castu.h	r12
80005466:	f0 1f 00 0a 	mcall	8000548c <sd_mmc_spi_usb_write_10+0x54>
8000546a:	18 97       	mov	r7,r12
     sd_mmc_spi_write_close();
8000546c:	f0 1f 00 09 	mcall	80005490 <sd_mmc_spi_usb_write_10+0x58>
     Sd_mmc_spi_access_signal_off();
     if (status)
80005470:	58 07       	cp.w	r7,0
80005472:	c0 30       	breq	80005478 <sd_mmc_spi_usb_write_10+0x40>
80005474:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80005478:	30 2c       	mov	r12,2
     else
       return CTRL_NO_PRESENT;
   }
   else
     return CTRL_NO_PRESENT;
}
8000547a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000547e:	00 00       	add	r0,r0
80005480:	00 00       	add	r0,r0
80005482:	03 10       	ld.sh	r0,r1++
80005484:	80 00       	ld.sh	r0,r0[0x0]
80005486:	53 5c       	stdsp	sp[0xd4],r12
80005488:	80 00       	ld.sh	r0,r0[0x0]
8000548a:	22 3c       	sub	r12,35
8000548c:	80 00       	ld.sh	r0,r0[0x0]
8000548e:	28 d0       	sub	r0,-115
80005490:	80 00       	ld.sh	r0,r0[0x0]
80005492:	21 ac       	sub	r12,26

80005494 <sd_mmc_spi_usb_read_10>:
#include "usb_drv.h"
#include "scsi_decoder.h"
#endif

Ctrl_status sd_mmc_spi_usb_read_10(uint32_t addr, uint16_t nb_sector)
{
80005494:	eb cd 40 c0 	pushm	r6-r7,lr
80005498:	18 97       	mov	r7,r12
8000549a:	16 96       	mov	r6,r11
   if (!sd_mmc_spi_init_done)
8000549c:	49 28       	lddpc	r8,800054e4 <sd_mmc_spi_usb_read_10+0x50>
8000549e:	11 89       	ld.ub	r9,r8[0x0]
800054a0:	30 08       	mov	r8,0
800054a2:	f0 09 18 00 	cp.b	r9,r8
800054a6:	c0 c1       	brne	800054be <sd_mmc_spi_usb_read_10+0x2a>
   {
      sd_mmc_spi_mem_init();
800054a8:	f0 1f 00 10 	mcall	800054e8 <sd_mmc_spi_usb_read_10+0x54>
   }

   if (!sd_mmc_spi_init_done)
800054ac:	48 e8       	lddpc	r8,800054e4 <sd_mmc_spi_usb_read_10+0x50>
800054ae:	11 89       	ld.ub	r9,r8[0x0]
800054b0:	30 08       	mov	r8,0
800054b2:	f0 09 18 00 	cp.b	r9,r8
800054b6:	c0 41       	brne	800054be <sd_mmc_spi_usb_read_10+0x2a>
800054b8:	30 2c       	mov	r12,2
800054ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   Sd_mmc_spi_access_signal_on();

   if( !sd_mmc_spi_read_open(addr) )
800054be:	0e 9c       	mov	r12,r7
800054c0:	f0 1f 00 0b 	mcall	800054ec <sd_mmc_spi_usb_read_10+0x58>
800054c4:	c0 d0       	breq	800054de <sd_mmc_spi_usb_read_10+0x4a>
     goto sd_mmc_spi_usb_read_10_fail;

   if( !sd_mmc_spi_read_multiple_sector(nb_sector) )
800054c6:	f9 d6 c0 10 	bfextu	r12,r6,0x0,0x10
800054ca:	f0 1f 00 0a 	mcall	800054f0 <sd_mmc_spi_usb_read_10+0x5c>
800054ce:	c0 80       	breq	800054de <sd_mmc_spi_usb_read_10+0x4a>
     goto sd_mmc_spi_usb_read_10_fail;

   if( !sd_mmc_spi_read_close() )
800054d0:	f0 1f 00 09 	mcall	800054f4 <sd_mmc_spi_usb_read_10+0x60>
800054d4:	ec 1c 00 01 	eorl	r12,0x1
800054d8:	5c 5c       	castu.b	r12
800054da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800054de:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
800054e2:	00 00       	add	r0,r0
800054e4:	00 00       	add	r0,r0
800054e6:	03 10       	ld.sh	r0,r1++
800054e8:	80 00       	ld.sh	r0,r0[0x0]
800054ea:	53 5c       	stdsp	sp[0xd4],r12
800054ec:	80 00       	ld.sh	r0,r0[0x0]
800054ee:	22 60       	sub	r0,38
800054f0:	80 00       	ld.sh	r0,r0[0x0]
800054f2:	29 00       	sub	r0,-112
800054f4:	80 00       	ld.sh	r0,r0[0x0]
800054f6:	22 54       	sub	r4,37

800054f8 <sd_mmc_spi_read_capacity>:
}



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
800054f8:	eb cd 40 80 	pushm	r7,lr
800054fc:	18 97       	mov	r7,r12
//   sd_mmc_spi_check_presence();   // ommited because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
800054fe:	48 c8       	lddpc	r8,8000552c <sd_mmc_spi_read_capacity+0x34>
80005500:	11 89       	ld.ub	r9,r8[0x0]
80005502:	30 08       	mov	r8,0
80005504:	f0 09 18 00 	cp.b	r9,r8
80005508:	c0 c1       	brne	80005520 <sd_mmc_spi_read_capacity+0x28>
   {
      sd_mmc_spi_mem_init();
8000550a:	f0 1f 00 0a 	mcall	80005530 <sd_mmc_spi_read_capacity+0x38>
   }

   if (sd_mmc_spi_init_done)
8000550e:	48 88       	lddpc	r8,8000552c <sd_mmc_spi_read_capacity+0x34>
80005510:	11 89       	ld.ub	r9,r8[0x0]
80005512:	30 08       	mov	r8,0
80005514:	f0 09 18 00 	cp.b	r9,r8
80005518:	c0 41       	brne	80005520 <sd_mmc_spi_read_capacity+0x28>
8000551a:	30 2c       	mov	r12,2
8000551c:	e3 cd 80 80 	ldm	sp++,r7,pc
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80005520:	48 58       	lddpc	r8,80005534 <sd_mmc_spi_read_capacity+0x3c>
80005522:	70 08       	ld.w	r8,r8[0x0]
80005524:	2f f8       	sub	r8,-1
80005526:	8f 08       	st.w	r7[0x0],r8
80005528:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
8000552c:	00 00       	add	r0,r0
8000552e:	03 10       	ld.sh	r0,r1++
80005530:	80 00       	ld.sh	r0,r0[0x0]
80005532:	53 5c       	stdsp	sp[0xd4],r12
80005534:	00 00       	add	r0,r0
80005536:	06 84       	andn	r4,r3

80005538 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80005538:	fe 68 14 00 	mov	r8,-125952
8000553c:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000553e:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80005542:	91 09       	st.w	r8[0x0],r9
}
80005544:	5e fc       	retal	r12
80005546:	d7 03       	nop

80005548 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80005548:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
8000554a:	e0 68 8a 3f 	mov	r8,35391
8000554e:	ea 18 01 f7 	orh	r8,0x1f7
80005552:	10 3c       	cp.w	r12,r8
80005554:	e0 88 00 06 	brls	80005560 <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
80005558:	30 1c       	mov	r12,1
8000555a:	f0 1f 00 04 	mcall	80005568 <flashc_set_bus_freq+0x20>
8000555e:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80005560:	30 0c       	mov	r12,0
80005562:	f0 1f 00 02 	mcall	80005568 <flashc_set_bus_freq+0x20>
80005566:	d8 02       	popm	pc
80005568:	80 00       	ld.sh	r0,r0[0x0]
8000556a:	55 38       	stdsp	sp[0x14c],r8

8000556c <gpio_enable_module_pin>:
}


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8000556c:	f8 08 16 05 	lsr	r8,r12,0x5
80005570:	a9 68       	lsl	r8,0x8
80005572:	e0 28 f0 00 	sub	r8,61440

  // Enable the correct function.
  switch (function)
80005576:	58 1b       	cp.w	r11,1
80005578:	c0 d0       	breq	80005592 <gpio_enable_module_pin+0x26>
8000557a:	c0 63       	brcs	80005586 <gpio_enable_module_pin+0x1a>
8000557c:	58 2b       	cp.w	r11,2
8000557e:	c1 00       	breq	8000559e <gpio_enable_module_pin+0x32>
80005580:	58 3b       	cp.w	r11,3
80005582:	c1 40       	breq	800055aa <gpio_enable_module_pin+0x3e>
80005584:	5e ff       	retal	1
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80005586:	30 19       	mov	r9,1
80005588:	f2 0c 09 49 	lsl	r9,r9,r12
8000558c:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000558e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
80005590:	c1 28       	rjmp	800055b4 <gpio_enable_module_pin+0x48>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80005592:	30 19       	mov	r9,1
80005594:	f2 0c 09 49 	lsl	r9,r9,r12
80005598:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8000559a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
8000559c:	c0 c8       	rjmp	800055b4 <gpio_enable_module_pin+0x48>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
8000559e:	30 19       	mov	r9,1
800055a0:	f2 0c 09 49 	lsl	r9,r9,r12
800055a4:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800055a6:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;
800055a8:	c0 68       	rjmp	800055b4 <gpio_enable_module_pin+0x48>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800055aa:	30 19       	mov	r9,1
800055ac:	f2 0c 09 49 	lsl	r9,r9,r12
800055b0:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800055b2:	91 99       	st.w	r8[0x24],r9
  default:
    return GPIO_INVALID_ARGUMENT;
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
800055b4:	30 19       	mov	r9,1
800055b6:	f2 0c 09 4c 	lsl	r12,r9,r12
800055ba:	91 2c       	st.w	r8[0x8],r12
800055bc:	5e fd       	retal	0
800055be:	d7 03       	nop

800055c0 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800055c0:	d4 21       	pushm	r4-r7,lr
800055c2:	18 97       	mov	r7,r12
800055c4:	16 94       	mov	r4,r11
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800055c6:	58 0b       	cp.w	r11,0
800055c8:	c0 31       	brne	800055ce <gpio_enable_module+0xe>
800055ca:	30 05       	mov	r5,0
800055cc:	c0 d8       	rjmp	800055e6 <gpio_enable_module+0x26>
800055ce:	30 06       	mov	r6,0
800055d0:	0c 95       	mov	r5,r6
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800055d2:	0f 9b       	ld.ub	r11,r7[0x1]
800055d4:	0f 8c       	ld.ub	r12,r7[0x0]
800055d6:	f0 1f 00 06 	mcall	800055ec <gpio_enable_module+0x2c>
800055da:	18 45       	or	r5,r12
    gpiomap++;
800055dc:	2f e7       	sub	r7,-2
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800055de:	2f f6       	sub	r6,-1
800055e0:	0c 34       	cp.w	r4,r6
800055e2:	fe 9b ff f8 	brhi	800055d2 <gpio_enable_module+0x12>
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
}
800055e6:	0a 9c       	mov	r12,r5
800055e8:	d8 22       	popm	r4-r7,pc
800055ea:	00 00       	add	r0,r0
800055ec:	80 00       	ld.sh	r0,r0[0x0]
800055ee:	55 6c       	stdsp	sp[0x158],r12

800055f0 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800055f0:	f8 08 16 05 	lsr	r8,r12,0x5
800055f4:	a9 68       	lsl	r8,0x8
800055f6:	e0 28 f0 00 	sub	r8,61440
    if (flags & GPIO_PULL_DOWN)
            gpio_port->pders = 1 << (pin & 0x1F);
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
#endif
    if (flags & GPIO_PULL_UP)
800055fa:	16 99       	mov	r9,r11
800055fc:	e2 19 00 04 	andl	r9,0x4,COH
80005600:	c0 70       	breq	8000560e <gpio_configure_pin+0x1e>
            gpio_port->puers = 1 << (pin & 0x1F);
80005602:	30 19       	mov	r9,1
80005604:	f2 0c 09 49 	lsl	r9,r9,r12
80005608:	f1 49 00 74 	st.w	r8[116],r9
8000560c:	c0 68       	rjmp	80005618 <gpio_configure_pin+0x28>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
8000560e:	30 19       	mov	r9,1
80005610:	f2 0c 09 49 	lsl	r9,r9,r12
80005614:	f1 49 00 78 	st.w	r8[120],r9
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80005618:	16 99       	mov	r9,r11
8000561a:	e2 19 00 80 	andl	r9,0x80,COH
8000561e:	c2 40       	breq	80005666 <gpio_configure_pin+0x76>
            if (flags & GPIO_BOTHEDGES)
80005620:	16 99       	mov	r9,r11
80005622:	e2 19 01 80 	andl	r9,0x180,COH
80005626:	c0 90       	breq	80005638 <gpio_configure_pin+0x48>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80005628:	30 19       	mov	r9,1
8000562a:	f2 0c 09 49 	lsl	r9,r9,r12
8000562e:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80005632:	f1 49 00 b8 	st.w	r8[184],r9
80005636:	c1 88       	rjmp	80005666 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_RISING)
80005638:	16 99       	mov	r9,r11
8000563a:	e2 19 02 80 	andl	r9,0x280,COH
8000563e:	c0 90       	breq	80005650 <gpio_configure_pin+0x60>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80005640:	30 19       	mov	r9,1
80005642:	f2 0c 09 49 	lsl	r9,r9,r12
80005646:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
8000564a:	f1 49 00 b8 	st.w	r8[184],r9
8000564e:	c0 c8       	rjmp	80005666 <gpio_configure_pin+0x76>
            }
            else if (flags & GPIO_FALLING)
80005650:	16 99       	mov	r9,r11
80005652:	e2 19 03 80 	andl	r9,0x380,COH
80005656:	c0 80       	breq	80005666 <gpio_configure_pin+0x76>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80005658:	30 19       	mov	r9,1
8000565a:	f2 0c 09 49 	lsl	r9,r9,r12
8000565e:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80005662:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80005666:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
8000566a:	c1 50       	breq	80005694 <gpio_configure_pin+0xa4>
            if (flags & GPIO_INIT_HIGH)
8000566c:	e2 1b 00 02 	andl	r11,0x2,COH
80005670:	c0 70       	breq	8000567e <gpio_configure_pin+0x8e>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80005672:	30 19       	mov	r9,1
80005674:	f2 0c 09 49 	lsl	r9,r9,r12
80005678:	f1 49 00 54 	st.w	r8[84],r9
8000567c:	c0 68       	rjmp	80005688 <gpio_configure_pin+0x98>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
8000567e:	30 19       	mov	r9,1
80005680:	f2 0c 09 49 	lsl	r9,r9,r12
80005684:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80005688:	30 19       	mov	r9,1
8000568a:	f2 0c 09 49 	lsl	r9,r9,r12
8000568e:	f1 49 00 44 	st.w	r8[68],r9
80005692:	c0 68       	rjmp	8000569e <gpio_configure_pin+0xae>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80005694:	30 19       	mov	r9,1
80005696:	f2 0c 09 49 	lsl	r9,r9,r12
8000569a:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
8000569e:	30 19       	mov	r9,1
800056a0:	f2 0c 09 4c 	lsl	r12,r9,r12
800056a4:	91 1c       	st.w	r8[0x4],r12
}
800056a6:	5e fc       	retal	r12

800056a8 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800056a8:	c0 08       	rjmp	800056a8 <_unhandled_interrupt>
800056aa:	d7 03       	nop

800056ac <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800056ac:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800056b0:	49 99       	lddpc	r9,80005714 <INTC_register_interrupt+0x68>
800056b2:	f2 08 00 39 	add	r9,r9,r8<<0x3
800056b6:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800056ba:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800056bc:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800056c0:	58 0a       	cp.w	r10,0
800056c2:	c0 91       	brne	800056d4 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800056c4:	49 59       	lddpc	r9,80005718 <INTC_register_interrupt+0x6c>
800056c6:	49 6a       	lddpc	r10,8000571c <INTC_register_interrupt+0x70>
800056c8:	12 1a       	sub	r10,r9
800056ca:	fe 79 08 00 	mov	r9,-63488
800056ce:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800056d2:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800056d4:	58 1a       	cp.w	r10,1
800056d6:	c0 a1       	brne	800056ea <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800056d8:	49 09       	lddpc	r9,80005718 <INTC_register_interrupt+0x6c>
800056da:	49 2a       	lddpc	r10,80005720 <INTC_register_interrupt+0x74>
800056dc:	12 1a       	sub	r10,r9
800056de:	bf aa       	sbr	r10,0x1e
800056e0:	fe 79 08 00 	mov	r9,-63488
800056e4:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800056e8:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
800056ea:	58 2a       	cp.w	r10,2
800056ec:	c0 a1       	brne	80005700 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
800056ee:	48 b9       	lddpc	r9,80005718 <INTC_register_interrupt+0x6c>
800056f0:	48 da       	lddpc	r10,80005724 <INTC_register_interrupt+0x78>
800056f2:	12 1a       	sub	r10,r9
800056f4:	bf ba       	sbr	r10,0x1f
800056f6:	fe 79 08 00 	mov	r9,-63488
800056fa:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800056fe:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80005700:	48 69       	lddpc	r9,80005718 <INTC_register_interrupt+0x6c>
80005702:	48 aa       	lddpc	r10,80005728 <INTC_register_interrupt+0x7c>
80005704:	12 1a       	sub	r10,r9
80005706:	ea 1a c0 00 	orh	r10,0xc000
8000570a:	fe 79 08 00 	mov	r9,-63488
8000570e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80005712:	5e fc       	retal	r12
80005714:	80 00       	ld.sh	r0,r0[0x0]
80005716:	7b c4       	ld.w	r4,sp[0x70]
80005718:	80 00       	ld.sh	r0,r0[0x0]
8000571a:	78 00       	ld.w	r0,r12[0x0]
8000571c:	80 00       	ld.sh	r0,r0[0x0]
8000571e:	79 04       	ld.w	r4,r12[0x40]
80005720:	80 00       	ld.sh	r0,r0[0x0]
80005722:	79 12       	ld.w	r2,r12[0x44]
80005724:	80 00       	ld.sh	r0,r0[0x0]
80005726:	79 20       	ld.w	r0,r12[0x48]
80005728:	80 00       	ld.sh	r0,r0[0x0]
8000572a:	79 2e       	ld.w	lr,r12[0x48]

8000572c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000572c:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000572e:	49 18       	lddpc	r8,80005770 <INTC_init_interrupts+0x44>
80005730:	e3 b8 00 01 	mtsr	0x4,r8
80005734:	49 0e       	lddpc	lr,80005774 <INTC_init_interrupts+0x48>
80005736:	30 07       	mov	r7,0
80005738:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000573a:	49 0c       	lddpc	r12,80005778 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000573c:	49 05       	lddpc	r5,8000577c <INTC_init_interrupts+0x50>
8000573e:	10 15       	sub	r5,r8
80005740:	fe 76 08 00 	mov	r6,-63488
80005744:	c1 08       	rjmp	80005764 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80005746:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80005748:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000574a:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000574c:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80005750:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80005752:	10 3a       	cp.w	r10,r8
80005754:	fe 9b ff fc 	brhi	8000574c <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80005758:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
8000575c:	2f f7       	sub	r7,-1
8000575e:	2f 8e       	sub	lr,-8
80005760:	59 27       	cp.w	r7,18
80005762:	c0 50       	breq	8000576c <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80005764:	7c 08       	ld.w	r8,lr[0x0]
80005766:	58 08       	cp.w	r8,0
80005768:	ce f1       	brne	80005746 <INTC_init_interrupts+0x1a>
8000576a:	cf 7b       	rjmp	80005758 <INTC_init_interrupts+0x2c>
8000576c:	d8 22       	popm	r4-r7,pc
8000576e:	00 00       	add	r0,r0
80005770:	80 00       	ld.sh	r0,r0[0x0]
80005772:	78 00       	ld.w	r0,r12[0x0]
80005774:	80 00       	ld.sh	r0,r0[0x0]
80005776:	7b c4       	ld.w	r4,sp[0x70]
80005778:	80 00       	ld.sh	r0,r0[0x0]
8000577a:	56 a8       	stdsp	sp[0x1a8],r8
8000577c:	80 00       	ld.sh	r0,r0[0x0]
8000577e:	79 04       	ld.w	r4,r12[0x40]

80005780 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80005780:	fe 78 08 00 	mov	r8,-63488
80005784:	e0 69 00 83 	mov	r9,131
80005788:	f2 0c 01 0c 	sub	r12,r9,r12
8000578c:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80005790:	f2 ca ff c0 	sub	r10,r9,-64
80005794:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80005798:	58 08       	cp.w	r8,0
8000579a:	c0 21       	brne	8000579e <_get_interrupt_handler+0x1e>
8000579c:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000579e:	f0 08 12 00 	clz	r8,r8
800057a2:	48 5a       	lddpc	r10,800057b4 <_get_interrupt_handler+0x34>
800057a4:	f4 09 00 39 	add	r9,r10,r9<<0x3
800057a8:	f0 08 11 1f 	rsub	r8,r8,31
800057ac:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800057ae:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800057b2:	5e fc       	retal	r12
800057b4:	80 00       	ld.sh	r0,r0[0x0]
800057b6:	7b c4       	ld.w	r4,sp[0x70]

800057b8 <getBaudDiv>:
#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pb_hz)
{
  int baudDiv = div_ceil((pb_hz + baudrate / 2), baudrate);
800057b8:	f8 c9 00 01 	sub	r9,r12,1
800057bc:	f8 08 16 01 	lsr	r8,r12,0x1
800057c0:	f2 08 00 08 	add	r8,r9,r8
800057c4:	f0 0b 00 0b 	add	r11,r8,r11
800057c8:	f6 0c 0d 0a 	divu	r10,r11,r12
800057cc:	14 9c       	mov	r12,r10

  if (baudDiv <= 0 || baudDiv > 255) {
800057ce:	f4 c8 00 01 	sub	r8,r10,1
800057d2:	e0 48 00 fe 	cp.w	r8,254
800057d6:	e0 88 00 03 	brls	800057dc <getBaudDiv+0x24>
800057da:	5e fe       	retal	-1
    return -1;
  }

  return baudDiv;
800057dc:	5c 8c       	casts.h	r12
}
800057de:	5e fc       	retal	r12

800057e0 <spi_initMaster>:

spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
800057e0:	f7 39 00 0d 	ld.ub	r9,r11[13]
800057e4:	30 18       	mov	r8,1
800057e6:	f0 09 18 00 	cp.b	r9,r8
800057ea:	e0 88 00 04 	brls	800057f2 <spi_initMaster+0x12>
800057ee:	30 2c       	mov	r12,2
800057f0:	5e fc       	retal	r12
    return SPI_ERROR_ARGUMENT;
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
800057f2:	e0 68 00 80 	mov	r8,128
800057f6:	99 08       	st.w	r12[0x0],r8

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
800057f8:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.mstr = 1;
800057fa:	30 19       	mov	r9,1
800057fc:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
80005800:	f7 39 00 0d 	ld.ub	r9,r11[13]
80005804:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
  u_avr32_spi_mr.MR.llb = 0;
80005808:	30 09       	mov	r9,0
8000580a:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000580e:	30 fa       	mov	r10,15
80005810:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
  spi->mr = u_avr32_spi_mr.mr;
80005814:	99 18       	st.w	r12[0x4],r8
80005816:	5e f9       	retal	r9

80005818 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
80005818:	d4 01       	pushm	lr
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
8000581a:	30 18       	mov	r8,1
8000581c:	f0 0b 18 00 	cp.b	r11,r8
80005820:	5f be       	srhi	lr
80005822:	f0 0a 18 00 	cp.b	r10,r8
80005826:	5f b8       	srhi	r8
80005828:	fd e8 10 08 	or	r8,lr,r8
8000582c:	c0 30       	breq	80005832 <spi_selectionMode+0x1a>
8000582e:	30 2c       	mov	r12,2
80005830:	d8 02       	popm	pc
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  u_avr32_spi_mr.mr = spi->mr;
80005832:	78 18       	ld.w	r8,r12[0x4]
  u_avr32_spi_mr.MR.ps = variable_ps;
80005834:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80005838:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
  u_avr32_spi_mr.MR.dlybcs = delay;
8000583c:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
  spi->mr = u_avr32_spi_mr.mr;
80005840:	99 18       	st.w	r12[0x4],r8
80005842:	d8 0a       	popm	pc,r12=0

80005844 <spi_selectChip>:
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80005844:	78 18       	ld.w	r8,r12[0x4]
80005846:	ea 18 00 0f 	orh	r8,0xf
8000584a:	99 18       	st.w	r12[0x4],r8

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8000584c:	78 18       	ld.w	r8,r12[0x4]
8000584e:	e2 18 00 04 	andl	r8,0x4,COH
80005852:	c0 f0       	breq	80005870 <spi_selectChip+0x2c>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
80005854:	30 e8       	mov	r8,14
80005856:	f0 0b 18 00 	cp.b	r11,r8
8000585a:	e0 8b 00 19 	brhi	8000588c <spi_selectChip+0x48>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
8000585e:	78 18       	ld.w	r8,r12[0x4]
80005860:	b1 6b       	lsl	r11,0x10
80005862:	ea 1b ff f0 	orh	r11,0xfff0
80005866:	e8 1b ff ff 	orl	r11,0xffff
8000586a:	10 6b       	and	r11,r8
8000586c:	99 1b       	st.w	r12[0x4],r11
8000586e:	5e fd       	retal	0
  } else {
    if (chip > 3) {
80005870:	30 38       	mov	r8,3
80005872:	f0 0b 18 00 	cp.b	r11,r8
80005876:	e0 8b 00 0b 	brhi	8000588c <spi_selectChip+0x48>
      return SPI_ERROR_ARGUMENT;
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000587a:	78 18       	ld.w	r8,r12[0x4]
8000587c:	2f 0b       	sub	r11,-16
8000587e:	30 19       	mov	r9,1
80005880:	f2 0b 09 4b 	lsl	r11,r9,r11
80005884:	5c db       	com	r11
80005886:	10 6b       	and	r11,r8
80005888:	99 1b       	st.w	r12[0x4],r11
8000588a:	5e fd       	retal	0
8000588c:	30 2c       	mov	r12,2
  }

  return SPI_OK;
}
8000588e:	5e fc       	retal	r12

80005890 <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80005890:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80005894:	c0 58       	rjmp	8000589e <spi_unselectChip+0xe>
    if (!timeout--) {
80005896:	58 08       	cp.w	r8,0
80005898:	c0 21       	brne	8000589c <spi_unselectChip+0xc>
8000589a:	5e ff       	retal	1
8000589c:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000589e:	78 49       	ld.w	r9,r12[0x10]
800058a0:	e2 19 02 00 	andl	r9,0x200,COH
800058a4:	cf 90       	breq	80005896 <spi_unselectChip+0x6>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800058a6:	78 18       	ld.w	r8,r12[0x4]
800058a8:	ea 18 00 0f 	orh	r8,0xf
800058ac:	99 18       	st.w	r12[0x4],r8

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800058ae:	30 08       	mov	r8,0
800058b0:	ea 18 01 00 	orh	r8,0x100
800058b4:	99 08       	st.w	r12[0x0],r8
800058b6:	5e fd       	retal	0

800058b8 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
800058b8:	eb cd 40 f8 	pushm	r3-r7,lr
800058bc:	18 95       	mov	r5,r12
800058be:	16 97       	mov	r7,r11
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
800058c0:	f7 36 00 0c 	ld.ub	r6,r11[12]
800058c4:	30 38       	mov	r8,3
800058c6:	f0 06 18 00 	cp.b	r6,r8
800058ca:	e0 8b 00 4d 	brhi	80005964 <spi_setupChipReg+0xac>
      options->stay_act > 1 ||
800058ce:	f7 34 00 0b 	ld.ub	r4,r11[11]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
800058d2:	30 18       	mov	r8,1
800058d4:	f0 04 18 00 	cp.b	r4,r8
800058d8:	e0 8b 00 46 	brhi	80005964 <spi_setupChipReg+0xac>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
800058dc:	f7 33 00 08 	ld.ub	r3,r11[8]
                              const spi_options_t *options,
                              uint32_t pb_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
800058e0:	30 78       	mov	r8,7
800058e2:	f0 03 18 00 	cp.b	r3,r8
800058e6:	e0 88 00 3f 	brls	80005964 <spi_setupChipReg+0xac>
800058ea:	31 08       	mov	r8,16
800058ec:	f0 03 18 00 	cp.b	r3,r8
800058f0:	e0 8b 00 3a 	brhi	80005964 <spi_setupChipReg+0xac>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
  }

  int baudDiv = getBaudDiv(options->baudrate, pb_hz);
800058f4:	14 9b       	mov	r11,r10
800058f6:	6e 1c       	ld.w	r12,r7[0x4]
800058f8:	f0 1f 00 1d 	mcall	8000596c <spi_setupChipReg+0xb4>

  if (baudDiv < 0) {
800058fc:	c3 45       	brlt	80005964 <spi_setupChipReg+0xac>
    return SPI_ERROR_ARGUMENT;
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
800058fe:	30 08       	mov	r8,0
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80005900:	ec 09 16 01 	lsr	r9,r6,0x1
80005904:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80005908:	ec 16 00 01 	eorl	r6,0x1
8000590c:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80005910:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80005914:	20 83       	sub	r3,8
80005916:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
8000591a:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000591e:	ef 39 00 09 	ld.ub	r9,r7[9]
80005922:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80005926:	ef 39 00 0a 	ld.ub	r9,r7[10]
8000592a:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

  switch(options->reg) {
8000592e:	0f 89       	ld.ub	r9,r7[0x0]
80005930:	30 1a       	mov	r10,1
80005932:	f4 09 18 00 	cp.b	r9,r10
80005936:	c0 e0       	breq	80005952 <spi_setupChipReg+0x9a>
80005938:	c0 a3       	brcs	8000594c <spi_setupChipReg+0x94>
8000593a:	30 2a       	mov	r10,2
8000593c:	f4 09 18 00 	cp.b	r9,r10
80005940:	c0 c0       	breq	80005958 <spi_setupChipReg+0xa0>
80005942:	30 3a       	mov	r10,3
80005944:	f4 09 18 00 	cp.b	r9,r10
80005948:	c0 e1       	brne	80005964 <spi_setupChipReg+0xac>
8000594a:	c0 a8       	rjmp	8000595e <spi_setupChipReg+0xa6>
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
8000594c:	8b c8       	st.w	r5[0x30],r8
8000594e:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
80005952:	8b d8       	st.w	r5[0x34],r8
80005954:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80005958:	8b e8       	st.w	r5[0x38],r8
8000595a:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
8000595e:	8b f8       	st.w	r5[0x3c],r8
80005960:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
      break;
80005964:	30 2c       	mov	r12,2
    }
  }
#endif

  return SPI_OK;
}
80005966:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000596a:	00 00       	add	r0,r0
8000596c:	80 00       	ld.sh	r0,r0[0x0]
8000596e:	57 b8       	stdsp	sp[0x1ec],r8

80005970 <spi_enable>:


void spi_enable(volatile avr32_spi_t *spi)
{
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80005970:	30 18       	mov	r8,1
80005972:	99 08       	st.w	r12[0x0],r8
}
80005974:	5e fc       	retal	r12

80005976 <spi_is_enabled>:
}


int spi_is_enabled(volatile avr32_spi_t *spi)
{
  return (spi->sr & AVR32_SPI_SR_SPIENS_MASK) != 0;
80005976:	78 4c       	ld.w	r12,r12[0x10]
}
80005978:	f9 dc c2 01 	bfextu	r12,r12,0x10,0x1
8000597c:	5e fc       	retal	r12

8000597e <spi_write>:
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
8000597e:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80005982:	c0 58       	rjmp	8000598c <spi_write+0xe>
    if (!timeout--) {
80005984:	58 08       	cp.w	r8,0
80005986:	c0 21       	brne	8000598a <spi_write+0xc>
80005988:	5e ff       	retal	1
8000598a:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000598c:	78 49       	ld.w	r9,r12[0x10]
8000598e:	e2 19 00 02 	andl	r9,0x2,COH
80005992:	cf 90       	breq	80005984 <spi_write+0x6>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80005994:	5c 7b       	castu.h	r11
80005996:	99 3b       	st.w	r12[0xc],r11
80005998:	5e fd       	retal	0

8000599a <spi_read>:
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
8000599a:	e0 68 3a 98 	mov	r8,15000
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
8000599e:	c0 58       	rjmp	800059a8 <spi_read+0xe>
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
800059a0:	58 08       	cp.w	r8,0
800059a2:	c0 21       	brne	800059a6 <spi_read+0xc>
800059a4:	5e ff       	retal	1
800059a6:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
800059a8:	78 49       	ld.w	r9,r12[0x10]
800059aa:	e2 19 02 01 	andl	r9,0x201,COH
800059ae:	e0 49 02 01 	cp.w	r9,513
800059b2:	cf 71       	brne	800059a0 <spi_read+0x6>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800059b4:	78 28       	ld.w	r8,r12[0x8]
800059b6:	b6 08       	st.h	r11[0x0],r8
800059b8:	5e fd       	retal	0

800059ba <udd_include_vbus_monitoring>:


bool udd_include_vbus_monitoring(void)
{
	return true;
}
800059ba:	5e ff       	retal	1

800059bc <udd_set_address>:
}


void udd_set_address(uint8_t address)
{
	udd_disable_address();
800059bc:	fe 68 00 00 	mov	r8,-131072
800059c0:	70 09       	ld.w	r9,r8[0x0]
800059c2:	a7 d9       	cbr	r9,0x7
800059c4:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
800059c6:	70 09       	ld.w	r9,r8[0x0]
800059c8:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800059cc:	e0 19 ff 80 	andl	r9,0xff80
800059d0:	f9 e9 10 09 	or	r9,r12,r9
800059d4:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800059d6:	70 09       	ld.w	r9,r8[0x0]
800059d8:	a7 b9       	sbr	r9,0x7
800059da:	91 09       	st.w	r8[0x0],r9
}
800059dc:	5e fc       	retal	r12

800059de <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800059de:	fe 68 00 00 	mov	r8,-131072
800059e2:	70 0c       	ld.w	r12,r8[0x0]
}
800059e4:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800059e8:	5e fc       	retal	r12

800059ea <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
800059ea:	fe 68 00 20 	mov	r8,-131040
800059ee:	70 0c       	ld.w	r12,r8[0x0]
}
800059f0:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
800059f4:	5e fc       	retal	r12
800059f6:	d7 03       	nop

800059f8 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
800059f8:	48 28       	lddpc	r8,80005a00 <udd_set_setup_payload+0x8>
800059fa:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
800059fc:	b0 6b       	st.h	r8[0xc],r11
}
800059fe:	5e fc       	retal	r12
80005a00:	00 00       	add	r0,r0
80005a02:	09 90       	ld.ub	r0,r4[0x1]

80005a04 <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80005a04:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80005a08:	a3 68       	lsl	r8,0x2
80005a0a:	e0 38 fe 40 	sub	r8,130624
80005a0e:	70 0c       	ld.w	r12,r8[0x0]
}
80005a10:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
80005a14:	5e fc       	retal	r12
80005a16:	d7 03       	nop

80005a18 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80005a18:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index) {
80005a1c:	30 28       	mov	r8,2
80005a1e:	f0 0c 18 00 	cp.b	r12,r8
80005a22:	e0 8b 00 36 	brhi	80005a8e <udd_ep_set_halt+0x76>
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];
80005a26:	18 99       	mov	r9,r12
80005a28:	f8 c8 00 01 	sub	r8,r12,1
80005a2c:	f0 08 00 28 	add	r8,r8,r8<<0x2
80005a30:	49 8a       	lddpc	r10,80005a90 <udd_ep_set_halt+0x78>
80005a32:	f4 08 00 28 	add	r8,r10,r8<<0x2
	if (ptr_job->busy == true) {
80005a36:	70 0a       	ld.w	r10,r8[0x0]
80005a38:	58 0a       	cp.w	r10,0
80005a3a:	c2 a5       	brlt	80005a8e <udd_ep_set_halt+0x76>
		return false; // Job on going, stall impossible
	}

	if (0 != udd_nb_busy_bank(index)) {
80005a3c:	a3 69       	lsl	r9,0x2
80005a3e:	fe 6b 01 30 	mov	r11,-130768
80005a42:	f2 0b 00 0a 	add	r10,r9,r11
80005a46:	74 0a       	ld.w	r10,r10[0x0]
80005a48:	f5 da c1 82 	bfextu	r10,r10,0xc,0x2
80005a4c:	c1 10       	breq	80005a6e <udd_ep_set_halt+0x56>
		// Wait end of transfer on USB line before stall endpoint
		// Flag a stall requested
		ptr_job->stall_requested = true;
80005a4e:	70 0b       	ld.w	r11,r8[0x0]
80005a50:	30 1a       	mov	r10,1
80005a52:	f7 da d3 a1 	bfins	r11,r10,0x1d,0x1
80005a56:	91 0b       	st.w	r8[0x0],r11
		udd_enable_bank_interrupt(index);
80005a58:	e0 39 fe 10 	sub	r9,130576
80005a5c:	e0 68 10 00 	mov	r8,4096
80005a60:	93 08       	st.w	r9[0x0],r8
		udd_enable_endpoint_interrupt(index);
80005a62:	f0 0c 09 4c 	lsl	r12,r8,r12
80005a66:	fe 69 00 00 	mov	r9,-131072
80005a6a:	93 6c       	st.w	r9[0x18],r12
80005a6c:	5e fa       	retal	r10
	} else {
		// Stall endpoint
		udd_disable_endpoint_bank_autoswitch(index);
80005a6e:	fe 6a 01 00 	mov	r10,-130816
80005a72:	f2 0a 00 08 	add	r8,r9,r10
80005a76:	70 0a       	ld.w	r10,r8[0x0]
80005a78:	a9 da       	cbr	r10,0x9
80005a7a:	91 0a       	st.w	r8[0x0],r10
		udd_enable_stall_handshake(index);
80005a7c:	e0 39 fe 10 	sub	r9,130576
80005a80:	e8 68 00 00 	mov	r8,524288
80005a84:	93 08       	st.w	r9[0x0],r8
		udd_reset_data_toggle(index);
80005a86:	e4 68 00 00 	mov	r8,262144
80005a8a:	93 08       	st.w	r9[0x0],r8
80005a8c:	5e ff       	retal	1
80005a8e:	5e fd       	retal	0
80005a90:	00 00       	add	r0,r0
80005a92:	04 20       	rsub	r0,r2

80005a94 <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80005a94:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80005a96:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
80005a9a:	30 28       	mov	r8,2
80005a9c:	f0 0c 18 00 	cp.b	r12,r8
80005aa0:	e0 88 00 03 	brls	80005aa6 <udd_ep_clear_halt+0x12>
80005aa4:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
80005aa6:	f8 c8 00 01 	sub	r8,r12,1
80005aaa:	f0 08 00 28 	add	r8,r8,r8<<0x2
80005aae:	49 79       	lddpc	r9,80005b08 <udd_ep_clear_halt+0x74>
80005ab0:	f2 08 00 28 	add	r8,r9,r8<<0x2

	if (Is_udd_endpoint_stall_requested(ep) // Endpoint stalled
80005ab4:	a3 6c       	lsl	r12,0x2
80005ab6:	fe 6a 01 c0 	mov	r10,-130624
80005aba:	f8 0a 00 09 	add	r9,r12,r10
80005abe:	72 09       	ld.w	r9,r9[0x0]
80005ac0:	e6 19 00 08 	andh	r9,0x8,COH
80005ac4:	c0 51       	brne	80005ace <udd_ep_clear_halt+0x3a>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
80005ac6:	70 09       	ld.w	r9,r8[0x0]
80005ac8:	e6 19 20 00 	andh	r9,0x2000,COH
80005acc:	c1 c0       	breq	80005b04 <udd_ep_clear_halt+0x70>
		// Remove request to stall
		ptr_job->stall_requested = false;
80005ace:	70 09       	ld.w	r9,r8[0x0]
80005ad0:	30 0a       	mov	r10,0
80005ad2:	f3 da d3 a1 	bfins	r9,r10,0x1d,0x1
80005ad6:	91 09       	st.w	r8[0x0],r9

		// Remove stall
		udd_disable_stall_handshake(ep);
80005ad8:	fe 6a 02 20 	mov	r10,-130528
80005adc:	f8 0a 00 09 	add	r9,r12,r10
80005ae0:	e8 6a 00 00 	mov	r10,524288
80005ae4:	93 0a       	st.w	r9[0x0],r10
		udd_enable_endpoint_bank_autoswitch(ep);
80005ae6:	e0 3c ff 00 	sub	r12,130816
80005aea:	78 09       	ld.w	r9,r12[0x0]
80005aec:	a9 b9       	sbr	r9,0x9
80005aee:	99 09       	st.w	r12[0x0],r9

		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80005af0:	70 09       	ld.w	r9,r8[0x0]
80005af2:	58 09       	cp.w	r9,0
80005af4:	c0 84       	brge	80005b04 <udd_ep_clear_halt+0x70>
			ptr_job->busy = false;
80005af6:	30 0a       	mov	r10,0
80005af8:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
80005afc:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
80005afe:	70 48       	ld.w	r8,r8[0x10]
80005b00:	5d 18       	icall	r8
80005b02:	da 0a       	popm	pc,r12=1
80005b04:	da 0a       	popm	pc,r12=1
80005b06:	00 00       	add	r0,r0
80005b08:	00 00       	add	r0,r0
80005b0a:	04 20       	rsub	r0,r2

80005b0c <udd_ep_wait_stall_clear>:
}


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
80005b0c:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80005b0e:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep) {
80005b12:	30 28       	mov	r8,2
80005b14:	f0 0c 18 00 	cp.b	r12,r8
80005b18:	e0 8b 00 27 	brhi	80005b66 <udd_ep_wait_stall_clear+0x5a>
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
80005b1c:	fe 68 00 00 	mov	r8,-131072
80005b20:	70 79       	ld.w	r9,r8[0x1c]
80005b22:	30 18       	mov	r8,1
80005b24:	f0 0c 09 48 	lsl	r8,r8,r12
80005b28:	12 68       	and	r8,r9
80005b2a:	c1 e0       	breq	80005b66 <udd_ep_wait_stall_clear+0x5a>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];
80005b2c:	f8 c8 00 01 	sub	r8,r12,1
80005b30:	f0 08 00 28 	add	r8,r8,r8<<0x2
80005b34:	48 d9       	lddpc	r9,80005b68 <udd_ep_wait_stall_clear+0x5c>
80005b36:	f2 08 00 28 	add	r8,r9,r8<<0x2
	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
80005b3a:	70 09       	ld.w	r9,r8[0x0]
80005b3c:	58 09       	cp.w	r9,0
80005b3e:	c1 45       	brlt	80005b66 <udd_ep_wait_stall_clear+0x5a>
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
80005b40:	a3 6c       	lsl	r12,0x2
80005b42:	e0 3c fe 40 	sub	r12,130624
80005b46:	78 0a       	ld.w	r10,r12[0x0]
80005b48:	e6 1a 00 08 	andh	r10,0x8,COH
80005b4c:	c0 41       	brne	80005b54 <udd_ep_wait_stall_clear+0x48>
80005b4e:	e6 19 20 00 	andh	r9,0x2000,COH
80005b52:	c0 80       	breq	80005b62 <udd_ep_wait_stall_clear+0x56>
			|| ptr_job->stall_requested) {
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
80005b54:	70 09       	ld.w	r9,r8[0x0]
80005b56:	30 1c       	mov	r12,1
80005b58:	f3 dc d3 e1 	bfins	r9,r12,0x1f,0x1
80005b5c:	91 09       	st.w	r8[0x0],r9
		ptr_job->call_nohalt = callback;
80005b5e:	91 4b       	st.w	r8[0x10],r11
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
80005b60:	d8 02       	popm	pc
		// Endpoint halted then registes the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// Enpoint not halted then call directly callback
		callback();
80005b62:	5d 1b       	icall	r11
80005b64:	da 0a       	popm	pc,r12=1
80005b66:	d8 0a       	popm	pc,r12=0
80005b68:	00 00       	add	r0,r0
80005b6a:	04 20       	rsub	r0,r2

80005b6c <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80005b6c:	30 59       	mov	r9,5
80005b6e:	48 58       	lddpc	r8,80005b80 <udd_ctrl_stall_data+0x14>
80005b70:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80005b72:	e8 69 00 00 	mov	r9,524288
80005b76:	fe 68 01 f0 	mov	r8,-130576
80005b7a:	91 09       	st.w	r8[0x0],r9
}
80005b7c:	5e fc       	retal	r12
80005b7e:	00 00       	add	r0,r0
80005b80:	00 00       	add	r0,r0
80005b82:	04 4c       	or	r12,r2

80005b84 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80005b84:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80005b86:	48 48       	lddpc	r8,80005b94 <udd_ctrl_endofrequest+0x10>
80005b88:	70 48       	ld.w	r8,r8[0x10]
80005b8a:	58 08       	cp.w	r8,0
80005b8c:	c0 20       	breq	80005b90 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
80005b8e:	5d 18       	icall	r8
80005b90:	d8 02       	popm	pc
80005b92:	00 00       	add	r0,r0
80005b94:	00 00       	add	r0,r0
80005b96:	09 90       	ld.ub	r0,r4[0x1]

80005b98 <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort)
{
80005b98:	d4 01       	pushm	lr
80005b9a:	16 99       	mov	r9,r11
	if (ptr_job->busy == false) {
80005b9c:	78 08       	ld.w	r8,r12[0x0]
80005b9e:	58 08       	cp.w	r8,0
80005ba0:	c0 b4       	brge	80005bb6 <udd_ep_finish_job+0x1e>
		return; // No on-going job
	}
	ptr_job->busy = false;
80005ba2:	30 0a       	mov	r10,0
80005ba4:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80005ba8:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans) {
80005baa:	78 48       	ld.w	r8,r12[0x10]
80005bac:	58 08       	cp.w	r8,0
80005bae:	c0 40       	breq	80005bb6 <udd_ep_finish_job+0x1e>
		return; // No callback linked to job
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80005bb0:	78 2b       	ld.w	r11,r12[0x8]
80005bb2:	12 9c       	mov	r12,r9
80005bb4:	5d 18       	icall	r8
80005bb6:	d8 02       	popm	pc

80005bb8 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80005bb8:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true);
80005bba:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80005bbe:	20 1c       	sub	r12,1
80005bc0:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80005bc4:	30 1b       	mov	r11,1
80005bc6:	48 48       	lddpc	r8,80005bd4 <udd_ep_abort_job+0x1c>
80005bc8:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
80005bcc:	f0 1f 00 03 	mcall	80005bd8 <udd_ep_abort_job+0x20>
}
80005bd0:	d8 02       	popm	pc
80005bd2:	00 00       	add	r0,r0
80005bd4:	00 00       	add	r0,r0
80005bd6:	04 20       	rsub	r0,r2
80005bd8:	80 00       	ld.sh	r0,r0[0x0]
80005bda:	5b 98       	cp.w	r8,-7

80005bdc <udd_ep_abort>:
	return true;
}


void udd_ep_abort(udd_ep_id_t ep)
{
80005bdc:	d4 01       	pushm	lr
	// Stop DMA transfer
	udd_endpoint_dma_set_control((ep & USB_EP_ADDR_MASK), 0);
80005bde:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80005be2:	a5 68       	lsl	r8,0x4
80005be4:	e0 38 fd 00 	sub	r8,130304
80005be8:	30 09       	mov	r9,0
80005bea:	91 29       	st.w	r8[0x8],r9
	udd_ep_abort_job(ep);
80005bec:	f0 1f 00 02 	mcall	80005bf4 <udd_ep_abort+0x18>
}
80005bf0:	d8 02       	popm	pc
80005bf2:	00 00       	add	r0,r0
80005bf4:	80 00       	ld.sh	r0,r0[0x0]
80005bf6:	5b b8       	cp.w	r8,-5

80005bf8 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80005bf8:	d4 01       	pushm	lr
	udd_disable_endpoint(ep & USB_EP_ADDR_MASK);
80005bfa:	fe 69 00 00 	mov	r9,-131072
80005bfe:	72 7b       	ld.w	r11,r9[0x1c]
80005c00:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80005c04:	30 1a       	mov	r10,1
80005c06:	f4 08 09 4a 	lsl	r10,r10,r8
80005c0a:	5c da       	com	r10
80005c0c:	16 6a       	and	r10,r11
80005c0e:	93 7a       	st.w	r9[0x1c],r10
	udd_unallocate_memory(ep & USB_EP_ADDR_MASK);
80005c10:	a3 68       	lsl	r8,0x2
80005c12:	e0 38 ff 00 	sub	r8,130816
80005c16:	70 09       	ld.w	r9,r8[0x0]
80005c18:	a1 d9       	cbr	r9,0x1
80005c1a:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80005c1c:	f0 1f 00 02 	mcall	80005c24 <udd_ep_free+0x2c>
}
80005c20:	d8 02       	popm	pc
80005c22:	00 00       	add	r0,r0
80005c24:	80 00       	ld.sh	r0,r0[0x0]
80005c26:	5b b8       	cp.w	r8,-5

80005c28 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80005c28:	eb cd 40 e0 	pushm	r5-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
80005c2c:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP) {
80005c30:	30 29       	mov	r9,2
80005c32:	f2 08 18 00 	cp.b	r8,r9
80005c36:	e0 8b 00 87 	brhi	80005d44 <udd_ep_alloc+0x11c>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
80005c3a:	fe 69 00 00 	mov	r9,-131072
80005c3e:	72 79       	ld.w	r9,r9[0x1c]
80005c40:	30 17       	mov	r7,1
80005c42:	ee 08 09 47 	lsl	r7,r7,r8
80005c46:	ef e9 00 09 	and	r9,r7,r9
80005c4a:	c7 d1       	brne	80005d44 <udd_ep_alloc+0x11c>
		return false;
	}

	// Bank choise
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80005c4c:	f3 db c0 02 	bfextu	r9,r11,0x0,0x2
80005c50:	58 19       	cp.w	r9,1
80005c52:	c7 95       	brlt	80005d44 <udd_ep_alloc+0x11c>
80005c54:	58 29       	cp.w	r9,2
80005c56:	e0 8a 00 06 	brle	80005c62 <udd_ep_alloc+0x3a>
80005c5a:	58 39       	cp.w	r9,3
80005c5c:	c7 41       	brne	80005d44 <udd_ep_alloc+0x11c>
80005c5e:	30 0e       	mov	lr,0
80005c60:	c0 28       	rjmp	80005c64 <udd_ep_alloc+0x3c>
80005c62:	30 1e       	mov	lr,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80005c64:	f0 09 15 02 	lsl	r9,r8,0x2
80005c68:	e0 39 ff 00 	sub	r9,130816
80005c6c:	72 06       	ld.w	r6,r9[0x0]
80005c6e:	5c 7a       	castu.h	r10
80005c70:	30 85       	mov	r5,8
80005c72:	f4 05 0c 4a 	max	r10,r10,r5
80005c76:	e0 65 04 00 	mov	r5,1024
80005c7a:	f4 05 0d 4a 	min	r10,r10,r5
80005c7e:	a1 7a       	lsl	r10,0x1
80005c80:	20 1a       	sub	r10,1
80005c82:	f4 0a 12 00 	clz	r10,r10
80005c86:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
80005c8a:	ab 7b       	lsl	r11,0xb
80005c8c:	e2 1b 18 00 	andl	r11,0x1800,COH
80005c90:	f7 ec 10 8b 	or	r11,r11,r12<<0x8
80005c94:	f4 0c 11 1c 	rsub	r12,r10,28
80005c98:	f7 ec 10 4c 	or	r12,r11,r12<<0x4
80005c9c:	f9 ee 10 2e 	or	lr,r12,lr<<0x2
80005ca0:	e2 1e 19 7c 	andl	lr,0x197c,COH
80005ca4:	0c 9a       	mov	r10,r6
80005ca6:	e0 1a e6 83 	andl	r10,0xe683
80005caa:	14 4e       	or	lr,r10
80005cac:	93 0e       	st.w	r9[0x0],lr
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80005cae:	5c 87       	casts.h	r7

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80005cb0:	30 19       	mov	r9,1
80005cb2:	f2 08 18 00 	cp.b	r8,r9
80005cb6:	e0 8b 00 1d 	brhi	80005cf0 <udd_ep_alloc+0xc8>
80005cba:	fe 6a 01 08 	mov	r10,-130808
80005cbe:	30 29       	mov	r9,2
		if (Is_udd_endpoint_enabled(i)) {
80005cc0:	fe 6c 00 00 	mov	r12,-131072
80005cc4:	30 16       	mov	r6,1
80005cc6:	78 7e       	ld.w	lr,r12[0x1c]
80005cc8:	ec 09 09 4b 	lsl	r11,r6,r9
80005ccc:	f7 ee 00 0e 	and	lr,r11,lr
80005cd0:	c0 b0       	breq	80005ce6 <udd_ep_alloc+0xbe>
			ep_allocated |= 1 << i;
80005cd2:	f7 e7 10 07 	or	r7,r11,r7
80005cd6:	5c 87       	casts.h	r7
			udd_disable_endpoint(i);
80005cd8:	78 7e       	ld.w	lr,r12[0x1c]
80005cda:	5c db       	com	r11
80005cdc:	1c 6b       	and	r11,lr
80005cde:	99 7b       	st.w	r12[0x1c],r11
			udd_unallocate_memory(i);
80005ce0:	74 0b       	ld.w	r11,r10[0x0]
80005ce2:	a1 db       	cbr	r11,0x1
80005ce4:	95 0b       	st.w	r10[0x0],r11
80005ce6:	20 19       	sub	r9,1
80005ce8:	20 4a       	sub	r10,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80005cea:	f2 08 18 00 	cp.b	r8,r9
80005cee:	ce c3       	brcs	80005cc6 <udd_ep_alloc+0x9e>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
80005cf0:	0e 9c       	mov	r12,r7
80005cf2:	5c 7c       	castu.h	r12
			udd_allocate_memory(i);
			udd_enable_endpoint(i);
80005cf4:	fe 6e 00 00 	mov	lr,-131072
80005cf8:	30 16       	mov	r6,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80005cfa:	30 27       	mov	r7,2
		if (ep_allocated & (1 << i)) {
80005cfc:	f8 08 08 49 	asr	r9,r12,r8
80005d00:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80005d04:	c1 80       	breq	80005d34 <udd_ep_alloc+0x10c>
			udd_allocate_memory(i);
80005d06:	f0 0b 15 02 	lsl	r11,r8,0x2
80005d0a:	fe 65 01 00 	mov	r5,-130816
80005d0e:	f6 05 00 09 	add	r9,r11,r5
80005d12:	72 05       	ld.w	r5,r9[0x0]
80005d14:	a1 b5       	sbr	r5,0x1
80005d16:	93 05       	st.w	r9[0x0],r5
			udd_enable_endpoint(i);
80005d18:	7c 75       	ld.w	r5,lr[0x1c]
80005d1a:	ec 08 09 4a 	lsl	r10,r6,r8
80005d1e:	0a 4a       	or	r10,r5
80005d20:	9d 7a       	st.w	lr[0x1c],r10
			if (!Is_udd_endpoint_configured(i)) {
80005d22:	e0 3b fe d0 	sub	r11,130768
80005d26:	76 0a       	ld.w	r10,r11[0x0]
80005d28:	e6 1a 00 04 	andh	r10,0x4,COH
80005d2c:	c0 c0       	breq	80005d44 <udd_ep_alloc+0x11c>
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
80005d2e:	72 0a       	ld.w	r10,r9[0x0]
80005d30:	a9 ba       	sbr	r10,0x9
80005d32:	93 0a       	st.w	r9[0x0],r10
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80005d34:	2f f8       	sub	r8,-1
80005d36:	5c 58       	castu.b	r8
80005d38:	ee 08 18 00 	cp.b	r8,r7
80005d3c:	fe 98 ff e0 	brls	80005cfc <udd_ep_alloc+0xd4>
80005d40:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80005d44:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0

80005d48 <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
80005d48:	58 0c       	cp.w	r12,0
80005d4a:	c1 11       	brne	80005d6c <udd_sleep_mode+0x24>
80005d4c:	49 18       	lddpc	r8,80005d90 <udd_sleep_mode+0x48>
80005d4e:	11 89       	ld.ub	r9,r8[0x0]
80005d50:	30 08       	mov	r8,0
80005d52:	f0 09 18 00 	cp.b	r9,r8
80005d56:	c1 a0       	breq	80005d8a <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005d58:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80005d5c:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
80005d5e:	48 e8       	lddpc	r8,80005d94 <udd_sleep_mode+0x4c>
80005d60:	11 9a       	ld.ub	r10,r8[0x1]
80005d62:	20 1a       	sub	r10,1
80005d64:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80005d66:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80005d6a:	c1 08       	rjmp	80005d8a <udd_sleep_mode+0x42>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
80005d6c:	48 98       	lddpc	r8,80005d90 <udd_sleep_mode+0x48>
80005d6e:	11 89       	ld.ub	r9,r8[0x0]
80005d70:	30 08       	mov	r8,0
80005d72:	f0 09 18 00 	cp.b	r9,r8
80005d76:	c0 a1       	brne	80005d8a <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005d78:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80005d7c:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80005d7e:	48 68       	lddpc	r8,80005d94 <udd_sleep_mode+0x4c>
80005d80:	11 9a       	ld.ub	r10,r8[0x1]
80005d82:	2f fa       	sub	r10,-1
80005d84:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80005d86:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
80005d8a:	48 28       	lddpc	r8,80005d90 <udd_sleep_mode+0x48>
80005d8c:	b0 8c       	st.b	r8[0x0],r12
}
80005d8e:	5e fc       	retal	r12
80005d90:	00 00       	add	r0,r0
80005d92:	04 48       	or	r8,r2
80005d94:	00 00       	add	r0,r0
80005d96:	09 a8       	ld.ub	r8,r4[0x2]

80005d98 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
80005d98:	d4 01       	pushm	lr
	otg_unfreeze_clock();
80005d9a:	fe 68 08 00 	mov	r8,-129024
80005d9e:	70 09       	ld.w	r9,r8[0x0]
80005da0:	af c9       	cbr	r9,0xe
80005da2:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
80005da4:	fe 69 00 00 	mov	r9,-131072
80005da8:	72 0a       	ld.w	r10,r9[0x0]
80005daa:	a9 aa       	sbr	r10,0x8
80005dac:	93 0a       	st.w	r9[0x0],r10
	otg_freeze_clock();
80005dae:	70 09       	ld.w	r9,r8[0x0]
80005db0:	af a9       	sbr	r9,0xe
80005db2:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80005db4:	30 0c       	mov	r12,0
80005db6:	f0 1f 00 02 	mcall	80005dbc <udd_detach+0x24>
}
80005dba:	d8 02       	popm	pc
80005dbc:	80 00       	ld.sh	r0,r0[0x0]
80005dbe:	5d 48       	*unknown*

80005dc0 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80005dc0:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005dc4:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80005dc8:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80005dca:	30 1c       	mov	r12,1
80005dcc:	f0 1f 00 18 	mcall	80005e2c <udd_attach+0x6c>
	otg_unfreeze_clock();
80005dd0:	fe 68 08 00 	mov	r8,-129024
80005dd4:	70 09       	ld.w	r9,r8[0x0]
80005dd6:	af c9       	cbr	r9,0xe
80005dd8:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );
80005dda:	fe 68 08 04 	mov	r8,-129020
80005dde:	70 09       	ld.w	r9,r8[0x0]
80005de0:	e2 19 40 00 	andl	r9,0x4000,COH
80005de4:	cf d0       	breq	80005dde <udd_attach+0x1e>

	// Authorize attach if Vbus is present
	udd_attach_device();
80005de6:	fe 68 00 00 	mov	r8,-131072
80005dea:	70 09       	ld.w	r9,r8[0x0]
80005dec:	a9 c9       	cbr	r9,0x8
80005dee:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
80005df0:	fe 68 00 18 	mov	r8,-131048
80005df4:	30 8c       	mov	r12,8
80005df6:	91 0c       	st.w	r8[0x0],r12
	udd_enable_suspend_interrupt();
80005df8:	30 1a       	mov	r10,1
80005dfa:	91 0a       	st.w	r8[0x0],r10
	udd_enable_wake_up_interrupt();
80005dfc:	31 09       	mov	r9,16
80005dfe:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80005e00:	30 4b       	mov	r11,4
80005e02:	91 0b       	st.w	r8[0x0],r11
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interupts flag
	udd_ack_reset();
80005e04:	fe 68 00 08 	mov	r8,-131064
80005e08:	91 0c       	st.w	r8[0x0],r12
	udd_ack_sof();
80005e0a:	91 0b       	st.w	r8[0x0],r11
	udd_ack_msof();
80005e0c:	30 2b       	mov	r11,2
80005e0e:	91 0b       	st.w	r8[0x0],r11
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
80005e10:	fe 6b 00 0c 	mov	r11,-131060
80005e14:	97 0a       	st.w	r11[0x0],r10
#endif
	udd_ack_wake_up();
80005e16:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80005e18:	fe 68 08 00 	mov	r8,-129024
80005e1c:	70 09       	ld.w	r9,r8[0x0]
80005e1e:	af a9       	sbr	r9,0xe
80005e20:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80005e22:	e3 b7 00 00 	mtsr	0x0,r7
	cpu_irq_restore(flags);
}
80005e26:	e3 cd 80 80 	ldm	sp++,r7,pc
80005e2a:	00 00       	add	r0,r0
80005e2c:	80 00       	ld.sh	r0,r0[0x0]
80005e2e:	5d 48       	*unknown*

80005e30 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80005e30:	30 39       	mov	r9,3
80005e32:	48 a8       	lddpc	r8,80005e58 <udd_ctrl_send_zlp_in+0x28>
80005e34:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005e36:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80005e3a:	d3 03       	ssrf	0x10

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80005e3c:	fe 6a 01 60 	mov	r10,-130720
80005e40:	30 19       	mov	r9,1
80005e42:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
80005e44:	fe 68 01 f0 	mov	r8,-130576
80005e48:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80005e4a:	30 89       	mov	r9,8
80005e4c:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
80005e4e:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80005e50:	e3 bb 00 00 	mtsr	0x0,r11
	cpu_irq_restore(flags);
}
80005e54:	5e fc       	retal	r12
80005e56:	00 00       	add	r0,r0
80005e58:	00 00       	add	r0,r0
80005e5a:	04 4c       	or	r12,r2

80005e5c <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005e5c:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80005e60:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80005e62:	30 1a       	mov	r10,1
80005e64:	fe 69 02 20 	mov	r9,-130528
80005e68:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80005e6a:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80005e6e:	30 29       	mov	r9,2
80005e70:	fe 68 01 60 	mov	r8,-130720
80005e74:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80005e76:	48 59       	lddpc	r9,80005e88 <udd_ctrl_init+0x2c>
80005e78:	30 08       	mov	r8,0
80005e7a:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80005e7c:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
80005e7e:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80005e80:	48 39       	lddpc	r9,80005e8c <udd_ctrl_init+0x30>
80005e82:	93 08       	st.w	r9[0x0],r8
}
80005e84:	5e fc       	retal	r12
80005e86:	00 00       	add	r0,r0
80005e88:	00 00       	add	r0,r0
80005e8a:	09 90       	ld.ub	r0,r4[0x1]
80005e8c:	00 00       	add	r0,r0
80005e8e:	04 4c       	or	r12,r2

80005e90 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
80005e90:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005e94:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80005e98:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
80005e9a:	30 1a       	mov	r10,1
80005e9c:	fe 69 02 20 	mov	r9,-130528
80005ea0:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80005ea2:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80005ea6:	4b a8       	lddpc	r8,80005f8c <udd_ctrl_in_sent+0xfc>
80005ea8:	70 08       	ld.w	r8,r8[0x0]
80005eaa:	58 38       	cp.w	r8,3
80005eac:	c0 71       	brne	80005eba <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80005eae:	f0 1f 00 39 	mcall	80005f90 <udd_ctrl_in_sent+0x100>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80005eb2:	f0 1f 00 39 	mcall	80005f94 <udd_ctrl_in_sent+0x104>
		return;
80005eb6:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
80005eba:	4b 88       	lddpc	r8,80005f98 <udd_ctrl_in_sent+0x108>
80005ebc:	90 08       	ld.sh	r8,r8[0x0]
80005ebe:	4b 89       	lddpc	r9,80005f9c <udd_ctrl_in_sent+0x10c>
80005ec0:	92 67       	ld.sh	r7,r9[0xc]
80005ec2:	10 17       	sub	r7,r8
80005ec4:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
80005ec6:	c2 91       	brne	80005f18 <udd_ctrl_in_sent+0x88>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous playlaod buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80005ec8:	4b 6a       	lddpc	r10,80005fa0 <udd_ctrl_in_sent+0x110>
80005eca:	94 09       	ld.sh	r9,r10[0x0]
80005ecc:	10 09       	add	r9,r8
80005ece:	b4 09       	st.h	r10[0x0],r9
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
80005ed0:	4b 3a       	lddpc	r10,80005f9c <udd_ctrl_in_sent+0x10c>
80005ed2:	94 3a       	ld.sh	r10,r10[0x6]
80005ed4:	f2 0a 19 00 	cp.h	r10,r9
80005ed8:	c0 40       	breq	80005ee0 <udd_ctrl_in_sent+0x50>
80005eda:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80005ede:	c1 20       	breq	80005f02 <udd_ctrl_in_sent+0x72>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80005ee0:	30 49       	mov	r9,4
80005ee2:	4a b8       	lddpc	r8,80005f8c <udd_ctrl_in_sent+0xfc>
80005ee4:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005ee6:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80005eea:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80005eec:	31 08       	mov	r8,16
80005eee:	fe 6a 01 60 	mov	r10,-130720
80005ef2:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
80005ef4:	fe 6a 01 f0 	mov	r10,-130576
80005ef8:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80005efa:	e3 b9 00 00 	mtsr	0x0,r9
				|| (udd_ctrl_payload_nb_trans%USB_DEVICE_EP_CTRL_SIZE)) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80005efe:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
80005f02:	4a 78       	lddpc	r8,80005f9c <udd_ctrl_in_sent+0x10c>
80005f04:	70 5c       	ld.w	r12,r8[0x14]
80005f06:	58 0c       	cp.w	r12,0
80005f08:	c0 80       	breq	80005f18 <udd_ctrl_in_sent+0x88>
80005f0a:	5d 1c       	icall	r12
80005f0c:	c0 60       	breq	80005f18 <udd_ctrl_in_sent+0x88>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
80005f0e:	30 09       	mov	r9,0
80005f10:	4a 28       	lddpc	r8,80005f98 <udd_ctrl_in_sent+0x108>
80005f12:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80005f14:	4a 28       	lddpc	r8,80005f9c <udd_ctrl_in_sent+0x10c>
80005f16:	90 67       	ld.sh	r7,r8[0xc]
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80005f18:	4a 18       	lddpc	r8,80005f9c <udd_ctrl_in_sent+0x10c>
80005f1a:	70 2a       	ld.w	r10,r8[0x8]
80005f1c:	49 f8       	lddpc	r8,80005f98 <udd_ctrl_in_sent+0x108>
80005f1e:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005f20:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
80005f24:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is recevied the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
80005f26:	fe 68 01 30 	mov	r8,-130768
80005f2a:	70 08       	ld.w	r8,r8[0x0]
80005f2c:	e2 18 00 02 	andl	r8,0x2,COH
80005f30:	c0 91       	brne	80005f42 <udd_ctrl_in_sent+0xb2>
80005f32:	34 08       	mov	r8,64
80005f34:	f0 07 19 00 	cp.h	r7,r8
80005f38:	f9 b7 0b 40 	movhi	r7,64
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80005f3c:	58 07       	cp.w	r7,0
80005f3e:	c0 91       	brne	80005f50 <udd_ctrl_in_sent+0xc0>
80005f40:	c1 58       	rjmp	80005f6a <udd_ctrl_in_sent+0xda>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80005f42:	e3 bb 00 00 	mtsr	0x0,r11
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80005f46:	30 49       	mov	r9,4
80005f48:	49 18       	lddpc	r8,80005f8c <udd_ctrl_in_sent+0xfc>
80005f4a:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
80005f4c:	e3 cd 80 80 	ldm	sp++,r7,pc
	if (nb_remain > USB_DEVICE_EP_CTRL_SIZE) {
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80005f50:	5c 79       	castu.h	r9
80005f52:	f4 09 00 09 	add	r9,r10,r9
80005f56:	30 08       	mov	r8,0
80005f58:	ea 18 d0 00 	orh	r8,0xd000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
80005f5c:	13 3a       	ld.ub	r10,r9++
80005f5e:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80005f60:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80005f64:	ee 0a 19 00 	cp.h	r10,r7
80005f68:	cf a3       	brcs	80005f5c <udd_ctrl_in_sent+0xcc>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
80005f6a:	48 c8       	lddpc	r8,80005f98 <udd_ctrl_in_sent+0x108>
80005f6c:	90 09       	ld.sh	r9,r8[0x0]
80005f6e:	f2 07 00 07 	add	r7,r9,r7
80005f72:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
80005f74:	30 18       	mov	r8,1
80005f76:	fe 69 01 60 	mov	r9,-130720
80005f7a:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
80005f7c:	fe 69 01 f0 	mov	r9,-130576
80005f80:	93 08       	st.w	r9[0x0],r8
80005f82:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
80005f86:	e3 cd 80 80 	ldm	sp++,r7,pc
80005f8a:	00 00       	add	r0,r0
80005f8c:	00 00       	add	r0,r0
80005f8e:	04 4c       	or	r12,r2
80005f90:	80 00       	ld.sh	r0,r0[0x0]
80005f92:	5b 84       	cp.w	r4,-8
80005f94:	80 00       	ld.sh	r0,r0[0x0]
80005f96:	5e 5c       	retlt	r12
80005f98:	00 00       	add	r0,r0
80005f9a:	04 4a       	or	r10,r2
80005f9c:	00 00       	add	r0,r0
80005f9e:	09 90       	ld.ub	r0,r4[0x1]
80005fa0:	00 00       	add	r0,r0
80005fa2:	04 1c       	sub	r12,r2

80005fa4 <udd_ep_trans_done>:
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
80005fa4:	eb cd 40 c0 	pushm	r6-r7,lr
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
80005fa8:	18 99       	mov	r9,r12
80005faa:	f8 c8 00 01 	sub	r8,r12,1
80005fae:	f0 08 00 28 	add	r8,r8,r8<<0x2
80005fb2:	4c fa       	lddpc	r10,800060ec <udd_ep_trans_done+0x148>
80005fb4:	f4 08 00 28 	add	r8,r10,r8<<0x2

	if (!ptr_job->busy) {
80005fb8:	70 0a       	ld.w	r10,r8[0x0]
80005fba:	58 0a       	cp.w	r10,0
80005fbc:	e0 84 00 95 	brge	800060e6 <udd_ep_trans_done+0x142>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80005fc0:	70 3a       	ld.w	r10,r8[0xc]
80005fc2:	70 2b       	ld.w	r11,r8[0x8]
80005fc4:	16 3a       	cp.w	r10,r11
80005fc6:	c5 e0       	breq	80006082 <udd_ep_trans_done+0xde>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80005fc8:	f6 0a 01 0a 	sub	r10,r11,r10

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80005fcc:	e0 5a 00 00 	cp.w	r10,65536
80005fd0:	e0 88 00 06 	brls	80005fdc <udd_ep_trans_done+0x38>
80005fd4:	e0 7a 00 00 	mov	r10,65536
80005fd8:	30 0e       	mov	lr,0
80005fda:	c0 38       	rjmp	80005fe0 <udd_ep_trans_done+0x3c>
			// Set 0 to tranfer the maximum
			udd_dma_ctrl = (0 <<
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
80005fdc:	f4 0e 15 10 	lsl	lr,r10,0x10
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
80005fe0:	f2 0b 15 02 	lsl	r11,r9,0x2
80005fe4:	e0 3b ff 00 	sub	r11,130816
80005fe8:	76 07       	ld.w	r7,r11[0x0]
80005fea:	e2 17 01 00 	andl	r7,0x100,COH
80005fee:	c1 20       	breq	80006012 <udd_ep_trans_done+0x6e>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
80005ff0:	76 0b       	ld.w	r11,r11[0x0]
80005ff2:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80005ff6:	30 87       	mov	r7,8
80005ff8:	ee 0b 09 4b 	lsl	r11,r7,r11
80005ffc:	20 1b       	sub	r11,1
80005ffe:	f5 eb 00 0b 	and	r11,r10,r11
80006002:	c1 80       	breq	80006032 <udd_ep_trans_done+0x8e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
80006004:	0e 4e       	or	lr,r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80006006:	70 0b       	ld.w	r11,r8[0x0]
80006008:	30 07       	mov	r7,0
8000600a:	f7 d7 d3 c1 	bfins	r11,r7,0x1e,0x1
8000600e:	91 0b       	st.w	r8[0x0],r11
80006010:	c1 18       	rjmp	80006032 <udd_ep_trans_done+0x8e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80006012:	76 07       	ld.w	r7,r11[0x0]
80006014:	ef d7 c1 62 	bfextu	r7,r7,0xb,0x2
80006018:	58 17       	cp.w	r7,1
8000601a:	c0 a1       	brne	8000602e <udd_ep_trans_done+0x8a>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
8000601c:	76 0b       	ld.w	r11,r11[0x0]
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
8000601e:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
80006022:	30 87       	mov	r7,8
80006024:	ee 0b 09 4b 	lsl	r11,r7,r11
80006028:	16 3a       	cp.w	r10,r11
8000602a:	e0 8b 00 04 	brhi	80006032 <udd_ep_trans_done+0x8e>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
8000602e:	e8 1e 00 14 	orl	lr,0x14
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80006032:	f2 0b 15 04 	lsl	r11,r9,0x4
80006036:	e0 3b fd 00 	sub	r11,130304
8000603a:	70 16       	ld.w	r6,r8[0x4]
8000603c:	70 37       	ld.w	r7,r8[0xc]
8000603e:	ec 07 00 07 	add	r7,r6,r7
80006042:	97 17       	st.w	r11[0x4],r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006044:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
80006048:	d3 03       	ssrf	0x10
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
8000604a:	76 37       	ld.w	r7,r11[0xc]
8000604c:	e2 17 00 10 	andl	r7,0x10,COH
80006050:	c1 51       	brne	8000607a <udd_ep_trans_done+0xd6>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80006052:	e8 1e 00 21 	orl	lr,0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
80006056:	97 2e       	st.w	r11[0x8],lr
			ptr_job->nb_trans += next_trans;
80006058:	70 39       	ld.w	r9,r8[0xc]
8000605a:	f2 0a 00 0a 	add	r10,r9,r10
8000605e:	91 3a       	st.w	r8[0xc],r10
			udd_enable_endpoint_dma_interrupt(ep);
80006060:	20 1c       	sub	r12,1
80006062:	30 08       	mov	r8,0
80006064:	ea 18 02 00 	orh	r8,0x200
80006068:	f0 0c 09 4c 	lsl	r12,r8,r12
8000606c:	fe 68 00 00 	mov	r8,-131072
80006070:	91 6c       	st.w	r8[0x18],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006072:	e3 b6 00 00 	mtsr	0x0,r6
#endif
	barrier();
80006076:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000607a:	e3 b6 00 00 	mtsr	0x0,r6
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
8000607e:	70 3a       	ld.w	r10,r8[0xc]
80006080:	91 2a       	st.w	r8[0x8],r10
	}
	if (Is_udd_endpoint_in(ep)) {
80006082:	a3 69       	lsl	r9,0x2
80006084:	fe 6b 01 00 	mov	r11,-130816
80006088:	f2 0b 00 0a 	add	r10,r9,r11
8000608c:	74 0a       	ld.w	r10,r10[0x0]
8000608e:	e2 1a 01 00 	andl	r10,0x100,COH
80006092:	c2 60       	breq	800060de <udd_ep_trans_done+0x13a>
		if (ptr_job->b_shortpacket) {
80006094:	70 0a       	ld.w	r10,r8[0x0]
80006096:	e6 1a 40 00 	andh	r10,0x4000,COH
8000609a:	c2 20       	breq	800060de <udd_ep_trans_done+0x13a>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
8000609c:	fe 6a 01 60 	mov	r10,-130720
800060a0:	f2 0a 00 08 	add	r8,r9,r10
800060a4:	30 1a       	mov	r10,1
800060a6:	91 0a       	st.w	r8[0x0],r10
			if (Is_udd_write_enabled(ep)) {
800060a8:	fe 6b 01 30 	mov	r11,-130768
800060ac:	f2 0b 00 08 	add	r8,r9,r11
800060b0:	70 08       	ld.w	r8,r8[0x0]
800060b2:	e6 18 00 01 	andh	r8,0x1,COH
800060b6:	c0 70       	breq	800060c4 <udd_ep_trans_done+0x120>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
800060b8:	fe 6a 01 90 	mov	r10,-130672
800060bc:	f2 0a 00 08 	add	r8,r9,r10
800060c0:	30 1a       	mov	r10,1
800060c2:	91 0a       	st.w	r8[0x0],r10
			}
			udd_enable_in_send_interrupt(ep);
800060c4:	e0 39 fe 10 	sub	r9,130576
800060c8:	30 18       	mov	r8,1
800060ca:	93 08       	st.w	r9[0x0],r8
			udd_enable_endpoint_interrupt(ep);
800060cc:	e0 68 10 00 	mov	r8,4096
800060d0:	f0 0c 09 4c 	lsl	r12,r8,r12
800060d4:	fe 68 00 00 	mov	r8,-131072
800060d8:	91 6c       	st.w	r8[0x18],r12
			return;
800060da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false);
800060de:	30 0b       	mov	r11,0
800060e0:	10 9c       	mov	r12,r8
800060e2:	f0 1f 00 04 	mcall	800060f0 <udd_ep_trans_done+0x14c>
800060e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800060ea:	00 00       	add	r0,r0
800060ec:	00 00       	add	r0,r0
800060ee:	04 20       	rsub	r0,r2
800060f0:	80 00       	ld.sh	r0,r0[0x0]
800060f2:	5b 98       	cp.w	r8,-7

800060f4 <udd_interrupt>:
void udd_interrupt(void);
void udd_interrupt(void)
#else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#endif
{
800060f4:	eb cd 40 f8 	pushm	r3-r7,lr
	if (Is_udd_sof()) {
800060f8:	fe 68 00 04 	mov	r8,-131068
800060fc:	70 08       	ld.w	r8,r8[0x0]
800060fe:	e2 18 00 04 	andl	r8,0x4,COH
80006102:	c1 10       	breq	80006124 <udd_interrupt+0x30>
		udd_ack_sof();
80006104:	30 49       	mov	r9,4
80006106:	fe 68 00 08 	mov	r8,-131064
8000610a:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
8000610c:	fe 68 08 04 	mov	r8,-129020
80006110:	70 08       	ld.w	r8,r8[0x0]
80006112:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80006116:	c0 31       	brne	8000611c <udd_interrupt+0x28>
			udc_sof_notify();
80006118:	f0 1f 01 6e 	mcall	800066d0 <udd_interrupt+0x5dc>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
8000611c:	f0 1f 01 6e 	mcall	800066d4 <udd_interrupt+0x5e0>
#endif
		goto udd_interrupt_end;
80006120:	e0 8f 02 c6 	bral	800066ac <udd_interrupt+0x5b8>
	}
	if (Is_udd_msof()) {
80006124:	fe 68 00 04 	mov	r8,-131068
80006128:	70 08       	ld.w	r8,r8[0x0]
8000612a:	e2 18 00 02 	andl	r8,0x2,COH
8000612e:	c0 90       	breq	80006140 <udd_interrupt+0x4c>
		udd_ack_msof();
80006130:	30 29       	mov	r9,2
80006132:	fe 68 00 08 	mov	r8,-131064
80006136:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80006138:	f0 1f 01 66 	mcall	800066d0 <udd_interrupt+0x5dc>
		goto udd_interrupt_end;
8000613c:	e0 8f 02 b8 	bral	800066ac <udd_interrupt+0x5b8>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
80006140:	fe 68 00 00 	mov	r8,-131072
80006144:	70 18       	ld.w	r8,r8[0x4]
80006146:	e2 18 10 00 	andl	r8,0x1000,COH
8000614a:	e0 80 01 69 	breq	8000641c <udd_interrupt+0x328>
		return false; // No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
8000614e:	fe 68 02 20 	mov	r8,-130528
80006152:	31 09       	mov	r9,16
80006154:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80006156:	30 89       	mov	r9,8
80006158:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
8000615a:	fe 68 01 30 	mov	r8,-130768
8000615e:	70 08       	ld.w	r8,r8[0x0]
80006160:	e2 18 00 04 	andl	r8,0x4,COH
80006164:	c7 f0       	breq	80006262 <udd_interrupt+0x16e>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80006166:	fe f8 05 72 	ld.w	r8,pc[1394]
8000616a:	70 08       	ld.w	r8,r8[0x0]
8000616c:	58 08       	cp.w	r8,0
8000616e:	c0 50       	breq	80006178 <udd_interrupt+0x84>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80006170:	f0 1f 01 5b 	mcall	800066dc <udd_interrupt+0x5e8>

		// Reinitializes control endpoint management
		udd_ctrl_init();
80006174:	f0 1f 01 5b 	mcall	800066e0 <udd_interrupt+0x5ec>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80006178:	fe 68 01 30 	mov	r8,-130768
8000617c:	70 08       	ld.w	r8,r8[0x0]
8000617e:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80006182:	58 88       	cp.w	r8,8
80006184:	c0 90       	breq	80006196 <udd_interrupt+0xa2>
		udd_ctrl_stall_data();
80006186:	f0 1f 01 58 	mcall	800066e4 <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
8000618a:	30 49       	mov	r9,4
8000618c:	fe 68 01 60 	mov	r8,-130720
80006190:	91 09       	st.w	r8[0x0],r9
80006192:	e0 8f 02 8d 	bral	800066ac <udd_interrupt+0x5b8>
80006196:	30 08       	mov	r8,0
80006198:	ea 18 d0 00 	orh	r8,0xd000
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
8000619c:	fe fc 05 4c 	ld.w	r12,pc[1356]
800061a0:	30 0b       	mov	r11,0
800061a2:	ea 1b 30 00 	orh	r11,0x3000
800061a6:	f0 0c 00 09 	add	r9,r8,r12
800061aa:	11 3a       	ld.ub	r10,r8++
800061ac:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
800061b0:	30 8a       	mov	r10,8
800061b2:	ea 1a d0 00 	orh	r10,0xd000
800061b6:	14 38       	cp.w	r8,r10
800061b8:	cf 71       	brne	800061a6 <udd_interrupt+0xb2>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
800061ba:	fe f8 05 2e 	ld.w	r8,pc[1326]
800061be:	90 19       	ld.sh	r9,r8[0x2]
800061c0:	5c c9       	swap.bh	r9
800061c2:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
800061c4:	90 29       	ld.sh	r9,r8[0x4]
800061c6:	5c c9       	swap.bh	r9
800061c8:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
800061ca:	90 39       	ld.sh	r9,r8[0x6]
800061cc:	5c c9       	swap.bh	r9
800061ce:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
800061d0:	f0 1f 01 47 	mcall	800066ec <udd_interrupt+0x5f8>
800061d4:	c0 91       	brne	800061e6 <udd_interrupt+0xf2>
		// Setup request unknow then stall it
		udd_ctrl_stall_data();
800061d6:	f0 1f 01 44 	mcall	800066e4 <udd_interrupt+0x5f0>
		udd_ack_setup_received(0);
800061da:	30 49       	mov	r9,4
800061dc:	fe 68 01 60 	mov	r8,-130720
800061e0:	91 09       	st.w	r8[0x0],r9
800061e2:	e0 8f 02 65 	bral	800066ac <udd_interrupt+0x5b8>
		return;
	}
	udd_ack_setup_received(0);
800061e6:	30 49       	mov	r9,4
800061e8:	fe 68 01 60 	mov	r8,-130720
800061ec:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
800061ee:	fe f8 04 fa 	ld.w	r8,pc[1274]
800061f2:	11 89       	ld.ub	r9,r8[0x0]
800061f4:	30 08       	mov	r8,0
800061f6:	f0 09 18 00 	cp.b	r9,r8
800061fa:	c1 04       	brge	8000621a <udd_interrupt+0x126>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800061fc:	30 08       	mov	r8,0
800061fe:	fe f9 04 f2 	ld.w	r9,pc[1266]
80006202:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80006204:	fe f9 04 f0 	ld.w	r9,pc[1264]
80006208:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
8000620a:	30 29       	mov	r9,2
8000620c:	fe f8 04 cc 	ld.w	r8,pc[1228]
80006210:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
80006212:	f0 1f 01 3a 	mcall	800066f8 <udd_interrupt+0x604>
80006216:	e0 8f 02 4b 	bral	800066ac <udd_interrupt+0x5b8>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
8000621a:	fe f8 04 ce 	ld.w	r8,pc[1230]
8000621e:	90 39       	ld.sh	r9,r8[0x6]
80006220:	30 08       	mov	r8,0
80006222:	f0 09 19 00 	cp.h	r9,r8
80006226:	c0 51       	brne	80006230 <udd_interrupt+0x13c>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80006228:	f0 1f 01 35 	mcall	800066fc <udd_interrupt+0x608>
8000622c:	e0 8f 02 40 	bral	800066ac <udd_interrupt+0x5b8>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80006230:	30 08       	mov	r8,0
80006232:	fe f9 04 be 	ld.w	r9,pc[1214]
80006236:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80006238:	fe f9 04 bc 	ld.w	r9,pc[1212]
8000623c:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
8000623e:	30 19       	mov	r9,1
80006240:	fe f8 04 98 	ld.w	r8,pc[1176]
80006244:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80006246:	31 08       	mov	r8,16
80006248:	fe 69 01 60 	mov	r9,-130720
8000624c:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000624e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80006252:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80006254:	fe 6a 01 f0 	mov	r10,-130576
80006258:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000625a:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
8000625e:	e0 8f 02 27 	bral	800066ac <udd_interrupt+0x5b8>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80006262:	fe 68 01 30 	mov	r8,-130768
80006266:	70 08       	ld.w	r8,r8[0x0]
80006268:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000626c:	c0 b0       	breq	80006282 <udd_interrupt+0x18e>
8000626e:	fe 68 01 c0 	mov	r8,-130624
80006272:	70 08       	ld.w	r8,r8[0x0]
80006274:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006278:	c0 50       	breq	80006282 <udd_interrupt+0x18e>
		// IN packet sent
		udd_ctrl_in_sent();
8000627a:	f0 1f 01 20 	mcall	800066f8 <udd_interrupt+0x604>
8000627e:	e0 8f 02 17 	bral	800066ac <udd_interrupt+0x5b8>
		return true;
	}
	if (Is_udd_out_received(0)) {
80006282:	fe 68 01 30 	mov	r8,-130768
80006286:	70 08       	ld.w	r8,r8[0x0]
80006288:	e2 18 00 02 	andl	r8,0x2,COH
8000628c:	e0 80 00 a5 	breq	800063d6 <udd_interrupt+0x2e2>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80006290:	fe f8 04 48 	ld.w	r8,pc[1096]
80006294:	70 08       	ld.w	r8,r8[0x0]
80006296:	58 18       	cp.w	r8,1
80006298:	c1 10       	breq	800062ba <udd_interrupt+0x1c6>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
8000629a:	58 28       	cp.w	r8,2
8000629c:	5f 09       	sreq	r9
8000629e:	58 48       	cp.w	r8,4
800062a0:	5f 08       	sreq	r8
800062a2:	f3 e8 10 08 	or	r8,r9,r8
800062a6:	c0 40       	breq	800062ae <udd_interrupt+0x1ba>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quiclky,
			// - or ZLP OUT received normaly.
			udd_ctrl_endofrequest();
800062a8:	f0 1f 01 0d 	mcall	800066dc <udd_interrupt+0x5e8>
800062ac:	c0 38       	rjmp	800062b2 <udd_interrupt+0x1be>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
800062ae:	f0 1f 01 0e 	mcall	800066e4 <udd_interrupt+0x5f0>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
800062b2:	f0 1f 01 0c 	mcall	800066e0 <udd_interrupt+0x5ec>
800062b6:	e0 8f 01 fb 	bral	800066ac <udd_interrupt+0x5b8>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
800062ba:	fe 68 01 30 	mov	r8,-130768
800062be:	70 0b       	ld.w	r11,r8[0x0]
800062c0:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
800062c4:	fe f8 04 24 	ld.w	r8,pc[1060]
800062c8:	90 69       	ld.sh	r9,r8[0xc]
800062ca:	fe f8 04 2a 	ld.w	r8,pc[1066]
800062ce:	90 08       	ld.sh	r8,r8[0x0]
800062d0:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
800062d4:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800062d8:	f6 0a 00 0a 	add	r10,r11,r10
800062dc:	14 3c       	cp.w	r12,r10
800062de:	c0 44       	brge	800062e6 <udd_interrupt+0x1f2>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
800062e0:	10 19       	sub	r9,r8
800062e2:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800062e6:	fe f9 04 02 	ld.w	r9,pc[1026]
800062ea:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
800062ec:	58 0b       	cp.w	r11,0
800062ee:	e0 80 01 e6 	breq	800066ba <udd_interrupt+0x5c6>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800062f2:	5c 78       	castu.h	r8
800062f4:	10 09       	add	r9,r8
800062f6:	30 08       	mov	r8,0
800062f8:	ea 18 d0 00 	orh	r8,0xd000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
800062fc:	11 3a       	ld.ub	r10,r8++
800062fe:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80006300:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80006304:	f6 0a 19 00 	cp.h	r10,r11
80006308:	cf a3       	brcs	800062fc <udd_interrupt+0x208>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
8000630a:	fe f9 03 ea 	ld.w	r9,pc[1002]
8000630e:	92 08       	ld.sh	r8,r9[0x0]
80006310:	16 08       	add	r8,r11
80006312:	5c 88       	casts.h	r8
80006314:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80006316:	34 09       	mov	r9,64
80006318:	f2 0b 19 00 	cp.h	r11,r9
8000631c:	c0 e1       	brne	80006338 <udd_interrupt+0x244>
8000631e:	fe f9 03 ca 	ld.w	r9,pc[970]
80006322:	92 ba       	ld.uh	r10,r9[0x6]
80006324:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80006328:	fe f9 03 c8 	ld.w	r9,pc[968]
8000632c:	92 89       	ld.uh	r9,r9[0x0]
8000632e:	f6 09 00 09 	add	r9,r11,r9
80006332:	12 3a       	cp.w	r10,r9
80006334:	e0 89 00 1a 	brgt	80006368 <udd_interrupt+0x274>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediat calback
		// in case of data receiv generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80006338:	fe f9 03 b0 	ld.w	r9,pc[944]
8000633c:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
8000633e:	72 5c       	ld.w	r12,r9[0x14]
80006340:	58 0c       	cp.w	r12,0
80006342:	c0 b0       	breq	80006358 <udd_interrupt+0x264>
			if (!udd_g_ctrlreq.over_under_run()) {
80006344:	5d 1c       	icall	r12
80006346:	c0 91       	brne	80006358 <udd_interrupt+0x264>
				// Stall ZLP
				udd_ctrl_stall_data();
80006348:	f0 1f 00 e7 	mcall	800066e4 <udd_interrupt+0x5f0>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
8000634c:	30 29       	mov	r9,2
8000634e:	fe 68 01 60 	mov	r8,-130720
80006352:	91 09       	st.w	r8[0x0],r9
80006354:	e0 8f 01 ac 	bral	800066ac <udd_interrupt+0x5b8>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80006358:	30 29       	mov	r9,2
8000635a:	fe 68 01 60 	mov	r8,-130720
8000635e:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80006360:	f0 1f 00 e7 	mcall	800066fc <udd_interrupt+0x608>
80006364:	e0 8f 01 a4 	bral	800066ac <udd_interrupt+0x5b8>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80006368:	fe f9 03 80 	ld.w	r9,pc[896]
8000636c:	92 69       	ld.sh	r9,r9[0xc]
8000636e:	f0 09 19 00 	cp.h	r9,r8
80006372:	c2 31       	brne	800063b8 <udd_interrupt+0x2c4>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80006374:	fe f8 03 74 	ld.w	r8,pc[884]
80006378:	70 5c       	ld.w	r12,r8[0x14]
8000637a:	58 0c       	cp.w	r12,0
8000637c:	c0 91       	brne	8000638e <udd_interrupt+0x29a>
			// No callback availabled to request a new payload buffer
			udd_ctrl_stall_data();
8000637e:	f0 1f 00 da 	mcall	800066e4 <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80006382:	30 29       	mov	r9,2
80006384:	fe 68 01 60 	mov	r8,-130720
80006388:	91 09       	st.w	r8[0x0],r9
8000638a:	e0 8f 01 91 	bral	800066ac <udd_interrupt+0x5b8>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
8000638e:	5d 1c       	icall	r12
80006390:	c0 91       	brne	800063a2 <udd_interrupt+0x2ae>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80006392:	f0 1f 00 d5 	mcall	800066e4 <udd_interrupt+0x5f0>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80006396:	30 29       	mov	r9,2
80006398:	fe 68 01 60 	mov	r8,-130720
8000639c:	91 09       	st.w	r8[0x0],r9
8000639e:	e0 8f 01 87 	bral	800066ac <udd_interrupt+0x5b8>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
800063a2:	fe f9 03 4e 	ld.w	r9,pc[846]
800063a6:	fe f8 03 4e 	ld.w	r8,pc[846]
800063aa:	90 0b       	ld.sh	r11,r8[0x0]
800063ac:	92 0a       	ld.sh	r10,r9[0x0]
800063ae:	f6 0a 00 0a 	add	r10,r11,r10
800063b2:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
800063b4:	30 09       	mov	r9,0
800063b6:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
800063b8:	fe 69 01 60 	mov	r9,-130720
800063bc:	30 28       	mov	r8,2
800063be:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
800063c0:	31 08       	mov	r8,16
800063c2:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800063c4:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800063c8:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
800063ca:	fe 6a 01 f0 	mov	r10,-130576
800063ce:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800063d0:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
800063d4:	c6 c9       	rjmp	800066ac <udd_interrupt+0x5b8>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
800063d6:	fe 68 01 30 	mov	r8,-130768
800063da:	70 08       	ld.w	r8,r8[0x0]
800063dc:	e2 18 00 08 	andl	r8,0x8,COH
800063e0:	c1 80       	breq	80006410 <udd_interrupt+0x31c>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
800063e2:	30 89       	mov	r9,8
800063e4:	fe 68 01 60 	mov	r8,-130720
800063e8:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
800063ea:	fe 68 01 30 	mov	r8,-130768
800063ee:	70 08       	ld.w	r8,r8[0x0]
800063f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800063f4:	e0 81 01 5c 	brne	800066ac <udd_interrupt+0x5b8>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800063f8:	fe f8 02 e0 	ld.w	r8,pc[736]
800063fc:	70 08       	ld.w	r8,r8[0x0]
800063fe:	58 38       	cp.w	r8,3
80006400:	e0 81 01 56 	brne	800066ac <udd_interrupt+0x5b8>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80006404:	e8 69 00 00 	mov	r9,524288
80006408:	fe 68 01 f0 	mov	r8,-130576
8000640c:	91 09       	st.w	r8[0x0],r9
8000640e:	c4 f9       	rjmp	800066ac <udd_interrupt+0x5b8>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80006410:	fe 68 01 30 	mov	r8,-130768
80006414:	70 08       	ld.w	r8,r8[0x0]
80006416:	e2 18 00 10 	andl	r8,0x10,COH
8000641a:	c0 e1       	brne	80006436 <udd_interrupt+0x342>
8000641c:	fe fb 02 e4 	ld.w	r11,pc[740]
80006420:	fe 69 01 34 	mov	r9,-130764
80006424:	30 07       	mov	r7,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80006426:	fe 66 00 00 	mov	r6,-131072
8000642a:	30 05       	mov	r5,0
8000642c:	ea 15 02 00 	orh	r5,0x200
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80006430:	e0 64 10 00 	mov	r4,4096
80006434:	c1 e8       	rjmp	80006470 <udd_interrupt+0x37c>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80006436:	31 09       	mov	r9,16
80006438:	fe 68 01 60 	mov	r8,-130720
8000643c:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
8000643e:	fe 68 01 30 	mov	r8,-130768
80006442:	70 08       	ld.w	r8,r8[0x0]
80006444:	e2 18 00 02 	andl	r8,0x2,COH
80006448:	e0 81 01 32 	brne	800066ac <udd_interrupt+0x5b8>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
8000644c:	fe f8 02 8c 	ld.w	r8,pc[652]
80006450:	70 08       	ld.w	r8,r8[0x0]
80006452:	58 18       	cp.w	r8,1
80006454:	c0 41       	brne	8000645c <udd_interrupt+0x368>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80006456:	f0 1f 00 aa 	mcall	800066fc <udd_interrupt+0x608>
8000645a:	c2 99       	rjmp	800066ac <udd_interrupt+0x5b8>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
8000645c:	58 48       	cp.w	r8,4
8000645e:	e0 81 01 27 	brne	800066ac <udd_interrupt+0x5b8>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80006462:	e8 69 00 00 	mov	r9,524288
80006466:	fe 68 01 f0 	mov	r8,-130576
8000646a:	91 09       	st.w	r8[0x0],r9
8000646c:	c2 09       	rjmp	800066ac <udd_interrupt+0x5b8>
8000646e:	14 97       	mov	r7,r10
80006470:	ee ca ff ff 	sub	r10,r7,-1
80006474:	16 98       	mov	r8,r11
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80006476:	6c 4c       	ld.w	r12,r6[0x10]
80006478:	14 9e       	mov	lr,r10
8000647a:	ea 07 09 47 	lsl	r7,r5,r7
8000647e:	ef ec 00 0c 	and	r12,r7,r12
80006482:	c1 d0       	breq	800064bc <udd_interrupt+0x3c8>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80006484:	6c 1c       	ld.w	r12,r6[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80006486:	ef ec 00 0c 	and	r12,r7,r12
8000648a:	c1 90       	breq	800064bc <udd_interrupt+0x3c8>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
8000648c:	f4 09 15 04 	lsl	r9,r10,0x4
80006490:	e0 39 fd 00 	sub	r9,130304
80006494:	72 3a       	ld.w	r10,r9[0xc]
80006496:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
8000649a:	e0 81 01 09 	brne	800066ac <udd_interrupt+0x5b8>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
			}
			udd_disable_endpoint_dma_interrupt(ep);
8000649e:	fe 6a 00 00 	mov	r10,-131072
800064a2:	95 57       	st.w	r10[0x14],r7
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
800064a4:	72 39       	ld.w	r9,r9[0xc]
800064a6:	b1 89       	lsr	r9,0x10
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
800064a8:	c0 60       	breq	800064b4 <udd_interrupt+0x3c0>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
800064aa:	76 3a       	ld.w	r10,r11[0xc]
800064ac:	f4 09 01 09 	sub	r9,r10,r9
800064b0:	97 39       	st.w	r11[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
800064b2:	97 29       	st.w	r11[0x8],r9
			}
			udd_ep_trans_done(ep);
800064b4:	1c 9c       	mov	r12,lr
800064b6:	f0 1f 00 94 	mcall	80006704 <udd_interrupt+0x610>
800064ba:	cf 98       	rjmp	800066ac <udd_interrupt+0x5b8>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
800064bc:	6c 4c       	ld.w	r12,r6[0x10]
800064be:	e8 0e 09 4e 	lsl	lr,r4,lr
800064c2:	fd ec 00 0c 	and	r12,lr,r12
800064c6:	c4 70       	breq	80006554 <udd_interrupt+0x460>
800064c8:	e0 7c fe d0 	mov	r12,130768
800064cc:	f2 0c 00 03 	add	r3,r9,r12
800064d0:	f2 cc ff 70 	sub	r12,r9,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
800064d4:	78 07       	ld.w	r7,r12[0x0]
800064d6:	ef d7 c0 01 	bfextu	r7,r7,0x0,0x1
800064da:	c1 60       	breq	80006506 <udd_interrupt+0x412>
800064dc:	72 07       	ld.w	r7,r9[0x0]
800064de:	ef d7 c0 01 	bfextu	r7,r7,0x0,0x1
800064e2:	c1 20       	breq	80006506 <udd_interrupt+0x412>
				udd_disable_in_send_interrupt(ep);
800064e4:	fe 6a 02 20 	mov	r10,-130528
800064e8:	e6 0a 00 09 	add	r9,r3,r10
800064ec:	30 1a       	mov	r10,1
800064ee:	93 0a       	st.w	r9[0x0],r10
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
800064f0:	e0 33 fe a0 	sub	r3,130720
800064f4:	87 0a       	st.w	r3[0x0],r10
				udd_ack_fifocon(ep);
800064f6:	e0 6a 40 00 	mov	r10,16384
800064fa:	93 0a       	st.w	r9[0x0],r10
				udd_ep_finish_job(ptr_job, false);
800064fc:	30 0b       	mov	r11,0
800064fe:	10 9c       	mov	r12,r8
80006500:	f0 1f 00 82 	mcall	80006708 <udd_interrupt+0x614>
80006504:	cd 48       	rjmp	800066ac <udd_interrupt+0x5b8>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0==udd_nb_busy_bank(ep))) {
80006506:	78 0c       	ld.w	r12,r12[0x0]
80006508:	e2 1c 10 00 	andl	r12,0x1000,COH
8000650c:	c2 40       	breq	80006554 <udd_interrupt+0x460>
8000650e:	72 0c       	ld.w	r12,r9[0x0]
80006510:	f9 dc c1 82 	bfextu	r12,r12,0xc,0x2
80006514:	c2 01       	brne	80006554 <udd_interrupt+0x460>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80006516:	fe 6c 02 20 	mov	r12,-130528
8000651a:	e6 0c 00 09 	add	r9,r3,r12
8000651e:	e0 6a 10 00 	mov	r10,4096
80006522:	93 0a       	st.w	r9[0x0],r10
				udd_disable_endpoint_interrupt(ep);
80006524:	fe 69 00 00 	mov	r9,-131072
80006528:	93 5e       	st.w	r9[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
8000652a:	70 09       	ld.w	r9,r8[0x0]
8000652c:	30 0a       	mov	r10,0
8000652e:	f3 da d3 a1 	bfins	r9,r10,0x1d,0x1
80006532:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_bank_autoswitch(ep);
80006534:	fe 6a 01 00 	mov	r10,-130816
80006538:	e6 0a 00 08 	add	r8,r3,r10
8000653c:	70 09       	ld.w	r9,r8[0x0]
8000653e:	a9 d9       	cbr	r9,0x9
80006540:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
80006542:	e0 33 fe 10 	sub	r3,130576
80006546:	e8 68 00 00 	mov	r8,524288
8000654a:	87 08       	st.w	r3[0x0],r8
				udd_reset_data_toggle(ep);
8000654c:	e4 68 00 00 	mov	r8,262144
80006550:	87 08       	st.w	r3[0x0],r8
80006552:	ca d8       	rjmp	800066ac <udd_interrupt+0x5b8>
80006554:	2e cb       	sub	r11,-20
80006556:	2f c9       	sub	r9,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80006558:	58 2a       	cp.w	r10,2
8000655a:	c8 a1       	brne	8000646e <udd_interrupt+0x37a>
8000655c:	cb 38       	rjmp	800066c2 <udd_interrupt+0x5ce>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
8000655e:	30 87       	mov	r7,8
80006560:	fe 68 00 08 	mov	r8,-131064
80006564:	91 07       	st.w	r8[0x0],r7
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true);
80006566:	4e 76       	lddpc	r6,80006700 <udd_interrupt+0x60c>
80006568:	30 1b       	mov	r11,1
8000656a:	0c 9c       	mov	r12,r6
8000656c:	f0 1f 00 67 	mcall	80006708 <udd_interrupt+0x614>
80006570:	30 1b       	mov	r11,1
80006572:	ec cc ff ec 	sub	r12,r6,-20
80006576:	f0 1f 00 65 	mcall	80006708 <udd_interrupt+0x614>
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
8000657a:	f0 1f 00 65 	mcall	8000670c <udd_interrupt+0x618>
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
8000657e:	fe 68 00 00 	mov	r8,-131072
80006582:	70 09       	ld.w	r9,r8[0x0]
80006584:	e0 19 ff 80 	andl	r9,0xff80
80006588:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000658a:	70 09       	ld.w	r9,r8[0x0]
8000658c:	a7 b9       	sbr	r9,0x7
8000658e:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80006590:	fe 69 01 00 	mov	r9,-130816
80006594:	72 0a       	ld.w	r10,r9[0x0]
80006596:	34 0b       	mov	r11,64
80006598:	f6 07 0c 47 	max	r7,r11,r7
8000659c:	e0 6b 04 00 	mov	r11,1024
800065a0:	ee 0b 0d 4b 	min	r11,r7,r11
800065a4:	a1 7b       	lsl	r11,0x1
800065a6:	20 1b       	sub	r11,1
800065a8:	f6 0b 12 00 	clz	r11,r11
800065ac:	f6 0b 11 1c 	rsub	r11,r11,28
800065b0:	a5 6b       	lsl	r11,0x4
800065b2:	e2 1b 19 7c 	andl	r11,0x197c,COH
800065b6:	e0 1a e6 83 	andl	r10,0xe683
800065ba:	f7 ea 10 0a 	or	r10,r11,r10
800065be:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
800065c0:	72 0a       	ld.w	r10,r9[0x0]
800065c2:	a1 ba       	sbr	r10,0x1
800065c4:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
800065c6:	70 79       	ld.w	r9,r8[0x1c]
800065c8:	a1 a9       	sbr	r9,0x0
800065ca:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800065cc:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800065d0:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
800065d2:	fe 69 01 f0 	mov	r9,-130576
800065d6:	30 4b       	mov	r11,4
800065d8:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
800065da:	30 2b       	mov	r11,2
800065dc:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
800065de:	e0 69 10 00 	mov	r9,4096
800065e2:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800065e4:	e3 ba 00 00 	mtsr	0x0,r10
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
800065e8:	f0 1f 00 3e 	mcall	800066e0 <udd_interrupt+0x5ec>
		goto udd_interrupt_end;
800065ec:	c6 08       	rjmp	800066ac <udd_interrupt+0x5b8>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
800065ee:	fe 68 00 10 	mov	r8,-131056
800065f2:	70 08       	ld.w	r8,r8[0x0]
800065f4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800065f8:	c1 d0       	breq	80006632 <udd_interrupt+0x53e>
800065fa:	fe 68 00 04 	mov	r8,-131068
800065fe:	70 08       	ld.w	r8,r8[0x0]
80006600:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006604:	c1 70       	breq	80006632 <udd_interrupt+0x53e>
		otg_unfreeze_clock();
80006606:	fe 68 08 00 	mov	r8,-129024
8000660a:	70 09       	ld.w	r9,r8[0x0]
8000660c:	af c9       	cbr	r9,0xe
8000660e:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80006610:	30 1a       	mov	r10,1
80006612:	fe 69 00 14 	mov	r9,-131052
80006616:	93 0a       	st.w	r9[0x0],r10
		udd_enable_wake_up_interrupt();
80006618:	31 0a       	mov	r10,16
8000661a:	fe 69 00 18 	mov	r9,-131048
8000661e:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
80006620:	70 09       	ld.w	r9,r8[0x0]
80006622:	af a9       	sbr	r9,0xe
80006624:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80006626:	30 0c       	mov	r12,0
80006628:	f0 1f 00 3a 	mcall	80006710 <udd_interrupt+0x61c>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
8000662c:	f0 1f 00 3a 	mcall	80006714 <udd_interrupt+0x620>
#endif
		goto udd_interrupt_end;
80006630:	c3 e8       	rjmp	800066ac <udd_interrupt+0x5b8>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80006632:	fe 68 00 10 	mov	r8,-131056
80006636:	70 08       	ld.w	r8,r8[0x0]
80006638:	e2 18 00 10 	andl	r8,0x10,COH
8000663c:	c1 f0       	breq	8000667a <udd_interrupt+0x586>
8000663e:	fe 68 00 04 	mov	r8,-131068
80006642:	70 08       	ld.w	r8,r8[0x0]
80006644:	e2 18 00 10 	andl	r8,0x10,COH
80006648:	c1 90       	breq	8000667a <udd_interrupt+0x586>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
8000664a:	fe 68 08 00 	mov	r8,-129024
8000664e:	70 09       	ld.w	r9,r8[0x0]
80006650:	af c9       	cbr	r9,0xe
80006652:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
80006654:	fe 69 08 04 	mov	r9,-129020
80006658:	72 08       	ld.w	r8,r9[0x0]
8000665a:	e2 18 40 00 	andl	r8,0x4000,COH
8000665e:	cf d0       	breq	80006658 <udd_interrupt+0x564>

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80006660:	31 09       	mov	r9,16
80006662:	fe 68 00 14 	mov	r8,-131052
80006666:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
80006668:	30 1c       	mov	r12,1
8000666a:	fe 68 00 18 	mov	r8,-131048
8000666e:	91 0c       	st.w	r8[0x0],r12
		udd_sleep_mode(true); // Enter in IDLE mode
80006670:	f0 1f 00 28 	mcall	80006710 <udd_interrupt+0x61c>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
80006674:	f0 1f 00 29 	mcall	80006718 <udd_interrupt+0x624>
#endif
		goto udd_interrupt_end;
80006678:	c1 a8       	rjmp	800066ac <udd_interrupt+0x5b8>
	}

	if (Is_otg_vbus_transition()) {
8000667a:	fe 68 08 04 	mov	r8,-129020
8000667e:	70 08       	ld.w	r8,r8[0x0]
80006680:	e2 18 00 02 	andl	r8,0x2,COH
80006684:	c1 40       	breq	800066ac <udd_interrupt+0x5b8>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
80006686:	fe 68 08 00 	mov	r8,-129024
8000668a:	70 09       	ld.w	r9,r8[0x0]
8000668c:	af c9       	cbr	r9,0xe
8000668e:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80006690:	30 2a       	mov	r10,2
80006692:	fe 69 08 08 	mov	r9,-129016
80006696:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock();
80006698:	70 09       	ld.w	r9,r8[0x0]
8000669a:	af a9       	sbr	r9,0xe
8000669c:	91 09       	st.w	r8[0x0],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
8000669e:	fe 68 08 04 	mov	r8,-129020
800066a2:	70 0c       	ld.w	r12,r8[0x0]
800066a4:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
800066a8:	f0 1f 00 1d 	mcall	8000671c <udd_interrupt+0x628>
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
800066ac:	fe 68 00 00 	mov	r8,-131072
800066b0:	f0 f8 08 18 	ld.w	r8,r8[2072]
	return;
}
800066b4:	e3 cd 40 f8 	ldm	sp++,r3-r7,lr
800066b8:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
800066ba:	48 f9       	lddpc	r9,800066f4 <udd_interrupt+0x600>
800066bc:	b2 08       	st.h	r9[0x0],r8
800066be:	fe 9f fe 3d 	bral	80006338 <udd_interrupt+0x244>
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
800066c2:	fe 68 00 04 	mov	r8,-131068
800066c6:	70 08       	ld.w	r8,r8[0x0]
800066c8:	e2 18 00 08 	andl	r8,0x8,COH
800066cc:	c9 10       	breq	800065ee <udd_interrupt+0x4fa>
800066ce:	c4 8b       	rjmp	8000655e <udd_interrupt+0x46a>
800066d0:	80 00       	ld.sh	r0,r0[0x0]
800066d2:	6b c4       	ld.w	r4,r5[0x70]
800066d4:	80 00       	ld.sh	r0,r0[0x0]
800066d6:	73 98       	ld.w	r8,r9[0x64]
800066d8:	00 00       	add	r0,r0
800066da:	04 4c       	or	r12,r2
800066dc:	80 00       	ld.sh	r0,r0[0x0]
800066de:	5b 84       	cp.w	r4,-8
800066e0:	80 00       	ld.sh	r0,r0[0x0]
800066e2:	5e 5c       	retlt	r12
800066e4:	80 00       	ld.sh	r0,r0[0x0]
800066e6:	5b 6c       	cp.w	r12,-10
800066e8:	00 00       	add	r0,r0
800066ea:	09 90       	ld.ub	r0,r4[0x1]
800066ec:	80 00       	ld.sh	r0,r0[0x0]
800066ee:	6e 40       	ld.w	r0,r7[0x10]
800066f0:	00 00       	add	r0,r0
800066f2:	04 1c       	sub	r12,r2
800066f4:	00 00       	add	r0,r0
800066f6:	04 4a       	or	r10,r2
800066f8:	80 00       	ld.sh	r0,r0[0x0]
800066fa:	5e 90       	retgt	r0
800066fc:	80 00       	ld.sh	r0,r0[0x0]
800066fe:	5e 30       	retlo	r0
80006700:	00 00       	add	r0,r0
80006702:	04 20       	rsub	r0,r2
80006704:	80 00       	ld.sh	r0,r0[0x0]
80006706:	5f a4       	srle	r4
80006708:	80 00       	ld.sh	r0,r0[0x0]
8000670a:	5b 98       	cp.w	r8,-7
8000670c:	80 00       	ld.sh	r0,r0[0x0]
8000670e:	6d e4       	ld.w	r4,r6[0x78]
80006710:	80 00       	ld.sh	r0,r0[0x0]
80006712:	5d 48       	*unknown*
80006714:	80 00       	ld.sh	r0,r0[0x0]
80006716:	72 f8       	ld.w	r8,r9[0x3c]
80006718:	80 00       	ld.sh	r0,r0[0x0]
8000671a:	72 fa       	ld.w	r10,r9[0x3c]
8000671c:	80 00       	ld.sh	r0,r0[0x0]
8000671e:	73 c0       	ld.w	r0,r9[0x70]

80006720 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80006720:	eb cd 40 e0 	pushm	r5-r7,lr
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
80006724:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep) {
80006728:	30 27       	mov	r7,2
8000672a:	ee 0c 18 00 	cp.b	r12,r7
8000672e:	e0 8b 00 3d 	brhi	800067a8 <udd_ep_run+0x88>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80006732:	fe 6e 00 00 	mov	lr,-131072
80006736:	7c 7e       	ld.w	lr,lr[0x1c]
80006738:	18 96       	mov	r6,r12
8000673a:	30 17       	mov	r7,1
8000673c:	ee 0c 09 47 	lsl	r7,r7,r12
80006740:	1c 67       	and	r7,lr
80006742:	c3 30       	breq	800067a8 <udd_ep_run+0x88>
			|| Is_udd_endpoint_stall_requested(ep)
80006744:	f8 0e 15 02 	lsl	lr,r12,0x2
80006748:	e0 3e fe 40 	sub	lr,130624
8000674c:	7c 0e       	ld.w	lr,lr[0x0]
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
8000674e:	e6 1e 00 08 	andh	lr,0x8,COH
80006752:	c2 b1       	brne	800067a8 <udd_ep_run+0x88>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
80006754:	20 1c       	sub	r12,1
80006756:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
8000675a:	49 57       	lddpc	r7,800067ac <udd_ep_run+0x8c>
8000675c:	ee 0c 00 2e 	add	lr,r7,r12<<0x2

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
80006760:	7c 0c       	ld.w	r12,lr[0x0]
80006762:	e6 1c 20 00 	andh	r12,0x2000,COH
80006766:	c2 11       	brne	800067a8 <udd_ep_run+0x88>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006768:	e1 bc 00 00 	mfsr	r12,0x0
	cpu_irq_disable();
8000676c:	d3 03       	ssrf	0x10
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
8000676e:	7c 07       	ld.w	r7,lr[0x0]
80006770:	58 07       	cp.w	r7,0
80006772:	c0 54       	brge	8000677c <udd_ep_run+0x5c>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006774:	e3 bc 00 00 	mtsr	0x0,r12
#endif
	barrier();
80006778:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
8000677c:	7c 05       	ld.w	r5,lr[0x0]
8000677e:	30 17       	mov	r7,1
80006780:	eb d7 d3 e1 	bfins	r5,r7,0x1f,0x1
80006784:	9d 05       	st.w	lr[0x0],r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006786:	e3 bc 00 00 	mtsr	0x0,r12
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
8000678a:	9d 1a       	st.w	lr[0x4],r10
	ptr_job->buf_size = buf_size;
8000678c:	9d 29       	st.w	lr[0x8],r9
	ptr_job->nb_trans = 0;
8000678e:	30 09       	mov	r9,0
80006790:	9d 39       	st.w	lr[0xc],r9
	ptr_job->call_trans = callback;
80006792:	9d 48       	st.w	lr[0x10],r8
	ptr_job->b_shortpacket = b_shortpacket;
80006794:	7c 08       	ld.w	r8,lr[0x0]
80006796:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
8000679a:	9d 08       	st.w	lr[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
8000679c:	0c 9c       	mov	r12,r6
8000679e:	f0 1f 00 05 	mcall	800067b0 <udd_ep_run+0x90>
800067a2:	0e 9c       	mov	r12,r7
	return true;
800067a4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800067a8:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800067ac:	00 00       	add	r0,r0
800067ae:	04 20       	rsub	r0,r2
800067b0:	80 00       	ld.sh	r0,r0[0x0]
800067b2:	5f a4       	srle	r4

800067b4 <udd_enable>:
	return true;
}


void udd_enable(void)
{
800067b4:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800067b8:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
800067bc:	d3 03       	ssrf	0x10
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
800067be:	f0 1f 00 2f 	mcall	80006878 <udd_enable+0xc4>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(udd_interrupt, AVR32_USBB_IRQ, UDD_USB_INT_LEVEL);
800067c2:	30 0a       	mov	r10,0
800067c4:	e0 6b 02 20 	mov	r11,544
800067c8:	4a dc       	lddpc	r12,8000687c <udd_enable+0xc8>
800067ca:	f0 1f 00 2e 	mcall	80006880 <udd_enable+0xcc>
#if defined (__GNUC__)
__attribute__((__always_inline__))
#endif
static inline void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
800067ce:	fe 78 0c 00 	mov	r8,-62464
800067d2:	f0 f9 01 44 	ld.w	r9,r8[324]
800067d6:	a1 a9       	sbr	r9,0x0
800067d8:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
800067dc:	fe 68 08 00 	mov	r8,-129024
800067e0:	70 09       	ld.w	r9,r8[0x0]
800067e2:	b9 c9       	cbr	r9,0x18
800067e4:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
800067e6:	70 09       	ld.w	r9,r8[0x0]
800067e8:	b9 b9       	sbr	r9,0x19
800067ea:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
800067ec:	70 09       	ld.w	r9,r8[0x0]
800067ee:	ad a9       	sbr	r9,0xc
800067f0:	91 09       	st.w	r8[0x0],r9
	otg_enable();
800067f2:	70 09       	ld.w	r9,r8[0x0]
800067f4:	af b9       	sbr	r9,0xf
800067f6:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
800067f8:	70 09       	ld.w	r9,r8[0x0]
800067fa:	af c9       	cbr	r9,0xe
800067fc:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
800067fe:	70 08       	ld.w	r8,r8[0x0]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80006800:	4a 18       	lddpc	r8,80006884 <udd_enable+0xd0>
80006802:	70 09       	ld.w	r9,r8[0x0]
80006804:	30 0a       	mov	r10,0
		udd_ep_job[i].stall_requested = false;
80006806:	f3 d9 c0 1f 	bfextu	r9,r9,0x0,0x1f
8000680a:	f3 da d3 a1 	bfins	r9,r10,0x1d,0x1
8000680e:	91 09       	st.w	r8[0x0],r9

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80006810:	70 59       	ld.w	r9,r8[0x14]
		udd_ep_job[i].stall_requested = false;
80006812:	f3 d9 c0 1f 	bfextu	r9,r9,0x0,0x1f
80006816:	f3 da d3 a1 	bfins	r9,r10,0x1d,0x1
8000681a:	91 59       	st.w	r8[0x14],r9

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
8000681c:	fe 68 00 00 	mov	r8,-131072
80006820:	70 09       	ld.w	r9,r8[0x0]
80006822:	ad c9       	cbr	r9,0xc
80006824:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80006826:	70 09       	ld.w	r9,r8[0x0]
80006828:	e8 19 0c 00 	orl	r9,0xc00
8000682c:	91 09       	st.w	r8[0x0],r9
#  endif
#endif
	otg_ack_vbus_transition();
8000682e:	30 29       	mov	r9,2
80006830:	fe 68 08 08 	mov	r8,-129016
80006834:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80006836:	fe 68 08 04 	mov	r8,-129020
8000683a:	70 08       	ld.w	r8,r8[0x0]
8000683c:	e2 18 08 00 	andl	r8,0x800,COH
80006840:	c0 40       	breq	80006848 <udd_enable+0x94>
		otg_raise_vbus_transition();
80006842:	fe 68 08 0c 	mov	r8,-129012
80006846:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80006848:	fe 68 08 00 	mov	r8,-129024
8000684c:	70 09       	ld.w	r9,r8[0x0]
8000684e:	a1 b9       	sbr	r9,0x1
80006850:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80006852:	70 09       	ld.w	r9,r8[0x0]
80006854:	af a9       	sbr	r9,0xe
80006856:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80006858:	30 09       	mov	r9,0
8000685a:	48 c8       	lddpc	r8,80006888 <udd_enable+0xd4>
8000685c:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000685e:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80006862:	d3 03       	ssrf	0x10
80006864:	48 a8       	lddpc	r8,8000688c <udd_enable+0xd8>
80006866:	11 ba       	ld.ub	r10,r8[0x3]
80006868:	2f fa       	sub	r10,-1
8000686a:	b0 ba       	st.b	r8[0x3],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000686c:	e3 b9 00 00 	mtsr	0x0,r9
80006870:	e3 b7 00 00 	mtsr	0x0,r7
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
80006874:	e3 cd 80 80 	ldm	sp++,r7,pc
80006878:	80 00       	ld.sh	r0,r0[0x0]
8000687a:	6a 08       	ld.w	r8,r5[0x0]
8000687c:	80 00       	ld.sh	r0,r0[0x0]
8000687e:	60 f4       	ld.w	r4,r0[0x3c]
80006880:	80 00       	ld.sh	r0,r0[0x0]
80006882:	56 ac       	stdsp	sp[0x1a8],r12
80006884:	00 00       	add	r0,r0
80006886:	04 20       	rsub	r0,r2
80006888:	00 00       	add	r0,r0
8000688a:	04 48       	or	r8,r2
8000688c:	00 00       	add	r0,r0
8000688e:	09 a8       	ld.ub	r8,r4[0x2]

80006890 <_stext>:
80006890:	48 dd       	lddpc	sp,800068c4 <udata_clear_loop_end+0x4>
80006892:	fe c0 f0 92 	sub	r0,pc,-3950
80006896:	e3 b0 00 01 	mtsr	0x4,r0
8000689a:	d5 53       	csrf	0x15
8000689c:	48 b0       	lddpc	r0,800068c8 <udata_clear_loop_end+0x8>
8000689e:	48 c1       	lddpc	r1,800068cc <udata_clear_loop_end+0xc>
800068a0:	02 30       	cp.w	r0,r1
800068a2:	c0 62       	brcc	800068ae <idata_load_loop_end>
800068a4:	48 b2       	lddpc	r2,800068d0 <udata_clear_loop_end+0x10>

800068a6 <idata_load_loop>:
800068a6:	a5 05       	ld.d	r4,r2++
800068a8:	a1 24       	st.d	r0++,r4
800068aa:	02 30       	cp.w	r0,r1
800068ac:	cf d3       	brcs	800068a6 <idata_load_loop>

800068ae <idata_load_loop_end>:
800068ae:	48 a0       	lddpc	r0,800068d4 <udata_clear_loop_end+0x14>
800068b0:	48 a1       	lddpc	r1,800068d8 <udata_clear_loop_end+0x18>
800068b2:	02 30       	cp.w	r0,r1
800068b4:	c0 62       	brcc	800068c0 <udata_clear_loop_end>
800068b6:	30 02       	mov	r2,0
800068b8:	30 03       	mov	r3,0

800068ba <udata_clear_loop>:
800068ba:	a1 22       	st.d	r0++,r2
800068bc:	02 30       	cp.w	r0,r1
800068be:	cf e3       	brcs	800068ba <udata_clear_loop>

800068c0 <udata_clear_loop_end>:
800068c0:	fe cf f4 e4 	sub	pc,pc,-2844
800068c4:	00 00       	add	r0,r0
800068c6:	80 00       	ld.sh	r0,r0[0x0]
800068c8:	00 00       	add	r0,r0
800068ca:	00 08       	add	r8,r0
800068cc:	00 00       	add	r0,r0
800068ce:	00 f8       	st.b	--r0,r8
800068d0:	80 00       	ld.sh	r0,r0[0x0]
800068d2:	7d c0       	ld.w	r0,lr[0x70]
800068d4:	00 00       	add	r0,r0
800068d6:	00 f8       	st.b	--r0,r8
800068d8:	00 00       	add	r0,r0
800068da:	09 b8       	ld.ub	r8,r4[0x3]

800068dc <osc_enable>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800068dc:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800068e0:	d3 03       	ssrf	0x10
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();

	switch (id) {
800068e2:	58 0c       	cp.w	r12,0
800068e4:	c0 60       	breq	800068f0 <osc_enable+0x14>
800068e6:	30 29       	mov	r9,2
800068e8:	f2 0c 18 00 	cp.b	r12,r9
800068ec:	c1 01       	brne	8000690c <osc_enable+0x30>
800068ee:	c0 a8       	rjmp	80006902 <osc_enable+0x26>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800068f0:	fe 79 0c 00 	mov	r9,-62464
800068f4:	e0 6a 03 07 	mov	r10,775
800068f8:	93 aa       	st.w	r9[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800068fa:	72 0a       	ld.w	r10,r9[0x0]
800068fc:	a3 aa       	sbr	r10,0x2
800068fe:	93 0a       	st.w	r9[0x0],r10
		break;
80006900:	c0 68       	rjmp	8000690c <osc_enable+0x30>
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
		AVR32_PM.oscctrl32 = oscctrl;
80006902:	e2 6a 01 01 	mov	r10,131329
80006906:	fe 79 0c 00 	mov	r9,-62464
8000690a:	93 ca       	st.w	r9[0x30],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000690c:	e3 b8 00 00 	mtsr	0x0,r8
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
}
80006910:	5e fc       	retal	r12
80006912:	d7 03       	nop

80006914 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
80006914:	d4 01       	pushm	lr

	if (pbb_shift > 0)
		cksel |= ((pbb_shift - 1) << AVR32_PM_CKSEL_PBBSEL)
				| (1U << AVR32_PM_CKSEL_PBBDIV);

	AVR32_PM.cksel = cksel;
80006916:	fe 78 0c 00 	mov	r8,-62464
8000691a:	30 09       	mov	r9,0
8000691c:	ea 19 00 80 	orh	r9,0x80
80006920:	91 19       	st.w	r8[0x4],r9

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80006922:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
80006924:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006928:	c2 21       	brne	8000696c <sysclk_init+0x58>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
8000692a:	fe 78 0c 00 	mov	r8,-62464
8000692e:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80006930:	e2 18 00 80 	andl	r8,0x80,COH
80006934:	c0 a1       	brne	80006948 <sysclk_init+0x34>
			osc_enable(OSC_ID_OSC0);
80006936:	30 0c       	mov	r12,0
80006938:	f0 1f 00 17 	mcall	80006994 <sysclk_init+0x80>
8000693c:	fe 79 0c 00 	mov	r9,-62464
80006940:	73 58       	ld.w	r8,r9[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
80006942:	e2 18 00 80 	andl	r8,0x80,COH
80006946:	cf d0       	breq	80006940 <sysclk_init+0x2c>
	cfg->ctrl = 0;

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
		mul *= 2;
		vco_hz *= 2;
80006948:	30 88       	mov	r8,8
static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
8000694a:	a3 a8       	sbr	r8,0x2
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
8000694c:	31 09       	mov	r9,16
8000694e:	20 19       	sub	r9,1
80006950:	b1 69       	lsl	r9,0x10
80006952:	ea 19 3f 00 	orh	r9,0x3f00
80006956:	e8 19 02 01 	orl	r9,0x201
8000695a:	f3 e8 10 08 	or	r8,r9,r8
8000695e:	fe 79 0c 00 	mov	r9,-62464
80006962:	93 88       	st.w	r9[0x20],r8

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80006964:	73 58       	ld.w	r8,r9[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80006966:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000696a:	cf d0       	breq	80006964 <sysclk_init+0x50>

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
8000696c:	e0 6c 6c 00 	mov	r12,27648
80006970:	ea 1c 02 dc 	orh	r12,0x2dc
80006974:	f0 1f 00 09 	mcall	80006998 <sysclk_init+0x84>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006978:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000697c:	d3 03       	ssrf	0x10
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
8000697e:	fe 78 0c 00 	mov	r8,-62464
80006982:	70 0a       	ld.w	r10,r8[0x0]
80006984:	e0 1a ff fc 	andl	r10,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80006988:	a1 ba       	sbr	r10,0x1
	AVR32_PM.mcctrl = mcctrl;
8000698a:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000698c:	e3 b9 00 00 	mtsr	0x0,r9

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80006990:	d8 02       	popm	pc
80006992:	00 00       	add	r0,r0
80006994:	80 00       	ld.sh	r0,r0[0x0]
80006996:	68 dc       	ld.w	r12,r4[0x34]
80006998:	80 00       	ld.sh	r0,r0[0x0]
8000699a:	55 48       	stdsp	sp[0x150],r8

8000699c <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000699c:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
800069a0:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
800069a2:	fe 78 0c 00 	mov	r8,-62464
800069a6:	71 59       	ld.w	r9,r8[0x54]
800069a8:	e2 19 00 40 	andl	r9,0x40,COH
800069ac:	cf d0       	breq	800069a6 <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800069ae:	a3 6c       	lsl	r12,0x2
800069b0:	e0 2c f3 f8 	sub	r12,62456
800069b4:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
800069b6:	30 19       	mov	r9,1
800069b8:	f2 0b 09 4b 	lsl	r11,r9,r11
800069bc:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
800069be:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800069c0:	e3 ba 00 00 	mtsr	0x0,r10

	cpu_irq_restore(flags);
}
800069c4:	5e fc       	retal	r12
800069c6:	d7 03       	nop

800069c8 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
800069c8:	eb cd 40 c0 	pushm	r6-r7,lr
800069cc:	18 97       	mov	r7,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800069ce:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
800069d2:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
800069d4:	48 b8       	lddpc	r8,80006a00 <sysclk_enable_pbb_module+0x38>
800069d6:	11 89       	ld.ub	r9,r8[0x0]
800069d8:	30 08       	mov	r8,0
800069da:	f0 09 18 00 	cp.b	r9,r8
800069de:	c0 51       	brne	800069e8 <sysclk_enable_pbb_module+0x20>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
800069e0:	30 2b       	mov	r11,2
800069e2:	30 1c       	mov	r12,1
800069e4:	f0 1f 00 08 	mcall	80006a04 <sysclk_enable_pbb_module+0x3c>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
	sysclk_pbb_refcount++;
800069e8:	48 68       	lddpc	r8,80006a00 <sysclk_enable_pbb_module+0x38>
800069ea:	11 89       	ld.ub	r9,r8[0x0]
800069ec:	2f f9       	sub	r9,-1
800069ee:	b0 89       	st.b	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800069f0:	e3 b6 00 00 	mtsr	0x0,r6

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
800069f4:	0e 9b       	mov	r11,r7
800069f6:	30 3c       	mov	r12,3
800069f8:	f0 1f 00 03 	mcall	80006a04 <sysclk_enable_pbb_module+0x3c>
}
800069fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006a00:	00 00       	add	r0,r0
80006a02:	04 50       	eor	r0,r2
80006a04:	80 00       	ld.sh	r0,r0[0x0]
80006a06:	69 9c       	ld.w	r12,r4[0x64]

80006a08 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80006a08:	d4 01       	pushm	lr
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80006a0a:	30 1c       	mov	r12,1
80006a0c:	f0 1f 00 1a 	mcall	80006a74 <sysclk_enable_usb+0x6c>
80006a10:	30 3b       	mov	r11,3
80006a12:	30 1c       	mov	r12,1
80006a14:	f0 1f 00 19 	mcall	80006a78 <sysclk_enable_usb+0x70>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80006a18:	fe 78 0c 00 	mov	r8,-62464
80006a1c:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
80006a1e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006a22:	c2 21       	brne	80006a66 <sysclk_enable_usb+0x5e>
80006a24:	fe 78 0c 00 	mov	r8,-62464
80006a28:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80006a2a:	e2 18 00 80 	andl	r8,0x80,COH
80006a2e:	c0 a1       	brne	80006a42 <sysclk_enable_usb+0x3a>
			osc_enable(OSC_ID_OSC0);
80006a30:	30 0c       	mov	r12,0
80006a32:	f0 1f 00 13 	mcall	80006a7c <sysclk_enable_usb+0x74>
80006a36:	fe 79 0c 00 	mov	r9,-62464
80006a3a:	73 58       	ld.w	r8,r9[0x54]
80006a3c:	e2 18 00 80 	andl	r8,0x80,COH
80006a40:	cf d0       	breq	80006a3a <sysclk_enable_usb+0x32>
	cfg->ctrl = 0;

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
		mul *= 2;
		vco_hz *= 2;
80006a42:	30 88       	mov	r8,8
static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
80006a44:	a3 a8       	sbr	r8,0x2
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
80006a46:	31 09       	mov	r9,16
80006a48:	20 19       	sub	r9,1
80006a4a:	b1 69       	lsl	r9,0x10
80006a4c:	ea 19 3f 00 	orh	r9,0x3f00
80006a50:	e8 19 02 01 	orl	r9,0x201
80006a54:	f3 e8 10 08 	or	r8,r9,r8
80006a58:	fe 79 0c 00 	mov	r9,-62464
80006a5c:	93 88       	st.w	r9[0x20],r8

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80006a5e:	73 58       	ld.w	r8,r9[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
80006a60:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006a64:	cf d0       	breq	80006a5e <sysclk_enable_usb+0x56>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
80006a66:	30 69       	mov	r9,6
80006a68:	fe 78 0c 00 	mov	r8,-62464
80006a6c:	f1 49 00 6c 	st.w	r8[108],r9
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
80006a70:	d8 02       	popm	pc
80006a72:	00 00       	add	r0,r0
80006a74:	80 00       	ld.sh	r0,r0[0x0]
80006a76:	69 c8       	ld.w	r8,r4[0x70]
80006a78:	80 00       	ld.sh	r0,r0[0x0]
80006a7a:	69 9c       	ld.w	r12,r4[0x64]
80006a7c:	80 00       	ld.sh	r0,r0[0x0]
80006a7e:	68 dc       	ld.w	r12,r4[0x34]

80006a80 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
80006a80:	5e ff       	retal	1
80006a82:	d7 03       	nop

80006a84 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
80006a84:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80006a86:	58 0c       	cp.w	r12,0
80006a88:	c0 20       	breq	80006a8c <mem_test_unit_ready+0x8>
80006a8a:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
80006a8c:	48 28       	lddpc	r8,80006a94 <mem_test_unit_ready+0x10>
80006a8e:	70 0c       	ld.w	r12,r8[0x0]
80006a90:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return status;
}
80006a92:	d8 02       	popm	pc
80006a94:	80 00       	ld.sh	r0,r0[0x0]
80006a96:	7c 54       	ld.w	r4,lr[0x14]

80006a98 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
80006a98:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80006a9a:	58 0c       	cp.w	r12,0
80006a9c:	c0 20       	breq	80006aa0 <mem_read_capacity+0x8>
80006a9e:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
80006aa0:	48 38       	lddpc	r8,80006aac <mem_read_capacity+0x14>
80006aa2:	70 18       	ld.w	r8,r8[0x4]
80006aa4:	16 9c       	mov	r12,r11
80006aa6:	5d 18       	icall	r8
#endif

  Ctrl_access_unlock();

  return status;
}
80006aa8:	d8 02       	popm	pc
80006aaa:	00 00       	add	r0,r0
80006aac:	80 00       	ld.sh	r0,r0[0x0]
80006aae:	7c 54       	ld.w	r4,lr[0x14]

80006ab0 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
80006ab0:	58 0c       	cp.w	r12,0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
80006ab2:	5f 0c       	sreq	r12
80006ab4:	5e fc       	retal	r12
80006ab6:	d7 03       	nop

80006ab8 <mem_wr_protect>:


bool mem_wr_protect(U8 lun)
{
80006ab8:	d4 01       	pushm	lr
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
80006aba:	58 0c       	cp.w	r12,0
80006abc:	c0 20       	breq	80006ac0 <mem_wr_protect+0x8>
80006abe:	da 0a       	popm	pc,r12=1
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
80006ac0:	48 28       	lddpc	r8,80006ac8 <mem_wr_protect+0x10>
80006ac2:	70 2c       	ld.w	r12,r8[0x8]
80006ac4:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
80006ac6:	d8 02       	popm	pc
80006ac8:	80 00       	ld.sh	r0,r0[0x0]
80006aca:	7c 54       	ld.w	r4,lr[0x14]

80006acc <mem_name>:
}


const char *mem_name(U8 lun)
{
  return
80006acc:	58 0c       	cp.w	r12,0
80006ace:	c0 20       	breq	80006ad2 <mem_name+0x6>
80006ad0:	5e fd       	retal	0
80006ad2:	48 28       	lddpc	r8,80006ad8 <mem_name+0xc>
80006ad4:	70 8c       	ld.w	r12,r8[0x20]
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
80006ad6:	5e fc       	retal	r12
80006ad8:	80 00       	ld.sh	r0,r0[0x0]
80006ada:	7c 54       	ld.w	r4,lr[0x14]

80006adc <ram_2_memory>:
  return status;
}


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
80006adc:	eb cd 40 e0 	pushm	r5-r7,lr
80006ae0:	18 97       	mov	r7,r12
80006ae2:	16 95       	mov	r5,r11
80006ae4:	14 96       	mov	r6,r10
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
80006ae6:	f0 1f 00 09 	mcall	80006b08 <ram_2_memory+0x2c>
  status =
80006aea:	58 07       	cp.w	r7,0
80006aec:	c0 30       	breq	80006af2 <ram_2_memory+0x16>
80006aee:	30 17       	mov	r7,1
80006af0:	c0 78       	rjmp	80006afe <ram_2_memory+0x22>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
80006af2:	48 78       	lddpc	r8,80006b0c <ram_2_memory+0x30>
80006af4:	70 78       	ld.w	r8,r8[0x1c]
80006af6:	0c 9b       	mov	r11,r6
80006af8:	0a 9c       	mov	r12,r5
80006afa:	5d 18       	icall	r8
80006afc:	18 97       	mov	r7,r12
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
80006afe:	f0 1f 00 05 	mcall	80006b10 <ram_2_memory+0x34>

  Ctrl_access_unlock();

  return status;
}
80006b02:	0e 9c       	mov	r12,r7
80006b04:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006b08:	80 00       	ld.sh	r0,r0[0x0]
80006b0a:	52 98       	stdsp	sp[0xa4],r8
80006b0c:	80 00       	ld.sh	r0,r0[0x0]
80006b0e:	7c 54       	ld.w	r4,lr[0x14]
80006b10:	80 00       	ld.sh	r0,r0[0x0]
80006b12:	52 74       	stdsp	sp[0x9c],r4

80006b14 <usb_2_memory>:
  return status;
}


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
80006b14:	eb cd 40 e0 	pushm	r5-r7,lr
80006b18:	18 97       	mov	r7,r12
80006b1a:	16 95       	mov	r5,r11
80006b1c:	14 96       	mov	r6,r10
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
80006b1e:	f0 1f 00 0a 	mcall	80006b44 <usb_2_memory+0x30>
  status =
80006b22:	58 07       	cp.w	r7,0
80006b24:	c0 30       	breq	80006b2a <usb_2_memory+0x16>
80006b26:	30 17       	mov	r7,1
80006b28:	c0 88       	rjmp	80006b38 <usb_2_memory+0x24>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
80006b2a:	48 88       	lddpc	r8,80006b48 <usb_2_memory+0x34>
80006b2c:	70 58       	ld.w	r8,r8[0x14]
80006b2e:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
80006b32:	0a 9c       	mov	r12,r5
80006b34:	5d 18       	icall	r8
80006b36:	18 97       	mov	r7,r12
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
80006b38:	f0 1f 00 05 	mcall	80006b4c <usb_2_memory+0x38>

  Ctrl_access_unlock();

  return status;
}
80006b3c:	0e 9c       	mov	r12,r7
80006b3e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006b42:	00 00       	add	r0,r0
80006b44:	80 00       	ld.sh	r0,r0[0x0]
80006b46:	52 98       	stdsp	sp[0xa4],r8
80006b48:	80 00       	ld.sh	r0,r0[0x0]
80006b4a:	7c 54       	ld.w	r4,lr[0x14]
80006b4c:	80 00       	ld.sh	r0,r0[0x0]
80006b4e:	52 74       	stdsp	sp[0x9c],r4

80006b50 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
80006b50:	eb cd 40 e0 	pushm	r5-r7,lr
80006b54:	18 97       	mov	r7,r12
80006b56:	16 95       	mov	r5,r11
80006b58:	14 96       	mov	r6,r10
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
80006b5a:	f0 1f 00 09 	mcall	80006b7c <memory_2_ram+0x2c>
  status =
80006b5e:	58 07       	cp.w	r7,0
80006b60:	c0 30       	breq	80006b66 <memory_2_ram+0x16>
80006b62:	30 17       	mov	r7,1
80006b64:	c0 78       	rjmp	80006b72 <memory_2_ram+0x22>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
80006b66:	48 78       	lddpc	r8,80006b80 <memory_2_ram+0x30>
80006b68:	70 68       	ld.w	r8,r8[0x18]
80006b6a:	0c 9b       	mov	r11,r6
80006b6c:	0a 9c       	mov	r12,r5
80006b6e:	5d 18       	icall	r8
80006b70:	18 97       	mov	r7,r12
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
80006b72:	f0 1f 00 05 	mcall	80006b84 <memory_2_ram+0x34>

  Ctrl_access_unlock();

  return status;
}
80006b76:	0e 9c       	mov	r12,r7
80006b78:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006b7c:	80 00       	ld.sh	r0,r0[0x0]
80006b7e:	52 ac       	stdsp	sp[0xa8],r12
80006b80:	80 00       	ld.sh	r0,r0[0x0]
80006b82:	7c 54       	ld.w	r4,lr[0x14]
80006b84:	80 00       	ld.sh	r0,r0[0x0]
80006b86:	52 88       	stdsp	sp[0xa0],r8

80006b88 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
80006b88:	eb cd 40 e0 	pushm	r5-r7,lr
80006b8c:	18 97       	mov	r7,r12
80006b8e:	16 95       	mov	r5,r11
80006b90:	14 96       	mov	r6,r10
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
80006b92:	f0 1f 00 0a 	mcall	80006bb8 <memory_2_usb+0x30>
  status =
80006b96:	58 07       	cp.w	r7,0
80006b98:	c0 30       	breq	80006b9e <memory_2_usb+0x16>
80006b9a:	30 17       	mov	r7,1
80006b9c:	c0 88       	rjmp	80006bac <memory_2_usb+0x24>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
80006b9e:	48 88       	lddpc	r8,80006bbc <memory_2_usb+0x34>
80006ba0:	70 48       	ld.w	r8,r8[0x10]
80006ba2:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
80006ba6:	0a 9c       	mov	r12,r5
80006ba8:	5d 18       	icall	r8
80006baa:	18 97       	mov	r7,r12
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
80006bac:	f0 1f 00 05 	mcall	80006bc0 <memory_2_usb+0x38>

  Ctrl_access_unlock();

  return status;
}
80006bb0:	0e 9c       	mov	r12,r7
80006bb2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006bb6:	00 00       	add	r0,r0
80006bb8:	80 00       	ld.sh	r0,r0[0x0]
80006bba:	52 ac       	stdsp	sp[0xa8],r12
80006bbc:	80 00       	ld.sh	r0,r0[0x0]
80006bbe:	7c 54       	ld.w	r4,lr[0x14]
80006bc0:	80 00       	ld.sh	r0,r0[0x0]
80006bc2:	52 88       	stdsp	sp[0xa0],r8

80006bc4 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
80006bc4:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80006bc8:	49 18       	lddpc	r8,80006c0c <udc_sof_notify+0x48>
80006bca:	11 89       	ld.ub	r9,r8[0x0]
80006bcc:	30 08       	mov	r8,0
80006bce:	f0 09 18 00 	cp.b	r9,r8
80006bd2:	c1 b0       	breq	80006c08 <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80006bd4:	48 f8       	lddpc	r8,80006c10 <udc_sof_notify+0x4c>
80006bd6:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80006bd8:	70 09       	ld.w	r9,r8[0x0]
80006bda:	13 ca       	ld.ub	r10,r9[0x4]
80006bdc:	30 09       	mov	r9,0
80006bde:	f2 0a 18 00 	cp.b	r10,r9
80006be2:	c1 30       	breq	80006c08 <udc_sof_notify+0x44>
80006be4:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80006be6:	48 b6       	lddpc	r6,80006c10 <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
80006be8:	70 18       	ld.w	r8,r8[0x4]
80006bea:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80006bee:	70 48       	ld.w	r8,r8[0x10]
80006bf0:	58 08       	cp.w	r8,0
80006bf2:	c0 20       	breq	80006bf6 <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
80006bf4:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80006bf6:	2f f7       	sub	r7,-1
80006bf8:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80006bfa:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80006bfc:	70 09       	ld.w	r9,r8[0x0]
80006bfe:	13 c9       	ld.ub	r9,r9[0x4]
80006c00:	ee 09 18 00 	cp.b	r9,r7
80006c04:	fe 9b ff f2 	brhi	80006be8 <udc_sof_notify+0x24>
80006c08:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006c0c:	00 00       	add	r0,r0
80006c0e:	04 5a       	eor	r10,r2
80006c10:	00 00       	add	r0,r0
80006c12:	04 54       	eor	r4,r2

80006c14 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80006c14:	48 78       	lddpc	r8,80006c30 <udc_get_eof_conf+0x1c>
80006c16:	70 08       	ld.w	r8,r8[0x0]
80006c18:	70 08       	ld.w	r8,r8[0x0]
80006c1a:	11 aa       	ld.ub	r10,r8[0x2]
80006c1c:	11 b9       	ld.ub	r9,r8[0x3]
80006c1e:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80006c22:	5c c9       	swap.bh	r9
80006c24:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
80006c28:	f0 0c 00 0c 	add	r12,r8,r12
80006c2c:	5e fc       	retal	r12
80006c2e:	00 00       	add	r0,r0
80006c30:	00 00       	add	r0,r0
80006c32:	04 54       	eor	r4,r2

80006c34 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80006c34:	eb cd 40 e0 	pushm	r5-r7,lr
80006c38:	18 97       	mov	r7,r12
80006c3a:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80006c3c:	49 b8       	lddpc	r8,80006ca8 <udc_update_iface_desc+0x74>
80006c3e:	11 89       	ld.ub	r9,r8[0x0]
80006c40:	30 08       	mov	r8,0
80006c42:	f0 09 18 00 	cp.b	r9,r8
80006c46:	c2 f0       	breq	80006ca4 <udc_update_iface_desc+0x70>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80006c48:	49 98       	lddpc	r8,80006cac <udc_update_iface_desc+0x78>
80006c4a:	70 08       	ld.w	r8,r8[0x0]
80006c4c:	70 08       	ld.w	r8,r8[0x0]
80006c4e:	11 c9       	ld.ub	r9,r8[0x4]
80006c50:	18 9e       	mov	lr,r12
80006c52:	f8 09 18 00 	cp.b	r9,r12
80006c56:	e0 88 00 27 	brls	80006ca4 <udc_update_iface_desc+0x70>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80006c5a:	49 65       	lddpc	r5,80006cb0 <udc_update_iface_desc+0x7c>
80006c5c:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
80006c5e:	f0 1f 00 16 	mcall	80006cb4 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
80006c62:	6a 08       	ld.w	r8,r5[0x0]
80006c64:	10 3c       	cp.w	r12,r8
80006c66:	e0 88 00 1f 	brls	80006ca4 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80006c6a:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80006c6c:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80006c6e:	11 9a       	ld.ub	r10,r8[0x1]
80006c70:	f6 0a 18 00 	cp.b	r10,r11
80006c74:	c0 a1       	brne	80006c88 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
80006c76:	11 aa       	ld.ub	r10,r8[0x2]
80006c78:	0e 9e       	mov	lr,r7
80006c7a:	ee 0a 18 00 	cp.b	r10,r7
80006c7e:	c0 51       	brne	80006c88 <udc_update_iface_desc+0x54>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
80006c80:	11 ba       	ld.ub	r10,r8[0x3]
80006c82:	ec 0a 18 00 	cp.b	r10,r6
80006c86:	c0 b0       	breq	80006c9c <udc_update_iface_desc+0x68>
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
80006c88:	13 88       	ld.ub	r8,r9[0x0]
80006c8a:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80006c8e:	10 3c       	cp.w	r12,r8
80006c90:	fe 9b ff ee 	brhi	80006c6c <udc_update_iface_desc+0x38>
80006c94:	48 79       	lddpc	r9,80006cb0 <udc_update_iface_desc+0x7c>
80006c96:	93 08       	st.w	r9[0x0],r8
80006c98:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80006c9c:	48 59       	lddpc	r9,80006cb0 <udc_update_iface_desc+0x7c>
80006c9e:	93 08       	st.w	r9[0x0],r8
80006ca0:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80006ca4:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80006ca8:	00 00       	add	r0,r0
80006caa:	04 5a       	eor	r10,r2
80006cac:	00 00       	add	r0,r0
80006cae:	04 54       	eor	r4,r2
80006cb0:	00 00       	add	r0,r0
80006cb2:	04 5c       	eor	r12,r2
80006cb4:	80 00       	ld.sh	r0,r0[0x0]
80006cb6:	6c 14       	ld.w	r4,r6[0x4]

80006cb8 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
80006cb8:	eb cd 40 c0 	pushm	r6-r7,lr
80006cbc:	18 96       	mov	r6,r12
80006cbe:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
80006cc0:	f0 1f 00 11 	mcall	80006d04 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80006cc4:	0d 88       	ld.ub	r8,r6[0x0]
80006cc6:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80006cc8:	0c 3c       	cp.w	r12,r6
80006cca:	e0 88 00 19 	brls	80006cfc <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80006cce:	0d 98       	ld.ub	r8,r6[0x1]
80006cd0:	30 49       	mov	r9,4
80006cd2:	f2 08 18 00 	cp.b	r8,r9
80006cd6:	c1 30       	breq	80006cfc <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80006cd8:	ee 08 18 00 	cp.b	r8,r7
80006cdc:	c0 a1       	brne	80006cf0 <udc_next_desc_in_iface+0x38>
80006cde:	c1 08       	rjmp	80006cfe <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80006ce0:	0d 98       	ld.ub	r8,r6[0x1]
80006ce2:	f2 08 18 00 	cp.b	r8,r9
80006ce6:	c0 b0       	breq	80006cfc <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80006ce8:	ee 08 18 00 	cp.b	r8,r7
80006cec:	c0 31       	brne	80006cf2 <udc_next_desc_in_iface+0x3a>
80006cee:	c0 88       	rjmp	80006cfe <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80006cf0:	30 49       	mov	r9,4
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80006cf2:	0d 88       	ld.ub	r8,r6[0x0]
80006cf4:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80006cf6:	0c 3c       	cp.w	r12,r6
80006cf8:	fe 9b ff f4 	brhi	80006ce0 <udc_next_desc_in_iface+0x28>
80006cfc:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
80006cfe:	0c 9c       	mov	r12,r6
80006d00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006d04:	80 00       	ld.sh	r0,r0[0x0]
80006d06:	6c 14       	ld.w	r4,r6[0x4]

80006d08 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80006d08:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
80006d0a:	48 48       	lddpc	r8,80006d18 <udc_valid_address+0x10>
80006d0c:	11 bc       	ld.ub	r12,r8[0x3]
80006d0e:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80006d12:	f0 1f 00 03 	mcall	80006d1c <udc_valid_address+0x14>
}
80006d16:	d8 02       	popm	pc
80006d18:	00 00       	add	r0,r0
80006d1a:	09 90       	ld.ub	r0,r4[0x1]
80006d1c:	80 00       	ld.sh	r0,r0[0x0]
80006d1e:	59 bc       	cp.w	r12,27

80006d20 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80006d20:	eb cd 40 e0 	pushm	r5-r7,lr
80006d24:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
80006d26:	f0 1f 00 12 	mcall	80006d6c <udc_iface_enable+0x4c>
80006d2a:	c1 f0       	breq	80006d68 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80006d2c:	49 18       	lddpc	r8,80006d70 <udc_iface_enable+0x50>
80006d2e:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80006d30:	30 56       	mov	r6,5
80006d32:	0c 9b       	mov	r11,r6
80006d34:	0e 9c       	mov	r12,r7
80006d36:	f0 1f 00 10 	mcall	80006d74 <udc_iface_enable+0x54>
80006d3a:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80006d3c:	c0 d0       	breq	80006d56 <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
80006d3e:	19 ca       	ld.ub	r10,r12[0x4]
80006d40:	19 d8       	ld.ub	r8,r12[0x5]
80006d42:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
80006d46:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80006d48:	5c 7a       	castu.h	r10
80006d4a:	19 bb       	ld.ub	r11,r12[0x3]
80006d4c:	19 ac       	ld.ub	r12,r12[0x2]
80006d4e:	f0 1f 00 0b 	mcall	80006d78 <udc_iface_enable+0x58>
80006d52:	cf 01       	brne	80006d32 <udc_iface_enable+0x12>
80006d54:	c0 a8       	rjmp	80006d68 <udc_iface_enable+0x48>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80006d56:	48 a8       	lddpc	r8,80006d7c <udc_iface_enable+0x5c>
80006d58:	70 08       	ld.w	r8,r8[0x0]
80006d5a:	70 18       	ld.w	r8,r8[0x4]
80006d5c:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
80006d60:	70 0c       	ld.w	r12,r8[0x0]
80006d62:	5d 1c       	icall	r12
80006d64:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006d68:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80006d6c:	80 00       	ld.sh	r0,r0[0x0]
80006d6e:	6c 34       	ld.w	r4,r6[0xc]
80006d70:	00 00       	add	r0,r0
80006d72:	04 5c       	eor	r12,r2
80006d74:	80 00       	ld.sh	r0,r0[0x0]
80006d76:	6c b8       	ld.w	r8,r6[0x2c]
80006d78:	80 00       	ld.sh	r0,r0[0x0]
80006d7a:	5c 28       	cpc	r8
80006d7c:	00 00       	add	r0,r0
80006d7e:	04 54       	eor	r4,r2

80006d80 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80006d80:	eb cd 40 e0 	pushm	r5-r7,lr
80006d84:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80006d86:	18 97       	mov	r7,r12
80006d88:	30 0b       	mov	r11,0
80006d8a:	f0 1f 00 12 	mcall	80006dd0 <udc_iface_disable+0x50>
80006d8e:	c1 e0       	breq	80006dca <udc_iface_disable+0x4a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80006d90:	49 18       	lddpc	r8,80006dd4 <udc_iface_disable+0x54>
80006d92:	70 08       	ld.w	r8,r8[0x0]
80006d94:	70 18       	ld.w	r8,r8[0x4]
80006d96:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80006d9a:	6a 3c       	ld.w	r12,r5[0xc]
80006d9c:	5d 1c       	icall	r12
80006d9e:	18 9b       	mov	r11,r12
80006da0:	0c 9c       	mov	r12,r6
80006da2:	f0 1f 00 0c 	mcall	80006dd0 <udc_iface_disable+0x50>
80006da6:	c1 20       	breq	80006dca <udc_iface_disable+0x4a>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80006da8:	48 c8       	lddpc	r8,80006dd8 <udc_iface_disable+0x58>
80006daa:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80006dac:	30 56       	mov	r6,5
80006dae:	0c 9b       	mov	r11,r6
80006db0:	0e 9c       	mov	r12,r7
80006db2:	f0 1f 00 0b 	mcall	80006ddc <udc_iface_disable+0x5c>
80006db6:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
80006db8:	c0 50       	breq	80006dc2 <udc_iface_disable+0x42>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80006dba:	19 ac       	ld.ub	r12,r12[0x2]
80006dbc:	f0 1f 00 09 	mcall	80006de0 <udc_iface_disable+0x60>
		}
80006dc0:	cf 7b       	rjmp	80006dae <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
80006dc2:	6a 18       	ld.w	r8,r5[0x4]
80006dc4:	5d 18       	icall	r8
80006dc6:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
80006dca:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80006dce:	00 00       	add	r0,r0
80006dd0:	80 00       	ld.sh	r0,r0[0x0]
80006dd2:	6c 34       	ld.w	r4,r6[0xc]
80006dd4:	00 00       	add	r0,r0
80006dd6:	04 54       	eor	r4,r2
80006dd8:	00 00       	add	r0,r0
80006dda:	04 5c       	eor	r12,r2
80006ddc:	80 00       	ld.sh	r0,r0[0x0]
80006dde:	6c b8       	ld.w	r8,r6[0x2c]
80006de0:	80 00       	ld.sh	r0,r0[0x0]
80006de2:	5b f8       	cp.w	r8,-1

80006de4 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
80006de4:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80006de8:	49 28       	lddpc	r8,80006e30 <udc_reset+0x4c>
80006dea:	11 89       	ld.ub	r9,r8[0x0]
80006dec:	30 08       	mov	r8,0
80006dee:	f0 09 18 00 	cp.b	r9,r8
80006df2:	c1 70       	breq	80006e20 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80006df4:	49 08       	lddpc	r8,80006e34 <udc_reset+0x50>
80006df6:	70 08       	ld.w	r8,r8[0x0]
80006df8:	70 08       	ld.w	r8,r8[0x0]
80006dfa:	11 c9       	ld.ub	r9,r8[0x4]
80006dfc:	30 08       	mov	r8,0
80006dfe:	f0 09 18 00 	cp.b	r9,r8
80006e02:	c0 f0       	breq	80006e20 <udc_reset+0x3c>
80006e04:	30 07       	mov	r7,0
80006e06:	48 c6       	lddpc	r6,80006e34 <udc_reset+0x50>
				iface_num++) {
			udc_iface_disable(iface_num);
80006e08:	0e 9c       	mov	r12,r7
80006e0a:	f0 1f 00 0c 	mcall	80006e38 <udc_reset+0x54>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80006e0e:	2f f7       	sub	r7,-1
80006e10:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80006e12:	6c 08       	ld.w	r8,r6[0x0]
80006e14:	70 08       	ld.w	r8,r8[0x0]
80006e16:	11 c8       	ld.ub	r8,r8[0x4]
80006e18:	ee 08 18 00 	cp.b	r8,r7
80006e1c:	fe 9b ff f6 	brhi	80006e08 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80006e20:	30 09       	mov	r9,0
80006e22:	48 48       	lddpc	r8,80006e30 <udc_reset+0x4c>
80006e24:	b0 89       	st.b	r8[0x0],r9
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80006e26:	30 09       	mov	r9,0
80006e28:	48 58       	lddpc	r8,80006e3c <udc_reset+0x58>
80006e2a:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80006e2c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006e30:	00 00       	add	r0,r0
80006e32:	04 5a       	eor	r10,r2
80006e34:	00 00       	add	r0,r0
80006e36:	04 54       	eor	r4,r2
80006e38:	80 00       	ld.sh	r0,r0[0x0]
80006e3a:	6d 80       	ld.w	r0,r6[0x60]
80006e3c:	00 00       	add	r0,r0
80006e3e:	04 58       	eor	r8,r2

80006e40 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80006e40:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80006e44:	fe f8 04 50 	ld.w	r8,pc[1104]
80006e48:	30 09       	mov	r9,0
80006e4a:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80006e4c:	30 0a       	mov	r10,0
80006e4e:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80006e50:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80006e52:	11 88       	ld.ub	r8,r8[0x0]
80006e54:	10 9a       	mov	r10,r8
80006e56:	f2 08 18 00 	cp.b	r8,r9
80006e5a:	c0 94       	brge	80006e6c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
80006e5c:	fe f9 04 38 	ld.w	r9,pc[1080]
80006e60:	92 3b       	ld.sh	r11,r9[0x6]
80006e62:	30 09       	mov	r9,0
80006e64:	f2 0b 19 00 	cp.h	r11,r9
80006e68:	e0 80 02 10 	breq	80007288 <udc_process_setup+0x448>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80006e6c:	10 99       	mov	r9,r8
80006e6e:	e2 19 00 60 	andl	r9,0x60,COH
80006e72:	e0 81 01 df 	brne	80007230 <udc_process_setup+0x3f0>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80006e76:	f2 0a 18 00 	cp.b	r10,r9
80006e7a:	e0 84 01 06 	brge	80007086 <udc_process_setup+0x246>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
80006e7e:	fe f9 04 16 	ld.w	r9,pc[1046]
80006e82:	92 39       	ld.sh	r9,r9[0x6]
80006e84:	58 09       	cp.w	r9,0
80006e86:	e0 80 01 d5 	breq	80007230 <udc_process_setup+0x3f0>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80006e8a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80006e8e:	e0 81 00 a3 	brne	80006fd4 <udc_process_setup+0x194>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80006e92:	fe fa 04 02 	ld.w	r10,pc[1026]
80006e96:	15 9a       	ld.ub	r10,r10[0x1]
80006e98:	30 6b       	mov	r11,6
80006e9a:	f6 0a 18 00 	cp.b	r10,r11
80006e9e:	c1 a0       	breq	80006ed2 <udc_process_setup+0x92>
80006ea0:	30 8b       	mov	r11,8
80006ea2:	f6 0a 18 00 	cp.b	r10,r11
80006ea6:	e0 80 00 8a 	breq	80006fba <udc_process_setup+0x17a>
80006eaa:	30 0b       	mov	r11,0
80006eac:	f6 0a 18 00 	cp.b	r10,r11
80006eb0:	e0 81 00 92 	brne	80006fd4 <udc_process_setup+0x194>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
80006eb4:	30 28       	mov	r8,2
80006eb6:	f0 09 19 00 	cp.h	r9,r8
80006eba:	c0 40       	breq	80006ec2 <udc_process_setup+0x82>
80006ebc:	30 0c       	mov	r12,0
80006ebe:	e0 8f 01 b5 	bral	80007228 <udc_process_setup+0x3e8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
80006ec2:	30 2b       	mov	r11,2
80006ec4:	fe fc 03 d4 	ld.w	r12,pc[980]
80006ec8:	f0 1f 00 f5 	mcall	8000729c <udc_process_setup+0x45c>
80006ecc:	30 1c       	mov	r12,1
80006ece:	e0 8f 01 ad 	bral	80007228 <udc_process_setup+0x3e8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80006ed2:	fe f8 03 c2 	ld.w	r8,pc[962]
80006ed6:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80006ed8:	f2 08 16 08 	lsr	r8,r9,0x8
80006edc:	30 2a       	mov	r10,2
80006ede:	f4 08 18 00 	cp.b	r8,r10
80006ee2:	c1 00       	breq	80006f02 <udc_process_setup+0xc2>
80006ee4:	30 3a       	mov	r10,3
80006ee6:	f4 08 18 00 	cp.b	r8,r10
80006eea:	c2 a0       	breq	80006f3e <udc_process_setup+0xfe>
80006eec:	30 19       	mov	r9,1
80006eee:	f2 08 18 00 	cp.b	r8,r9
80006ef2:	c6 21       	brne	80006fb6 <udc_process_setup+0x176>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80006ef4:	fe f8 03 ac 	ld.w	r8,pc[940]
80006ef8:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80006efa:	19 8b       	ld.ub	r11,r12[0x0]
80006efc:	f0 1f 00 e8 	mcall	8000729c <udc_process_setup+0x45c>
80006f00:	c4 c8       	rjmp	80006f98 <udc_process_setup+0x158>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80006f02:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80006f04:	fe f8 03 9c 	ld.w	r8,pc[924]
80006f08:	70 08       	ld.w	r8,r8[0x0]
80006f0a:	f1 38 00 11 	ld.ub	r8,r8[17]
80006f0e:	f2 08 18 00 	cp.b	r8,r9
80006f12:	e0 88 00 52 	brls	80006fb6 <udc_process_setup+0x176>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80006f16:	fe f8 03 8a 	ld.w	r8,pc[906]
80006f1a:	70 18       	ld.w	r8,r8[0x4]
80006f1c:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80006f20:	19 a9       	ld.ub	r9,r12[0x2]
80006f22:	19 b8       	ld.ub	r8,r12[0x3]
80006f24:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80006f28:	5c c8       	swap.bh	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
80006f2a:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80006f2e:	f0 1f 00 dc 	mcall	8000729c <udc_process_setup+0x45c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80006f32:	fe f8 03 62 	ld.w	r8,pc[866]
80006f36:	70 28       	ld.w	r8,r8[0x8]
80006f38:	30 29       	mov	r9,2
80006f3a:	b0 99       	st.b	r8[0x1],r9
80006f3c:	c2 e8       	rjmp	80006f98 <udc_process_setup+0x158>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80006f3e:	5c 59       	castu.b	r9
80006f40:	58 19       	cp.w	r9,1
80006f42:	c1 50       	breq	80006f6c <udc_process_setup+0x12c>
80006f44:	e0 89 00 05 	brgt	80006f4e <udc_process_setup+0x10e>
80006f48:	58 09       	cp.w	r9,0
80006f4a:	c0 b0       	breq	80006f60 <udc_process_setup+0x120>
80006f4c:	c3 58       	rjmp	80006fb6 <udc_process_setup+0x176>
80006f4e:	58 29       	cp.w	r9,2
80006f50:	e0 80 01 9e 	breq	8000728c <udc_process_setup+0x44c>
80006f54:	58 39       	cp.w	r9,3
80006f56:	c3 01       	brne	80006fb6 <udc_process_setup+0x176>
80006f58:	30 cb       	mov	r11,12
80006f5a:	fe fc 03 4a 	ld.w	r12,pc[842]
80006f5e:	c0 a8       	rjmp	80006f72 <udc_process_setup+0x132>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
80006f60:	30 4b       	mov	r11,4
80006f62:	fe fc 03 46 	ld.w	r12,pc[838]
80006f66:	f0 1f 00 ce 	mcall	8000729c <udc_process_setup+0x45c>
80006f6a:	c1 78       	rjmp	80006f98 <udc_process_setup+0x158>
80006f6c:	fe fc 03 40 	ld.w	r12,pc[832]
80006f70:	30 bb       	mov	r11,11
80006f72:	fe fa 03 3e 	ld.w	r10,pc[830]
80006f76:	2f ea       	sub	r10,-2
80006f78:	18 98       	mov	r8,r12
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
80006f7a:	11 39       	ld.ub	r9,r8++
80006f7c:	5c c9       	swap.bh	r9
80006f7e:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
80006f80:	f0 0c 01 09 	sub	r9,r8,r12
80006f84:	f6 09 18 00 	cp.b	r9,r11
80006f88:	cf 93       	brcs	80006f7a <udc_process_setup+0x13a>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
80006f8a:	a1 7b       	lsl	r11,0x1
80006f8c:	2f eb       	sub	r11,-2
80006f8e:	fe fc 03 22 	ld.w	r12,pc[802]
80006f92:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
80006f94:	f0 1f 00 c2 	mcall	8000729c <udc_process_setup+0x45c>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
80006f98:	fe f8 02 fc 	ld.w	r8,pc[764]
80006f9c:	90 39       	ld.sh	r9,r8[0x6]
80006f9e:	90 68       	ld.sh	r8,r8[0xc]
80006fa0:	f2 08 19 00 	cp.h	r8,r9
80006fa4:	e0 8b 00 04 	brhi	80006fac <udc_process_setup+0x16c>
80006fa8:	30 1c       	mov	r12,1
80006faa:	c3 f9       	rjmp	80007228 <udc_process_setup+0x3e8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
80006fac:	fe f8 02 e8 	ld.w	r8,pc[744]
80006fb0:	b0 69       	st.h	r8[0xc],r9
80006fb2:	30 1c       	mov	r12,1
80006fb4:	c3 a9       	rjmp	80007228 <udc_process_setup+0x3e8>
80006fb6:	30 0c       	mov	r12,0
80006fb8:	c3 89       	rjmp	80007228 <udc_process_setup+0x3e8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
80006fba:	30 18       	mov	r8,1
80006fbc:	f0 09 19 00 	cp.h	r9,r8
80006fc0:	c0 30       	breq	80006fc6 <udc_process_setup+0x186>
80006fc2:	30 0c       	mov	r12,0
80006fc4:	c3 29       	rjmp	80007228 <udc_process_setup+0x3e8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
80006fc6:	30 1b       	mov	r11,1
80006fc8:	fe fc 02 ec 	ld.w	r12,pc[748]
80006fcc:	f0 1f 00 b4 	mcall	8000729c <udc_process_setup+0x45c>
80006fd0:	30 1c       	mov	r12,1
80006fd2:	c2 b9       	rjmp	80007228 <udc_process_setup+0x3e8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80006fd4:	58 18       	cp.w	r8,1
80006fd6:	c3 61       	brne	80007042 <udc_process_setup+0x202>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80006fd8:	fe fa 02 bc 	ld.w	r10,pc[700]
80006fdc:	15 9b       	ld.ub	r11,r10[0x1]
80006fde:	30 aa       	mov	r10,10
80006fe0:	f4 0b 18 00 	cp.b	r11,r10
80006fe4:	c2 f1       	brne	80007042 <udc_process_setup+0x202>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
80006fe6:	f0 09 19 00 	cp.h	r9,r8
80006fea:	c2 a1       	brne	8000703e <udc_process_setup+0x1fe>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
80006fec:	fe f8 02 c8 	ld.w	r8,pc[712]
80006ff0:	11 89       	ld.ub	r9,r8[0x0]
80006ff2:	30 08       	mov	r8,0
80006ff4:	f0 09 18 00 	cp.b	r9,r8
80006ff8:	c2 30       	breq	8000703e <udc_process_setup+0x1fe>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80006ffa:	fe f8 02 9a 	ld.w	r8,pc[666]
80006ffe:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80007000:	fe f8 02 b8 	ld.w	r8,pc[696]
80007004:	70 08       	ld.w	r8,r8[0x0]
80007006:	70 08       	ld.w	r8,r8[0x0]
80007008:	11 c8       	ld.ub	r8,r8[0x4]
8000700a:	ee 08 18 00 	cp.b	r8,r7
8000700e:	e0 88 00 18 	brls	8000703e <udc_process_setup+0x1fe>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80007012:	30 0b       	mov	r11,0
80007014:	0e 9c       	mov	r12,r7
80007016:	f0 1f 00 aa 	mcall	800072bc <udc_process_setup+0x47c>
8000701a:	c1 20       	breq	8000703e <udc_process_setup+0x1fe>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
8000701c:	fe f8 02 9c 	ld.w	r8,pc[668]
80007020:	70 08       	ld.w	r8,r8[0x0]
80007022:	70 18       	ld.w	r8,r8[0x4]
80007024:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80007028:	70 3c       	ld.w	r12,r8[0xc]
8000702a:	5d 1c       	icall	r12
8000702c:	fe f8 02 94 	ld.w	r8,pc[660]
80007030:	b0 8c       	st.b	r8[0x0],r12

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80007032:	30 1b       	mov	r11,1
80007034:	10 9c       	mov	r12,r8
80007036:	f0 1f 00 9a 	mcall	8000729c <udc_process_setup+0x45c>
8000703a:	30 1c       	mov	r12,1
8000703c:	cf 68       	rjmp	80007228 <udc_process_setup+0x3e8>
8000703e:	30 0c       	mov	r12,0
80007040:	cf 48       	rjmp	80007228 <udc_process_setup+0x3e8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80007042:	58 28       	cp.w	r8,2
80007044:	e0 81 00 f6 	brne	80007230 <udc_process_setup+0x3f0>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80007048:	fe f8 02 4c 	ld.w	r8,pc[588]
8000704c:	11 9a       	ld.ub	r10,r8[0x1]
8000704e:	30 08       	mov	r8,0
80007050:	f0 0a 18 00 	cp.b	r10,r8
80007054:	e0 81 00 e9 	brne	80007226 <udc_process_setup+0x3e6>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
80007058:	30 28       	mov	r8,2
8000705a:	f0 09 19 00 	cp.h	r9,r8
8000705e:	c0 30       	breq	80007064 <udc_process_setup+0x224>
80007060:	30 0c       	mov	r12,0
80007062:	ce 38       	rjmp	80007228 <udc_process_setup+0x3e8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
80007064:	fe f8 02 30 	ld.w	r8,pc[560]
80007068:	11 dc       	ld.ub	r12,r8[0x5]
8000706a:	f0 1f 00 97 	mcall	800072c4 <udc_process_setup+0x484>
8000706e:	e0 68 01 00 	mov	r8,256
80007072:	f9 b8 00 00 	moveq	r8,0
80007076:	fe fc 02 52 	ld.w	r12,pc[594]
8000707a:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
8000707c:	30 2b       	mov	r11,2
8000707e:	f0 1f 00 88 	mcall	8000729c <udc_process_setup+0x45c>
80007082:	30 1c       	mov	r12,1
80007084:	cd 28       	rjmp	80007228 <udc_process_setup+0x3e8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80007086:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000708a:	c7 81       	brne	8000717a <udc_process_setup+0x33a>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000708c:	fe f9 02 08 	ld.w	r9,pc[520]
80007090:	13 99       	ld.ub	r9,r9[0x1]
80007092:	30 3a       	mov	r10,3
80007094:	f4 09 18 00 	cp.b	r9,r10
80007098:	e0 80 00 c7 	breq	80007226 <udc_process_setup+0x3e6>
8000709c:	e0 8b 00 07 	brhi	800070aa <udc_process_setup+0x26a>
800070a0:	30 1a       	mov	r10,1
800070a2:	f4 09 18 00 	cp.b	r9,r10
800070a6:	c6 a1       	brne	8000717a <udc_process_setup+0x33a>
800070a8:	c1 88       	rjmp	800070d8 <udc_process_setup+0x298>
800070aa:	30 5a       	mov	r10,5
800070ac:	f4 09 18 00 	cp.b	r9,r10
800070b0:	c0 60       	breq	800070bc <udc_process_setup+0x27c>
800070b2:	30 9a       	mov	r10,9
800070b4:	f4 09 18 00 	cp.b	r9,r10
800070b8:	c6 11       	brne	8000717a <udc_process_setup+0x33a>
800070ba:	c2 38       	rjmp	80007100 <udc_process_setup+0x2c0>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
800070bc:	4f 68       	lddpc	r8,80007294 <udc_process_setup+0x454>
800070be:	90 39       	ld.sh	r9,r8[0x6]
800070c0:	30 08       	mov	r8,0
800070c2:	f0 09 19 00 	cp.h	r9,r8
800070c6:	c0 30       	breq	800070cc <udc_process_setup+0x28c>
800070c8:	30 0c       	mov	r12,0
800070ca:	ca f8       	rjmp	80007228 <udc_process_setup+0x3e8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
800070cc:	fe f9 02 00 	ld.w	r9,pc[512]
800070d0:	4f 18       	lddpc	r8,80007294 <udc_process_setup+0x454>
800070d2:	91 49       	st.w	r8[0x10],r9
800070d4:	30 1c       	mov	r12,1
800070d6:	ca 98       	rjmp	80007228 <udc_process_setup+0x3e8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
800070d8:	4e f8       	lddpc	r8,80007294 <udc_process_setup+0x454>
800070da:	90 39       	ld.sh	r9,r8[0x6]
800070dc:	30 08       	mov	r8,0
800070de:	f0 09 19 00 	cp.h	r9,r8
800070e2:	c0 d1       	brne	800070fc <udc_process_setup+0x2bc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
800070e4:	4e c8       	lddpc	r8,80007294 <udc_process_setup+0x454>
800070e6:	90 19       	ld.sh	r9,r8[0x2]
800070e8:	30 18       	mov	r8,1
800070ea:	f0 09 19 00 	cp.h	r9,r8
800070ee:	c0 71       	brne	800070fc <udc_process_setup+0x2bc>
		udc_device_status &= CPU_TO_LE16(~USB_DEV_STATUS_REMOTEWAKEUP);
800070f0:	4e a8       	lddpc	r8,80007298 <udc_process_setup+0x458>
800070f2:	90 09       	ld.sh	r9,r8[0x0]
800070f4:	a9 d9       	cbr	r9,0x9
800070f6:	b0 09       	st.h	r8[0x0],r9
800070f8:	30 1c       	mov	r12,1
800070fa:	c9 78       	rjmp	80007228 <udc_process_setup+0x3e8>
800070fc:	30 0c       	mov	r12,0
800070fe:	c9 58       	rjmp	80007228 <udc_process_setup+0x3e8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
80007100:	4e 58       	lddpc	r8,80007294 <udc_process_setup+0x454>
80007102:	90 39       	ld.sh	r9,r8[0x6]
80007104:	30 08       	mov	r8,0
80007106:	f0 09 19 00 	cp.h	r9,r8
8000710a:	c3 41       	brne	80007172 <udc_process_setup+0x332>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
8000710c:	f0 1f 00 71 	mcall	800072d0 <udc_process_setup+0x490>
80007110:	c3 10       	breq	80007172 <udc_process_setup+0x332>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80007112:	4e 18       	lddpc	r8,80007294 <udc_process_setup+0x454>
80007114:	11 b9       	ld.ub	r9,r8[0x3]
80007116:	4e 38       	lddpc	r8,800072a0 <udc_process_setup+0x460>
80007118:	70 08       	ld.w	r8,r8[0x0]
8000711a:	f1 38 00 11 	ld.ub	r8,r8[17]
8000711e:	10 39       	cp.w	r9,r8
80007120:	e0 89 00 29 	brgt	80007172 <udc_process_setup+0x332>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
80007124:	f0 1f 00 6c 	mcall	800072d4 <udc_process_setup+0x494>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80007128:	4d b8       	lddpc	r8,80007294 <udc_process_setup+0x454>
8000712a:	11 b8       	ld.ub	r8,r8[0x3]
8000712c:	4e 29       	lddpc	r9,800072b4 <udc_process_setup+0x474>
8000712e:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80007130:	58 08       	cp.w	r8,0
80007132:	c2 20       	breq	80007176 <udc_process_setup+0x336>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80007134:	20 18       	sub	r8,1
80007136:	4d b9       	lddpc	r9,800072a0 <udc_process_setup+0x460>
80007138:	72 19       	ld.w	r9,r9[0x4]
8000713a:	f2 08 00 38 	add	r8,r9,r8<<0x3
8000713e:	4d f9       	lddpc	r9,800072b8 <udc_process_setup+0x478>
80007140:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007142:	70 08       	ld.w	r8,r8[0x0]
80007144:	11 c9       	ld.ub	r9,r8[0x4]
80007146:	30 08       	mov	r8,0
80007148:	f0 09 18 00 	cp.b	r9,r8
8000714c:	c1 50       	breq	80007176 <udc_process_setup+0x336>
8000714e:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
80007150:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007152:	4d a6       	lddpc	r6,800072b8 <udc_process_setup+0x478>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
80007154:	0a 9b       	mov	r11,r5
80007156:	0e 9c       	mov	r12,r7
80007158:	f0 1f 00 60 	mcall	800072d8 <udc_process_setup+0x498>
8000715c:	c0 b0       	breq	80007172 <udc_process_setup+0x332>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000715e:	2f f7       	sub	r7,-1
80007160:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007162:	6c 08       	ld.w	r8,r6[0x0]
80007164:	70 08       	ld.w	r8,r8[0x0]
80007166:	11 c8       	ld.ub	r8,r8[0x4]
80007168:	ee 08 18 00 	cp.b	r8,r7
8000716c:	fe 9b ff f4 	brhi	80007154 <udc_process_setup+0x314>
80007170:	c0 38       	rjmp	80007176 <udc_process_setup+0x336>
80007172:	30 0c       	mov	r12,0
80007174:	c5 a8       	rjmp	80007228 <udc_process_setup+0x3e8>
80007176:	30 1c       	mov	r12,1
80007178:	c5 88       	rjmp	80007228 <udc_process_setup+0x3e8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000717a:	58 18       	cp.w	r8,1
8000717c:	c2 21       	brne	800071c0 <udc_process_setup+0x380>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000717e:	4c 69       	lddpc	r9,80007294 <udc_process_setup+0x454>
80007180:	13 9a       	ld.ub	r10,r9[0x1]
80007182:	30 b9       	mov	r9,11
80007184:	f2 0a 18 00 	cp.b	r10,r9
80007188:	c1 c1       	brne	800071c0 <udc_process_setup+0x380>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
8000718a:	4c 38       	lddpc	r8,80007294 <udc_process_setup+0x454>
8000718c:	90 39       	ld.sh	r9,r8[0x6]
8000718e:	30 08       	mov	r8,0
80007190:	f0 09 19 00 	cp.h	r9,r8
80007194:	c1 41       	brne	800071bc <udc_process_setup+0x37c>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
80007196:	4c 88       	lddpc	r8,800072b4 <udc_process_setup+0x474>
80007198:	11 89       	ld.ub	r9,r8[0x0]
8000719a:	30 08       	mov	r8,0
8000719c:	f0 09 18 00 	cp.b	r9,r8
800071a0:	c0 e0       	breq	800071bc <udc_process_setup+0x37c>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
800071a2:	4b d8       	lddpc	r8,80007294 <udc_process_setup+0x454>
800071a4:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
800071a6:	11 d7       	ld.ub	r7,r8[0x5]
800071a8:	0e 9c       	mov	r12,r7
800071aa:	f0 1f 00 4d 	mcall	800072dc <udc_process_setup+0x49c>
800071ae:	c0 70       	breq	800071bc <udc_process_setup+0x37c>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
800071b0:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
800071b4:	0e 9c       	mov	r12,r7
800071b6:	f0 1f 00 49 	mcall	800072d8 <udc_process_setup+0x498>
800071ba:	c3 78       	rjmp	80007228 <udc_process_setup+0x3e8>
800071bc:	30 0c       	mov	r12,0
800071be:	c3 58       	rjmp	80007228 <udc_process_setup+0x3e8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
800071c0:	58 28       	cp.w	r8,2
800071c2:	c3 71       	brne	80007230 <udc_process_setup+0x3f0>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
800071c4:	4b 48       	lddpc	r8,80007294 <udc_process_setup+0x454>
800071c6:	11 98       	ld.ub	r8,r8[0x1]
800071c8:	30 19       	mov	r9,1
800071ca:	f2 08 18 00 	cp.b	r8,r9
800071ce:	c0 60       	breq	800071da <udc_process_setup+0x39a>
800071d0:	30 39       	mov	r9,3
800071d2:	f2 08 18 00 	cp.b	r8,r9
800071d6:	c2 81       	brne	80007226 <udc_process_setup+0x3e6>
800071d8:	c1 48       	rjmp	80007200 <udc_process_setup+0x3c0>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
800071da:	4a f8       	lddpc	r8,80007294 <udc_process_setup+0x454>
800071dc:	90 39       	ld.sh	r9,r8[0x6]
800071de:	30 08       	mov	r8,0
800071e0:	f0 09 19 00 	cp.h	r9,r8
800071e4:	c0 c1       	brne	800071fc <udc_process_setup+0x3bc>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
800071e6:	4a c8       	lddpc	r8,80007294 <udc_process_setup+0x454>
800071e8:	90 19       	ld.sh	r9,r8[0x2]
800071ea:	30 08       	mov	r8,0
800071ec:	f0 09 19 00 	cp.h	r9,r8
800071f0:	c0 61       	brne	800071fc <udc_process_setup+0x3bc>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
800071f2:	4a 98       	lddpc	r8,80007294 <udc_process_setup+0x454>
800071f4:	11 dc       	ld.ub	r12,r8[0x5]
800071f6:	f0 1f 00 3b 	mcall	800072e0 <udc_process_setup+0x4a0>
800071fa:	c1 78       	rjmp	80007228 <udc_process_setup+0x3e8>
800071fc:	30 0c       	mov	r12,0
800071fe:	c1 58       	rjmp	80007228 <udc_process_setup+0x3e8>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_epset_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80007200:	4a 58       	lddpc	r8,80007294 <udc_process_setup+0x454>
80007202:	90 39       	ld.sh	r9,r8[0x6]
80007204:	30 08       	mov	r8,0
80007206:	f0 09 19 00 	cp.h	r9,r8
8000720a:	c0 c1       	brne	80007222 <udc_process_setup+0x3e2>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000720c:	4a 28       	lddpc	r8,80007294 <udc_process_setup+0x454>
8000720e:	90 19       	ld.sh	r9,r8[0x2]
80007210:	30 08       	mov	r8,0
80007212:	f0 09 19 00 	cp.h	r9,r8
80007216:	c0 61       	brne	80007222 <udc_process_setup+0x3e2>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80007218:	49 f8       	lddpc	r8,80007294 <udc_process_setup+0x454>
8000721a:	11 dc       	ld.ub	r12,r8[0x5]
8000721c:	f0 1f 00 32 	mcall	800072e4 <udc_process_setup+0x4a4>
80007220:	c0 48       	rjmp	80007228 <udc_process_setup+0x3e8>
80007222:	30 0c       	mov	r12,0
80007224:	c0 28       	rjmp	80007228 <udc_process_setup+0x3e8>
80007226:	30 0c       	mov	r12,0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
80007228:	58 0c       	cp.w	r12,0
8000722a:	c0 30       	breq	80007230 <udc_process_setup+0x3f0>
8000722c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80007230:	49 98       	lddpc	r8,80007294 <udc_process_setup+0x454>
80007232:	11 88       	ld.ub	r8,r8[0x0]
80007234:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80007238:	58 18       	cp.w	r8,1
8000723a:	c2 71       	brne	80007288 <udc_process_setup+0x448>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000723c:	49 e8       	lddpc	r8,800072b4 <udc_process_setup+0x474>
8000723e:	11 89       	ld.ub	r9,r8[0x0]
80007240:	30 08       	mov	r8,0
80007242:	f0 09 18 00 	cp.b	r9,r8
80007246:	c2 10       	breq	80007288 <udc_process_setup+0x448>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
80007248:	49 38       	lddpc	r8,80007294 <udc_process_setup+0x454>
8000724a:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000724c:	49 b8       	lddpc	r8,800072b8 <udc_process_setup+0x478>
8000724e:	70 08       	ld.w	r8,r8[0x0]
80007250:	70 08       	ld.w	r8,r8[0x0]
80007252:	11 c8       	ld.ub	r8,r8[0x4]
80007254:	ee 08 18 00 	cp.b	r8,r7
80007258:	e0 88 00 18 	brls	80007288 <udc_process_setup+0x448>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000725c:	0e 96       	mov	r6,r7
8000725e:	30 0b       	mov	r11,0
80007260:	0e 9c       	mov	r12,r7
80007262:	f0 1f 00 17 	mcall	800072bc <udc_process_setup+0x47c>
80007266:	c1 10       	breq	80007288 <udc_process_setup+0x448>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80007268:	49 48       	lddpc	r8,800072b8 <udc_process_setup+0x478>
8000726a:	70 08       	ld.w	r8,r8[0x0]
8000726c:	70 18       	ld.w	r8,r8[0x4]
8000726e:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80007272:	6e 3c       	ld.w	r12,r7[0xc]
80007274:	5d 1c       	icall	r12
80007276:	18 9b       	mov	r11,r12
80007278:	0c 9c       	mov	r12,r6
8000727a:	f0 1f 00 11 	mcall	800072bc <udc_process_setup+0x47c>
8000727e:	c0 50       	breq	80007288 <udc_process_setup+0x448>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
80007280:	6e 2c       	ld.w	r12,r7[0x8]
80007282:	5d 1c       	icall	r12
80007284:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80007288:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000728c:	31 2b       	mov	r11,18
8000728e:	49 7c       	lddpc	r12,800072e8 <udc_process_setup+0x4a8>
80007290:	fe 9f fe 71 	bral	80006f72 <udc_process_setup+0x132>
80007294:	00 00       	add	r0,r0
80007296:	09 90       	ld.ub	r0,r4[0x1]
80007298:	00 00       	add	r0,r0
8000729a:	04 58       	eor	r8,r2
8000729c:	80 00       	ld.sh	r0,r0[0x0]
8000729e:	59 f8       	cp.w	r8,31
800072a0:	00 00       	add	r0,r0
800072a2:	00 14       	sub	r4,r0
800072a4:	80 00       	ld.sh	r0,r0[0x0]
800072a6:	7c 8c       	ld.w	r12,lr[0x20]
800072a8:	00 00       	add	r0,r0
800072aa:	00 ec       	st.h	--r0,r12
800072ac:	00 00       	add	r0,r0
800072ae:	00 b8       	st.h	r0++,r8
800072b0:	00 00       	add	r0,r0
800072b2:	00 c4       	st.b	r0++,r4
800072b4:	00 00       	add	r0,r0
800072b6:	04 5a       	eor	r10,r2
800072b8:	00 00       	add	r0,r0
800072ba:	04 54       	eor	r4,r2
800072bc:	80 00       	ld.sh	r0,r0[0x0]
800072be:	6c 34       	ld.w	r4,r6[0xc]
800072c0:	00 00       	add	r0,r0
800072c2:	04 60       	and	r0,r2
800072c4:	80 00       	ld.sh	r0,r0[0x0]
800072c6:	5a 04       	cp.w	r4,-32
800072c8:	00 00       	add	r0,r0
800072ca:	04 52       	eor	r2,r2
800072cc:	80 00       	ld.sh	r0,r0[0x0]
800072ce:	6d 08       	ld.w	r8,r6[0x40]
800072d0:	80 00       	ld.sh	r0,r0[0x0]
800072d2:	59 de       	cp.w	lr,29
800072d4:	80 00       	ld.sh	r0,r0[0x0]
800072d6:	6d e4       	ld.w	r4,r6[0x78]
800072d8:	80 00       	ld.sh	r0,r0[0x0]
800072da:	6d 20       	ld.w	r0,r6[0x48]
800072dc:	80 00       	ld.sh	r0,r0[0x0]
800072de:	6d 80       	ld.w	r0,r6[0x60]
800072e0:	80 00       	ld.sh	r0,r0[0x0]
800072e2:	5a 94       	cp.w	r4,-23
800072e4:	80 00       	ld.sh	r0,r0[0x0]
800072e6:	5a 18       	cp.w	r8,-31
800072e8:	00 00       	add	r0,r0
800072ea:	00 a4       	st.w	r0++,r4

800072ec <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
800072ec:	d4 01       	pushm	lr
	udd_enable();
800072ee:	f0 1f 00 02 	mcall	800072f4 <udc_start+0x8>
}
800072f2:	d8 02       	popm	pc
800072f4:	80 00       	ld.sh	r0,r0[0x0]
800072f6:	67 b4       	ld.w	r4,r3[0x6c]

800072f8 <main_suspend_action>:
 }
 
 void main_suspend_action(void)
 {

 }
800072f8:	5e fc       	retal	r12

800072fa <main_resume_action>:
 
 void main_resume_action(void)
 {
 }
800072fa:	5e fc       	retal	r12

800072fc <main_msc_enable>:
 void main_remotewakeup_disable(void){
	 
 }
 
 bool main_msc_enable(){
	 main_b_msc_enable = true;
800072fc:	30 19       	mov	r9,1
800072fe:	48 28       	lddpc	r8,80007304 <main_msc_enable+0x8>
80007300:	b0 89       	st.b	r8[0x0],r9
     return true;
 }
80007302:	5e ff       	retal	1
80007304:	00 00       	add	r0,r0
80007306:	04 62       	and	r2,r2

80007308 <main_msc_disable>:
 
 void main_msc_disable(){
	 
 }
80007308:	5e fc       	retal	r12
8000730a:	d7 03       	nop

8000730c <memories_initialization>:
 
 void memories_initialization(long pba_hz)
 {
8000730c:	eb cd 40 80 	pushm	r7,lr
80007310:	20 4d       	sub	sp,16
80007312:	18 97       	mov	r7,r12
        .spck_delay   = 0,
        .trans_delay  = 0,
        .stay_act     = 1,
        .spi_mode     = 0,
        .modfdis      = 1
    };
80007314:	49 a9       	lddpc	r9,8000737c <memories_initialization+0x70>
80007316:	f2 ea 00 00 	ld.d	r10,r9[0]
8000731a:	fa eb 00 00 	st.d	sp[0],r10
8000731e:	f2 ea 00 08 	ld.d	r10,r9[8]
80007322:	fa eb 00 08 	st.d	sp[8],r10
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80007326:	30 5b       	mov	r11,5
80007328:	30 2c       	mov	r12,2
8000732a:	f0 1f 00 16 	mcall	80007380 <memories_initialization+0x74>

    sysclk_enable_peripheral_clock(SD_MMC_SPI);

    // If the SPI used by the SD/MMC is not enabled.
    if (!spi_is_enabled(SD_MMC_SPI)) {
8000732e:	fe 7c 24 00 	mov	r12,-56320
80007332:	f0 1f 00 15 	mcall	80007384 <memories_initialization+0x78>
80007336:	c1 11       	brne	80007358 <memories_initialization+0x4c>
        // Initialize as master.
        spi_initMaster(SD_MMC_SPI, &spiOptions);
80007338:	1a 9b       	mov	r11,sp
8000733a:	fe 7c 24 00 	mov	r12,-56320
8000733e:	f0 1f 00 13 	mcall	80007388 <memories_initialization+0x7c>
        // Set selection mode: variable_ps, pcs_decode, delay.
        spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
80007342:	30 09       	mov	r9,0
80007344:	12 9a       	mov	r10,r9
80007346:	12 9b       	mov	r11,r9
80007348:	fe 7c 24 00 	mov	r12,-56320
8000734c:	f0 1f 00 10 	mcall	8000738c <memories_initialization+0x80>
        // Enable SPI.
        spi_enable(SD_MMC_SPI);
80007350:	fe 7c 24 00 	mov	r12,-56320
80007354:	f0 1f 00 0f 	mcall	80007390 <memories_initialization+0x84>
    }

    // Initialize SD/MMC with SPI PB clock.
    sd_mmc_spi_init(spiOptions,pba_hz);
80007358:	20 4d       	sub	sp,16
8000735a:	fa c8 ff f0 	sub	r8,sp,-16
8000735e:	f0 ea 00 00 	ld.d	r10,r8[0]
80007362:	fa eb 00 00 	st.d	sp[0],r10
80007366:	f0 e8 00 08 	ld.d	r8,r8[8]
8000736a:	fa e9 00 08 	st.d	sp[8],r8
8000736e:	0e 9c       	mov	r12,r7
80007370:	f0 1f 00 09 	mcall	80007394 <memories_initialization+0x88>
80007374:	2f cd       	sub	sp,-16
#endif  // SD_MMC_SPI_MEM == ENABLE
80007376:	2f cd       	sub	sp,-16
80007378:	e3 cd 80 80 	ldm	sp++,r7,pc
8000737c:	80 00       	ld.sh	r0,r0[0x0]
8000737e:	7c 9c       	ld.w	r12,lr[0x24]
80007380:	80 00       	ld.sh	r0,r0[0x0]
80007382:	69 9c       	ld.w	r12,r4[0x64]
80007384:	80 00       	ld.sh	r0,r0[0x0]
80007386:	59 76       	cp.w	r6,23
80007388:	80 00       	ld.sh	r0,r0[0x0]
8000738a:	57 e0       	stdsp	sp[0x1f8],r0
8000738c:	80 00       	ld.sh	r0,r0[0x0]
8000738e:	58 18       	cp.w	r8,1
80007390:	80 00       	ld.sh	r0,r0[0x0]
80007392:	59 70       	cp.w	r0,23
80007394:	80 00       	ld.sh	r0,r0[0x0]
80007396:	2c 00       	sub	r0,-64

80007398 <main_sof_action>:
 void main_resume_action(void)
 {
 }
 
 void main_sof_action(void)
 {
80007398:	d4 01       	pushm	lr
	   if (!main_b_msc_enable)
8000739a:	48 78       	lddpc	r8,800073b4 <main_sof_action+0x1c>
8000739c:	11 89       	ld.ub	r9,r8[0x0]
8000739e:	30 08       	mov	r8,0
800073a0:	f0 09 18 00 	cp.b	r9,r8
800073a4:	c0 60       	breq	800073b0 <main_sof_action+0x18>
         return;
     ui_process(udd_get_frame_number());
800073a6:	f0 1f 00 05 	mcall	800073b8 <main_sof_action+0x20>
800073aa:	5c 7c       	castu.h	r12
800073ac:	f0 1f 00 04 	mcall	800073bc <main_sof_action+0x24>
800073b0:	d8 02       	popm	pc
800073b2:	00 00       	add	r0,r0
800073b4:	00 00       	add	r0,r0
800073b6:	04 62       	and	r2,r2
800073b8:	80 00       	ld.sh	r0,r0[0x0]
800073ba:	59 ea       	cp.w	r10,30
800073bc:	80 00       	ld.sh	r0,r0[0x0]
800073be:	52 70       	stdsp	sp[0x9c],r0

800073c0 <main_vbus_action>:
         }
     }
 }
 
 void main_vbus_action(bool b_high)
 {
800073c0:	d4 01       	pushm	lr
     if (b_high) {
800073c2:	58 0c       	cp.w	r12,0
800073c4:	c0 40       	breq	800073cc <main_vbus_action+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
800073c6:	f0 1f 00 04 	mcall	800073d4 <main_vbus_action+0x14>
800073ca:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
800073cc:	f0 1f 00 03 	mcall	800073d8 <main_vbus_action+0x18>
800073d0:	d8 02       	popm	pc
800073d2:	00 00       	add	r0,r0
800073d4:	80 00       	ld.sh	r0,r0[0x0]
800073d6:	5d c0       	*unknown*
800073d8:	80 00       	ld.sh	r0,r0[0x0]
800073da:	5d 98       	*unknown*

800073dc <main>:
static uint8_t *serial_p;
static uint8_t serial_len;
UDC_DESC_STORAGE usb_dev_desc_t udc_device_desc;
 
 int main(void)
 {
800073dc:	d4 21       	pushm	r4-r7,lr
     irq_initialize_vectors();
800073de:	f0 1f 00 9d 	mcall	80007650 <main+0x274>
     cpu_irq_enable();
800073e2:	d5 03       	csrf	0x10
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
800073e4:	fe f8 02 70 	ld.w	r8,pc[624]
800073e8:	30 09       	mov	r9,0
800073ea:	b0 89       	st.b	r8[0x0],r9
800073ec:	b0 99       	st.b	r8[0x1],r9
800073ee:	b0 a9       	st.b	r8[0x2],r9
800073f0:	b0 b9       	st.b	r8[0x3],r9
800073f2:	b0 c9       	st.b	r8[0x4],r9
800073f4:	b0 d9       	st.b	r8[0x5],r9
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
800073f6:	30 19       	mov	r9,1
800073f8:	b0 e9       	st.b	r8[0x6],r9
 
     // Initialize the sleep manager
     sleepmgr_init();
     sysclk_init();	 
800073fa:	f0 1f 00 98 	mcall	80007658 <main+0x27c>
     board_init();
800073fe:	f0 1f 00 98 	mcall	8000765c <main+0x280>
     
	 memories_initialization(SD_MMC_SPI_MASTER_SPEED);
80007402:	e0 6c 87 00 	mov	r12,34560
80007406:	ea 1c 03 93 	orh	r12,0x393
8000740a:	f0 1f 00 96 	mcall	80007660 <main+0x284>

nav_reset();
8000740e:	f0 1f 00 96 	mcall	80007664 <main+0x288>
if( nav_setcwd( vidpidFile, false, false ) ) {
80007412:	30 0a       	mov	r10,0
80007414:	14 9b       	mov	r11,r10
80007416:	fe f8 02 52 	ld.w	r8,pc[594]
8000741a:	70 0c       	ld.w	r12,r8[0x0]
8000741c:	f0 1f 00 94 	mcall	8000766c <main+0x290>
80007420:	c4 40       	breq	800074a8 <main+0xcc>
	file_open(FOPEN_MODE_R);
80007422:	30 9c       	mov	r12,9
80007424:	f0 1f 00 93 	mcall	80007670 <main+0x294>
	file_bof();
80007428:	f0 1f 00 93 	mcall	80007674 <main+0x298>
	
	vid =  file_getc() | (file_getc() << 8);
8000742c:	f0 1f 00 93 	mcall	80007678 <main+0x29c>
80007430:	ed dc b0 10 	bfexts	r6,r12,0x0,0x10
80007434:	f0 1f 00 91 	mcall	80007678 <main+0x29c>
80007438:	fe f7 02 44 	ld.w	r7,pc[580]
8000743c:	5c 7c       	castu.h	r12
8000743e:	ed ec 10 86 	or	r6,r6,r12<<0x8
80007442:	ae 06       	st.h	r7[0x0],r6
	pid =  file_getc() | (file_getc() << 8);
80007444:	f0 1f 00 8d 	mcall	80007678 <main+0x29c>
80007448:	ed dc b0 10 	bfexts	r6,r12,0x0,0x10
8000744c:	f0 1f 00 8b 	mcall	80007678 <main+0x29c>
80007450:	fe f5 02 30 	ld.w	r5,pc[560]
80007454:	5c 7c       	castu.h	r12
80007456:	ed ec 10 86 	or	r6,r6,r12<<0x8
8000745a:	aa 06       	st.h	r5[0x0],r6
	serial_len = file_getc();
8000745c:	f0 1f 00 87 	mcall	80007678 <main+0x29c>
80007460:	fe f8 02 24 	ld.w	r8,pc[548]
80007464:	b0 8c       	st.b	r8[0x0],r12
	//serial = (uint8_t *)dlmalloc(serial_len);
	file_read_buf(serial,sizeof(serial_len));
80007466:	fe f6 02 22 	ld.w	r6,pc[546]
8000746a:	30 1b       	mov	r11,1
8000746c:	0c 9c       	mov	r12,r6
8000746e:	f0 1f 00 88 	mcall	8000768c <main+0x2b0>
	serial_p = &serial;
80007472:	fe f8 02 1e 	ld.w	r8,pc[542]
80007476:	91 06       	st.w	r8[0x0],r6
	//serial[serial_len]='\0';
	udc_device_desc.idVendor = (vid);
80007478:	fe f8 02 1c 	ld.w	r8,pc[540]
8000747c:	8e 89       	ld.uh	r9,r7[0x0]
8000747e:	f2 0a 16 08 	lsr	r10,r9,0x8
80007482:	f1 6a 00 08 	st.b	r8[8],r10
80007486:	f1 69 00 09 	st.b	r8[9],r9
	udc_device_desc.idProduct = (pid);
8000748a:	8a 89       	ld.uh	r9,r5[0x0]
8000748c:	f2 0a 16 08 	lsr	r10,r9,0x8
80007490:	f1 6a 00 0a 	st.b	r8[10],r10
80007494:	f1 69 00 0b 	st.b	r8[11],r9
	udc_device_desc.bcdDevice = 2;
80007498:	30 09       	mov	r9,0
8000749a:	f1 69 00 0c 	st.b	r8[12],r9
8000749e:	30 29       	mov	r9,2
800074a0:	f1 69 00 0d 	st.b	r8[13],r9
		//#define USB_DEVICE_GET_SERIAL_NAME_LENGTH serial_len;
	#define USB_DEVICE_SERIAL_NAME serial;
		
	}
	
	file_close();
800074a4:	f0 1f 00 7d 	mcall	80007698 <main+0x2bc>
}

     //memories_initialization(FOSC0);
     // Start USB stack to authorize VBus monitoring
     udc_start();
800074a8:	f0 1f 00 7d 	mcall	8000769c <main+0x2c0>
 *        udc_attach(); \n
 *     }  \n
 */
static inline bool udc_include_vbus_monitoring(void)
{
	return udd_include_vbus_monitoring();
800074ac:	f0 1f 00 7d 	mcall	800076a0 <main+0x2c4>
 
     if (!udc_include_vbus_monitoring()) {
800074b0:	c0 41       	brne	800074b8 <main+0xdc>
         // VBUS monitoring is not available on this product
         // thereby VBUS has to be considered as present
         main_vbus_action(true);
800074b2:	30 1c       	mov	r12,1
800074b4:	f0 1f 00 7c 	mcall	800076a4 <main+0x2c8>
 
     // The main loop manages only the power mode
     // because the USB management is done by interrupt	 
       while (true) {
 
         if (main_b_msc_enable) {
800074b8:	4f c5       	lddpc	r5,800076a8 <main+0x2cc>
800074ba:	30 07       	mov	r7,0

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
800074bc:	4e 66       	lddpc	r6,80007654 <main+0x278>
800074be:	30 04       	mov	r4,0
800074c0:	0b 88       	ld.ub	r8,r5[0x0]
800074c2:	ee 08 18 00 	cp.b	r8,r7
800074c6:	c6 30       	breq	8000758c <main+0x1b0>
             if (!udi_msc_process_trans()) {
800074c8:	f0 1f 00 79 	mcall	800076ac <main+0x2d0>
800074cc:	cf a1       	brne	800074c0 <main+0xe4>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
800074ce:	d3 03       	ssrf	0x10

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
800074d0:	0d 88       	ld.ub	r8,r6[0x0]
800074d2:	ee 08 18 00 	cp.b	r8,r7
800074d6:	c0 b1       	brne	800074ec <main+0x110>
800074d8:	08 99       	mov	r9,r4
800074da:	0c 98       	mov	r8,r6
		lock_ptr++;
800074dc:	2f f8       	sub	r8,-1
		sleep_mode++;
800074de:	2f f9       	sub	r9,-1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
800074e0:	11 8a       	ld.ub	r10,r8[0x0]
800074e2:	ee 0a 18 00 	cp.b	r10,r7
800074e6:	cf b0       	breq	800074dc <main+0x100>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
800074e8:	58 09       	cp.w	r9,0
800074ea:	c0 31       	brne	800074f0 <main+0x114>
		cpu_irq_enable();
800074ec:	d5 03       	csrf	0x10
800074ee:	ce 9b       	rjmp	800074c0 <main+0xe4>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
800074f0:	d3 03       	ssrf	0x10
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
	switch (sleep_mode) {
800074f2:	f2 c8 00 01 	sub	r8,r9,1
800074f6:	a7 b8       	sbr	r8,0x7
800074f8:	58 58       	cp.w	r8,5
800074fa:	c4 30       	breq	80007580 <main+0x1a4>
800074fc:	e0 89 00 10 	brgt	8000751c <main+0x140>
80007500:	58 28       	cp.w	r8,2
80007502:	c2 d0       	breq	8000755c <main+0x180>
80007504:	e0 89 00 07 	brgt	80007512 <main+0x136>
80007508:	58 08       	cp.w	r8,0
8000750a:	c1 d0       	breq	80007544 <main+0x168>
8000750c:	58 18       	cp.w	r8,1
8000750e:	cd 91       	brne	800074c0 <main+0xe4>
80007510:	c2 08       	rjmp	80007550 <main+0x174>
80007512:	58 38       	cp.w	r8,3
80007514:	c2 a0       	breq	80007568 <main+0x18c>
80007516:	58 48       	cp.w	r8,4
80007518:	cd 41       	brne	800074c0 <main+0xe4>
8000751a:	c2 d8       	rjmp	80007574 <main+0x198>
8000751c:	e0 48 00 82 	cp.w	r8,130
80007520:	c2 10       	breq	80007562 <main+0x186>
80007522:	e0 89 00 09 	brgt	80007534 <main+0x158>
80007526:	e0 48 00 80 	cp.w	r8,128
8000752a:	c1 00       	breq	8000754a <main+0x16e>
8000752c:	e0 48 00 81 	cp.w	r8,129
80007530:	cc 81       	brne	800074c0 <main+0xe4>
80007532:	c1 28       	rjmp	80007556 <main+0x17a>
80007534:	e0 48 00 84 	cp.w	r8,132
80007538:	c2 10       	breq	8000757a <main+0x19e>
8000753a:	c1 a5       	brlt	8000756e <main+0x192>
8000753c:	e0 48 00 85 	cp.w	r8,133
80007540:	cc 01       	brne	800074c0 <main+0xe4>
80007542:	c2 28       	rjmp	80007586 <main+0x1aa>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
80007544:	e9 b0 00 00 	sleep	0x0
80007548:	cb cb       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
8000754a:	e9 b0 00 80 	sleep	0x80
8000754e:	cb 9b       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
80007550:	e9 b0 00 01 	sleep	0x1
80007554:	cb 6b       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
80007556:	e9 b0 00 81 	sleep	0x81
8000755a:	cb 3b       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
8000755c:	e9 b0 00 02 	sleep	0x2
80007560:	cb 0b       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
80007562:	e9 b0 00 82 	sleep	0x82
80007566:	ca db       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
80007568:	e9 b0 00 03 	sleep	0x3
8000756c:	ca ab       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
8000756e:	e9 b0 00 83 	sleep	0x83
80007572:	ca 7b       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
80007574:	e9 b0 00 04 	sleep	0x4
80007578:	ca 4b       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000757a:	e9 b0 00 84 	sleep	0x84
8000757e:	ca 1b       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
80007580:	e9 b0 00 05 	sleep	0x5
80007584:	c9 eb       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
80007586:	e9 b0 00 85 	sleep	0x85
8000758a:	c9 bb       	rjmp	800074c0 <main+0xe4>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
8000758c:	d3 03       	ssrf	0x10

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000758e:	0d 88       	ld.ub	r8,r6[0x0]
80007590:	ee 08 18 00 	cp.b	r8,r7
80007594:	c0 b1       	brne	800075aa <main+0x1ce>
80007596:	08 99       	mov	r9,r4
80007598:	0c 98       	mov	r8,r6
		lock_ptr++;
8000759a:	2f f8       	sub	r8,-1
		sleep_mode++;
8000759c:	2f f9       	sub	r9,-1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
8000759e:	11 8a       	ld.ub	r10,r8[0x0]
800075a0:	ee 0a 18 00 	cp.b	r10,r7
800075a4:	cf b0       	breq	8000759a <main+0x1be>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
800075a6:	58 09       	cp.w	r9,0
800075a8:	c0 31       	brne	800075ae <main+0x1d2>
		cpu_irq_enable();
800075aa:	d5 03       	csrf	0x10
800075ac:	c8 ab       	rjmp	800074c0 <main+0xe4>
800075ae:	d3 03       	ssrf	0x10
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
	switch (sleep_mode) {
800075b0:	20 19       	sub	r9,1
800075b2:	a7 b9       	sbr	r9,0x7
800075b4:	58 59       	cp.w	r9,5
800075b6:	c4 70       	breq	80007644 <main+0x268>
800075b8:	e0 89 00 12 	brgt	800075dc <main+0x200>
800075bc:	58 29       	cp.w	r9,2
800075be:	c3 10       	breq	80007620 <main+0x244>
800075c0:	e0 89 00 08 	brgt	800075d0 <main+0x1f4>
800075c4:	58 09       	cp.w	r9,0
800075c6:	c2 10       	breq	80007608 <main+0x22c>
800075c8:	58 19       	cp.w	r9,1
800075ca:	fe 91 ff 7b 	brne	800074c0 <main+0xe4>
800075ce:	c2 38       	rjmp	80007614 <main+0x238>
800075d0:	58 39       	cp.w	r9,3
800075d2:	c2 d0       	breq	8000762c <main+0x250>
800075d4:	58 49       	cp.w	r9,4
800075d6:	fe 91 ff 75 	brne	800074c0 <main+0xe4>
800075da:	c2 f8       	rjmp	80007638 <main+0x25c>
800075dc:	e0 49 00 82 	cp.w	r9,130
800075e0:	c2 30       	breq	80007626 <main+0x24a>
800075e2:	e0 89 00 0a 	brgt	800075f6 <main+0x21a>
800075e6:	e0 49 00 80 	cp.w	r9,128
800075ea:	c1 20       	breq	8000760e <main+0x232>
800075ec:	e0 49 00 81 	cp.w	r9,129
800075f0:	fe 91 ff 68 	brne	800074c0 <main+0xe4>
800075f4:	c1 38       	rjmp	8000761a <main+0x23e>
800075f6:	e0 49 00 84 	cp.w	r9,132
800075fa:	c2 20       	breq	8000763e <main+0x262>
800075fc:	c1 b5       	brlt	80007632 <main+0x256>
800075fe:	e0 49 00 85 	cp.w	r9,133
80007602:	fe 91 ff 5f 	brne	800074c0 <main+0xe4>
80007606:	c2 28       	rjmp	8000764a <main+0x26e>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
80007608:	e9 b0 00 00 	sleep	0x0
8000760c:	c5 ab       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
8000760e:	e9 b0 00 80 	sleep	0x80
80007612:	c5 7b       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
80007614:	e9 b0 00 01 	sleep	0x1
80007618:	c5 4b       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
8000761a:	e9 b0 00 81 	sleep	0x81
8000761e:	c5 1b       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
80007620:	e9 b0 00 02 	sleep	0x2
80007624:	c4 eb       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
80007626:	e9 b0 00 82 	sleep	0x82
8000762a:	c4 bb       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
8000762c:	e9 b0 00 03 	sleep	0x3
80007630:	c4 8b       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
80007632:	e9 b0 00 83 	sleep	0x83
80007636:	c4 5b       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
80007638:	e9 b0 00 04 	sleep	0x4
8000763c:	c4 2b       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000763e:	e9 b0 00 84 	sleep	0x84
80007642:	c3 fb       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
80007644:	e9 b0 00 05 	sleep	0x5
80007648:	c3 cb       	rjmp	800074c0 <main+0xe4>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
8000764a:	e9 b0 00 85 	sleep	0x85
8000764e:	c3 9b       	rjmp	800074c0 <main+0xe4>
80007650:	80 00       	ld.sh	r0,r0[0x0]
80007652:	57 2c       	stdsp	sp[0x1c8],r12
80007654:	00 00       	add	r0,r0
80007656:	09 a8       	ld.ub	r8,r4[0x2]
80007658:	80 00       	ld.sh	r0,r0[0x0]
8000765a:	69 14       	ld.w	r4,r4[0x44]
8000765c:	80 00       	ld.sh	r0,r0[0x0]
8000765e:	20 04       	sub	r4,0
80007660:	80 00       	ld.sh	r0,r0[0x0]
80007662:	73 0c       	ld.w	r12,r9[0x40]
80007664:	80 00       	ld.sh	r0,r0[0x0]
80007666:	48 94       	lddpc	r4,80007688 <main+0x2ac>
80007668:	00 00       	add	r0,r0
8000766a:	00 f0       	st.b	--r0,r0
8000766c:	80 00       	ld.sh	r0,r0[0x0]
8000766e:	46 a0       	lddsp	r0,sp[0x1a8]
80007670:	80 00       	ld.sh	r0,r0[0x0]
80007672:	41 a4       	lddsp	r4,sp[0x68]
80007674:	80 00       	ld.sh	r0,r0[0x0]
80007676:	3f 88       	mov	r8,-8
80007678:	80 00       	ld.sh	r0,r0[0x0]
8000767a:	3f a8       	mov	r8,-6
8000767c:	00 00       	add	r0,r0
8000767e:	09 b2       	ld.ub	r2,r4[0x3]
80007680:	00 00       	add	r0,r0
80007682:	09 b0       	ld.ub	r0,r4[0x3]
80007684:	00 00       	add	r0,r0
80007686:	04 61       	and	r1,r2
80007688:	00 00       	add	r0,r0
8000768a:	04 64       	and	r4,r2
8000768c:	80 00       	ld.sh	r0,r0[0x0]
8000768e:	40 14       	lddsp	r4,sp[0x4]
80007690:	00 00       	add	r0,r0
80007692:	04 70       	tst	r0,r2
80007694:	00 00       	add	r0,r0
80007696:	00 1c       	sub	r12,r0
80007698:	80 00       	ld.sh	r0,r0[0x0]
8000769a:	3f 4c       	mov	r12,-12
8000769c:	80 00       	ld.sh	r0,r0[0x0]
8000769e:	72 ec       	ld.w	r12,r9[0x38]
800076a0:	80 00       	ld.sh	r0,r0[0x0]
800076a2:	59 ba       	cp.w	r10,27
800076a4:	80 00       	ld.sh	r0,r0[0x0]
800076a6:	73 c0       	ld.w	r0,r9[0x70]
800076a8:	00 00       	add	r0,r0
800076aa:	04 62       	and	r2,r2
800076ac:	80 00       	ld.sh	r0,r0[0x0]
800076ae:	4b e0       	lddpc	r0,800077a4 <memcpy+0xf4>

800076b0 <memcpy>:
800076b0:	58 8a       	cp.w	r10,8
800076b2:	c2 f5       	brlt	80007710 <memcpy+0x60>
800076b4:	f9 eb 10 09 	or	r9,r12,r11
800076b8:	e2 19 00 03 	andl	r9,0x3,COH
800076bc:	e0 81 00 97 	brne	800077ea <memcpy+0x13a>
800076c0:	e0 4a 00 20 	cp.w	r10,32
800076c4:	c3 b4       	brge	8000773a <memcpy+0x8a>
800076c6:	f4 08 14 02 	asr	r8,r10,0x2
800076ca:	f0 09 11 08 	rsub	r9,r8,8
800076ce:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800076d2:	76 69       	ld.w	r9,r11[0x18]
800076d4:	99 69       	st.w	r12[0x18],r9
800076d6:	76 59       	ld.w	r9,r11[0x14]
800076d8:	99 59       	st.w	r12[0x14],r9
800076da:	76 49       	ld.w	r9,r11[0x10]
800076dc:	99 49       	st.w	r12[0x10],r9
800076de:	76 39       	ld.w	r9,r11[0xc]
800076e0:	99 39       	st.w	r12[0xc],r9
800076e2:	76 29       	ld.w	r9,r11[0x8]
800076e4:	99 29       	st.w	r12[0x8],r9
800076e6:	76 19       	ld.w	r9,r11[0x4]
800076e8:	99 19       	st.w	r12[0x4],r9
800076ea:	76 09       	ld.w	r9,r11[0x0]
800076ec:	99 09       	st.w	r12[0x0],r9
800076ee:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800076f2:	f8 08 00 28 	add	r8,r12,r8<<0x2
800076f6:	e0 1a 00 03 	andl	r10,0x3
800076fa:	f4 0a 11 04 	rsub	r10,r10,4
800076fe:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80007702:	17 a9       	ld.ub	r9,r11[0x2]
80007704:	b0 a9       	st.b	r8[0x2],r9
80007706:	17 99       	ld.ub	r9,r11[0x1]
80007708:	b0 99       	st.b	r8[0x1],r9
8000770a:	17 89       	ld.ub	r9,r11[0x0]
8000770c:	b0 89       	st.b	r8[0x0],r9
8000770e:	5e fc       	retal	r12
80007710:	f4 0a 11 09 	rsub	r10,r10,9
80007714:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80007718:	17 f9       	ld.ub	r9,r11[0x7]
8000771a:	b8 f9       	st.b	r12[0x7],r9
8000771c:	17 e9       	ld.ub	r9,r11[0x6]
8000771e:	b8 e9       	st.b	r12[0x6],r9
80007720:	17 d9       	ld.ub	r9,r11[0x5]
80007722:	b8 d9       	st.b	r12[0x5],r9
80007724:	17 c9       	ld.ub	r9,r11[0x4]
80007726:	b8 c9       	st.b	r12[0x4],r9
80007728:	17 b9       	ld.ub	r9,r11[0x3]
8000772a:	b8 b9       	st.b	r12[0x3],r9
8000772c:	17 a9       	ld.ub	r9,r11[0x2]
8000772e:	b8 a9       	st.b	r12[0x2],r9
80007730:	17 99       	ld.ub	r9,r11[0x1]
80007732:	b8 99       	st.b	r12[0x1],r9
80007734:	17 89       	ld.ub	r9,r11[0x0]
80007736:	b8 89       	st.b	r12[0x0],r9
80007738:	5e fc       	retal	r12
8000773a:	eb cd 40 c0 	pushm	r6-r7,lr
8000773e:	18 99       	mov	r9,r12
80007740:	22 0a       	sub	r10,32
80007742:	b7 07       	ld.d	r6,r11++
80007744:	b3 26       	st.d	r9++,r6
80007746:	b7 07       	ld.d	r6,r11++
80007748:	b3 26       	st.d	r9++,r6
8000774a:	b7 07       	ld.d	r6,r11++
8000774c:	b3 26       	st.d	r9++,r6
8000774e:	b7 07       	ld.d	r6,r11++
80007750:	b3 26       	st.d	r9++,r6
80007752:	22 0a       	sub	r10,32
80007754:	cf 74       	brge	80007742 <memcpy+0x92>
80007756:	2f 0a       	sub	r10,-16
80007758:	c0 65       	brlt	80007764 <memcpy+0xb4>
8000775a:	b7 07       	ld.d	r6,r11++
8000775c:	b3 26       	st.d	r9++,r6
8000775e:	b7 07       	ld.d	r6,r11++
80007760:	b3 26       	st.d	r9++,r6
80007762:	21 0a       	sub	r10,16
80007764:	5c 3a       	neg	r10
80007766:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000776a:	d7 03       	nop
8000776c:	d7 03       	nop
8000776e:	f7 36 00 0e 	ld.ub	r6,r11[14]
80007772:	f3 66 00 0e 	st.b	r9[14],r6
80007776:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000777a:	f3 66 00 0d 	st.b	r9[13],r6
8000777e:	f7 36 00 0c 	ld.ub	r6,r11[12]
80007782:	f3 66 00 0c 	st.b	r9[12],r6
80007786:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000778a:	f3 66 00 0b 	st.b	r9[11],r6
8000778e:	f7 36 00 0a 	ld.ub	r6,r11[10]
80007792:	f3 66 00 0a 	st.b	r9[10],r6
80007796:	f7 36 00 09 	ld.ub	r6,r11[9]
8000779a:	f3 66 00 09 	st.b	r9[9],r6
8000779e:	f7 36 00 08 	ld.ub	r6,r11[8]
800077a2:	f3 66 00 08 	st.b	r9[8],r6
800077a6:	f7 36 00 07 	ld.ub	r6,r11[7]
800077aa:	f3 66 00 07 	st.b	r9[7],r6
800077ae:	f7 36 00 06 	ld.ub	r6,r11[6]
800077b2:	f3 66 00 06 	st.b	r9[6],r6
800077b6:	f7 36 00 05 	ld.ub	r6,r11[5]
800077ba:	f3 66 00 05 	st.b	r9[5],r6
800077be:	f7 36 00 04 	ld.ub	r6,r11[4]
800077c2:	f3 66 00 04 	st.b	r9[4],r6
800077c6:	f7 36 00 03 	ld.ub	r6,r11[3]
800077ca:	f3 66 00 03 	st.b	r9[3],r6
800077ce:	f7 36 00 02 	ld.ub	r6,r11[2]
800077d2:	f3 66 00 02 	st.b	r9[2],r6
800077d6:	f7 36 00 01 	ld.ub	r6,r11[1]
800077da:	f3 66 00 01 	st.b	r9[1],r6
800077de:	f7 36 00 00 	ld.ub	r6,r11[0]
800077e2:	f3 66 00 00 	st.b	r9[0],r6
800077e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800077ea:	20 1a       	sub	r10,1
800077ec:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800077f0:	f8 0a 0b 09 	st.b	r12[r10],r9
800077f4:	cf b1       	brne	800077ea <memcpy+0x13a>
800077f6:	5e fc       	retal	r12

Disassembly of section .exception:

80007800 <_evba>:
80007800:	c0 08       	rjmp	80007800 <_evba>
	...

80007804 <_handle_TLB_Multiple_Hit>:
80007804:	c0 08       	rjmp	80007804 <_handle_TLB_Multiple_Hit>
	...

80007808 <_handle_Bus_Error_Data_Fetch>:
80007808:	c0 08       	rjmp	80007808 <_handle_Bus_Error_Data_Fetch>
	...

8000780c <_handle_Bus_Error_Instruction_Fetch>:
8000780c:	c0 08       	rjmp	8000780c <_handle_Bus_Error_Instruction_Fetch>
	...

80007810 <_handle_NMI>:
80007810:	c0 08       	rjmp	80007810 <_handle_NMI>
	...

80007814 <_handle_Instruction_Address>:
80007814:	c0 08       	rjmp	80007814 <_handle_Instruction_Address>
	...

80007818 <_handle_ITLB_Protection>:
80007818:	c0 08       	rjmp	80007818 <_handle_ITLB_Protection>
	...

8000781c <_handle_Breakpoint>:
8000781c:	c0 08       	rjmp	8000781c <_handle_Breakpoint>
	...

80007820 <_handle_Illegal_Opcode>:
80007820:	c0 08       	rjmp	80007820 <_handle_Illegal_Opcode>
	...

80007824 <_handle_Unimplemented_Instruction>:
80007824:	c0 08       	rjmp	80007824 <_handle_Unimplemented_Instruction>
	...

80007828 <_handle_Privilege_Violation>:
80007828:	c0 08       	rjmp	80007828 <_handle_Privilege_Violation>
	...

8000782c <_handle_Floating_Point>:
8000782c:	c0 08       	rjmp	8000782c <_handle_Floating_Point>
	...

80007830 <_handle_Coprocessor_Absent>:
80007830:	c0 08       	rjmp	80007830 <_handle_Coprocessor_Absent>
	...

80007834 <_handle_Data_Address_Read>:
80007834:	c0 08       	rjmp	80007834 <_handle_Data_Address_Read>
	...

80007838 <_handle_Data_Address_Write>:
80007838:	c0 08       	rjmp	80007838 <_handle_Data_Address_Write>
	...

8000783c <_handle_DTLB_Protection_Read>:
8000783c:	c0 08       	rjmp	8000783c <_handle_DTLB_Protection_Read>
	...

80007840 <_handle_DTLB_Protection_Write>:
80007840:	c0 08       	rjmp	80007840 <_handle_DTLB_Protection_Write>
	...

80007844 <_handle_DTLB_Modified>:
80007844:	c0 08       	rjmp	80007844 <_handle_DTLB_Modified>
	...

80007850 <_handle_ITLB_Miss>:
80007850:	c0 08       	rjmp	80007850 <_handle_ITLB_Miss>
	...

80007860 <_handle_DTLB_Miss_Read>:
80007860:	c0 08       	rjmp	80007860 <_handle_DTLB_Miss_Read>
	...

80007870 <_handle_DTLB_Miss_Write>:
80007870:	c0 08       	rjmp	80007870 <_handle_DTLB_Miss_Write>
	...

80007900 <_handle_Supervisor_Call>:
80007900:	c0 08       	rjmp	80007900 <_handle_Supervisor_Call>
80007902:	d7 03       	nop

80007904 <_int0>:
80007904:	30 0c       	mov	r12,0
80007906:	fe b0 ef 3d 	rcall	80005780 <_get_interrupt_handler>
8000790a:	58 0c       	cp.w	r12,0
8000790c:	f8 0f 17 10 	movne	pc,r12
80007910:	d6 03       	rete

80007912 <_int1>:
80007912:	30 1c       	mov	r12,1
80007914:	fe b0 ef 36 	rcall	80005780 <_get_interrupt_handler>
80007918:	58 0c       	cp.w	r12,0
8000791a:	f8 0f 17 10 	movne	pc,r12
8000791e:	d6 03       	rete

80007920 <_int2>:
80007920:	30 2c       	mov	r12,2
80007922:	fe b0 ef 2f 	rcall	80005780 <_get_interrupt_handler>
80007926:	58 0c       	cp.w	r12,0
80007928:	f8 0f 17 10 	movne	pc,r12
8000792c:	d6 03       	rete

8000792e <_int3>:
8000792e:	30 3c       	mov	r12,3
80007930:	fe b0 ef 28 	rcall	80005780 <_get_interrupt_handler>
80007934:	58 0c       	cp.w	r12,0
80007936:	f8 0f 17 10 	movne	pc,r12
8000793a:	d6 03       	rete
8000793c:	d7 03       	nop
8000793e:	d7 03       	nop
80007940:	d7 03       	nop
80007942:	d7 03       	nop
80007944:	d7 03       	nop
80007946:	d7 03       	nop
80007948:	d7 03       	nop
8000794a:	d7 03       	nop
8000794c:	d7 03       	nop
8000794e:	d7 03       	nop
80007950:	d7 03       	nop
80007952:	d7 03       	nop
80007954:	d7 03       	nop
80007956:	d7 03       	nop
80007958:	d7 03       	nop
8000795a:	d7 03       	nop
8000795c:	d7 03       	nop
8000795e:	d7 03       	nop
80007960:	d7 03       	nop
80007962:	d7 03       	nop
80007964:	d7 03       	nop
80007966:	d7 03       	nop
80007968:	d7 03       	nop
8000796a:	d7 03       	nop
8000796c:	d7 03       	nop
8000796e:	d7 03       	nop
80007970:	d7 03       	nop
80007972:	d7 03       	nop
80007974:	d7 03       	nop
80007976:	d7 03       	nop
80007978:	d7 03       	nop
8000797a:	d7 03       	nop
8000797c:	d7 03       	nop
8000797e:	d7 03       	nop
80007980:	d7 03       	nop
80007982:	d7 03       	nop
80007984:	d7 03       	nop
80007986:	d7 03       	nop
80007988:	d7 03       	nop
8000798a:	d7 03       	nop
8000798c:	d7 03       	nop
8000798e:	d7 03       	nop
80007990:	d7 03       	nop
80007992:	d7 03       	nop
80007994:	d7 03       	nop
80007996:	d7 03       	nop
80007998:	d7 03       	nop
8000799a:	d7 03       	nop
8000799c:	d7 03       	nop
8000799e:	d7 03       	nop
800079a0:	d7 03       	nop
800079a2:	d7 03       	nop
800079a4:	d7 03       	nop
800079a6:	d7 03       	nop
800079a8:	d7 03       	nop
800079aa:	d7 03       	nop
800079ac:	d7 03       	nop
800079ae:	d7 03       	nop
800079b0:	d7 03       	nop
800079b2:	d7 03       	nop
800079b4:	d7 03       	nop
800079b6:	d7 03       	nop
800079b8:	d7 03       	nop
800079ba:	d7 03       	nop
800079bc:	d7 03       	nop
800079be:	d7 03       	nop
800079c0:	d7 03       	nop
800079c2:	d7 03       	nop
800079c4:	d7 03       	nop
800079c6:	d7 03       	nop
800079c8:	d7 03       	nop
800079ca:	d7 03       	nop
800079cc:	d7 03       	nop
800079ce:	d7 03       	nop
800079d0:	d7 03       	nop
800079d2:	d7 03       	nop
800079d4:	d7 03       	nop
800079d6:	d7 03       	nop
800079d8:	d7 03       	nop
800079da:	d7 03       	nop
800079dc:	d7 03       	nop
800079de:	d7 03       	nop
800079e0:	d7 03       	nop
800079e2:	d7 03       	nop
800079e4:	d7 03       	nop
800079e6:	d7 03       	nop
800079e8:	d7 03       	nop
800079ea:	d7 03       	nop
800079ec:	d7 03       	nop
800079ee:	d7 03       	nop
800079f0:	d7 03       	nop
800079f2:	d7 03       	nop
800079f4:	d7 03       	nop
800079f6:	d7 03       	nop
800079f8:	d7 03       	nop
800079fa:	d7 03       	nop
800079fc:	d7 03       	nop
800079fe:	d7 03       	nop
