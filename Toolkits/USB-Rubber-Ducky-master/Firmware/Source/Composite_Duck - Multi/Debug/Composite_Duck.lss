
Composite_Duck.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006200  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80008400  80008400  00008800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000404  80008600  80008600  00008a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  80008a04  80008a04  00008e04  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000164  00000008  80008a08  00009008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .balign       00000004  0000016c  80008b6c  0000916c  2**0
                  ALLOC
  9 .bss          00002900  00000170  00000170  00000000  2**2
                  ALLOC
 10 .heap         00004590  00002a70  00002a70  00000000  2**0
                  ALLOC
 11 .comment      00000030  00000000  00000000  0000916c  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000f78  00000000  00000000  000091a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubnames 000028ee  00000000  00000000  0000a118  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_info   0001e32c  00000000  00000000  0000ca06  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00003588  00000000  00000000  0002ad32  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000f452  00000000  00000000  0002e2ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00002970  00000000  00000000  0003d70c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008f97  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    00006960  00000000  00000000  00049013  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macinfo 01443fce  00000000  00000000  0004f973  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .stack        00001000  00007000  00007000  00000000  2**0
                  ALLOC
 22 .debug_ranges 00000fc0  00000000  00000000  01493948  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf 9d 38 	sub	pc,pc,-25288

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf bd 3c 	sub	pc,pc,-17092

Disassembly of section .text:

80002008 <sd_mmc_spi_get_capacity>:
80002008:	d4 01       	pushm	lr
8000200a:	4c 18       	lddpc	r8,8000210c <sd_mmc_spi_get_capacity+0x104>
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
8000200c:	11 db       	ld.ub	r11,r8[0x5]
  if (card_type == SD_CARD_2_SDHC) {
8000200e:	4c 18       	lddpc	r8,80002110 <sd_mmc_spi_get_capacity+0x108>
80002010:	11 8a       	ld.ub	r10,r8[0x0]
80002012:	30 38       	mov	r8,3
80002014:	f0 0a 18 00 	cp.b	r10,r8
80002018:	c2 71       	brne	80002066 <sd_mmc_spi_get_capacity+0x5e>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
8000201a:	4b d8       	lddpc	r8,8000210c <sd_mmc_spi_get_capacity+0x104>
8000201c:	f1 3a 00 08 	ld.ub	r10,r8[8]
80002020:	f1 39 00 09 	ld.ub	r9,r8[9]
80002024:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80002028:	11 fa       	ld.ub	r10,r8[0x7]
8000202a:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
8000202e:	f3 ea 11 0a 	or	r10,r9,r10<<0x10
    ++c_size;
80002032:	2f fa       	sub	r10,-1
    capacity = (uint64_t)c_size << 19;
80002034:	f4 0b 16 0d 	lsr	r11,r10,0xd
80002038:	16 99       	mov	r9,r11
8000203a:	f4 08 15 13 	lsl	r8,r10,0x13
8000203e:	4b 6a       	lddpc	r10,80002114 <sd_mmc_spi_get_capacity+0x10c>
80002040:	f4 e9 00 00 	st.d	r10[0],r8
    capacity_mult = (c_size >> 13) & 0x01FF;
80002044:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002048:	4b 48       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x110>
8000204a:	b0 0b       	st.h	r8[0x0],r11
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
8000204c:	f4 ea 00 00 	ld.d	r10,r10[0]
80002050:	90 09       	ld.sh	r9,r8[0x0]
80002052:	f4 08 16 09 	lsr	r8,r10,0x9
80002056:	f1 eb 11 78 	or	r8,r8,r11<<0x17
8000205a:	20 18       	sub	r8,1
8000205c:	b7 79       	lsl	r9,0x17
8000205e:	12 08       	add	r8,r9
80002060:	4a f9       	lddpc	r9,8000211c <sd_mmc_spi_get_capacity+0x114>
80002062:	93 08       	st.w	r9[0x0],r8
80002064:	c4 28       	rjmp	800020e8 <sd_mmc_spi_get_capacity+0xe0>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80002066:	4a a8       	lddpc	r8,8000210c <sd_mmc_spi_get_capacity+0x104>
80002068:	f1 3c 00 0a 	ld.ub	r12,r8[10]
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
8000206c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002070:	a7 89       	lsr	r9,0x6
80002072:	11 fe       	ld.ub	lr,r8[0x7]
80002074:	f2 0e 00 29 	add	r9,r9,lr<<0x2
80002078:	11 ee       	ld.ub	lr,r8[0x6]
8000207a:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
8000207e:	ab 6e       	lsl	lr,0xa
80002080:	1c 09       	add	r9,lr
80002082:	2f f9       	sub	r9,-1
80002084:	f1 38 00 09 	ld.ub	r8,r8[9]
80002088:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000208c:	f8 0e 16 07 	lsr	lr,r12,0x7
80002090:	fc 08 00 18 	add	r8,lr,r8<<0x1
80002094:	2f e8       	sub	r8,-2
80002096:	f2 08 09 49 	lsl	r9,r9,r8
8000209a:	20 19       	sub	r9,1
8000209c:	4a 08       	lddpc	r8,8000211c <sd_mmc_spi_get_capacity+0x114>
8000209e:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
800020a0:	70 0e       	ld.w	lr,r8[0x0]
800020a2:	f7 db c0 04 	bfextu	r11,r11,0x0,0x4
800020a6:	2f fe       	sub	lr,-1
800020a8:	fc 0b 09 48 	lsl	r8,lr,r11
800020ac:	30 09       	mov	r9,0
800020ae:	49 ae       	lddpc	lr,80002114 <sd_mmc_spi_get_capacity+0x10c>
800020b0:	fc e9 00 00 	st.d	lr[0],r8
    capacity_mult = 0;
800020b4:	49 98       	lddpc	r8,80002118 <sd_mmc_spi_get_capacity+0x110>
800020b6:	b0 09       	st.h	r8[0x0],r9
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
800020b8:	30 98       	mov	r8,9
800020ba:	f0 0b 18 00 	cp.b	r11,r8
800020be:	e0 88 00 08 	brls	800020ce <sd_mmc_spi_get_capacity+0xc6>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
800020c2:	49 78       	lddpc	r8,8000211c <sd_mmc_spi_get_capacity+0x114>
800020c4:	70 09       	ld.w	r9,r8[0x0]
800020c6:	20 9b       	sub	r11,9
800020c8:	f2 0b 09 4b 	lsl	r11,r9,r11
800020cc:	91 0b       	st.w	r8[0x0],r11
    }
  }
  if (card_type == MMC_CARD)
800020ce:	58 0a       	cp.w	r10,0
800020d0:	c0 c1       	brne	800020e8 <sd_mmc_spi_get_capacity+0xe0>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
800020d2:	f1 dc c0 45 	bfextu	r8,r12,0x2,0x5
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
800020d6:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
800020da:	48 d9       	lddpc	r9,8000210c <sd_mmc_spi_get_capacity+0x104>
800020dc:	f3 39 00 0b 	ld.ub	r9,r9[11]
800020e0:	a3 7c       	lsl	r12,0x3
800020e2:	f9 e9 12 59 	or	r9,r12,r9>>0x5
800020e6:	c0 c8       	rjmp	800020fe <sd_mmc_spi_get_capacity+0xf6>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
800020e8:	48 9a       	lddpc	r10,8000210c <sd_mmc_spi_get_capacity+0x104>
800020ea:	f5 39 00 0a 	ld.ub	r9,r10[10]
800020ee:	f3 d9 c0 06 	bfextu	r9,r9,0x0,0x6
800020f2:	f5 38 00 0b 	ld.ub	r8,r10[11]
800020f6:	a7 98       	lsr	r8,0x7
800020f8:	f0 09 00 18 	add	r8,r8,r9<<0x1
800020fc:	30 09       	mov	r9,0
    erase_grp_mult = 0;
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800020fe:	2f f9       	sub	r9,-1
80002100:	2f f8       	sub	r8,-1
80002102:	b1 39       	mul	r9,r8
80002104:	48 78       	lddpc	r8,80002120 <sd_mmc_spi_get_capacity+0x118>
80002106:	b0 09       	st.h	r8[0x0],r9
}
80002108:	d8 02       	popm	pc
8000210a:	00 00       	add	r0,r0
8000210c:	00 00       	add	r0,r0
8000210e:	27 48       	sub	r8,116
80002110:	00 00       	add	r0,r0
80002112:	27 46       	sub	r6,116
80002114:	00 00       	add	r0,r0
80002116:	27 34       	sub	r4,115
80002118:	00 00       	add	r0,r0
8000211a:	27 3c       	sub	r12,115
8000211c:	00 00       	add	r0,r0
8000211e:	27 40       	sub	r0,116
80002120:	00 00       	add	r0,r0
80002122:	27 3e       	sub	lr,115

80002124 <sd_mmc_spi_write_close>:
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{

}
80002124:	5e fc       	retal	r12
80002126:	d7 03       	nop

80002128 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
80002128:	d4 01       	pushm	lr
8000212a:	20 1d       	sub	sp,4
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
8000212c:	18 9b       	mov	r11,r12
8000212e:	fe 7c 24 00 	mov	r12,-56320
80002132:	f0 1f 00 09 	mcall	80002154 <sd_mmc_spi_send_and_read+0x2c>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
80002136:	fa cb ff fe 	sub	r11,sp,-2
8000213a:	fe 7c 24 00 	mov	r12,-56320
8000213e:	f0 1f 00 07 	mcall	80002158 <sd_mmc_spi_send_and_read+0x30>
80002142:	58 1c       	cp.w	r12,1
80002144:	c0 41       	brne	8000214c <sd_mmc_spi_send_and_read+0x24>
80002146:	e0 6c 00 ff 	mov	r12,255
8000214a:	c0 28       	rjmp	8000214e <sd_mmc_spi_send_and_read+0x26>
     return 0xFF;
   return data_read;
8000214c:	1b bc       	ld.ub	r12,sp[0x3]
}
8000214e:	2f fd       	sub	sp,-4
80002150:	d8 02       	popm	pc
80002152:	00 00       	add	r0,r0
80002154:	80 00       	ld.sh	r0,r0[0x0]
80002156:	51 fa       	stdsp	sp[0x7c],r10
80002158:	80 00       	ld.sh	r0,r0[0x0]
8000215a:	52 16       	stdsp	sp[0x84],r6

8000215c <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
8000215c:	d4 21       	pushm	r4-r7,lr
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000215e:	30 1b       	mov	r11,1
80002160:	fe 7c 24 00 	mov	r12,-56320
80002164:	f0 1f 00 10 	mcall	800021a4 <sd_mmc_spi_wait_not_busy+0x48>
80002168:	30 07       	mov	r7,0
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
8000216a:	e0 65 00 ff 	mov	r5,255
8000216e:	48 f4       	lddpc	r4,800021a8 <sd_mmc_spi_wait_not_busy+0x4c>
80002170:	3f f6       	mov	r6,-1
80002172:	c0 b8       	rjmp	80002188 <sd_mmc_spi_wait_not_busy+0x2c>
  {
    retry++;
80002174:	2f f7       	sub	r7,-1
    if (retry == 200000)
80002176:	e2 57 0d 40 	cp.w	r7,200000
8000217a:	c0 71       	brne	80002188 <sd_mmc_spi_wait_not_busy+0x2c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
8000217c:	30 1b       	mov	r11,1
8000217e:	fe 7c 24 00 	mov	r12,-56320
80002182:	f0 1f 00 0b 	mcall	800021ac <sd_mmc_spi_wait_not_busy+0x50>
80002186:	d8 2a       	popm	r4-r7,pc,r12=0
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002188:	0a 9c       	mov	r12,r5
8000218a:	f0 1f 00 0a 	mcall	800021b0 <sd_mmc_spi_wait_not_busy+0x54>
8000218e:	a8 8c       	st.b	r4[0x0],r12
80002190:	ec 0c 18 00 	cp.b	r12,r6
80002194:	cf 01       	brne	80002174 <sd_mmc_spi_wait_not_busy+0x18>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002196:	30 1b       	mov	r11,1
80002198:	fe 7c 24 00 	mov	r12,-56320
8000219c:	f0 1f 00 04 	mcall	800021ac <sd_mmc_spi_wait_not_busy+0x50>
800021a0:	da 2a       	popm	r4-r7,pc,r12=1
800021a2:	00 00       	add	r0,r0
800021a4:	80 00       	ld.sh	r0,r0[0x0]
800021a6:	50 c0       	stdsp	sp[0x30],r0
800021a8:	00 00       	add	r0,r0
800021aa:	27 58       	sub	r8,117
800021ac:	80 00       	ld.sh	r0,r0[0x0]
800021ae:	51 0c       	stdsp	sp[0x40],r12
800021b0:	80 00       	ld.sh	r0,r0[0x0]
800021b2:	21 28       	sub	r8,18

800021b4 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
800021b4:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
800021b6:	a9 7c       	lsl	r12,0x9
800021b8:	48 38       	lddpc	r8,800021c4 <sd_mmc_spi_write_open+0x10>
800021ba:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021bc:	f0 1f 00 03 	mcall	800021c8 <sd_mmc_spi_write_open+0x14>
}
800021c0:	d8 02       	popm	pc
800021c2:	00 00       	add	r0,r0
800021c4:	00 00       	add	r0,r0
800021c6:	01 70       	ld.ub	r0,--r0
800021c8:	80 00       	ld.sh	r0,r0[0x0]
800021ca:	21 5c       	sub	r12,21

800021cc <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
800021cc:	d4 01       	pushm	lr
  if (false == sd_mmc_spi_wait_not_busy())
800021ce:	f0 1f 00 02 	mcall	800021d4 <sd_mmc_spi_read_close+0x8>
    return false;
  return true;
}
800021d2:	d8 02       	popm	pc
800021d4:	80 00       	ld.sh	r0,r0[0x0]
800021d6:	21 5c       	sub	r12,21

800021d8 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
800021d8:	d4 01       	pushm	lr
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
800021da:	a9 7c       	lsl	r12,0x9
800021dc:	48 38       	lddpc	r8,800021e8 <sd_mmc_spi_read_open+0x10>
800021de:	91 0c       	st.w	r8[0x0],r12

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
800021e0:	f0 1f 00 03 	mcall	800021ec <sd_mmc_spi_read_open+0x14>
}
800021e4:	d8 02       	popm	pc
800021e6:	00 00       	add	r0,r0
800021e8:	00 00       	add	r0,r0
800021ea:	01 70       	ld.ub	r0,--r0
800021ec:	80 00       	ld.sh	r0,r0[0x0]
800021ee:	21 5c       	sub	r12,21

800021f0 <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800021f0:	eb cd 40 f8 	pushm	r3-r7,lr
800021f4:	18 96       	mov	r6,r12
800021f6:	16 97       	mov	r7,r11
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
800021f8:	e0 6b 00 ff 	mov	r11,255
800021fc:	fe 7c 24 00 	mov	r12,-56320
80002200:	f0 1f 00 2b 	mcall	800022ac <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
80002204:	0c 9b       	mov	r11,r6
80002206:	a7 ab       	sbr	r11,0x6
80002208:	5c 5b       	castu.b	r11
8000220a:	fe 7c 24 00 	mov	r12,-56320
8000220e:	f0 1f 00 28 	mcall	800022ac <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
80002212:	ee 0b 16 18 	lsr	r11,r7,0x18
80002216:	fe 7c 24 00 	mov	r12,-56320
8000221a:	f0 1f 00 25 	mcall	800022ac <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>16);
8000221e:	ee 0b 16 10 	lsr	r11,r7,0x10
80002222:	fe 7c 24 00 	mov	r12,-56320
80002226:	f0 1f 00 22 	mcall	800022ac <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg>>8 );
8000222a:	f7 d7 c1 10 	bfextu	r11,r7,0x8,0x10
8000222e:	fe 7c 24 00 	mov	r12,-56320
80002232:	f0 1f 00 1f 	mcall	800022ac <sd_mmc_spi_command+0xbc>
  spi_write(SD_MMC_SPI, arg    );
80002236:	0e 9b       	mov	r11,r7
80002238:	5c 7b       	castu.h	r11
8000223a:	fe 7c 24 00 	mov	r12,-56320
8000223e:	f0 1f 00 1c 	mcall	800022ac <sd_mmc_spi_command+0xbc>
  switch(command)
80002242:	30 08       	mov	r8,0
80002244:	f0 06 18 00 	cp.b	r6,r8
80002248:	c0 60       	breq	80002254 <sd_mmc_spi_command+0x64>
8000224a:	30 88       	mov	r8,8
8000224c:	f0 06 18 00 	cp.b	r6,r8
80002250:	c1 01       	brne	80002270 <sd_mmc_spi_command+0x80>
80002252:	c0 88       	rjmp	80002262 <sd_mmc_spi_command+0x72>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80002254:	e0 6b 00 95 	mov	r11,149
80002258:	fe 7c 24 00 	mov	r12,-56320
8000225c:	f0 1f 00 14 	mcall	800022ac <sd_mmc_spi_command+0xbc>
         break;
80002260:	c0 e8       	rjmp	8000227c <sd_mmc_spi_command+0x8c>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
80002262:	e0 6b 00 87 	mov	r11,135
80002266:	fe 7c 24 00 	mov	r12,-56320
8000226a:	f0 1f 00 11 	mcall	800022ac <sd_mmc_spi_command+0xbc>
         break;
8000226e:	c0 78       	rjmp	8000227c <sd_mmc_spi_command+0x8c>
      default:
         spi_write(SD_MMC_SPI, 0xff);
80002270:	e0 6b 00 ff 	mov	r11,255
80002274:	fe 7c 24 00 	mov	r12,-56320
80002278:	f0 1f 00 0d 	mcall	800022ac <sd_mmc_spi_command+0xbc>

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
8000227c:	3f f9       	mov	r9,-1
8000227e:	48 d8       	lddpc	r8,800022b0 <sd_mmc_spi_command+0xc0>
80002280:	b0 89       	st.b	r8[0x0],r9
80002282:	30 07       	mov	r7,0
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002284:	e0 64 00 ff 	mov	r4,255
80002288:	10 93       	mov	r3,r8
8000228a:	12 96       	mov	r6,r9
  {
    retry++;
    if(retry > 10) break;
8000228c:	30 b5       	mov	r5,11
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000228e:	c0 68       	rjmp	8000229a <sd_mmc_spi_command+0xaa>
  {
    retry++;
80002290:	2f f7       	sub	r7,-1
80002292:	5c 57       	castu.b	r7
    if(retry > 10) break;
80002294:	ea 07 18 00 	cp.b	r7,r5
80002298:	c0 80       	breq	800022a8 <sd_mmc_spi_command+0xb8>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000229a:	08 9c       	mov	r12,r4
8000229c:	f0 1f 00 06 	mcall	800022b4 <sd_mmc_spi_command+0xc4>
800022a0:	a6 8c       	st.b	r3[0x0],r12
800022a2:	ec 0c 18 00 	cp.b	r12,r6
800022a6:	cf 50       	breq	80002290 <sd_mmc_spi_command+0xa0>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
}
800022a8:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800022ac:	80 00       	ld.sh	r0,r0[0x0]
800022ae:	51 fa       	stdsp	sp[0x7c],r10
800022b0:	00 00       	add	r0,r0
800022b2:	27 58       	sub	r8,117
800022b4:	80 00       	ld.sh	r0,r0[0x0]
800022b6:	21 28       	sub	r8,18

800022b8 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
800022b8:	eb cd 40 c0 	pushm	r6-r7,lr
800022bc:	18 97       	mov	r7,r12
800022be:	16 96       	mov	r6,r11
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800022c0:	30 1b       	mov	r11,1
800022c2:	fe 7c 24 00 	mov	r12,-56320
800022c6:	f0 1f 00 09 	mcall	800022e8 <sd_mmc_spi_send_command+0x30>
  r1 = sd_mmc_spi_command(command, arg);
800022ca:	0c 9b       	mov	r11,r6
800022cc:	0e 9c       	mov	r12,r7
800022ce:	f0 1f 00 08 	mcall	800022ec <sd_mmc_spi_send_command+0x34>
800022d2:	48 87       	lddpc	r7,800022f0 <sd_mmc_spi_send_command+0x38>
800022d4:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800022d6:	30 1b       	mov	r11,1
800022d8:	fe 7c 24 00 	mov	r12,-56320
800022dc:	f0 1f 00 06 	mcall	800022f4 <sd_mmc_spi_send_command+0x3c>
  return r1;
}
800022e0:	0f 8c       	ld.ub	r12,r7[0x0]
800022e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022e6:	00 00       	add	r0,r0
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	50 c0       	stdsp	sp[0x30],r0
800022ec:	80 00       	ld.sh	r0,r0[0x0]
800022ee:	21 f0       	sub	r0,31
800022f0:	00 00       	add	r0,r0
800022f2:	27 58       	sub	r8,117
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	51 0c       	stdsp	sp[0x40],r12

800022f8 <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
800022f8:	eb cd 40 fe 	pushm	r1-r7,lr
  uint16_t retry;

  retry = 0;
  if (sd_mmc_spi_init_done == false)
800022fc:	49 a8       	lddpc	r8,80002364 <sd_mmc_spi_check_presence+0x6c>
800022fe:	11 89       	ld.ub	r9,r8[0x0]
80002300:	30 08       	mov	r8,0
80002302:	f0 09 18 00 	cp.b	r9,r8
80002306:	c1 f1       	brne	80002344 <sd_mmc_spi_check_presence+0x4c>
80002308:	30 07       	mov	r7,0
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
8000230a:	0e 94       	mov	r4,r7
8000230c:	49 73       	lddpc	r3,80002368 <sd_mmc_spi_check_presence+0x70>
8000230e:	30 16       	mov	r6,1
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002310:	e0 62 00 ff 	mov	r2,255
80002314:	fe 71 24 00 	mov	r1,-56320
      retry++;
      if (retry > 10)
80002318:	30 b5       	mov	r5,11
8000231a:	c0 c8       	rjmp	80002332 <sd_mmc_spi_check_presence+0x3a>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000231c:	04 9b       	mov	r11,r2
8000231e:	02 9c       	mov	r12,r1
80002320:	f0 1f 00 13 	mcall	8000236c <sd_mmc_spi_check_presence+0x74>
      retry++;
80002324:	2f f7       	sub	r7,-1
80002326:	5c 87       	casts.h	r7
      if (retry > 10)
80002328:	ea 07 19 00 	cp.h	r7,r5
8000232c:	c0 31       	brne	80002332 <sd_mmc_spi_check_presence+0x3a>
8000232e:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002332:	08 9b       	mov	r11,r4
80002334:	08 9c       	mov	r12,r4
80002336:	f0 1f 00 0f 	mcall	80002370 <sd_mmc_spi_check_presence+0x78>
8000233a:	a6 8c       	st.b	r3[0x0],r12
8000233c:	ec 0c 18 00 	cp.b	r12,r6
80002340:	ce e1       	brne	8000231c <sd_mmc_spi_check_presence+0x24>
80002342:	c0 e8       	rjmp	8000235e <sd_mmc_spi_check_presence+0x66>
    return true;
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80002344:	30 0b       	mov	r11,0
80002346:	33 bc       	mov	r12,59
80002348:	f0 1f 00 0a 	mcall	80002370 <sd_mmc_spi_check_presence+0x78>
8000234c:	48 78       	lddpc	r8,80002368 <sd_mmc_spi_check_presence+0x70>
8000234e:	b0 8c       	st.b	r8[0x0],r12
80002350:	58 0c       	cp.w	r12,0
80002352:	c0 60       	breq	8000235e <sd_mmc_spi_check_presence+0x66>
      return true;
    sd_mmc_spi_init_done = false;
80002354:	30 09       	mov	r9,0
80002356:	48 48       	lddpc	r8,80002364 <sd_mmc_spi_check_presence+0x6c>
80002358:	b0 89       	st.b	r8[0x0],r9
8000235a:	e3 cf 80 fe 	ldm	sp++,r1-r7,pc,r12=0
    return false;
8000235e:	e3 cf 90 fe 	ldm	sp++,r1-r7,pc,r12=1
80002362:	00 00       	add	r0,r0
80002364:	00 00       	add	r0,r0
80002366:	03 88       	ld.ub	r8,r1[0x0]
80002368:	00 00       	add	r0,r0
8000236a:	27 58       	sub	r8,117
8000236c:	80 00       	ld.sh	r0,r0[0x0]
8000236e:	51 fa       	stdsp	sp[0x7c],r10
80002370:	80 00       	ld.sh	r0,r0[0x0]
80002372:	22 b8       	sub	r8,43

80002374 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80002374:	eb cd 40 e0 	pushm	r5-r7,lr
80002378:	18 97       	mov	r7,r12
  const uint8_t *_ram = ram;
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000237a:	f0 1f 00 49 	mcall	8000249c <sd_mmc_spi_write_sector_from_ram+0x128>
8000237e:	e0 80 00 8c 	breq	80002496 <sd_mmc_spi_write_sector_from_ram+0x122>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002382:	30 1b       	mov	r11,1
80002384:	fe 7c 24 00 	mov	r12,-56320
80002388:	f0 1f 00 46 	mcall	800024a0 <sd_mmc_spi_write_sector_from_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8000238c:	4c 68       	lddpc	r8,800024a4 <sd_mmc_spi_write_sector_from_ram+0x130>
8000238e:	11 89       	ld.ub	r9,r8[0x0]
80002390:	30 38       	mov	r8,3
80002392:	f0 09 18 00 	cp.b	r9,r8
80002396:	c0 a1       	brne	800023aa <sd_mmc_spi_write_sector_from_ram+0x36>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002398:	4c 48       	lddpc	r8,800024a8 <sd_mmc_spi_write_sector_from_ram+0x134>
8000239a:	70 0b       	ld.w	r11,r8[0x0]
8000239c:	a9 9b       	lsr	r11,0x9
8000239e:	31 8c       	mov	r12,24
800023a0:	f0 1f 00 43 	mcall	800024ac <sd_mmc_spi_write_sector_from_ram+0x138>
800023a4:	4c 38       	lddpc	r8,800024b0 <sd_mmc_spi_write_sector_from_ram+0x13c>
800023a6:	b0 8c       	st.b	r8[0x0],r12
800023a8:	c0 88       	rjmp	800023b8 <sd_mmc_spi_write_sector_from_ram+0x44>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
800023aa:	4c 08       	lddpc	r8,800024a8 <sd_mmc_spi_write_sector_from_ram+0x134>
800023ac:	70 0b       	ld.w	r11,r8[0x0]
800023ae:	31 8c       	mov	r12,24
800023b0:	f0 1f 00 3f 	mcall	800024ac <sd_mmc_spi_write_sector_from_ram+0x138>
800023b4:	4b f8       	lddpc	r8,800024b0 <sd_mmc_spi_write_sector_from_ram+0x13c>
800023b6:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if(r1 != 0x00)
800023b8:	4b e8       	lddpc	r8,800024b0 <sd_mmc_spi_write_sector_from_ram+0x13c>
800023ba:	11 89       	ld.ub	r9,r8[0x0]
800023bc:	30 08       	mov	r8,0
800023be:	f0 09 18 00 	cp.b	r9,r8
800023c2:	c0 80       	breq	800023d2 <sd_mmc_spi_write_sector_from_ram+0x5e>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800023c4:	30 1b       	mov	r11,1
800023c6:	fe 7c 24 00 	mov	r12,-56320
800023ca:	f0 1f 00 3b 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x140>
800023ce:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800023d2:	e0 6b 00 ff 	mov	r11,255
800023d6:	fe 7c 24 00 	mov	r12,-56320
800023da:	f0 1f 00 38 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x144>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
800023de:	e0 6b 00 fe 	mov	r11,254
800023e2:	fe 7c 24 00 	mov	r12,-56320
800023e6:	f0 1f 00 35 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x144>
//!
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
800023ea:	ee c6 fe 00 	sub	r6,r7,-512
  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,*_ram++);
800023ee:	fe 75 24 00 	mov	r5,-56320
800023f2:	0f 3b       	ld.ub	r11,r7++
800023f4:	0a 9c       	mov	r12,r5
800023f6:	f0 1f 00 31 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800023fa:	0c 37       	cp.w	r7,r6
800023fc:	cf b1       	brne	800023f2 <sd_mmc_spi_write_sector_from_ram+0x7e>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
800023fe:	e0 6b 00 ff 	mov	r11,255
80002402:	fe 7c 24 00 	mov	r12,-56320
80002406:	f0 1f 00 2d 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
8000240a:	e0 6b 00 ff 	mov	r11,255
8000240e:	fe 7c 24 00 	mov	r12,-56320
80002412:	f0 1f 00 2a 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x144>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002416:	e0 6c 00 ff 	mov	r12,255
8000241a:	f0 1f 00 29 	mcall	800024bc <sd_mmc_spi_write_sector_from_ram+0x148>
8000241e:	4a 58       	lddpc	r8,800024b0 <sd_mmc_spi_write_sector_from_ram+0x13c>
80002420:	b0 8c       	st.b	r8[0x0],r12
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
80002422:	f9 dc c0 05 	bfextu	r12,r12,0x0,0x5
80002426:	58 5c       	cp.w	r12,5
80002428:	c1 40       	breq	80002450 <sd_mmc_spi_write_sector_from_ram+0xdc>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
8000242a:	e0 6b 00 ff 	mov	r11,255
8000242e:	fe 7c 24 00 	mov	r12,-56320
80002432:	f0 1f 00 22 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_write(SD_MMC_SPI,0xFF);
80002436:	e0 6b 00 ff 	mov	r11,255
8000243a:	fe 7c 24 00 	mov	r12,-56320
8000243e:	f0 1f 00 1f 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x144>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002442:	30 1b       	mov	r11,1
80002444:	fe 7c 24 00 	mov	r12,-56320
80002448:	f0 1f 00 1b 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x140>
8000244c:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
    return false;         // return ERROR byte
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002450:	e0 6b 00 ff 	mov	r11,255
80002454:	fe 7c 24 00 	mov	r12,-56320
80002458:	f0 1f 00 18 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x144>
  spi_write(SD_MMC_SPI,0xFF);
8000245c:	e0 6b 00 ff 	mov	r11,255
80002460:	fe 7c 24 00 	mov	r12,-56320
80002464:	f0 1f 00 15 	mcall	800024b8 <sd_mmc_spi_write_sector_from_ram+0x144>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002468:	30 1b       	mov	r11,1
8000246a:	fe 7c 24 00 	mov	r12,-56320
8000246e:	f0 1f 00 12 	mcall	800024b4 <sd_mmc_spi_write_sector_from_ram+0x140>
  gl_ptr_mem += 512;        // Update the memory pointer.
80002472:	48 e8       	lddpc	r8,800024a8 <sd_mmc_spi_write_sector_from_ram+0x134>
80002474:	70 09       	ld.w	r9,r8[0x0]
80002476:	f2 c9 fe 00 	sub	r9,r9,-512
8000247a:	91 09       	st.w	r8[0x0],r9
8000247c:	30 07       	mov	r7,0
  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
  {
    i++;
    if (i == 10)
8000247e:	30 a6       	mov	r6,10
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80002480:	c0 68       	rjmp	8000248c <sd_mmc_spi_write_sector_from_ram+0x118>
  {
    i++;
80002482:	2f f7       	sub	r7,-1
80002484:	5c 87       	casts.h	r7
    if (i == 10)
80002486:	ec 07 19 00 	cp.h	r7,r6
8000248a:	c0 60       	breq	80002496 <sd_mmc_spi_write_sector_from_ram+0x122>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
8000248c:	f0 1f 00 04 	mcall	8000249c <sd_mmc_spi_write_sector_from_ram+0x128>
80002490:	cf 90       	breq	80002482 <sd_mmc_spi_write_sector_from_ram+0x10e>
80002492:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002496:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000249a:	00 00       	add	r0,r0
8000249c:	80 00       	ld.sh	r0,r0[0x0]
8000249e:	21 5c       	sub	r12,21
800024a0:	80 00       	ld.sh	r0,r0[0x0]
800024a2:	50 c0       	stdsp	sp[0x30],r0
800024a4:	00 00       	add	r0,r0
800024a6:	27 46       	sub	r6,116
800024a8:	00 00       	add	r0,r0
800024aa:	01 70       	ld.ub	r0,--r0
800024ac:	80 00       	ld.sh	r0,r0[0x0]
800024ae:	21 f0       	sub	r0,31
800024b0:	00 00       	add	r0,r0
800024b2:	27 58       	sub	r8,117
800024b4:	80 00       	ld.sh	r0,r0[0x0]
800024b6:	51 0c       	stdsp	sp[0x40],r12
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	51 fa       	stdsp	sp[0x7c],r10
800024bc:	80 00       	ld.sh	r0,r0[0x0]
800024be:	21 28       	sub	r8,18

800024c0 <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
800024c0:	eb cd 40 c0 	pushm	r6-r7,lr
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800024c4:	f0 1f 00 1c 	mcall	80002534 <sd_mmc_spi_check_hc+0x74>
800024c8:	c0 31       	brne	800024ce <sd_mmc_spi_check_hc+0xe>
800024ca:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800024ce:	30 1b       	mov	r11,1
800024d0:	fe 7c 24 00 	mov	r12,-56320
800024d4:	f0 1f 00 19 	mcall	80002538 <sd_mmc_spi_check_hc+0x78>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
800024d8:	30 0b       	mov	r11,0
800024da:	33 ac       	mov	r12,58
800024dc:	f0 1f 00 18 	mcall	8000253c <sd_mmc_spi_check_hc+0x7c>
800024e0:	49 88       	lddpc	r8,80002540 <sd_mmc_spi_check_hc+0x80>
800024e2:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0) {
800024e4:	58 0c       	cp.w	r12,0
800024e6:	c0 80       	breq	800024f6 <sd_mmc_spi_check_hc+0x36>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800024e8:	30 1b       	mov	r11,1
800024ea:	fe 7c 24 00 	mov	r12,-56320
800024ee:	f0 1f 00 16 	mcall	80002544 <sd_mmc_spi_check_hc+0x84>
800024f2:	e3 cf c0 c0 	ldm	sp++,r6-r7,pc,r12=-1
    return SD_FAILURE;
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
800024f6:	e0 6c 00 ff 	mov	r12,255
800024fa:	f0 1f 00 14 	mcall	80002548 <sd_mmc_spi_check_hc+0x88>
800024fe:	18 96       	mov	r6,r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002500:	e0 6c 00 ff 	mov	r12,255
80002504:	f0 1f 00 11 	mcall	80002548 <sd_mmc_spi_check_hc+0x88>
80002508:	48 e7       	lddpc	r7,80002540 <sd_mmc_spi_check_hc+0x80>
8000250a:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000250c:	e0 6c 00 ff 	mov	r12,255
80002510:	f0 1f 00 0e 	mcall	80002548 <sd_mmc_spi_check_hc+0x88>
80002514:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002516:	e0 6c 00 ff 	mov	r12,255
8000251a:	f0 1f 00 0c 	mcall	80002548 <sd_mmc_spi_check_hc+0x88>
8000251e:	ae 8c       	st.b	r7[0x0],r12
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002520:	30 1b       	mov	r11,1
80002522:	fe 7c 24 00 	mov	r12,-56320
80002526:	f0 1f 00 08 	mcall	80002544 <sd_mmc_spi_check_hc+0x84>
8000252a:	f9 d6 c0 c1 	bfextu	r12,r6,0x6,0x1
  if(hc_bit & 0x40) {
      return SDHC_CARD;
  }
  return 0;
}
8000252e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002532:	00 00       	add	r0,r0
80002534:	80 00       	ld.sh	r0,r0[0x0]
80002536:	21 5c       	sub	r12,21
80002538:	80 00       	ld.sh	r0,r0[0x0]
8000253a:	50 c0       	stdsp	sp[0x30],r0
8000253c:	80 00       	ld.sh	r0,r0[0x0]
8000253e:	21 f0       	sub	r0,31
80002540:	00 00       	add	r0,r0
80002542:	27 58       	sub	r8,117
80002544:	80 00       	ld.sh	r0,r0[0x0]
80002546:	51 0c       	stdsp	sp[0x40],r12
80002548:	80 00       	ld.sh	r0,r0[0x0]
8000254a:	21 28       	sub	r8,18

8000254c <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
8000254c:	eb cd 40 80 	pushm	r7,lr
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002550:	f0 1f 00 27 	mcall	800025ec <sd_mmc_spi_get_if+0xa0>
80002554:	c0 31       	brne	8000255a <sd_mmc_spi_get_if+0xe>
80002556:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000255a:	30 1b       	mov	r11,1
8000255c:	fe 7c 24 00 	mov	r12,-56320
80002560:	f0 1f 00 24 	mcall	800025f0 <sd_mmc_spi_get_if+0xa4>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80002564:	e0 6b 01 aa 	mov	r11,426
80002568:	30 8c       	mov	r12,8
8000256a:	f0 1f 00 23 	mcall	800025f4 <sd_mmc_spi_get_if+0xa8>
8000256e:	4a 38       	lddpc	r8,800025f8 <sd_mmc_spi_get_if+0xac>
80002570:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
80002572:	e2 1c 00 04 	andl	r12,0x4,COH
80002576:	c0 80       	breq	80002586 <sd_mmc_spi_get_if+0x3a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002578:	30 1b       	mov	r11,1
8000257a:	fe 7c 24 00 	mov	r12,-56320
8000257e:	f0 1f 00 20 	mcall	800025fc <sd_mmc_spi_get_if+0xb0>
80002582:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
    return SD_MMC;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002586:	e0 6c 00 ff 	mov	r12,255
8000258a:	f0 1f 00 1e 	mcall	80002600 <sd_mmc_spi_get_if+0xb4>
8000258e:	49 b7       	lddpc	r7,800025f8 <sd_mmc_spi_get_if+0xac>
80002590:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002592:	e0 6c 00 ff 	mov	r12,255
80002596:	f0 1f 00 1b 	mcall	80002600 <sd_mmc_spi_get_if+0xb4>
8000259a:	ae 8c       	st.b	r7[0x0],r12
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000259c:	e0 6c 00 ff 	mov	r12,255
800025a0:	f0 1f 00 18 	mcall	80002600 <sd_mmc_spi_get_if+0xb4>
800025a4:	ae 8c       	st.b	r7[0x0],r12
  if((r1 & 0x01) == 0) {
800025a6:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800025aa:	c0 81       	brne	800025ba <sd_mmc_spi_get_if+0x6e>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025ac:	30 1b       	mov	r11,1
800025ae:	fe 7c 24 00 	mov	r12,-56320
800025b2:	f0 1f 00 13 	mcall	800025fc <sd_mmc_spi_get_if+0xb0>
800025b6:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE;
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
800025ba:	e0 6c 00 ff 	mov	r12,255
800025be:	f0 1f 00 11 	mcall	80002600 <sd_mmc_spi_get_if+0xb4>
800025c2:	48 e8       	lddpc	r8,800025f8 <sd_mmc_spi_get_if+0xac>
800025c4:	b0 8c       	st.b	r8[0x0],r12
  if(r1 != 0xaa) {
800025c6:	3a a8       	mov	r8,-86
800025c8:	f0 0c 18 00 	cp.b	r12,r8
800025cc:	c0 80       	breq	800025dc <sd_mmc_spi_get_if+0x90>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025ce:	30 1b       	mov	r11,1
800025d0:	fe 7c 24 00 	mov	r12,-56320
800025d4:	f0 1f 00 0a 	mcall	800025fc <sd_mmc_spi_get_if+0xb0>
800025d8:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
    return SD_FAILURE; /* wrong test pattern */
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025dc:	30 1b       	mov	r11,1
800025de:	fe 7c 24 00 	mov	r12,-56320
800025e2:	f0 1f 00 07 	mcall	800025fc <sd_mmc_spi_get_if+0xb0>
800025e6:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800025ea:	00 00       	add	r0,r0
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	21 5c       	sub	r12,21
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	50 c0       	stdsp	sp[0x30],r0
800025f4:	80 00       	ld.sh	r0,r0[0x0]
800025f6:	21 f0       	sub	r0,31
800025f8:	00 00       	add	r0,r0
800025fa:	27 58       	sub	r8,117
800025fc:	80 00       	ld.sh	r0,r0[0x0]
800025fe:	51 0c       	stdsp	sp[0x40],r12
80002600:	80 00       	ld.sh	r0,r0[0x0]
80002602:	21 28       	sub	r8,18

80002604 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80002604:	eb cd 40 f8 	pushm	r3-r7,lr
80002608:	20 1d       	sub	sp,4
8000260a:	18 93       	mov	r3,r12
  uint8_t *_ram = ram;
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000260c:	f0 1f 00 48 	mcall	8000272c <sd_mmc_spi_read_sector_to_ram+0x128>
80002610:	e0 80 00 8a 	breq	80002724 <sd_mmc_spi_read_sector_to_ram+0x120>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002614:	30 1b       	mov	r11,1
80002616:	fe 7c 24 00 	mov	r12,-56320
8000261a:	f0 1f 00 46 	mcall	80002730 <sd_mmc_spi_read_sector_to_ram+0x12c>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
8000261e:	4c 68       	lddpc	r8,80002734 <sd_mmc_spi_read_sector_to_ram+0x130>
80002620:	11 89       	ld.ub	r9,r8[0x0]
80002622:	30 38       	mov	r8,3
80002624:	f0 09 18 00 	cp.b	r9,r8
80002628:	c0 a1       	brne	8000263c <sd_mmc_spi_read_sector_to_ram+0x38>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
8000262a:	4c 48       	lddpc	r8,80002738 <sd_mmc_spi_read_sector_to_ram+0x134>
8000262c:	70 0b       	ld.w	r11,r8[0x0]
8000262e:	a9 9b       	lsr	r11,0x9
80002630:	31 1c       	mov	r12,17
80002632:	f0 1f 00 43 	mcall	8000273c <sd_mmc_spi_read_sector_to_ram+0x138>
80002636:	4c 38       	lddpc	r8,80002740 <sd_mmc_spi_read_sector_to_ram+0x13c>
80002638:	b0 8c       	st.b	r8[0x0],r12
8000263a:	c0 88       	rjmp	8000264a <sd_mmc_spi_read_sector_to_ram+0x46>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
8000263c:	4b f8       	lddpc	r8,80002738 <sd_mmc_spi_read_sector_to_ram+0x134>
8000263e:	70 0b       	ld.w	r11,r8[0x0]
80002640:	31 1c       	mov	r12,17
80002642:	f0 1f 00 3f 	mcall	8000273c <sd_mmc_spi_read_sector_to_ram+0x138>
80002646:	4b f8       	lddpc	r8,80002740 <sd_mmc_spi_read_sector_to_ram+0x13c>
80002648:	b0 8c       	st.b	r8[0x0],r12
  }

  // check for valid response
  if (r1 != 0x00)
8000264a:	4b e8       	lddpc	r8,80002740 <sd_mmc_spi_read_sector_to_ram+0x13c>
8000264c:	11 89       	ld.ub	r9,r8[0x0]
8000264e:	30 08       	mov	r8,0
80002650:	f0 09 18 00 	cp.b	r9,r8
80002654:	c1 20       	breq	80002678 <sd_mmc_spi_read_sector_to_ram+0x74>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002656:	30 1b       	mov	r11,1
80002658:	fe 7c 24 00 	mov	r12,-56320
8000265c:	f0 1f 00 3a 	mcall	80002744 <sd_mmc_spi_read_sector_to_ram+0x140>
80002660:	30 0c       	mov	r12,0
    return false;
80002662:	c6 18       	rjmp	80002724 <sd_mmc_spi_read_sector_to_ram+0x120>

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
     read_time_out--;
80002664:	20 17       	sub	r7,1
80002666:	5c 87       	casts.h	r7
     if (read_time_out == 0)   // TIME-OUT
80002668:	c0 e1       	brne	80002684 <sd_mmc_spi_read_sector_to_ram+0x80>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
8000266a:	30 1b       	mov	r11,1
8000266c:	fe 7c 24 00 	mov	r12,-56320
80002670:	f0 1f 00 35 	mcall	80002744 <sd_mmc_spi_read_sector_to_ram+0x140>
80002674:	30 0c       	mov	r12,0
       return false;
80002676:	c5 78       	rjmp	80002724 <sd_mmc_spi_read_sector_to_ram+0x120>
80002678:	e0 67 75 30 	mov	r7,30000
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000267c:	e0 65 00 ff 	mov	r5,255
80002680:	4b 04       	lddpc	r4,80002740 <sd_mmc_spi_read_sector_to_ram+0x13c>
80002682:	3f f6       	mov	r6,-1
80002684:	0a 9c       	mov	r12,r5
80002686:	f0 1f 00 31 	mcall	80002748 <sd_mmc_spi_read_sector_to_ram+0x144>
8000268a:	a8 8c       	st.b	r4[0x0],r12
8000268c:	ec 0c 18 00 	cp.b	r12,r6
80002690:	ce a0       	breq	80002664 <sd_mmc_spi_read_sector_to_ram+0x60>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80002692:	3f e8       	mov	r8,-2
80002694:	f0 0c 18 00 	cp.b	r12,r8
80002698:	c0 e0       	breq	800026b4 <sd_mmc_spi_read_sector_to_ram+0xb0>
  {
    spi_write(SD_MMC_SPI,0xFF);
8000269a:	e0 6b 00 ff 	mov	r11,255
8000269e:	fe 7c 24 00 	mov	r12,-56320
800026a2:	f0 1f 00 2b 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026a6:	30 1b       	mov	r11,1
800026a8:	fe 7c 24 00 	mov	r12,-56320
800026ac:	f0 1f 00 26 	mcall	80002744 <sd_mmc_spi_read_sector_to_ram+0x140>
800026b0:	30 0c       	mov	r12,0
    return false;
800026b2:	c3 98       	rjmp	80002724 <sd_mmc_spi_read_sector_to_ram+0x120>
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
  uint8_t *_ram = ram;
800026b4:	06 97       	mov	r7,r3
//!
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
800026b6:	e6 c5 fe 00 	sub	r5,r3,-512
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026ba:	e0 64 00 ff 	mov	r4,255
800026be:	fe 76 24 00 	mov	r6,-56320
    spi_read(SD_MMC_SPI,&data_read);
800026c2:	fa c3 ff fe 	sub	r3,sp,-2
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
  {
    spi_write(SD_MMC_SPI,0xFF);
800026c6:	08 9b       	mov	r11,r4
800026c8:	0c 9c       	mov	r12,r6
800026ca:	f0 1f 00 21 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x148>
    spi_read(SD_MMC_SPI,&data_read);
800026ce:	06 9b       	mov	r11,r3
800026d0:	0c 9c       	mov	r12,r6
800026d2:	f0 1f 00 20 	mcall	80002750 <sd_mmc_spi_read_sector_to_ram+0x14c>
    *_ram++=data_read;
800026d6:	9a 18       	ld.sh	r8,sp[0x2]
800026d8:	0e c8       	st.b	r7++,r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
800026da:	0a 37       	cp.w	r7,r5
800026dc:	cf 51       	brne	800026c6 <sd_mmc_spi_read_sector_to_ram+0xc2>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
800026de:	49 78       	lddpc	r8,80002738 <sd_mmc_spi_read_sector_to_ram+0x134>
800026e0:	70 09       	ld.w	r9,r8[0x0]
800026e2:	f2 c9 fe 00 	sub	r9,r9,-512
800026e6:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
800026e8:	e0 6b 00 ff 	mov	r11,255
800026ec:	fe 7c 24 00 	mov	r12,-56320
800026f0:	f0 1f 00 17 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
800026f4:	e0 6b 00 ff 	mov	r11,255
800026f8:	fe 7c 24 00 	mov	r12,-56320
800026fc:	f0 1f 00 14 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x148>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80002700:	e0 6b 00 ff 	mov	r11,255
80002704:	fe 7c 24 00 	mov	r12,-56320
80002708:	f0 1f 00 11 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x148>
  spi_write(SD_MMC_SPI,0xFF);
8000270c:	e0 6b 00 ff 	mov	r11,255
80002710:	fe 7c 24 00 	mov	r12,-56320
80002714:	f0 1f 00 0e 	mcall	8000274c <sd_mmc_spi_read_sector_to_ram+0x148>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002718:	30 1b       	mov	r11,1
8000271a:	fe 7c 24 00 	mov	r12,-56320
8000271e:	f0 1f 00 0a 	mcall	80002744 <sd_mmc_spi_read_sector_to_ram+0x140>
80002722:	30 1c       	mov	r12,1

  return true;   // Read done.
}
80002724:	2f fd       	sub	sp,-4
80002726:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000272a:	00 00       	add	r0,r0
8000272c:	80 00       	ld.sh	r0,r0[0x0]
8000272e:	21 5c       	sub	r12,21
80002730:	80 00       	ld.sh	r0,r0[0x0]
80002732:	50 c0       	stdsp	sp[0x30],r0
80002734:	00 00       	add	r0,r0
80002736:	27 46       	sub	r6,116
80002738:	00 00       	add	r0,r0
8000273a:	01 70       	ld.ub	r0,--r0
8000273c:	80 00       	ld.sh	r0,r0[0x0]
8000273e:	21 f0       	sub	r0,31
80002740:	00 00       	add	r0,r0
80002742:	27 58       	sub	r8,117
80002744:	80 00       	ld.sh	r0,r0[0x0]
80002746:	51 0c       	stdsp	sp[0x40],r12
80002748:	80 00       	ld.sh	r0,r0[0x0]
8000274a:	21 28       	sub	r8,18
8000274c:	80 00       	ld.sh	r0,r0[0x0]
8000274e:	51 fa       	stdsp	sp[0x7c],r10
80002750:	80 00       	ld.sh	r0,r0[0x0]
80002752:	52 16       	stdsp	sp[0x84],r6

80002754 <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
80002754:	eb cd 40 fc 	pushm	r2-r7,lr
80002758:	20 1d       	sub	sp,4
8000275a:	18 92       	mov	r2,r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
8000275c:	f0 1f 00 32 	mcall	80002824 <sd_mmc_spi_get_csd+0xd0>
80002760:	c5 f0       	breq	8000281e <sd_mmc_spi_get_csd+0xca>
    return false;

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002762:	30 1b       	mov	r11,1
80002764:	fe 7c 24 00 	mov	r12,-56320
80002768:	f0 1f 00 30 	mcall	80002828 <sd_mmc_spi_get_csd+0xd4>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
8000276c:	30 0b       	mov	r11,0
8000276e:	30 9c       	mov	r12,9
80002770:	f0 1f 00 2f 	mcall	8000282c <sd_mmc_spi_get_csd+0xd8>
80002774:	4a f8       	lddpc	r8,80002830 <sd_mmc_spi_get_csd+0xdc>
80002776:	b0 8c       	st.b	r8[0x0],r12
  // check for valid response
  if(r1 != 0x00)
80002778:	58 0c       	cp.w	r12,0
8000277a:	c0 81       	brne	8000278a <sd_mmc_spi_get_csd+0x36>
8000277c:	30 07       	mov	r7,0
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000277e:	e0 64 00 ff 	mov	r4,255
80002782:	10 93       	mov	r3,r8
80002784:	3f e6       	mov	r6,-2
  {
    if (retry > 8)
80002786:	30 95       	mov	r5,9
80002788:	c1 78       	rjmp	800027b6 <sd_mmc_spi_get_csd+0x62>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
  // check for valid response
  if(r1 != 0x00)
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000278a:	30 1b       	mov	r11,1
8000278c:	fe 7c 24 00 	mov	r12,-56320
80002790:	f0 1f 00 29 	mcall	80002834 <sd_mmc_spi_get_csd+0xe0>
    sd_mmc_spi_init_done = false;
80002794:	30 09       	mov	r9,0
80002796:	4a 98       	lddpc	r8,80002838 <sd_mmc_spi_get_csd+0xe4>
80002798:	b0 89       	st.b	r8[0x0],r9
8000279a:	30 0c       	mov	r12,0
    return false;
8000279c:	c4 18       	rjmp	8000281e <sd_mmc_spi_get_csd+0xca>
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
8000279e:	ea 07 18 00 	cp.b	r7,r5
800027a2:	c0 81       	brne	800027b2 <sd_mmc_spi_get_csd+0x5e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027a4:	30 1b       	mov	r11,1
800027a6:	fe 7c 24 00 	mov	r12,-56320
800027aa:	f0 1f 00 23 	mcall	80002834 <sd_mmc_spi_get_csd+0xe0>
800027ae:	30 0c       	mov	r12,0
      return false;
800027b0:	c3 78       	rjmp	8000281e <sd_mmc_spi_get_csd+0xca>
    }
    retry++;
800027b2:	2f f7       	sub	r7,-1
800027b4:	5c 57       	castu.b	r7
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800027b6:	08 9c       	mov	r12,r4
800027b8:	f0 1f 00 21 	mcall	8000283c <sd_mmc_spi_get_csd+0xe8>
800027bc:	a6 8c       	st.b	r3[0x0],r12
800027be:	ec 0c 18 00 	cp.b	r12,r6
800027c2:	ce e1       	brne	8000279e <sd_mmc_spi_get_csd+0x4a>
800027c4:	30 07       	mov	r7,0
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027c6:	e0 65 00 ff 	mov	r5,255
800027ca:	fe 76 24 00 	mov	r6,-56320
   spi_read(SD_MMC_SPI,&data_read);
800027ce:	fa c4 ff fe 	sub	r4,sp,-2
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
  {
   spi_write(SD_MMC_SPI,0xFF);
800027d2:	0a 9b       	mov	r11,r5
800027d4:	0c 9c       	mov	r12,r6
800027d6:	f0 1f 00 1b 	mcall	80002840 <sd_mmc_spi_get_csd+0xec>
   spi_read(SD_MMC_SPI,&data_read);
800027da:	08 9b       	mov	r11,r4
800027dc:	0c 9c       	mov	r12,r6
800027de:	f0 1f 00 1a 	mcall	80002844 <sd_mmc_spi_get_csd+0xf0>
    buffer[retry] = data_read;
800027e2:	9a 18       	ld.sh	r8,sp[0x2]
800027e4:	e4 07 0b 08 	st.b	r2[r7],r8
800027e8:	2f f7       	sub	r7,-1
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
800027ea:	59 07       	cp.w	r7,16
800027ec:	cf 31       	brne	800027d2 <sd_mmc_spi_get_csd+0x7e>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
800027ee:	e0 6b 00 ff 	mov	r11,255
800027f2:	fe 7c 24 00 	mov	r12,-56320
800027f6:	f0 1f 00 13 	mcall	80002840 <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);
800027fa:	e0 6b 00 ff 	mov	r11,255
800027fe:	fe 7c 24 00 	mov	r12,-56320
80002802:	f0 1f 00 10 	mcall	80002840 <sd_mmc_spi_get_csd+0xec>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80002806:	e0 6b 00 ff 	mov	r11,255
8000280a:	fe 7c 24 00 	mov	r12,-56320
8000280e:	f0 1f 00 0d 	mcall	80002840 <sd_mmc_spi_get_csd+0xec>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002812:	30 1b       	mov	r11,1
80002814:	fe 7c 24 00 	mov	r12,-56320
80002818:	f0 1f 00 07 	mcall	80002834 <sd_mmc_spi_get_csd+0xe0>
8000281c:	30 1c       	mov	r12,1
  return true;
}
8000281e:	2f fd       	sub	sp,-4
80002820:	e3 cd 80 fc 	ldm	sp++,r2-r7,pc
80002824:	80 00       	ld.sh	r0,r0[0x0]
80002826:	21 5c       	sub	r12,21
80002828:	80 00       	ld.sh	r0,r0[0x0]
8000282a:	50 c0       	stdsp	sp[0x30],r0
8000282c:	80 00       	ld.sh	r0,r0[0x0]
8000282e:	21 f0       	sub	r0,31
80002830:	00 00       	add	r0,r0
80002832:	27 58       	sub	r8,117
80002834:	80 00       	ld.sh	r0,r0[0x0]
80002836:	51 0c       	stdsp	sp[0x40],r12
80002838:	00 00       	add	r0,r0
8000283a:	03 88       	ld.ub	r8,r1[0x0]
8000283c:	80 00       	ld.sh	r0,r0[0x0]
8000283e:	21 28       	sub	r8,18
80002840:	80 00       	ld.sh	r0,r0[0x0]
80002842:	51 fa       	stdsp	sp[0x7c],r10
80002844:	80 00       	ld.sh	r0,r0[0x0]
80002846:	52 16       	stdsp	sp[0x84],r6

80002848 <sd_mmc_spi_write_multiple_sector>:
//!
//! @param  nb_sector   the number of sector to write
//! @return bit
//!   The write succeeded      -> true
bool sd_mmc_spi_write_multiple_sector(uint16_t nb_sector)
{
80002848:	eb cd 40 c0 	pushm	r6-r7,lr
8000284c:	18 97       	mov	r7,r12
  while (nb_sector--)
8000284e:	58 0c       	cp.w	r12,0
80002850:	c0 b0       	breq	80002866 <sd_mmc_spi_write_multiple_sector+0x1e>
  {
    // Write the next sector
    sd_mmc_spi_write_multiple_sector_callback(sector_buf);
80002852:	48 76       	lddpc	r6,8000286c <sd_mmc_spi_write_multiple_sector+0x24>
80002854:	0c 9c       	mov	r12,r6
80002856:	f0 1f 00 07 	mcall	80002870 <sd_mmc_spi_write_multiple_sector+0x28>
    sd_mmc_spi_write_sector_from_ram(sector_buf);
8000285a:	0c 9c       	mov	r12,r6
8000285c:	f0 1f 00 06 	mcall	80002874 <sd_mmc_spi_write_multiple_sector+0x2c>
80002860:	20 17       	sub	r7,1
80002862:	5c 87       	casts.h	r7
//! @param  nb_sector   the number of sector to write
//! @return bit
//!   The write succeeded      -> true
bool sd_mmc_spi_write_multiple_sector(uint16_t nb_sector)
{
  while (nb_sector--)
80002864:	cf 81       	brne	80002854 <sd_mmc_spi_write_multiple_sector+0xc>
    sd_mmc_spi_write_multiple_sector_callback(sector_buf);
    sd_mmc_spi_write_sector_from_ram(sector_buf);
  }

  return true;
}
80002866:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
8000286a:	00 00       	add	r0,r0
8000286c:	00 00       	add	r0,r0
8000286e:	01 74       	ld.ub	r4,--r0
80002870:	80 00       	ld.sh	r0,r0[0x0]
80002872:	49 48       	lddpc	r8,800028c0 <sd_mmc_spi_internal_init+0x18>
80002874:	80 00       	ld.sh	r0,r0[0x0]
80002876:	23 74       	sub	r4,55

80002878 <sd_mmc_spi_read_multiple_sector>:
//!
//! @param  nb_sector   the number of sector to read
//! @return bit
//!   The read succeeded      -> true
bool sd_mmc_spi_read_multiple_sector(uint16_t nb_sector)
{
80002878:	eb cd 40 c0 	pushm	r6-r7,lr
8000287c:	18 97       	mov	r7,r12
  while (nb_sector--)
8000287e:	58 0c       	cp.w	r12,0
80002880:	c0 b0       	breq	80002896 <sd_mmc_spi_read_multiple_sector+0x1e>
  {
    // Read the next sector
    sd_mmc_spi_read_sector_to_ram(sector_buf);
80002882:	48 76       	lddpc	r6,8000289c <sd_mmc_spi_read_multiple_sector+0x24>
80002884:	0c 9c       	mov	r12,r6
80002886:	f0 1f 00 07 	mcall	800028a0 <sd_mmc_spi_read_multiple_sector+0x28>
    sd_mmc_spi_read_multiple_sector_callback(sector_buf);
8000288a:	0c 9c       	mov	r12,r6
8000288c:	f0 1f 00 06 	mcall	800028a4 <sd_mmc_spi_read_multiple_sector+0x2c>
80002890:	20 17       	sub	r7,1
80002892:	5c 87       	casts.h	r7
//! @param  nb_sector   the number of sector to read
//! @return bit
//!   The read succeeded      -> true
bool sd_mmc_spi_read_multiple_sector(uint16_t nb_sector)
{
  while (nb_sector--)
80002894:	cf 81       	brne	80002884 <sd_mmc_spi_read_multiple_sector+0xc>
    sd_mmc_spi_read_sector_to_ram(sector_buf);
    sd_mmc_spi_read_multiple_sector_callback(sector_buf);
  }

  return true;
}
80002896:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
8000289a:	00 00       	add	r0,r0
8000289c:	00 00       	add	r0,r0
8000289e:	01 74       	ld.ub	r4,--r0
800028a0:	80 00       	ld.sh	r0,r0[0x0]
800028a2:	26 04       	sub	r4,96
800028a4:	80 00       	ld.sh	r0,r0[0x0]
800028a6:	49 60       	lddpc	r0,800028fc <sd_mmc_spi_internal_init+0x54>

800028a8 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
800028a8:	d4 31       	pushm	r0-r7,lr
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
800028aa:	fe fb 02 6a 	ld.w	r11,pc[618]
800028ae:	e6 68 1a 80 	mov	r8,400000
800028b2:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
800028b4:	fe f8 02 64 	ld.w	r8,pc[612]
800028b8:	70 0a       	ld.w	r10,r8[0x0]
800028ba:	fe 7c 24 00 	mov	r12,-56320
800028be:	f0 1f 00 98 	mcall	80002b1c <sd_mmc_spi_internal_init+0x274>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800028c2:	30 1b       	mov	r11,1
800028c4:	fe 7c 24 00 	mov	r12,-56320
800028c8:	f0 1f 00 96 	mcall	80002b20 <sd_mmc_spi_internal_init+0x278>
800028cc:	30 07       	mov	r7,0
  for(i = 0; i < 10; ++i) {
    spi_write(SD_MMC_SPI,0xFF);
800028ce:	e0 66 00 ff 	mov	r6,255
800028d2:	fe 75 24 00 	mov	r5,-56320
800028d6:	0c 9b       	mov	r11,r6
800028d8:	0a 9c       	mov	r12,r5
800028da:	f0 1f 00 93 	mcall	80002b24 <sd_mmc_spi_internal_init+0x27c>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
800028de:	2f f7       	sub	r7,-1
800028e0:	58 a7       	cp.w	r7,10
800028e2:	cf a1       	brne	800028d6 <sd_mmc_spi_internal_init+0x2e>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800028e4:	30 1b       	mov	r11,1
800028e6:	fe 7c 24 00 	mov	r12,-56320
800028ea:	f0 1f 00 90 	mcall	80002b28 <sd_mmc_spi_internal_init+0x280>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
800028ee:	30 08       	mov	r8,0
800028f0:	fe f9 02 3c 	ld.w	r9,pc[572]
800028f4:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
800028f6:	fe f9 02 3a 	ld.w	r9,pc[570]
800028fa:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800028fc:	30 0b       	mov	r11,0
800028fe:	16 9c       	mov	r12,r11
80002900:	f0 1f 00 8d 	mcall	80002b34 <sd_mmc_spi_internal_init+0x28c>
80002904:	fe f8 02 34 	ld.w	r8,pc[564]
80002908:	b0 8c       	st.b	r8[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000290a:	e0 6b 00 ff 	mov	r11,255
8000290e:	fe 7c 24 00 	mov	r12,-56320
80002912:	f0 1f 00 85 	mcall	80002b24 <sd_mmc_spi_internal_init+0x27c>
80002916:	30 17       	mov	r7,1
    // do retry counter
    retry++;
    if(retry > 100)
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
80002918:	fe f6 02 20 	ld.w	r6,pc[544]
8000291c:	30 15       	mov	r5,1
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
8000291e:	30 03       	mov	r3,0
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002920:	e0 62 00 ff 	mov	r2,255
80002924:	fe 71 24 00 	mov	r1,-56320
    // do retry counter
    retry++;
    if(retry > 100)
80002928:	36 54       	mov	r4,101
8000292a:	c1 08       	rjmp	8000294a <sd_mmc_spi_internal_init+0xa2>
  card_type = MMC_CARD;
  retry = 0;
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
8000292c:	06 9b       	mov	r11,r3
8000292e:	06 9c       	mov	r12,r3
80002930:	f0 1f 00 81 	mcall	80002b34 <sd_mmc_spi_internal_init+0x28c>
80002934:	ac 8c       	st.b	r6[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002936:	04 9b       	mov	r11,r2
80002938:	02 9c       	mov	r12,r1
8000293a:	f0 1f 00 7b 	mcall	80002b24 <sd_mmc_spi_internal_init+0x27c>
    // do retry counter
    retry++;
8000293e:	2f f7       	sub	r7,-1
80002940:	5c 87       	casts.h	r7
    if(retry > 100)
80002942:	e8 07 19 00 	cp.h	r7,r4
80002946:	e0 80 00 e5 	breq	80002b10 <sd_mmc_spi_internal_init+0x268>
      return false;
  }
  while(r1 != 0x01);   // check memory enters idle_state
8000294a:	0d 88       	ld.ub	r8,r6[0x0]
8000294c:	ea 08 18 00 	cp.b	r8,r5
80002950:	ce e1       	brne	8000292c <sd_mmc_spi_internal_init+0x84>

  if_cond = sd_mmc_spi_get_if();
80002952:	f0 1f 00 7b 	mcall	80002b3c <sd_mmc_spi_internal_init+0x294>
  if(if_cond == -1) {
80002956:	5b fc       	cp.w	r12,-1
80002958:	e0 80 00 dc 	breq	80002b10 <sd_mmc_spi_internal_init+0x268>
      return false; // card is bad
  } else if (if_cond == 1) {
8000295c:	58 1c       	cp.w	r12,1
8000295e:	c0 51       	brne	80002968 <sd_mmc_spi_internal_init+0xc0>
      card_type = SD_CARD_2;
80002960:	30 29       	mov	r9,2
80002962:	4f 48       	lddpc	r8,80002b30 <sd_mmc_spi_internal_init+0x288>
80002964:	b0 89       	st.b	r8[0x0],r9
80002966:	c4 c8       	rjmp	800029fe <sd_mmc_spi_internal_init+0x156>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002968:	30 0b       	mov	r11,0
8000296a:	33 7c       	mov	r12,55
8000296c:	f0 1f 00 72 	mcall	80002b34 <sd_mmc_spi_internal_init+0x28c>
80002970:	4f 27       	lddpc	r7,80002b38 <sd_mmc_spi_internal_init+0x290>
80002972:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002974:	e0 6b 00 ff 	mov	r11,255
80002978:	fe 7c 24 00 	mov	r12,-56320
8000297c:	f0 1f 00 6a 	mcall	80002b24 <sd_mmc_spi_internal_init+0x27c>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002980:	30 0b       	mov	r11,0
80002982:	32 9c       	mov	r12,41
80002984:	f0 1f 00 6c 	mcall	80002b34 <sd_mmc_spi_internal_init+0x28c>
80002988:	ae 8c       	st.b	r7[0x0],r12
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
8000298a:	e0 6b 00 ff 	mov	r11,255
8000298e:	fe 7c 24 00 	mov	r12,-56320
80002992:	f0 1f 00 65 	mcall	80002b24 <sd_mmc_spi_internal_init+0x27c>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
80002996:	0f 88       	ld.ub	r8,r7[0x0]
80002998:	e2 18 00 fe 	andl	r8,0xfe,COH
8000299c:	c0 51       	brne	800029a6 <sd_mmc_spi_internal_init+0xfe>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
8000299e:	30 19       	mov	r9,1
800029a0:	4e 48       	lddpc	r8,80002b30 <sd_mmc_spi_internal_init+0x288>
800029a2:	b0 89       	st.b	r8[0x0],r9
800029a4:	c2 d8       	rjmp	800029fe <sd_mmc_spi_internal_init+0x156>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
800029a6:	30 09       	mov	r9,0
800029a8:	4e 28       	lddpc	r8,80002b30 <sd_mmc_spi_internal_init+0x288>
800029aa:	b0 89       	st.b	r8[0x0],r9
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800029ac:	30 0b       	mov	r11,0
800029ae:	16 9c       	mov	r12,r11
800029b0:	f0 1f 00 61 	mcall	80002b34 <sd_mmc_spi_internal_init+0x28c>
800029b4:	4e 18       	lddpc	r8,80002b38 <sd_mmc_spi_internal_init+0x290>
800029b6:	b0 8c       	st.b	r8[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029b8:	e0 6b 00 ff 	mov	r11,255
800029bc:	fe 7c 24 00 	mov	r12,-56320
800029c0:	f0 1f 00 59 	mcall	80002b24 <sd_mmc_spi_internal_init+0x27c>
800029c4:	30 17       	mov	r7,1
        // do retry counter
        retry++;
        if(retry > 100)
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
800029c6:	4d d6       	lddpc	r6,80002b38 <sd_mmc_spi_internal_init+0x290>
800029c8:	30 15       	mov	r5,1
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800029ca:	30 03       	mov	r3,0
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029cc:	e0 62 00 ff 	mov	r2,255
800029d0:	fe 71 24 00 	mov	r1,-56320
        // do retry counter
        retry++;
        if(retry > 100)
800029d4:	36 54       	mov	r4,101
800029d6:	c1 08       	rjmp	800029f6 <sd_mmc_spi_internal_init+0x14e>
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
      // reset card again
      retry = 0;
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800029d8:	06 9b       	mov	r11,r3
800029da:	06 9c       	mov	r12,r3
800029dc:	f0 1f 00 56 	mcall	80002b34 <sd_mmc_spi_internal_init+0x28c>
800029e0:	ac 8c       	st.b	r6[0x0],r12
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800029e2:	04 9b       	mov	r11,r2
800029e4:	02 9c       	mov	r12,r1
800029e6:	f0 1f 00 50 	mcall	80002b24 <sd_mmc_spi_internal_init+0x27c>
        // do retry counter
        retry++;
800029ea:	2f f7       	sub	r7,-1
800029ec:	5c 87       	casts.h	r7
        if(retry > 100)
800029ee:	e8 07 19 00 	cp.h	r7,r4
800029f2:	e0 80 00 8f 	breq	80002b10 <sd_mmc_spi_internal_init+0x268>
          return false;
      }
      while(r1 != 0x01);   // check memory enters idle_state
800029f6:	0d 88       	ld.ub	r8,r6[0x0]
800029f8:	ea 08 18 00 	cp.b	r8,r5
800029fc:	ce e1       	brne	800029d8 <sd_mmc_spi_internal_init+0x130>
800029fe:	30 07       	mov	r7,0

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80002a00:	4c c4       	lddpc	r4,80002b30 <sd_mmc_spi_internal_init+0x288>
80002a02:	30 15       	mov	r5,1
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      break;
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002a04:	0e 93       	mov	r3,r7
80002a06:	33 70       	mov	r0,55
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002a08:	4c c6       	lddpc	r6,80002b38 <sd_mmc_spi_internal_init+0x290>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a0a:	e0 62 00 ff 	mov	r2,255
80002a0e:	fe 71 24 00 	mov	r1,-56320

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
  do {
    switch(card_type) {
80002a12:	09 88       	ld.ub	r8,r4[0x0]
80002a14:	ea 08 18 00 	cp.b	r8,r5
80002a18:	c1 10       	breq	80002a3a <sd_mmc_spi_internal_init+0x192>
80002a1a:	c0 63       	brcs	80002a26 <sd_mmc_spi_internal_init+0x17e>
80002a1c:	30 29       	mov	r9,2
80002a1e:	f2 08 18 00 	cp.b	r8,r9
80002a22:	c2 91       	brne	80002a74 <sd_mmc_spi_internal_init+0x1cc>
80002a24:	c1 98       	rjmp	80002a56 <sd_mmc_spi_internal_init+0x1ae>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
80002a26:	06 9b       	mov	r11,r3
80002a28:	30 1c       	mov	r12,1
80002a2a:	f0 1f 00 43 	mcall	80002b34 <sd_mmc_spi_internal_init+0x28c>
80002a2e:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a30:	04 9b       	mov	r11,r2
80002a32:	02 9c       	mov	r12,r1
80002a34:	f0 1f 00 3c 	mcall	80002b24 <sd_mmc_spi_internal_init+0x27c>
      break;
80002a38:	c1 e8       	rjmp	80002a74 <sd_mmc_spi_internal_init+0x1cc>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002a3a:	06 9b       	mov	r11,r3
80002a3c:	00 9c       	mov	r12,r0
80002a3e:	f0 1f 00 3e 	mcall	80002b34 <sd_mmc_spi_internal_init+0x28c>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002a42:	06 9b       	mov	r11,r3
80002a44:	32 9c       	mov	r12,41
80002a46:	f0 1f 00 3c 	mcall	80002b34 <sd_mmc_spi_internal_init+0x28c>
80002a4a:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a4c:	04 9b       	mov	r11,r2
80002a4e:	02 9c       	mov	r12,r1
80002a50:	f0 1f 00 35 	mcall	80002b24 <sd_mmc_spi_internal_init+0x27c>
      break;
80002a54:	c1 08       	rjmp	80002a74 <sd_mmc_spi_internal_init+0x1cc>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
80002a56:	06 9b       	mov	r11,r3
80002a58:	00 9c       	mov	r12,r0
80002a5a:	f0 1f 00 37 	mcall	80002b34 <sd_mmc_spi_internal_init+0x28c>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
80002a5e:	30 0b       	mov	r11,0
80002a60:	ea 1b 40 00 	orh	r11,0x4000
80002a64:	32 9c       	mov	r12,41
80002a66:	f0 1f 00 34 	mcall	80002b34 <sd_mmc_spi_internal_init+0x28c>
80002a6a:	ac 8c       	st.b	r6[0x0],r12
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a6c:	04 9b       	mov	r11,r2
80002a6e:	02 9c       	mov	r12,r1
80002a70:	f0 1f 00 2d 	mcall	80002b24 <sd_mmc_spi_internal_init+0x27c>
      break;
    }
     // do retry counter
     retry++;
80002a74:	2f f7       	sub	r7,-1
80002a76:	5c 87       	casts.h	r7
     if(retry == 50000)    // measured approx. 500 on several cards
80002a78:	fe 78 c3 50 	mov	r8,-15536
80002a7c:	f0 07 19 00 	cp.h	r7,r8
80002a80:	c4 80       	breq	80002b10 <sd_mmc_spi_internal_init+0x268>
        return false;
  } while (r1);
80002a82:	0d 89       	ld.ub	r9,r6[0x0]
80002a84:	30 08       	mov	r8,0
80002a86:	f0 09 18 00 	cp.b	r9,r8
80002a8a:	cc 41       	brne	80002a12 <sd_mmc_spi_internal_init+0x16a>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
80002a8c:	4a 98       	lddpc	r8,80002b30 <sd_mmc_spi_internal_init+0x288>
80002a8e:	11 89       	ld.ub	r9,r8[0x0]
80002a90:	30 28       	mov	r8,2
80002a92:	f0 09 18 00 	cp.b	r9,r8
80002a96:	c0 a1       	brne	80002aaa <sd_mmc_spi_internal_init+0x202>
    if_cond = sd_mmc_spi_check_hc();
80002a98:	f0 1f 00 2a 	mcall	80002b40 <sd_mmc_spi_internal_init+0x298>
    if (if_cond == -1) {
80002a9c:	5b fc       	cp.w	r12,-1
80002a9e:	c3 90       	breq	80002b10 <sd_mmc_spi_internal_init+0x268>
      return false;
    } else if (if_cond == 1){
80002aa0:	58 1c       	cp.w	r12,1
80002aa2:	c0 41       	brne	80002aaa <sd_mmc_spi_internal_init+0x202>
          card_type = SD_CARD_2_SDHC;
80002aa4:	30 39       	mov	r9,3
80002aa6:	4a 38       	lddpc	r8,80002b30 <sd_mmc_spi_internal_init+0x288>
80002aa8:	b0 89       	st.b	r8[0x0],r9
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80002aaa:	30 0b       	mov	r11,0
80002aac:	33 bc       	mov	r12,59
80002aae:	f0 1f 00 22 	mcall	80002b34 <sd_mmc_spi_internal_init+0x28c>
80002ab2:	4a 27       	lddpc	r7,80002b38 <sd_mmc_spi_internal_init+0x290>
80002ab4:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002ab6:	e0 6b 00 ff 	mov	r11,255
80002aba:	fe 7c 24 00 	mov	r12,-56320
80002abe:	f0 1f 00 1a 	mcall	80002b24 <sd_mmc_spi_internal_init+0x27c>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002ac2:	e0 6b 02 00 	mov	r11,512
80002ac6:	31 0c       	mov	r12,16
80002ac8:	f0 1f 00 1b 	mcall	80002b34 <sd_mmc_spi_internal_init+0x28c>
80002acc:	ae 8c       	st.b	r7[0x0],r12
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002ace:	e0 6b 00 ff 	mov	r11,255
80002ad2:	fe 7c 24 00 	mov	r12,-56320
80002ad6:	f0 1f 00 14 	mcall	80002b24 <sd_mmc_spi_internal_init+0x27c>
  if (r1 != 0x00)
80002ada:	0f 89       	ld.ub	r9,r7[0x0]
80002adc:	30 08       	mov	r8,0
80002ade:	f0 09 18 00 	cp.b	r9,r8
80002ae2:	c1 71       	brne	80002b10 <sd_mmc_spi_internal_init+0x268>
    return false;    // card unsupported if block length of 512b is not accepted

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
80002ae4:	49 8c       	lddpc	r12,80002b44 <sd_mmc_spi_internal_init+0x29c>
80002ae6:	f0 1f 00 19 	mcall	80002b48 <sd_mmc_spi_internal_init+0x2a0>
80002aea:	c1 30       	breq	80002b10 <sd_mmc_spi_internal_init+0x268>
    return false;

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80002aec:	f0 1f 00 18 	mcall	80002b4c <sd_mmc_spi_internal_init+0x2a4>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
80002af0:	30 19       	mov	r9,1
80002af2:	48 f8       	lddpc	r8,80002b2c <sd_mmc_spi_internal_init+0x284>
80002af4:	b0 89       	st.b	r8[0x0],r9

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
80002af6:	48 8b       	lddpc	r11,80002b14 <sd_mmc_spi_internal_init+0x26c>
80002af8:	e0 68 6c 00 	mov	r8,27648
80002afc:	ea 18 02 dc 	orh	r8,0x2dc
80002b00:	97 18       	st.w	r11[0x4],r8
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002b02:	48 68       	lddpc	r8,80002b18 <sd_mmc_spi_internal_init+0x270>
80002b04:	70 0a       	ld.w	r10,r8[0x0]
80002b06:	fe 7c 24 00 	mov	r12,-56320
80002b0a:	f0 1f 00 05 	mcall	80002b1c <sd_mmc_spi_internal_init+0x274>
80002b0e:	da 3a       	popm	r0-r7,pc,r12=1
  return true;
80002b10:	d8 3a       	popm	r0-r7,pc,r12=0
80002b12:	00 00       	add	r0,r0
80002b14:	00 00       	add	r0,r0
80002b16:	03 74       	ld.ub	r4,--r1
80002b18:	00 00       	add	r0,r0
80002b1a:	03 84       	ld.ub	r4,r1[0x0]
80002b1c:	80 00       	ld.sh	r0,r0[0x0]
80002b1e:	51 34       	stdsp	sp[0x4c],r4
80002b20:	80 00       	ld.sh	r0,r0[0x0]
80002b22:	50 c0       	stdsp	sp[0x30],r0
80002b24:	80 00       	ld.sh	r0,r0[0x0]
80002b26:	51 fa       	stdsp	sp[0x7c],r10
80002b28:	80 00       	ld.sh	r0,r0[0x0]
80002b2a:	51 0c       	stdsp	sp[0x40],r12
80002b2c:	00 00       	add	r0,r0
80002b2e:	03 88       	ld.ub	r8,r1[0x0]
80002b30:	00 00       	add	r0,r0
80002b32:	27 46       	sub	r6,116
80002b34:	80 00       	ld.sh	r0,r0[0x0]
80002b36:	22 b8       	sub	r8,43
80002b38:	00 00       	add	r0,r0
80002b3a:	27 58       	sub	r8,117
80002b3c:	80 00       	ld.sh	r0,r0[0x0]
80002b3e:	25 4c       	sub	r12,84
80002b40:	80 00       	ld.sh	r0,r0[0x0]
80002b42:	24 c0       	sub	r0,76
80002b44:	00 00       	add	r0,r0
80002b46:	27 48       	sub	r8,116
80002b48:	80 00       	ld.sh	r0,r0[0x0]
80002b4a:	27 54       	sub	r4,117
80002b4c:	80 00       	ld.sh	r0,r0[0x0]
80002b4e:	20 08       	sub	r8,0

80002b50 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80002b50:	d4 01       	pushm	lr
  if (sd_mmc_spi_check_presence())
80002b52:	f0 1f 00 07 	mcall	80002b6c <sd_mmc_spi_mem_check+0x1c>
80002b56:	c0 a0       	breq	80002b6a <sd_mmc_spi_mem_check+0x1a>
  {
    if (sd_mmc_spi_init_done == false)
80002b58:	48 68       	lddpc	r8,80002b70 <sd_mmc_spi_mem_check+0x20>
80002b5a:	11 89       	ld.ub	r9,r8[0x0]
80002b5c:	30 08       	mov	r8,0
80002b5e:	f0 09 18 00 	cp.b	r9,r8
80002b62:	c0 20       	breq	80002b66 <sd_mmc_spi_mem_check+0x16>
80002b64:	da 0a       	popm	pc,r12=1
    {
      return sd_mmc_spi_internal_init();
80002b66:	f0 1f 00 04 	mcall	80002b74 <sd_mmc_spi_mem_check+0x24>
    }
    else
      return true;
  }
  return false;
}
80002b6a:	d8 02       	popm	pc
80002b6c:	80 00       	ld.sh	r0,r0[0x0]
80002b6e:	22 f8       	sub	r8,47
80002b70:	00 00       	add	r0,r0
80002b72:	03 88       	ld.ub	r8,r1[0x0]
80002b74:	80 00       	ld.sh	r0,r0[0x0]
80002b76:	28 a8       	sub	r8,-118

80002b78 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
80002b78:	eb cd 40 10 	pushm	r4,lr
80002b7c:	fa c4 ff f8 	sub	r4,sp,-8
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
80002b80:	48 88       	lddpc	r8,80002ba0 <sd_mmc_spi_init+0x28>
80002b82:	91 0c       	st.w	r8[0x0],r12
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002b84:	48 88       	lddpc	r8,80002ba4 <sd_mmc_spi_init+0x2c>
80002b86:	e8 ea 00 00 	ld.d	r10,r4[0]
80002b8a:	f0 eb 00 00 	st.d	r8[0],r10
80002b8e:	e8 ea 00 08 	ld.d	r10,r4[8]
80002b92:	f0 eb 00 08 	st.d	r8[8],r10

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
80002b96:	f0 1f 00 05 	mcall	80002ba8 <sd_mmc_spi_init+0x30>
}
80002b9a:	e3 cd 80 10 	ldm	sp++,r4,pc
80002b9e:	00 00       	add	r0,r0
80002ba0:	00 00       	add	r0,r0
80002ba2:	03 84       	ld.ub	r4,r1[0x0]
80002ba4:	00 00       	add	r0,r0
80002ba6:	03 74       	ld.ub	r4,--r1
80002ba8:	80 00       	ld.sh	r0,r0[0x0]
80002baa:	28 a8       	sub	r8,-118

80002bac <fat_check_open>:
//! @return    true  a file is opened
//! @return    false otherwise
//!
bool  fat_check_open( void )
{
   if( Fat_file_isnot_open() )
80002bac:	48 68       	lddpc	r8,80002bc4 <fat_check_open+0x18>
80002bae:	11 89       	ld.ub	r9,r8[0x0]
80002bb0:	30 08       	mov	r8,0
80002bb2:	f0 09 18 00 	cp.b	r9,r8
80002bb6:	c0 20       	breq	80002bba <fat_check_open+0xe>
80002bb8:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
80002bba:	31 79       	mov	r9,23
80002bbc:	48 38       	lddpc	r8,80002bc8 <fat_check_open+0x1c>
80002bbe:	b0 89       	st.b	r8[0x0],r9
80002bc0:	5e fd       	retal	0
80002bc2:	00 00       	add	r0,r0
80002bc4:	00 00       	add	r0,r0
80002bc6:	27 60       	sub	r0,118
80002bc8:	00 00       	add	r0,r0
80002bca:	29 e8       	sub	r8,-98

80002bcc <fat_check_select>:
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
80002bcc:	48 68       	lddpc	r8,80002be4 <fat_check_select+0x18>
80002bce:	90 19       	ld.sh	r9,r8[0x2]
80002bd0:	3f f8       	mov	r8,-1
80002bd2:	f0 09 19 00 	cp.h	r9,r8
80002bd6:	c0 20       	breq	80002bda <fat_check_select+0xe>
80002bd8:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80002bda:	30 f9       	mov	r9,15
80002bdc:	48 38       	lddpc	r8,80002be8 <fat_check_select+0x1c>
80002bde:	b0 89       	st.b	r8[0x0],r9
80002be0:	5e fd       	retal	0
80002be2:	00 00       	add	r0,r0
80002be4:	00 00       	add	r0,r0
80002be6:	29 e4       	sub	r4,-98
80002be8:	00 00       	add	r0,r0
80002bea:	29 e8       	sub	r8,-98

80002bec <fat_check_is_file>:
//! @return    true  It is a file and not a directory
//! @return    false otherwise
//!
bool  fat_check_is_file( void )
{
   if( Fat_is_not_a_file )
80002bec:	48 58       	lddpc	r8,80002c00 <fat_check_is_file+0x14>
80002bee:	11 a8       	ld.ub	r8,r8[0x2]
80002bf0:	e2 18 00 18 	andl	r8,0x18,COH
80002bf4:	c0 21       	brne	80002bf8 <fat_check_is_file+0xc>
80002bf6:	5e ff       	retal	1
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80002bf8:	31 39       	mov	r9,19
80002bfa:	48 38       	lddpc	r8,80002c04 <fat_check_is_file+0x18>
80002bfc:	b0 89       	st.b	r8[0x0],r9
80002bfe:	5e fd       	retal	0
80002c00:	00 00       	add	r0,r0
80002c02:	27 60       	sub	r0,118
80002c04:	00 00       	add	r0,r0
80002c06:	29 e8       	sub	r8,-98

80002c08 <fat_checkcluster>:
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
  if ( !fs_g_cluster.u32_val )
80002c08:	49 68       	lddpc	r8,80002c60 <fat_checkcluster+0x58>
80002c0a:	70 18       	ld.w	r8,r8[0x4]
80002c0c:	58 08       	cp.w	r8,0
80002c0e:	c0 21       	brne	80002c12 <fat_checkcluster+0xa>
80002c10:	5e ff       	retal	1
    return FS_CLUS_BAD;

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
80002c12:	49 59       	lddpc	r9,80002c64 <fat_checkcluster+0x5c>
80002c14:	13 89       	ld.ub	r9,r9[0x0]
80002c16:	30 3a       	mov	r10,3
80002c18:	f4 09 18 00 	cp.b	r9,r10
80002c1c:	c0 a1       	brne	80002c30 <fat_checkcluster+0x28>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
80002c1e:	e0 69 ff f7 	mov	r9,65527
80002c22:	ea 19 0f ff 	orh	r9,0xfff
80002c26:	12 38       	cp.w	r8,r9
80002c28:	e0 8b 00 19 	brhi	80002c5a <fat_checkcluster+0x52>
80002c2c:	5f 0c       	sreq	r12
80002c2e:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat16 )
80002c30:	30 2a       	mov	r10,2
80002c32:	f4 09 18 00 	cp.b	r9,r10
80002c36:	c0 71       	brne	80002c44 <fat_checkcluster+0x3c>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
80002c38:	e0 48 ff f7 	cp.w	r8,65527
80002c3c:	e0 8b 00 0f 	brhi	80002c5a <fat_checkcluster+0x52>
80002c40:	5f 0c       	sreq	r12
80002c42:	5e fc       	retal	r12
      return FS_CLUS_END;
    else if (fs_g_cluster.u32_val == 0xFFF7)
      return FS_CLUS_BAD;
  }
  else if ( Is_fat12 )
80002c44:	30 1a       	mov	r10,1
80002c46:	f4 09 18 00 	cp.b	r9,r10
80002c4a:	c0 20       	breq	80002c4e <fat_checkcluster+0x46>
80002c4c:	5e fd       	retal	0
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
80002c4e:	e0 48 0f f7 	cp.w	r8,4087
80002c52:	e0 8b 00 04 	brhi	80002c5a <fat_checkcluster+0x52>
80002c56:	5f 0c       	sreq	r12
80002c58:	5e fc       	retal	r12
80002c5a:	30 2c       	mov	r12,2
    else if (fs_g_cluster.u32_val == 0xFF7)
      return FS_CLUS_BAD;
  }

  return FS_CLUS_OK;
}
80002c5c:	5e fc       	retal	r12
80002c5e:	00 00       	add	r0,r0
80002c60:	00 00       	add	r0,r0
80002c62:	2a 38       	sub	r8,-93
80002c64:	00 00       	add	r0,r0
80002c66:	29 e4       	sub	r4,-98

80002c68 <fat_cache_clusterlist_reset>:
//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
80002c68:	30 0a       	mov	r10,0
80002c6a:	48 88       	lddpc	r8,80002c88 <fat_cache_clusterlist_reset+0x20>
80002c6c:	b0 8a       	st.b	r8[0x0],r10
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80002c6e:	48 88       	lddpc	r8,80002c8c <fat_cache_clusterlist_reset+0x24>
80002c70:	30 19       	mov	r9,1
80002c72:	b0 89       	st.b	r8[0x0],r9
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80002c74:	3f f9       	mov	r9,-1
80002c76:	b0 a9       	st.b	r8[0x2],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80002c78:	b0 99       	st.b	r8[0x1],r9
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
80002c7a:	f1 6a 00 14 	st.b	r8[20],r10
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80002c7e:	f1 69 00 16 	st.b	r8[22],r9
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80002c82:	f1 69 00 15 	st.b	r8[21],r9
   }
}
80002c86:	5e fc       	retal	r12
80002c88:	00 00       	add	r0,r0
80002c8a:	29 ea       	sub	r10,-98
80002c8c:	00 00       	add	r0,r0
80002c8e:	27 74       	sub	r4,119

80002c90 <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
80002c90:	48 c9       	lddpc	r9,80002cc0 <fat_cache_clusterlist_update_start+0x30>
80002c92:	13 88       	ld.ub	r8,r9[0x0]
80002c94:	f8 08 18 00 	cp.b	r8,r12
80002c98:	5f 18       	srne	r8
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
      }
   }
   fs_g_u8_current_cache = u8_i;
80002c9a:	48 ba       	lddpc	r10,80002cc4 <fat_cache_clusterlist_update_start+0x34>
80002c9c:	b4 88       	st.b	r10[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
80002c9e:	f0 0a 15 02 	lsl	r10,r8,0x2
80002ca2:	10 0a       	add	r10,r8
80002ca4:	f2 0a 00 28 	add	r8,r9,r10<<0x2
80002ca8:	b0 8c       	st.b	r8[0x0],r12
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
80002caa:	3f fb       	mov	r11,-1
80002cac:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
80002cae:	2f fa       	sub	r10,-1
80002cb0:	48 6b       	lddpc	r11,80002cc8 <fat_cache_clusterlist_update_start+0x38>
80002cb2:	76 0b       	ld.w	r11,r11[0x0]
80002cb4:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
80002cb8:	48 59       	lddpc	r9,80002ccc <fat_cache_clusterlist_update_start+0x3c>
80002cba:	72 19       	ld.w	r9,r9[0x4]
80002cbc:	91 29       	st.w	r8[0x8],r9
}
80002cbe:	5e fc       	retal	r12
80002cc0:	00 00       	add	r0,r0
80002cc2:	27 74       	sub	r4,119
80002cc4:	00 00       	add	r0,r0
80002cc6:	29 ea       	sub	r10,-98
80002cc8:	00 00       	add	r0,r0
80002cca:	2a 38       	sub	r8,-93
80002ccc:	00 00       	add	r0,r0
80002cce:	2a 40       	sub	r0,-92

80002cd0 <fat_cache_clusterlist_update_select>:
{
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
80002cd0:	49 88       	lddpc	r8,80002d30 <fat_cache_clusterlist_update_select+0x60>
80002cd2:	11 88       	ld.ub	r8,r8[0x0]
80002cd4:	49 8a       	lddpc	r10,80002d34 <fat_cache_clusterlist_update_select+0x64>
80002cd6:	f0 08 00 2b 	add	r11,r8,r8<<0x2
80002cda:	f4 0b 00 2b 	add	r11,r10,r11<<0x2
80002cde:	17 89       	ld.ub	r9,r11[0x0]
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
80002ce0:	17 9b       	ld.ub	r11,r11[0x1]
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80002ce2:	15 8a       	ld.ub	r10,r10[0x0]
80002ce4:	f2 0a 18 00 	cp.b	r10,r9
80002ce8:	c0 a1       	brne	80002cfc <fat_cache_clusterlist_update_select+0x2c>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80002cea:	49 3a       	lddpc	r10,80002d34 <fat_cache_clusterlist_update_select+0x64>
80002cec:	15 9a       	ld.ub	r10,r10[0x1]
80002cee:	f4 0b 18 00 	cp.b	r11,r10
80002cf2:	e0 88 00 05 	brls	80002cfc <fat_cache_clusterlist_update_select+0x2c>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80002cf6:	2f fa       	sub	r10,-1
80002cf8:	48 fc       	lddpc	r12,80002d34 <fat_cache_clusterlist_update_select+0x64>
80002cfa:	b8 9a       	st.b	r12[0x1],r10

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
80002cfc:	48 ea       	lddpc	r10,80002d34 <fat_cache_clusterlist_update_select+0x64>
80002cfe:	f5 3a 00 14 	ld.ub	r10,r10[20]
80002d02:	f2 0a 18 00 	cp.b	r10,r9
80002d06:	c0 c1       	brne	80002d1e <fat_cache_clusterlist_update_select+0x4e>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
80002d08:	48 b9       	lddpc	r9,80002d34 <fat_cache_clusterlist_update_select+0x64>
80002d0a:	f3 39 00 15 	ld.ub	r9,r9[21]
80002d0e:	f2 0b 18 00 	cp.b	r11,r9
80002d12:	e0 88 00 06 	brls	80002d1e <fat_cache_clusterlist_update_select+0x4e>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
80002d16:	2f f9       	sub	r9,-1
80002d18:	48 7a       	lddpc	r10,80002d34 <fat_cache_clusterlist_update_select+0x64>
80002d1a:	f5 69 00 15 	st.b	r10[21],r9
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80002d1e:	f0 08 00 28 	add	r8,r8,r8<<0x2
80002d22:	48 59       	lddpc	r9,80002d34 <fat_cache_clusterlist_update_select+0x64>
80002d24:	f2 08 00 28 	add	r8,r9,r8<<0x2
80002d28:	30 09       	mov	r9,0
80002d2a:	b0 99       	st.b	r8[0x1],r9
}
80002d2c:	5e fc       	retal	r12
80002d2e:	00 00       	add	r0,r0
80002d30:	00 00       	add	r0,r0
80002d32:	29 ea       	sub	r10,-98
80002d34:	00 00       	add	r0,r0
80002d36:	27 74       	sub	r4,119

80002d38 <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
80002d38:	eb cd 40 c0 	pushm	r6-r7,lr
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80002d3c:	49 08       	lddpc	r8,80002d7c <fat_cache_clusterlist_update_finish+0x44>
80002d3e:	11 88       	ld.ub	r8,r8[0x0]
80002d40:	f0 08 00 28 	add	r8,r8,r8<<0x2
80002d44:	48 f9       	lddpc	r9,80002d80 <fat_cache_clusterlist_update_finish+0x48>
80002d46:	f2 08 00 28 	add	r8,r9,r8<<0x2
80002d4a:	f0 ca ff f8 	sub	r10,r8,-8
80002d4e:	48 eb       	lddpc	r11,80002d84 <fat_cache_clusterlist_update_finish+0x4c>
80002d50:	17 97       	ld.ub	r7,r11[0x1]
80002d52:	74 09       	ld.w	r9,r10[0x0]
80002d54:	f2 07 0d 06 	divu	r6,r9,r7
80002d58:	0e 99       	mov	r9,r7
80002d5a:	5c 59       	castu.b	r9
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
80002d5c:	17 8b       	ld.ub	r11,r11[0x0]
80002d5e:	b0 ab       	st.b	r8[0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
80002d60:	74 0b       	ld.w	r11,r10[0x0]
80002d62:	12 1b       	sub	r11,r9
80002d64:	95 0b       	st.w	r10[0x0],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
80002d66:	48 9a       	lddpc	r10,80002d88 <fat_cache_clusterlist_update_finish+0x50>
80002d68:	74 0b       	ld.w	r11,r10[0x0]
80002d6a:	12 1b       	sub	r11,r9
80002d6c:	91 3b       	st.w	r8[0xc],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
80002d6e:	74 1a       	ld.w	r10,r10[0x4]
80002d70:	14 09       	add	r9,r10
80002d72:	91 49       	st.w	r8[0x10],r9

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
80002d74:	f0 1f 00 06 	mcall	80002d8c <fat_cache_clusterlist_update_finish+0x54>
}
80002d78:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002d7c:	00 00       	add	r0,r0
80002d7e:	29 ea       	sub	r10,-98
80002d80:	00 00       	add	r0,r0
80002d82:	27 74       	sub	r4,119
80002d84:	00 00       	add	r0,r0
80002d86:	29 9c       	sub	r12,-103
80002d88:	00 00       	add	r0,r0
80002d8a:	2a 40       	sub	r0,-92
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	2c d0       	sub	r0,-51

80002d90 <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
80002d90:	eb cd 40 c0 	pushm	r6-r7,lr
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
80002d94:	4c 18       	lddpc	r8,80002e98 <fat_cache_clusterlist_update_read+0x108>
80002d96:	11 89       	ld.ub	r9,r8[0x0]
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80002d98:	4c 18       	lddpc	r8,80002e9c <fat_cache_clusterlist_update_read+0x10c>
80002d9a:	70 0a       	ld.w	r10,r8[0x0]
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80002d9c:	4c 18       	lddpc	r8,80002ea0 <fat_cache_clusterlist_update_read+0x110>
80002d9e:	70 1b       	ld.w	r11,r8[0x4]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80002da0:	4c 18       	lddpc	r8,80002ea4 <fat_cache_clusterlist_update_read+0x114>
80002da2:	11 88       	ld.ub	r8,r8[0x0]
80002da4:	f8 08 18 00 	cp.b	r8,r12
80002da8:	c1 11       	brne	80002dca <fat_cache_clusterlist_update_read+0x3a>
80002daa:	4b f8       	lddpc	r8,80002ea4 <fat_cache_clusterlist_update_read+0x114>
80002dac:	11 a8       	ld.ub	r8,r8[0x2]
80002dae:	f2 08 18 00 	cp.b	r8,r9
80002db2:	c0 c1       	brne	80002dca <fat_cache_clusterlist_update_read+0x3a>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80002db4:	4b c8       	lddpc	r8,80002ea4 <fat_cache_clusterlist_update_read+0x114>
80002db6:	70 18       	ld.w	r8,r8[0x4]
80002db8:	14 38       	cp.w	r8,r10
80002dba:	c0 81       	brne	80002dca <fat_cache_clusterlist_update_read+0x3a>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80002dbc:	4b a8       	lddpc	r8,80002ea4 <fat_cache_clusterlist_update_read+0x114>
80002dbe:	70 28       	ld.w	r8,r8[0x8]
80002dc0:	10 3b       	cp.w	r11,r8
80002dc2:	c0 43       	brcs	80002dca <fat_cache_clusterlist_update_read+0x3a>
80002dc4:	30 0a       	mov	r10,0
80002dc6:	14 99       	mov	r9,r10
80002dc8:	c1 88       	rjmp	80002df8 <fat_cache_clusterlist_update_read+0x68>
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80002dca:	4b 78       	lddpc	r8,80002ea4 <fat_cache_clusterlist_update_read+0x114>
80002dcc:	f1 38 00 14 	ld.ub	r8,r8[20]
80002dd0:	f8 08 18 00 	cp.b	r8,r12
80002dd4:	c5 e1       	brne	80002e90 <fat_cache_clusterlist_update_read+0x100>
80002dd6:	4b 48       	lddpc	r8,80002ea4 <fat_cache_clusterlist_update_read+0x114>
80002dd8:	f1 38 00 16 	ld.ub	r8,r8[22]
80002ddc:	f2 08 18 00 	cp.b	r8,r9
80002de0:	c5 81       	brne	80002e90 <fat_cache_clusterlist_update_read+0x100>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80002de2:	4b 18       	lddpc	r8,80002ea4 <fat_cache_clusterlist_update_read+0x114>
80002de4:	70 68       	ld.w	r8,r8[0x18]
80002de6:	14 38       	cp.w	r8,r10
80002de8:	c5 41       	brne	80002e90 <fat_cache_clusterlist_update_read+0x100>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80002dea:	4a f8       	lddpc	r8,80002ea4 <fat_cache_clusterlist_update_read+0x114>
80002dec:	70 78       	ld.w	r8,r8[0x1c]
80002dee:	16 38       	cp.w	r8,r11
80002df0:	e0 8b 00 50 	brhi	80002e90 <fat_cache_clusterlist_update_read+0x100>
80002df4:	30 1a       	mov	r10,1
80002df6:	14 99       	mov	r9,r10
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
80002df8:	f2 0e 15 02 	lsl	lr,r9,0x2
80002dfc:	12 0e       	add	lr,r9
80002dfe:	4a ac       	lddpc	r12,80002ea4 <fat_cache_clusterlist_update_read+0x114>
80002e00:	f8 0e 00 2c 	add	r12,r12,lr<<0x2
80002e04:	78 4c       	ld.w	r12,r12[0x10]
80002e06:	f6 08 01 08 	sub	r8,r11,r8
80002e0a:	10 3c       	cp.w	r12,r8
80002e0c:	e0 88 00 16 	brls	80002e38 <fat_cache_clusterlist_update_read+0xa8>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80002e10:	4a 4b       	lddpc	r11,80002ea0 <fat_cache_clusterlist_update_read+0x110>
80002e12:	f2 0e 15 02 	lsl	lr,r9,0x2
80002e16:	fc 09 00 09 	add	r9,lr,r9
80002e1a:	4a 3e       	lddpc	lr,80002ea4 <fat_cache_clusterlist_update_read+0x114>
80002e1c:	fc 09 00 29 	add	r9,lr,r9<<0x2
80002e20:	72 39       	ld.w	r9,r9[0xc]
80002e22:	f0 09 00 09 	add	r9,r8,r9
80002e26:	97 09       	st.w	r11[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
80002e28:	10 1c       	sub	r12,r8
80002e2a:	97 1c       	st.w	r11[0x4],r12
                  fs_g_u8_current_cache = u8_i;
80002e2c:	49 f8       	lddpc	r8,80002ea8 <fat_cache_clusterlist_update_read+0x118>
80002e2e:	b0 8a       	st.b	r8[0x0],r10
                  fat_cache_clusterlist_update_select();
80002e30:	f0 1f 00 1f 	mcall	80002eac <fat_cache_clusterlist_update_read+0x11c>
80002e34:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
                  return true;   // the segment is in cluster list cache
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the result in this cache
                  fs_g_u8_current_cache = u8_i;
80002e38:	49 c8       	lddpc	r8,80002ea8 <fat_cache_clusterlist_update_read+0x118>
80002e3a:	b0 8a       	st.b	r8[0x0],r10
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // invalid cache
80002e3c:	f2 08 15 02 	lsl	r8,r9,0x2
80002e40:	f0 09 00 09 	add	r9,r8,r9
80002e44:	49 88       	lddpc	r8,80002ea4 <fat_cache_clusterlist_update_read+0x114>
80002e46:	f0 09 00 28 	add	r8,r8,r9<<0x2
80002e4a:	3f f9       	mov	r9,-1
80002e4c:	b0 a9       	st.b	r8[0x2],r9
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80002e4e:	70 4c       	ld.w	r12,r8[0x10]
80002e50:	49 2a       	lddpc	r10,80002e98 <fat_cache_clusterlist_update_read+0x108>
80002e52:	15 99       	ld.ub	r9,r10[0x1]
80002e54:	70 3e       	ld.w	lr,r8[0xc]
80002e56:	f8 0e 00 0e 	add	lr,r12,lr
80002e5a:	20 1e       	sub	lr,1
80002e5c:	74 57       	ld.w	r7,r10[0x14]
80002e5e:	fc 07 01 07 	sub	r7,lr,r7
80002e62:	74 4a       	ld.w	r10,r10[0x10]
80002e64:	14 17       	sub	r7,r10
80002e66:	ee 09 0d 06 	divu	r6,r7,r9
80002e6a:	0c 97       	mov	r7,r6
80002e6c:	2f e7       	sub	r7,-2
80002e6e:	48 ca       	lddpc	r10,80002e9c <fat_cache_clusterlist_update_read+0x10c>
80002e70:	95 07       	st.w	r10[0x0],r7
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80002e72:	2f 88       	sub	r8,-8
80002e74:	70 0a       	ld.w	r10,r8[0x0]
80002e76:	14 0c       	add	r12,r10
80002e78:	f8 c7 00 01 	sub	r7,r12,1
80002e7c:	ee 09 0d 06 	divu	r6,r7,r9
80002e80:	ad 39       	mul	r9,r6
80002e82:	48 8a       	lddpc	r10,80002ea0 <fat_cache_clusterlist_update_read+0x110>
80002e84:	f6 09 01 09 	sub	r9,r11,r9
80002e88:	95 19       	st.w	r10[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
80002e8a:	91 0b       	st.w	r8[0x0],r11
80002e8c:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
            }
         }
      }
   }
   // No found in cache then read FAT and store the result in cache
   fat_cache_clusterlist_update_start(b_for_file);
80002e90:	f0 1f 00 08 	mcall	80002eb0 <fat_cache_clusterlist_update_read+0x120>
80002e94:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80002e98:	00 00       	add	r0,r0
80002e9a:	29 9c       	sub	r12,-103
80002e9c:	00 00       	add	r0,r0
80002e9e:	2a 38       	sub	r8,-93
80002ea0:	00 00       	add	r0,r0
80002ea2:	2a 40       	sub	r0,-92
80002ea4:	00 00       	add	r0,r0
80002ea6:	27 74       	sub	r4,119
80002ea8:	00 00       	add	r0,r0
80002eaa:	29 ea       	sub	r10,-98
80002eac:	80 00       	ld.sh	r0,r0[0x0]
80002eae:	2c d0       	sub	r0,-51
80002eb0:	80 00       	ld.sh	r0,r0[0x0]
80002eb2:	2c 90       	sub	r0,-55

80002eb4 <fat_entry_is_dir>:
//! @return    true,    this entry is a directory
//! @return    false,   otherwise
//!
bool  fat_entry_is_dir(void)
{
   fs_g_status = FS_ERR_NO_DIR;
80002eb4:	30 d9       	mov	r9,13
80002eb6:	48 48       	lddpc	r8,80002ec4 <fat_entry_is_dir+0x10>
80002eb8:	b0 89       	st.b	r8[0x0],r9
80002eba:	48 48       	lddpc	r8,80002ec8 <fat_entry_is_dir+0x14>
80002ebc:	11 ac       	ld.ub	r12,r8[0x2]
   return (FS_ATTR_DIRECTORY & fs_g_nav_entry.u8_attr);
}
80002ebe:	f9 dc c0 81 	bfextu	r12,r12,0x4,0x1
80002ec2:	5e fc       	retal	r12
80002ec4:	00 00       	add	r0,r0
80002ec6:	29 e8       	sub	r8,-98
80002ec8:	00 00       	add	r0,r0
80002eca:	27 60       	sub	r0,118

80002ecc <fat_clear_entry_info_and_ptr>:

//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
80002ecc:	3f f9       	mov	r9,-1
80002ece:	48 c8       	lddpc	r8,80002efc <fat_clear_entry_info_and_ptr+0x30>
80002ed0:	b0 19       	st.h	r8[0x2],r9
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
80002ed2:	48 c8       	lddpc	r8,80002f00 <fat_clear_entry_info_and_ptr+0x34>
80002ed4:	f1 59 00 24 	st.h	r8[36],r9
   if( !fs_g_nav.b_mode_nav_single )
80002ed8:	f1 39 00 2d 	ld.ub	r9,r8[45]
80002edc:	30 08       	mov	r8,0
80002ede:	f0 09 18 00 	cp.b	r9,r8
80002ee2:	c0 51       	brne	80002eec <fat_clear_entry_info_and_ptr+0x20>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
80002ee4:	10 99       	mov	r9,r8
80002ee6:	48 78       	lddpc	r8,80002f00 <fat_clear_entry_info_and_ptr+0x34>
80002ee8:	f1 69 00 2c 	st.b	r8[44],r9
   }
   fs_g_nav_entry.u8_attr     = 0;
80002eec:	48 68       	lddpc	r8,80002f04 <fat_clear_entry_info_and_ptr+0x38>
80002eee:	30 09       	mov	r9,0
80002ef0:	b0 a9       	st.b	r8[0x2],r9
   fs_g_nav_entry.u32_cluster = 0;
80002ef2:	30 0a       	mov	r10,0
80002ef4:	91 1a       	st.w	r8[0x4],r10
   fs_g_nav_entry.u32_size    = 0;
80002ef6:	91 2a       	st.w	r8[0x8],r10
   Fat_file_close();
80002ef8:	b0 89       	st.b	r8[0x0],r9
}
80002efa:	5e fc       	retal	r12
80002efc:	00 00       	add	r0,r0
80002efe:	29 e4       	sub	r4,-98
80002f00:	00 00       	add	r0,r0
80002f02:	29 9c       	sub	r12,-103
80002f04:	00 00       	add	r0,r0
80002f06:	27 60       	sub	r0,118

80002f08 <fat_check_eof_name>:
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
   return (('\0'==character)||('\\'==character)||('/'==character));
80002f08:	30 08       	mov	r8,0
80002f0a:	f0 0c 19 00 	cp.h	r12,r8
80002f0e:	5f 0a       	sreq	r10
80002f10:	35 c9       	mov	r9,92
80002f12:	f2 0c 19 00 	cp.h	r12,r9
80002f16:	5f 09       	sreq	r9
80002f18:	f5 e9 10 09 	or	r9,r10,r9
80002f1c:	f0 09 18 00 	cp.b	r9,r8
80002f20:	c0 20       	breq	80002f24 <fat_check_eof_name+0x1c>
80002f22:	5e ff       	retal	1
80002f24:	32 f8       	mov	r8,47
80002f26:	f0 0c 19 00 	cp.h	r12,r8
80002f2a:	5f 0c       	sreq	r12
}
80002f2c:	5e fc       	retal	r12
80002f2e:	d7 03       	nop

80002f30 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
80002f30:	48 48       	lddpc	r8,80002f40 <fat_get_ptr_entry+0x10>
80002f32:	90 98       	ld.uh	r8,r8[0x2]
80002f34:	a5 78       	lsl	r8,0x5
80002f36:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
}
80002f3a:	48 3c       	lddpc	r12,80002f44 <fat_get_ptr_entry+0x14>
80002f3c:	10 0c       	add	r12,r8
80002f3e:	5e fc       	retal	r12
80002f40:	00 00       	add	r0,r0
80002f42:	29 e4       	sub	r4,-98
80002f44:	00 00       	add	r0,r0
80002f46:	27 9c       	sub	r12,121

80002f48 <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case )
{
80002f48:	d4 31       	pushm	r0-r7,lr
80002f4a:	20 3d       	sub	sp,12
80002f4c:	18 97       	mov	r7,r12
80002f4e:	16 94       	mov	r4,r11
80002f50:	14 96       	mov	r6,r10
80002f52:	50 09       	stdsp	sp[0x0],r9
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
80002f54:	f0 1f 00 5e 	mcall	800030cc <fat_entry_longname+0x184>

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
80002f58:	19 88       	ld.ub	r8,r12[0x0]
80002f5a:	30 09       	mov	r9,0
80002f5c:	f2 08 18 00 	cp.b	r8,r9
80002f60:	5f 0b       	sreq	r11
80002f62:	3e 5a       	mov	r10,-27
80002f64:	f4 08 18 00 	cp.b	r8,r10
80002f68:	5f 0a       	sreq	r10
80002f6a:	f7 ea 10 0a 	or	r10,r11,r10
80002f6e:	f2 0a 18 00 	cp.b	r10,r9
80002f72:	c0 71       	brne	80002f80 <fat_entry_longname+0x38>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
80002f74:	f9 3a 00 0b 	ld.ub	r10,r12[11]
80002f78:	30 f9       	mov	r9,15
80002f7a:	f2 0a 18 00 	cp.b	r10,r9
80002f7e:	c0 60       	breq	80002f8a <fat_entry_longname+0x42>
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80002f80:	30 b9       	mov	r9,11
80002f82:	4d 48       	lddpc	r8,800030d0 <fat_entry_longname+0x188>
80002f84:	b0 89       	st.b	r8[0x0],r9
80002f86:	30 0c       	mov	r12,0
      return false;
80002f88:	c9 c8       	rjmp	800030c0 <fat_entry_longname+0x178>
   }

   if( g_b_string_length )
80002f8a:	4d 39       	lddpc	r9,800030d4 <fat_entry_longname+0x18c>
80002f8c:	13 8a       	ld.ub	r10,r9[0x0]
80002f8e:	30 09       	mov	r9,0
80002f90:	f2 0a 18 00 	cp.b	r10,r9
80002f94:	c0 90       	breq	80002fa6 <fat_entry_longname+0x5e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
80002f96:	e2 18 00 40 	andl	r8,0x40,COH
80002f9a:	c0 61       	brne	80002fa6 <fat_entry_longname+0x5e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
80002f9c:	31 09       	mov	r9,16
80002f9e:	4c d8       	lddpc	r8,800030d0 <fat_entry_longname+0x188>
80002fa0:	b0 89       	st.b	r8[0x0],r9
80002fa2:	30 0c       	mov	r12,0
         return false;                          // Other entry long name
80002fa4:	c8 e8       	rjmp	800030c0 <fat_entry_longname+0x178>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
80002fa6:	2f fc       	sub	r12,-1
80002fa8:	30 08       	mov	r8,0

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
80002faa:	fa ca ff f6 	sub	r10,sp,-10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80002fae:	30 0b       	mov	r11,0
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
      MSB(u16_unicode_entry) = ptr_entry[1];
      if( FS_NAME_GET == b_mode )
      {
         if( !g_b_string_length )
80002fb0:	4c 95       	lddpc	r5,800030d4 <fat_entry_longname+0x18c>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
80002fb2:	20 14       	sub	r4,1
80002fb4:	50 14       	stdsp	sp[0x4],r4
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
           return false;
         }
      }

      if( 0 == u16_unicode_entry)
80002fb6:	30 01       	mov	r1,0
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
80002fb8:	30 44       	mov	r4,4
   ptr_entry++;                                 // The long name start at offset 1 of the entry file

   u8_pos_name=0;
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
80002fba:	19 89       	ld.ub	r9,r12[0x0]
80002fbc:	b4 99       	st.b	r10[0x1],r9
      MSB(u16_unicode_entry) = ptr_entry[1];
80002fbe:	19 99       	ld.ub	r9,r12[0x1]
80002fc0:	b4 89       	st.b	r10[0x0],r9
      if( FS_NAME_GET == b_mode )
80002fc2:	58 06       	cp.w	r6,0
80002fc4:	c0 f0       	breq	80002fe2 <fat_entry_longname+0x9a>
      {
         if( !g_b_string_length )
80002fc6:	0b 89       	ld.ub	r9,r5[0x0]
80002fc8:	f6 09 18 00 	cp.b	r9,r11
80002fcc:	c3 91       	brne	8000303e <fat_entry_longname+0xf6>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
80002fce:	40 1e       	lddsp	lr,sp[0x4]
80002fd0:	1c 38       	cp.w	r8,lr
80002fd2:	c0 55       	brlt	80002fdc <fat_entry_longname+0x94>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
80002fd4:	30 08       	mov	r8,0
80002fd6:	ae 88       	st.b	r7[0x0],r8
80002fd8:	30 1c       	mov	r12,1
               }
               return true;                     // the buffer is full
80002fda:	c7 38       	rjmp	800030c0 <fat_entry_longname+0x178>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
80002fdc:	9a 59       	ld.sh	r9,sp[0xa]
80002fde:	ae 89       	st.b	r7[0x0],r9
80002fe0:	c2 f8       	rjmp	8000303e <fat_entry_longname+0xf6>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
80002fe2:	0f 89       	ld.ub	r9,r7[0x0]
         }
         // Check the name
         if( '*' == u16_unicode_szname )
80002fe4:	32 a3       	mov	r3,42
80002fe6:	e6 09 19 00 	cp.h	r9,r3
80002fea:	c6 a0       	breq	800030be <fat_entry_longname+0x176>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80002fec:	9a 5e       	ld.sh	lr,sp[0xa]
80002fee:	58 0e       	cp.w	lr,0
80002ff0:	c0 e1       	brne	8000300c <fat_entry_longname+0xc4>
80002ff2:	35 c0       	mov	r0,92
80002ff4:	e0 09 19 00 	cp.h	r9,r0
80002ff8:	5f 12       	srne	r2
80002ffa:	32 f3       	mov	r3,47
80002ffc:	e6 09 19 00 	cp.h	r9,r3
80003000:	5f 13       	srne	r3
80003002:	e5 e3 00 03 	and	r3,r2,r3
80003006:	f6 03 18 00 	cp.b	r3,r11
8000300a:	c1 e0       	breq	80003046 <fat_entry_longname+0xfe>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
8000300c:	e7 d9 c0 10 	bfextu	r3,r9,0x0,0x10
80003010:	e5 de c0 10 	bfextu	r2,lr,0x0,0x10
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80003014:	e4 c0 ff e0 	sub	r0,r2,-32
80003018:	00 33       	cp.w	r3,r0
8000301a:	c0 41       	brne	80003022 <fat_entry_longname+0xda>
8000301c:	40 00       	lddsp	r0,sp[0x0]
8000301e:	58 00       	cp.w	r0,0
80003020:	c0 f0       	breq	8000303e <fat_entry_longname+0xf6>
80003022:	22 02       	sub	r2,32
80003024:	04 33       	cp.w	r3,r2
80003026:	c0 41       	brne	8000302e <fat_entry_longname+0xe6>
80003028:	40 03       	lddsp	r3,sp[0x0]
8000302a:	58 03       	cp.w	r3,0
8000302c:	c0 90       	breq	8000303e <fat_entry_longname+0xf6>
8000302e:	fc 09 19 00 	cp.h	r9,lr
80003032:	c0 60       	breq	8000303e <fat_entry_longname+0xf6>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
80003034:	31 69       	mov	r9,22
80003036:	4a 78       	lddpc	r8,800030d0 <fat_entry_longname+0x188>
80003038:	b0 89       	st.b	r8[0x0],r9
8000303a:	30 0c       	mov	r12,0
           return false;
8000303c:	c4 28       	rjmp	800030c0 <fat_entry_longname+0x178>
         }
      }

      if( 0 == u16_unicode_entry)
8000303e:	9a 59       	ld.sh	r9,sp[0xa]
80003040:	e2 09 19 00 	cp.h	r9,r1
80003044:	c0 b1       	brne	8000305a <fat_entry_longname+0x112>
      {
         if( g_b_string_length )
80003046:	4a 49       	lddpc	r9,800030d4 <fat_entry_longname+0x18c>
80003048:	13 8a       	ld.ub	r10,r9[0x0]
8000304a:	30 09       	mov	r9,0
8000304c:	f2 0a 18 00 	cp.b	r10,r9
80003050:	c3 70       	breq	800030be <fat_entry_longname+0x176>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
80003052:	2f f8       	sub	r8,-1
80003054:	ae 08       	st.h	r7[0x0],r8
80003056:	30 1c       	mov	r12,1
80003058:	c3 48       	rjmp	800030c0 <fat_entry_longname+0x178>
         }
         return true;                           // Last long name entry
      }
      if( 4 == u8_pos_name )
8000305a:	e8 08 18 00 	cp.b	r8,r4
8000305e:	c0 31       	brne	80003064 <fat_entry_longname+0x11c>
         ptr_entry += 3;                        // Go to second character
80003060:	2f dc       	sub	r12,-3
80003062:	c2 58       	rjmp	800030ac <fat_entry_longname+0x164>

      if( 10 == u8_pos_name )
80003064:	30 a9       	mov	r9,10
80003066:	f2 08 18 00 	cp.b	r8,r9
8000306a:	c0 31       	brne	80003070 <fat_entry_longname+0x128>
         ptr_entry += 2;                        // Go to third character
8000306c:	2f ec       	sub	r12,-2
8000306e:	c1 f8       	rjmp	800030ac <fat_entry_longname+0x164>

      if( 12 == u8_pos_name )
80003070:	30 c9       	mov	r9,12
80003072:	f2 08 18 00 	cp.b	r8,r9
80003076:	c1 b1       	brne	800030ac <fat_entry_longname+0x164>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
80003078:	f9 38 ff e2 	ld.ub	r8,r12[-30]
8000307c:	e2 18 00 40 	andl	r8,0x40,COH
80003080:	c0 61       	brne	8000308c <fat_entry_longname+0x144>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
80003082:	31 09       	mov	r9,16
80003084:	49 38       	lddpc	r8,800030d0 <fat_entry_longname+0x188>
80003086:	b0 89       	st.b	r8[0x0],r9
80003088:	30 0c       	mov	r12,0
            return false;                       // Other long name entry is present
8000308a:	c1 b8       	rjmp	800030c0 <fat_entry_longname+0x178>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
8000308c:	58 06       	cp.w	r6,0
8000308e:	c0 b0       	breq	800030a4 <fat_entry_longname+0x15c>
80003090:	49 18       	lddpc	r8,800030d4 <fat_entry_longname+0x18c>
80003092:	11 89       	ld.ub	r9,r8[0x0]
80003094:	30 08       	mov	r8,0
80003096:	f0 09 18 00 	cp.b	r9,r8
8000309a:	c1 50       	breq	800030c4 <fat_entry_longname+0x17c>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
8000309c:	30 e8       	mov	r8,14
8000309e:	ae 08       	st.h	r7[0x0],r8
800030a0:	30 1c       	mov	r12,1
               return true;
800030a2:	c0 f8       	rjmp	800030c0 <fat_entry_longname+0x178>
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
               }
               return fat_check_eof_name(u16_unicode_szname);
800030a4:	0f 9c       	ld.ub	r12,r7[0x1]
800030a6:	f0 1f 00 0d 	mcall	800030d8 <fat_entry_longname+0x190>
800030aa:	c0 b8       	rjmp	800030c0 <fat_entry_longname+0x178>
            }
         }
      }

      if( !g_b_string_length )
800030ac:	0b 89       	ld.ub	r9,r5[0x0]
800030ae:	f6 09 18 00 	cp.b	r9,r11
800030b2:	c0 21       	brne	800030b6 <fat_entry_longname+0x16e>
      {
         sz_name += (Is_unicode? 2 : 1 );
800030b4:	2f f7       	sub	r7,-1
      }
      u8_pos_name++;
800030b6:	2f f8       	sub	r8,-1
800030b8:	5c 58       	castu.b	r8
      ptr_entry+=2;
800030ba:	2f ec       	sub	r12,-2
   }
800030bc:	c7 fb       	rjmp	80002fba <fat_entry_longname+0x72>
800030be:	30 1c       	mov	r12,1
}
800030c0:	2f dd       	sub	sp,-12
800030c2:	d8 32       	popm	r0-r7,pc
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
800030c4:	30 08       	mov	r8,0
800030c6:	ae 98       	st.b	r7[0x1],r8
800030c8:	30 1c       	mov	r12,1
               }
               return true;
800030ca:	cf bb       	rjmp	800030c0 <fat_entry_longname+0x178>
800030cc:	80 00       	ld.sh	r0,r0[0x0]
800030ce:	2f 30       	sub	r0,-13
800030d0:	00 00       	add	r0,r0
800030d2:	29 e8       	sub	r8,-98
800030d4:	00 00       	add	r0,r0
800030d6:	29 e9       	sub	r9,-98
800030d8:	80 00       	ld.sh	r0,r0[0x0]
800030da:	2f 08       	sub	r8,-16

800030dc <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode )
{
800030dc:	d4 31       	pushm	r0-r7,lr
800030de:	20 2d       	sub	sp,8
800030e0:	18 97       	mov	r7,r12
800030e2:	50 1b       	stdsp	sp[0x4],r11
800030e4:	14 96       	mov	r6,r10
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
800030e6:	31 69       	mov	r9,22
800030e8:	4b c8       	lddpc	r8,800031d8 <fat_entry_shortname+0xfc>
800030ea:	b0 89       	st.b	r8[0x0],r9

   u8_pos_name = 0;
   u8_pos_entry = 0;
   ptr_entry = fat_get_ptr_entry();
800030ec:	f0 1f 00 3c 	mcall	800031dc <fat_entry_shortname+0x100>
800030f0:	30 08       	mov	r8,0
800030f2:	10 9a       	mov	r10,r8
800030f4:	30 1b       	mov	r11,1
800030f6:	50 0b       	stdsp	sp[0x0],r11

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
800030f8:	30 be       	mov	lr,11
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
800030fa:	10 93       	mov	r3,r8
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
800030fc:	30 85       	mov	r5,8
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
800030fe:	32 04       	mov	r4,32
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
         }
         if ('*' == u8_szname_char)
80003100:	32 a2       	mov	r2,42
   ptr_entry = fat_get_ptr_entry();

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
80003102:	fc 08 18 00 	cp.b	r8,lr
80003106:	c1 90       	breq	80003138 <fat_entry_shortname+0x5c>
      {
         u8_entry_char = 0;   // end of name
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
80003108:	f8 08 07 09 	ld.ub	r9,r12[r8]
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
8000310c:	ea 08 18 00 	cp.b	r8,r5
80003110:	c0 41       	brne	80003118 <fat_entry_shortname+0x3c>
80003112:	40 01       	lddsp	r1,sp[0x0]
80003114:	58 01       	cp.w	r1,0
80003116:	c0 81       	brne	80003126 <fat_entry_shortname+0x4a>
80003118:	e8 09 18 00 	cp.b	r9,r4
8000311c:	c0 f1       	brne	8000313a <fat_entry_shortname+0x5e>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
8000311e:	ea 08 18 00 	cp.b	r8,r5
80003122:	e0 8b 00 0b 	brhi	80003138 <fat_entry_shortname+0x5c>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80003126:	f9 39 00 08 	ld.ub	r9,r12[8]
8000312a:	e8 09 18 00 	cp.b	r9,r4
8000312e:	c0 50       	breq	80003138 <fat_entry_shortname+0x5c>
80003130:	30 78       	mov	r8,7
80003132:	32 e9       	mov	r9,46
80003134:	50 03       	stdsp	sp[0x0],r3
80003136:	c0 28       	rjmp	8000313a <fat_entry_shortname+0x5e>
80003138:	06 99       	mov	r9,r3
               u8_entry_char = 0;                                    // end of name
            }
         }
      }

      if( FS_NAME_GET == b_mode )
8000313a:	58 06       	cp.w	r6,0
8000313c:	c1 80       	breq	8000316c <fat_entry_shortname+0x90>
      {
         if( !g_b_string_length )
8000313e:	4a 9b       	lddpc	r11,800031e0 <fat_entry_shortname+0x104>
80003140:	17 81       	ld.ub	r1,r11[0x0]
80003142:	30 0b       	mov	r11,0
80003144:	f6 01 18 00 	cp.b	r1,r11
80003148:	c2 c1       	brne	800031a0 <fat_entry_shortname+0xc4>
         {
            if(u8_pos_name >= (u8_size_max-1))
8000314a:	40 1b       	lddsp	r11,sp[0x4]
8000314c:	20 1b       	sub	r11,1
8000314e:	16 3a       	cp.w	r10,r11
80003150:	c0 35       	brlt	80003156 <fat_entry_shortname+0x7a>
80003152:	06 99       	mov	r9,r3
80003154:	c0 a8       	rjmp	80003168 <fat_entry_shortname+0x8c>
               u8_entry_char = 0;                                    // buffer full then force end of string

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
80003156:	f2 c1 00 41 	sub	r1,r9,65
8000315a:	31 9b       	mov	r11,25
8000315c:	f6 01 18 00 	cp.b	r1,r11
80003160:	e0 8b 00 04 	brhi	80003168 <fat_entry_shortname+0x8c>
               u8_entry_char += ('a'-'A');                           // display short name in down case
80003164:	2e 09       	sub	r9,-32
80003166:	5c 59       	castu.b	r9

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
80003168:	ae 89       	st.b	r7[0x0],r9
8000316a:	c1 b8       	rjmp	800031a0 <fat_entry_shortname+0xc4>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
8000316c:	0f 8b       	ld.ub	r11,r7[0x0]
         }
         if ('*' == u8_szname_char)
8000316e:	e4 0b 18 00 	cp.b	r11,r2
80003172:	c2 f0       	breq	800031d0 <fat_entry_shortname+0xf4>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
80003174:	58 09       	cp.w	r9,0
80003176:	c0 c1       	brne	8000318e <fat_entry_shortname+0xb2>
80003178:	35 c1       	mov	r1,92
8000317a:	e2 0b 18 00 	cp.b	r11,r1
8000317e:	5f 10       	srne	r0
80003180:	32 f1       	mov	r1,47
80003182:	e2 0b 18 00 	cp.b	r11,r1
80003186:	5f 11       	srne	r1
80003188:	e1 e1 00 01 	and	r1,r0,r1
8000318c:	c0 c0       	breq	800031a4 <fat_entry_shortname+0xc8>
         {
            if((u8_szname_char != u8_entry_char)
8000318e:	f2 0b 18 00 	cp.b	r11,r9
80003192:	c0 70       	breq	800031a0 <fat_entry_shortname+0xc4>
80003194:	f2 c1 ff e0 	sub	r1,r9,-32
80003198:	02 3b       	cp.w	r11,r1
8000319a:	c0 30       	breq	800031a0 <fat_entry_shortname+0xc4>
8000319c:	30 0c       	mov	r12,0
8000319e:	c1 a8       	rjmp	800031d2 <fat_entry_shortname+0xf6>
               return false;  // short name not equal
         }
      }

      // For each characters
      if (0 == u8_entry_char)
800031a0:	58 09       	cp.w	r9,0
800031a2:	c0 b1       	brne	800031b8 <fat_entry_shortname+0xdc>
      {
         if( g_b_string_length )
800031a4:	48 f8       	lddpc	r8,800031e0 <fat_entry_shortname+0x104>
800031a6:	11 89       	ld.ub	r9,r8[0x0]
800031a8:	30 08       	mov	r8,0
800031aa:	f0 09 18 00 	cp.b	r9,r8
800031ae:	c1 10       	breq	800031d0 <fat_entry_shortname+0xf4>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
800031b0:	2f fa       	sub	r10,-1
800031b2:	ae 0a       	st.h	r7[0x0],r10
800031b4:	30 1c       	mov	r12,1
800031b6:	c0 e8       	rjmp	800031d2 <fat_entry_shortname+0xf6>
         }
         return true;   // End of test correct or end of get name
      }
      if( !g_b_string_length )
800031b8:	48 a9       	lddpc	r9,800031e0 <fat_entry_shortname+0x104>
800031ba:	13 8b       	ld.ub	r11,r9[0x0]
800031bc:	30 09       	mov	r9,0
800031be:	f2 0b 18 00 	cp.b	r11,r9
800031c2:	c0 21       	brne	800031c6 <fat_entry_shortname+0xea>
      {
         sz_name += (Is_unicode? 2 : 1 );
800031c4:	2f f7       	sub	r7,-1
      }
      u8_pos_name++;
800031c6:	2f fa       	sub	r10,-1
800031c8:	5c 5a       	castu.b	r10
      u8_pos_entry++;
800031ca:	2f f8       	sub	r8,-1
800031cc:	5c 58       	castu.b	r8
   }
800031ce:	c9 ab       	rjmp	80003102 <fat_entry_shortname+0x26>
800031d0:	30 1c       	mov	r12,1
}
800031d2:	2f ed       	sub	sp,-8
800031d4:	d8 32       	popm	r0-r7,pc
800031d6:	00 00       	add	r0,r0
800031d8:	00 00       	add	r0,r0
800031da:	29 e8       	sub	r8,-98
800031dc:	80 00       	ld.sh	r0,r0[0x0]
800031de:	2f 30       	sub	r0,-13
800031e0:	00 00       	add	r0,r0
800031e2:	29 e9       	sub	r9,-98

800031e4 <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
800031e4:	d4 01       	pushm	lr
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
800031e6:	f0 1f 00 10 	mcall	80003224 <fat_get_entry_info+0x40>

   // Get Attribute
   ptr_entry+= 11;
   fs_g_nav_entry.u8_attr = ptr_entry[0];
800031ea:	49 08       	lddpc	r8,80003228 <fat_get_entry_info+0x44>
800031ec:	f9 39 00 0b 	ld.ub	r9,r12[11]
800031f0:	b0 a9       	st.b	r8[0x2],r9

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
800031f2:	f8 ca ff ec 	sub	r10,r12,-20
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
800031f6:	f0 c9 ff fc 	sub	r9,r8,-4
800031fa:	15 8b       	ld.ub	r11,r10[0x0]
800031fc:	b2 9b       	st.b	r9[0x1],r11
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
800031fe:	15 9a       	ld.ub	r10,r10[0x1]
80003200:	b2 8a       	st.b	r9[0x0],r10
   ptr_entry += (26-20);
80003202:	f8 ca ff e6 	sub	r10,r12,-26
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80003206:	15 8b       	ld.ub	r11,r10[0x0]
80003208:	b2 bb       	st.b	r9[0x3],r11
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000320a:	15 9a       	ld.ub	r10,r10[0x1]
8000320c:	b2 aa       	st.b	r9[0x2],r10

   // Get the size of file
   ptr_entry += (28-26);
8000320e:	2e 4c       	sub	r12,-28
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80003210:	2f 88       	sub	r8,-8
80003212:	19 89       	ld.ub	r9,r12[0x0]
80003214:	b0 b9       	st.b	r8[0x3],r9
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
80003216:	19 99       	ld.ub	r9,r12[0x1]
80003218:	b0 a9       	st.b	r8[0x2],r9
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
8000321a:	19 a9       	ld.ub	r9,r12[0x2]
8000321c:	b0 99       	st.b	r8[0x1],r9
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
8000321e:	19 b9       	ld.ub	r9,r12[0x3]
80003220:	b0 89       	st.b	r8[0x0],r9
}
80003222:	d8 02       	popm	pc
80003224:	80 00       	ld.sh	r0,r0[0x0]
80003226:	2f 30       	sub	r0,-13
80003228:	00 00       	add	r0,r0
8000322a:	27 60       	sub	r0,118

8000322c <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_check( bool b_type )
{
8000322c:	eb cd 40 80 	pushm	r7,lr
80003230:	18 97       	mov	r7,r12
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
80003232:	f0 1f 00 14 	mcall	80003280 <fat_entry_check+0x54>

   u8_first_byte = u8_ptr_entry[0];
80003236:	19 88       	ld.ub	r8,r12[0x0]
   if ( FS_ENTRY_END == u8_first_byte )
80003238:	58 08       	cp.w	r8,0
8000323a:	c0 61       	brne	80003246 <fat_entry_check+0x1a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
8000323c:	30 a9       	mov	r9,10
8000323e:	49 28       	lddpc	r8,80003284 <fat_entry_check+0x58>
80003240:	b0 89       	st.b	r8[0x0],r9
80003242:	30 07       	mov	r7,0
      return false;
80003244:	c1 a8       	rjmp	80003278 <fat_entry_check+0x4c>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
80003246:	30 ba       	mov	r10,11
80003248:	48 f9       	lddpc	r9,80003284 <fat_entry_check+0x58>
8000324a:	b2 8a       	st.b	r9[0x0],r10
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
8000324c:	3e 59       	mov	r9,-27
8000324e:	f2 08 18 00 	cp.b	r8,r9
80003252:	c1 20       	breq	80003276 <fat_entry_check+0x4a>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
80003254:	32 e9       	mov	r9,46
80003256:	f2 08 18 00 	cp.b	r8,r9
8000325a:	c0 e0       	breq	80003276 <fat_entry_check+0x4a>
   if ( ('.'  == u8_first_byte)
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."

   // Check Attribute
   u8_attribut = u8_ptr_entry[11];
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
8000325c:	f9 38 00 0b 	ld.ub	r8,r12[11]
80003260:	10 99       	mov	r9,r8
80003262:	e2 19 00 08 	andl	r9,0x8,COH
80003266:	c0 81       	brne	80003276 <fat_entry_check+0x4a>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
80003268:	e2 18 00 10 	andl	r8,0x10,COH
8000326c:	c0 60       	breq	80003278 <fat_entry_check+0x4c>
   {
      return (FS_DIR == b_type);
8000326e:	ec 17 00 01 	eorl	r7,0x1
80003272:	5c 57       	castu.b	r7
80003274:	c0 28       	rjmp	80003278 <fat_entry_check+0x4c>
80003276:	30 07       	mov	r7,0
   }else{
      return (FS_FILE == b_type);
   }
}
80003278:	0e 9c       	mov	r12,r7
8000327a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000327e:	00 00       	add	r0,r0
80003280:	80 00       	ld.sh	r0,r0[0x0]
80003282:	2f 30       	sub	r0,-13
80003284:	00 00       	add	r0,r0
80003286:	29 e8       	sub	r8,-98

80003288 <fat_cache_reset>:

//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80003288:	48 58       	lddpc	r8,8000329c <fat_cache_reset+0x14>
8000328a:	3f f9       	mov	r9,-1
8000328c:	b0 89       	st.b	r8[0x0],r9
   fs_g_sectorcache.u8_dirty              = false;
8000328e:	30 09       	mov	r9,0
80003290:	f1 69 00 08 	st.b	r8[8],r9
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80003294:	3f f9       	mov	r9,-1
80003296:	91 39       	st.w	r8[0xc],r9
}
80003298:	5e fc       	retal	r12
8000329a:	00 00       	add	r0,r0
8000329c:	00 00       	add	r0,r0
8000329e:	2a 20       	sub	r0,-94

800032a0 <fat_check_nav_access_file>:

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
800032a0:	49 88       	lddpc	r8,80003300 <fat_check_nav_access_file+0x60>
800032a2:	11 89       	ld.ub	r9,r8[0x0]
800032a4:	30 08       	mov	r8,0
800032a6:	f0 09 18 00 	cp.b	r9,r8
800032aa:	c2 a0       	breq	800032fe <fat_check_nav_access_file+0x5e>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
800032ac:	49 68       	lddpc	r8,80003304 <fat_check_nav_access_file+0x64>
800032ae:	11 89       	ld.ub	r9,r8[0x0]
800032b0:	49 68       	lddpc	r8,80003308 <fat_check_nav_access_file+0x68>
800032b2:	11 88       	ld.ub	r8,r8[0x0]
800032b4:	f0 09 18 00 	cp.b	r9,r8
800032b8:	c2 31       	brne	800032fe <fat_check_nav_access_file+0x5e>
#if (FS_MULTI_PARTITION == true)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
800032ba:	49 38       	lddpc	r8,80003304 <fat_check_nav_access_file+0x64>
800032bc:	70 89       	ld.w	r9,r8[0x20]
800032be:	49 38       	lddpc	r8,80003308 <fat_check_nav_access_file+0x68>
800032c0:	70 88       	ld.w	r8,r8[0x20]
800032c2:	10 39       	cp.w	r9,r8
800032c4:	c1 d1       	brne	800032fe <fat_check_nav_access_file+0x5e>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
800032c6:	49 28       	lddpc	r8,8000330c <fat_check_nav_access_file+0x6c>
800032c8:	90 19       	ld.sh	r9,r8[0x2]
800032ca:	48 e8       	lddpc	r8,80003300 <fat_check_nav_access_file+0x60>
800032cc:	90 18       	ld.sh	r8,r8[0x2]
800032ce:	f0 09 19 00 	cp.h	r9,r8
800032d2:	c1 61       	brne	800032fe <fat_check_nav_access_file+0x5e>
      {
         if( mode )
800032d4:	58 0c       	cp.w	r12,0
800032d6:	c0 b0       	breq	800032ec <fat_check_nav_access_file+0x4c>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
800032d8:	48 e8       	lddpc	r8,80003310 <fat_check_nav_access_file+0x70>
800032da:	11 89       	ld.ub	r9,r8[0x0]
800032dc:	30 08       	mov	r8,0
800032de:	f0 09 18 00 	cp.b	r9,r8
800032e2:	c0 e0       	breq	800032fe <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
800032e4:	32 89       	mov	r9,40
800032e6:	48 c8       	lddpc	r8,80003314 <fat_check_nav_access_file+0x74>
800032e8:	b0 89       	st.b	r8[0x0],r9
800032ea:	5e fd       	retal	0
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
800032ec:	48 98       	lddpc	r8,80003310 <fat_check_nav_access_file+0x70>
800032ee:	11 88       	ld.ub	r8,r8[0x0]
800032f0:	e2 18 00 02 	andl	r8,0x2,COH
800032f4:	c0 50       	breq	800032fe <fat_check_nav_access_file+0x5e>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
800032f6:	32 99       	mov	r9,41
800032f8:	48 78       	lddpc	r8,80003314 <fat_check_nav_access_file+0x74>
800032fa:	b0 89       	st.b	r8[0x0],r9
800032fc:	5e fd       	retal	0
               return false;  // File opened in write mode then read access not possible
800032fe:	5e ff       	retal	1
80003300:	00 00       	add	r0,r0
80003302:	29 e0       	sub	r0,-98
80003304:	00 00       	add	r0,r0
80003306:	29 9c       	sub	r12,-103
80003308:	00 00       	add	r0,r0
8000330a:	29 ec       	sub	r12,-98
8000330c:	00 00       	add	r0,r0
8000330e:	29 e4       	sub	r4,-98
80003310:	00 00       	add	r0,r0
80003312:	29 d0       	sub	r0,-99
80003314:	00 00       	add	r0,r0
80003316:	29 e8       	sub	r8,-98

80003318 <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
80003318:	d4 21       	pushm	r4-r7,lr
8000331a:	20 dd       	sub	sp,52
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
8000331c:	58 0c       	cp.w	r12,0
8000331e:	c5 a0       	breq	800033d2 <fat_invert_nav+0xba>
      return;
   u8_idnav--;

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
80003320:	1a 97       	mov	r7,sp
80003322:	4a e8       	lddpc	r8,800033d8 <fat_invert_nav+0xc0>
80003324:	f0 ea 00 00 	ld.d	r10,r8[0]
80003328:	fa eb 00 00 	st.d	sp[0],r10
8000332c:	f0 ea 00 08 	ld.d	r10,r8[8]
80003330:	fa eb 00 08 	st.d	sp[8],r10
80003334:	f0 ea 00 10 	ld.d	r10,r8[16]
80003338:	fa eb 00 10 	st.d	sp[16],r10
8000333c:	f0 ea 00 18 	ld.d	r10,r8[24]
80003340:	fa eb 00 18 	st.d	sp[24],r10
80003344:	f0 ea 00 20 	ld.d	r10,r8[32]
80003348:	fa eb 00 20 	st.d	sp[32],r10
8000334c:	f0 ea 00 28 	ld.d	r10,r8[40]
80003350:	fa eb 00 28 	st.d	sp[40],r10
80003354:	70 c9       	ld.w	r9,r8[0x30]
80003356:	50 c9       	stdsp	sp[0x30],r9
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
80003358:	f8 c6 00 01 	sub	r6,r12,1
8000335c:	5c 56       	castu.b	r6
8000335e:	ec 04 10 34 	mul	r4,r6,52
80003362:	49 f9       	lddpc	r9,800033dc <fat_invert_nav+0xc4>
80003364:	12 04       	add	r4,r9
80003366:	33 45       	mov	r5,52
80003368:	0a 9a       	mov	r10,r5
8000336a:	08 9b       	mov	r11,r4
8000336c:	10 9c       	mov	r12,r8
8000336e:	f0 1f 00 1d 	mcall	800033e0 <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
80003372:	0a 9a       	mov	r10,r5
80003374:	1a 9b       	mov	r11,sp
80003376:	08 9c       	mov	r12,r4
80003378:	f0 1f 00 1a 	mcall	800033e0 <fat_invert_nav+0xc8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
8000337c:	49 ac       	lddpc	r12,800033e4 <fat_invert_nav+0xcc>
8000337e:	f8 e8 00 00 	ld.d	r8,r12[0]
80003382:	fa e9 00 00 	st.d	sp[0],r8
80003386:	f8 e8 00 08 	ld.d	r8,r12[8]
8000338a:	fa e9 00 08 	st.d	sp[8],r8
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
8000338e:	ec 04 15 04 	lsl	r4,r6,0x4
80003392:	49 68       	lddpc	r8,800033e8 <fat_invert_nav+0xd0>
80003394:	10 04       	add	r4,r8
80003396:	31 05       	mov	r5,16
80003398:	0a 9a       	mov	r10,r5
8000339a:	08 9b       	mov	r11,r4
8000339c:	f0 1f 00 11 	mcall	800033e0 <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
800033a0:	0a 9a       	mov	r10,r5
800033a2:	1a 9b       	mov	r11,sp
800033a4:	08 9c       	mov	r12,r4
800033a6:	f0 1f 00 0f 	mcall	800033e0 <fat_invert_nav+0xc8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
800033aa:	49 14       	lddpc	r4,800033ec <fat_invert_nav+0xd4>
800033ac:	30 45       	mov	r5,4
800033ae:	0a 9a       	mov	r10,r5
800033b0:	08 9b       	mov	r11,r4
800033b2:	1a 9c       	mov	r12,sp
800033b4:	f0 1f 00 0b 	mcall	800033e0 <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
800033b8:	48 e8       	lddpc	r8,800033f0 <fat_invert_nav+0xd8>
800033ba:	f0 06 00 26 	add	r6,r8,r6<<0x2
800033be:	0a 9a       	mov	r10,r5
800033c0:	0c 9b       	mov	r11,r6
800033c2:	08 9c       	mov	r12,r4
800033c4:	f0 1f 00 07 	mcall	800033e0 <fat_invert_nav+0xc8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
800033c8:	0a 9a       	mov	r10,r5
800033ca:	1a 9b       	mov	r11,sp
800033cc:	0c 9c       	mov	r12,r6
800033ce:	f0 1f 00 05 	mcall	800033e0 <fat_invert_nav+0xc8>
}
800033d2:	2f 3d       	sub	sp,-52
800033d4:	d8 22       	popm	r4-r7,pc
800033d6:	00 00       	add	r0,r0
800033d8:	00 00       	add	r0,r0
800033da:	29 9c       	sub	r12,-103
800033dc:	00 00       	add	r0,r0
800033de:	29 ec       	sub	r12,-98
800033e0:	80 00       	ld.sh	r0,r0[0x0]
800033e2:	80 c0       	ld.uh	r0,r0[0x8]
800033e4:	00 00       	add	r0,r0
800033e6:	27 60       	sub	r0,118
800033e8:	00 00       	add	r0,r0
800033ea:	29 d0       	sub	r0,-99
800033ec:	00 00       	add	r0,r0
800033ee:	29 e4       	sub	r4,-98
800033f0:	00 00       	add	r0,r0
800033f2:	29 e0       	sub	r0,-98

800033f4 <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
800033f4:	d4 01       	pushm	lr
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
800033f6:	49 08       	lddpc	r8,80003434 <fat_cache_flush+0x40>
800033f8:	f1 39 00 08 	ld.ub	r9,r8[8]
800033fc:	30 18       	mov	r8,1
800033fe:	f0 09 18 00 	cp.b	r9,r8
80003402:	c1 81       	brne	80003432 <fat_cache_flush+0x3e>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
80003404:	48 c8       	lddpc	r8,80003434 <fat_cache_flush+0x40>
80003406:	30 09       	mov	r9,0
80003408:	f1 69 00 08 	st.b	r8[8],r9
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
8000340c:	11 8c       	ld.ub	r12,r8[0x0]
8000340e:	f0 1f 00 0b 	mcall	80003438 <fat_cache_flush+0x44>
80003412:	c0 50       	breq	8000341c <fat_cache_flush+0x28>
      {
         fs_g_status = FS_LUN_WP;
80003414:	31 49       	mov	r9,20
80003416:	48 a8       	lddpc	r8,8000343c <fat_cache_flush+0x48>
80003418:	b0 89       	st.b	r8[0x0],r9
8000341a:	d8 0a       	popm	pc,r12=0
         return false;
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
8000341c:	48 68       	lddpc	r8,80003434 <fat_cache_flush+0x40>
8000341e:	48 9a       	lddpc	r10,80003440 <fat_cache_flush+0x4c>
80003420:	70 1b       	ld.w	r11,r8[0x4]
80003422:	11 8c       	ld.ub	r12,r8[0x0]
80003424:	f0 1f 00 08 	mcall	80003444 <fat_cache_flush+0x50>
80003428:	c0 50       	breq	80003432 <fat_cache_flush+0x3e>
      {
         fs_g_status = FS_ERR_HW;
8000342a:	30 19       	mov	r9,1
8000342c:	48 48       	lddpc	r8,8000343c <fat_cache_flush+0x48>
8000342e:	b0 89       	st.b	r8[0x0],r9
80003430:	d8 0a       	popm	pc,r12=0
         return false;
80003432:	da 0a       	popm	pc,r12=1
80003434:	00 00       	add	r0,r0
80003436:	2a 20       	sub	r0,-94
80003438:	80 00       	ld.sh	r0,r0[0x0]
8000343a:	64 80       	ld.w	r0,r2[0x20]
8000343c:	00 00       	add	r0,r0
8000343e:	29 e8       	sub	r8,-98
80003440:	00 00       	add	r0,r0
80003442:	27 9c       	sub	r12,121
80003444:	80 00       	ld.sh	r0,r0[0x0]
80003446:	64 a4       	ld.w	r4,r2[0x28]

80003448 <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
80003448:	eb cd 40 80 	pushm	r7,lr
8000344c:	18 97       	mov	r7,r12
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
8000344e:	49 78       	lddpc	r8,800034a8 <fat_cache_read_sector+0x60>
80003450:	11 89       	ld.ub	r9,r8[0x0]
80003452:	49 78       	lddpc	r8,800034ac <fat_cache_read_sector+0x64>
80003454:	11 88       	ld.ub	r8,r8[0x0]
80003456:	f0 09 18 00 	cp.b	r9,r8
8000345a:	c0 91       	brne	8000346c <fat_cache_read_sector+0x24>
8000345c:	49 38       	lddpc	r8,800034a8 <fat_cache_read_sector+0x60>
8000345e:	70 19       	ld.w	r9,r8[0x4]
80003460:	49 48       	lddpc	r8,800034b0 <fat_cache_read_sector+0x68>
80003462:	70 08       	ld.w	r8,r8[0x0]
80003464:	10 39       	cp.w	r9,r8
80003466:	c0 31       	brne	8000346c <fat_cache_read_sector+0x24>
80003468:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      return true;
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
8000346c:	f0 1f 00 12 	mcall	800034b4 <fat_cache_read_sector+0x6c>
80003470:	c1 90       	breq	800034a2 <fat_cache_read_sector+0x5a>
      return false;

   // Delete informations about the caches
   fat_cache_reset();
80003472:	f0 1f 00 12 	mcall	800034b8 <fat_cache_read_sector+0x70>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
80003476:	48 f8       	lddpc	r8,800034b0 <fat_cache_read_sector+0x68>
80003478:	70 0b       	ld.w	r11,r8[0x0]
8000347a:	48 c8       	lddpc	r8,800034a8 <fat_cache_read_sector+0x60>
8000347c:	91 1b       	st.w	r8[0x4],r11
   if( b_load )
8000347e:	58 07       	cp.w	r7,0
80003480:	c0 c0       	breq	80003498 <fat_cache_read_sector+0x50>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80003482:	48 fa       	lddpc	r10,800034bc <fat_cache_read_sector+0x74>
80003484:	48 a8       	lddpc	r8,800034ac <fat_cache_read_sector+0x64>
80003486:	11 8c       	ld.ub	r12,r8[0x0]
80003488:	f0 1f 00 0e 	mcall	800034c0 <fat_cache_read_sector+0x78>
8000348c:	c0 60       	breq	80003498 <fat_cache_read_sector+0x50>
      {
         fs_g_status = FS_ERR_HW;
8000348e:	30 19       	mov	r9,1
80003490:	48 d8       	lddpc	r8,800034c4 <fat_cache_read_sector+0x7c>
80003492:	b0 89       	st.b	r8[0x0],r9
80003494:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
         return false;
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80003498:	48 58       	lddpc	r8,800034ac <fat_cache_read_sector+0x64>
8000349a:	11 89       	ld.ub	r9,r8[0x0]
8000349c:	48 38       	lddpc	r8,800034a8 <fat_cache_read_sector+0x60>
8000349e:	b0 89       	st.b	r8[0x0],r9
800034a0:	30 1c       	mov	r12,1
   return true;
}
800034a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800034a6:	00 00       	add	r0,r0
800034a8:	00 00       	add	r0,r0
800034aa:	2a 20       	sub	r0,-94
800034ac:	00 00       	add	r0,r0
800034ae:	29 9c       	sub	r12,-103
800034b0:	00 00       	add	r0,r0
800034b2:	27 5c       	sub	r12,117
800034b4:	80 00       	ld.sh	r0,r0[0x0]
800034b6:	33 f4       	mov	r4,63
800034b8:	80 00       	ld.sh	r0,r0[0x0]
800034ba:	32 88       	mov	r8,40
800034bc:	00 00       	add	r0,r0
800034be:	27 9c       	sub	r12,121
800034c0:	80 00       	ld.sh	r0,r0[0x0]
800034c2:	65 18       	ld.w	r8,r2[0x44]
800034c4:	00 00       	add	r0,r0
800034c6:	29 e8       	sub	r8,-98

800034c8 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        read cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster read
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
800034c8:	d4 01       	pushm	lr
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
800034ca:	49 f8       	lddpc	r8,80003544 <fat_cluster_readnext+0x7c>
800034cc:	11 89       	ld.ub	r9,r8[0x0]
800034ce:	30 38       	mov	r8,3
800034d0:	f0 09 18 00 	cp.b	r9,r8
800034d4:	c0 61       	brne	800034e0 <fat_cluster_readnext+0x18>
   {
      fs_g_u16_pos_fat += 4;
800034d6:	49 d8       	lddpc	r8,80003548 <fat_cluster_readnext+0x80>
800034d8:	90 09       	ld.sh	r9,r8[0x0]
800034da:	2f c9       	sub	r9,-4
800034dc:	b0 09       	st.h	r8[0x0],r9
800034de:	c0 58       	rjmp	800034e8 <fat_cluster_readnext+0x20>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
800034e0:	49 a8       	lddpc	r8,80003548 <fat_cluster_readnext+0x80>
800034e2:	90 09       	ld.sh	r9,r8[0x0]
800034e4:	2f e9       	sub	r9,-2
800034e6:	b0 09       	st.h	r8[0x0],r9
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
800034e8:	49 88       	lddpc	r8,80003548 <fat_cluster_readnext+0x80>
800034ea:	90 09       	ld.sh	r9,r8[0x0]
800034ec:	e0 68 02 00 	mov	r8,512
800034f0:	f0 09 19 00 	cp.h	r9,r8
800034f4:	c0 c1       	brne	8000350c <fat_cluster_readnext+0x44>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
800034f6:	30 09       	mov	r9,0
800034f8:	49 48       	lddpc	r8,80003548 <fat_cluster_readnext+0x80>
800034fa:	b0 09       	st.h	r8[0x0],r9
      fs_gu32_addrsector++;
800034fc:	49 48       	lddpc	r8,8000354c <fat_cluster_readnext+0x84>
800034fe:	70 09       	ld.w	r9,r8[0x0]
80003500:	2f f9       	sub	r9,-1
80003502:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
80003504:	30 1c       	mov	r12,1
80003506:	f0 1f 00 13 	mcall	80003550 <fat_cluster_readnext+0x88>
8000350a:	c1 b0       	breq	80003540 <fat_cluster_readnext+0x78>
         return false;
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
8000350c:	49 28       	lddpc	r8,80003554 <fat_cluster_readnext+0x8c>
8000350e:	2f c8       	sub	r8,-4
80003510:	48 e9       	lddpc	r9,80003548 <fat_cluster_readnext+0x80>
80003512:	92 89       	ld.uh	r9,r9[0x0]
80003514:	49 1a       	lddpc	r10,80003558 <fat_cluster_readnext+0x90>
80003516:	f4 09 07 0b 	ld.ub	r11,r10[r9]
8000351a:	b0 bb       	st.b	r8[0x3],r11
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
8000351c:	12 0a       	add	r10,r9
8000351e:	15 9a       	ld.ub	r10,r10[0x1]
80003520:	b0 aa       	st.b	r8[0x2],r10

   if ( Is_fat32 )
80003522:	48 9a       	lddpc	r10,80003544 <fat_cluster_readnext+0x7c>
80003524:	15 8b       	ld.ub	r11,r10[0x0]
80003526:	30 3a       	mov	r10,3
80003528:	f4 0b 18 00 	cp.b	r11,r10
8000352c:	c0 20       	breq	80003530 <fat_cluster_readnext+0x68>
8000352e:	da 0a       	popm	pc,r12=1
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
80003530:	48 aa       	lddpc	r10,80003558 <fat_cluster_readnext+0x90>
80003532:	f4 09 00 09 	add	r9,r10,r9
80003536:	13 aa       	ld.ub	r10,r9[0x2]
80003538:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
8000353a:	13 b9       	ld.ub	r9,r9[0x3]
8000353c:	b0 89       	st.b	r8[0x0],r9
8000353e:	30 1c       	mov	r12,1
   }
   return true;
}
80003540:	d8 02       	popm	pc
80003542:	00 00       	add	r0,r0
80003544:	00 00       	add	r0,r0
80003546:	29 e4       	sub	r4,-98
80003548:	00 00       	add	r0,r0
8000354a:	27 70       	sub	r0,119
8000354c:	00 00       	add	r0,r0
8000354e:	27 5c       	sub	r12,117
80003550:	80 00       	ld.sh	r0,r0[0x0]
80003552:	34 48       	mov	r8,68
80003554:	00 00       	add	r0,r0
80003556:	2a 38       	sub	r8,-93
80003558:	00 00       	add	r0,r0
8000355a:	27 9c       	sub	r12,121

8000355c <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
bool  fat_cluster_val( bool b_mode )
{
8000355c:	d4 21       	pushm	r4-r7,lr
8000355e:	18 97       	mov	r7,r12
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
80003560:	4c 88       	lddpc	r8,80003680 <fat_cluster_val+0x124>
80003562:	11 88       	ld.ub	r8,r8[0x0]
80003564:	30 39       	mov	r9,3
80003566:	f2 08 18 00 	cp.b	r8,r9
8000356a:	c0 b1       	brne	80003580 <fat_cluster_val+0x24>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
8000356c:	4c 68       	lddpc	r8,80003684 <fat_cluster_val+0x128>
8000356e:	70 09       	ld.w	r9,r8[0x0]
80003570:	a7 99       	lsr	r9,0x7

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
80003572:	11 ba       	ld.ub	r10,r8[0x3]
80003574:	f5 da c0 07 	bfextu	r10,r10,0x0,0x7
80003578:	a3 6a       	lsl	r10,0x2
8000357a:	4c 48       	lddpc	r8,80003688 <fat_cluster_val+0x12c>
8000357c:	b0 0a       	st.h	r8[0x0],r10
8000357e:	c2 08       	rjmp	800035be <fat_cluster_val+0x62>
   }
   else if ( Is_fat16 )
80003580:	30 29       	mov	r9,2
80003582:	f2 08 18 00 	cp.b	r8,r9
80003586:	c0 81       	brne	80003596 <fat_cluster_val+0x3a>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
80003588:	4b f8       	lddpc	r8,80003684 <fat_cluster_val+0x128>
8000358a:	11 a9       	ld.ub	r9,r8[0x2]
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
8000358c:	11 ba       	ld.ub	r10,r8[0x3]
8000358e:	a1 7a       	lsl	r10,0x1
80003590:	4b e8       	lddpc	r8,80003688 <fat_cluster_val+0x12c>
80003592:	b0 0a       	st.h	r8[0x0],r10
80003594:	c1 58       	rjmp	800035be <fat_cluster_val+0x62>
   }
   else if ( Is_fat12 )
80003596:	30 19       	mov	r9,1
80003598:	f2 08 18 00 	cp.b	r8,r9
8000359c:	c0 30       	breq	800035a2 <fat_cluster_val+0x46>
8000359e:	30 09       	mov	r9,0
800035a0:	c0 f8       	rjmp	800035be <fat_cluster_val+0x62>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
800035a2:	4b 98       	lddpc	r8,80003684 <fat_cluster_val+0x128>
800035a4:	70 09       	ld.w	r9,r8[0x0]
800035a6:	4b 98       	lddpc	r8,80003688 <fat_cluster_val+0x12c>
800035a8:	f5 d9 c0 2f 	bfextu	r10,r9,0x1,0xf
800035ac:	12 0a       	add	r10,r9
800035ae:	b0 0a       	st.h	r8[0x0],r10
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
800035b0:	f5 da c1 08 	bfextu	r10,r10,0x8,0x8
800035b4:	f4 09 16 01 	lsr	r9,r10,0x1
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
800035b8:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
800035bc:	b0 8a       	st.b	r8[0x0],r10
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
800035be:	4b 48       	lddpc	r8,8000368c <fat_cluster_val+0x130>
800035c0:	70 48       	ld.w	r8,r8[0x10]
800035c2:	10 09       	add	r9,r8
800035c4:	4b 38       	lddpc	r8,80003690 <fat_cluster_val+0x134>
800035c6:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
800035c8:	30 1c       	mov	r12,1
800035ca:	f0 1f 00 33 	mcall	80003694 <fat_cluster_val+0x138>
800035ce:	c5 70       	breq	8000367c <fat_cluster_val+0x120>
      return false;

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
800035d0:	4a e8       	lddpc	r8,80003688 <fat_cluster_val+0x12c>
800035d2:	90 09       	ld.sh	r9,r8[0x0]
800035d4:	f5 d9 c0 10 	bfextu	r10,r9,0x0,0x10
800035d8:	4b 08       	lddpc	r8,80003698 <fat_cluster_val+0x13c>
800035da:	f4 08 00 08 	add	r8,r10,r8
   u8_data1 = u8_ptr_cluster[0];
800035de:	11 86       	ld.ub	r6,r8[0x0]
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
800035e0:	11 9b       	ld.ub	r11,r8[0x1]
   u8_data3 = u8_ptr_cluster[2];
800035e2:	11 a5       	ld.ub	r5,r8[0x2]
   u8_data4 = u8_ptr_cluster[3];
800035e4:	11 b4       	ld.ub	r4,r8[0x3]

   if ( Is_fat12 )
800035e6:	4a 78       	lddpc	r8,80003680 <fat_cluster_val+0x124>
800035e8:	11 8a       	ld.ub	r10,r8[0x0]
800035ea:	30 18       	mov	r8,1
800035ec:	f0 0a 18 00 	cp.b	r10,r8
800035f0:	c1 01       	brne	80003610 <fat_cluster_val+0xb4>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
800035f2:	e0 68 01 ff 	mov	r8,511
800035f6:	f0 09 19 00 	cp.h	r9,r8
800035fa:	c0 b1       	brne	80003610 <fat_cluster_val+0xb4>
      {  // Go to next sector
         fs_gu32_addrsector++;
800035fc:	4a 58       	lddpc	r8,80003690 <fat_cluster_val+0x134>
800035fe:	70 09       	ld.w	r9,r8[0x0]
80003600:	2f f9       	sub	r9,-1
80003602:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
80003604:	30 1c       	mov	r12,1
80003606:	f0 1f 00 24 	mcall	80003694 <fat_cluster_val+0x138>
8000360a:	c3 90       	breq	8000367c <fat_cluster_val+0x120>
           return false;
         u8_data2 = fs_g_sector[0];
8000360c:	4a 38       	lddpc	r8,80003698 <fat_cluster_val+0x13c>
8000360e:	11 8b       	ld.ub	r11,r8[0x0]
      }
   }

   if (false == b_mode)
80003610:	58 07       	cp.w	r7,0
80003612:	c3 11       	brne	80003674 <fat_cluster_val+0x118>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80003614:	49 c8       	lddpc	r8,80003684 <fat_cluster_val+0x128>
80003616:	f0 c9 ff fc 	sub	r9,r8,-4
8000361a:	f0 cc ff f9 	sub	r12,r8,-7
8000361e:	b8 86       	st.b	r12[0x0],r6
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
80003620:	2f a8       	sub	r8,-6
80003622:	b0 8b       	st.b	r8[0x0],r11

      if ( Is_fat32 )
80003624:	49 7a       	lddpc	r10,80003680 <fat_cluster_val+0x124>
80003626:	15 8a       	ld.ub	r10,r10[0x0]
80003628:	30 3b       	mov	r11,3
8000362a:	f6 0a 18 00 	cp.b	r10,r11
8000362e:	c0 61       	brne	8000363a <fat_cluster_val+0xde>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
80003630:	b2 95       	st.b	r9[0x1],r5
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80003632:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80003636:	b2 84       	st.b	r9[0x0],r4
80003638:	da 2a       	popm	r4-r7,pc,r12=1
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
8000363a:	30 0b       	mov	r11,0
8000363c:	b2 9b       	st.b	r9[0x1],r11
         LSB3( fs_g_cluster.u32_val ) = 0;
8000363e:	b2 8b       	st.b	r9[0x0],r11

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
80003640:	30 19       	mov	r9,1
80003642:	f2 0a 18 00 	cp.b	r10,r9
80003646:	c0 20       	breq	8000364a <fat_cluster_val+0xee>
80003648:	da 2a       	popm	r4-r7,pc,r12=1
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
8000364a:	48 f9       	lddpc	r9,80003684 <fat_cluster_val+0x128>
8000364c:	13 b9       	ld.ub	r9,r9[0x3]
8000364e:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
80003652:	c0 c0       	breq	8000366a <fat_cluster_val+0x10e>
            {  // Read cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
80003654:	19 8b       	ld.ub	r11,r12[0x0]
80003656:	a5 8b       	lsr	r11,0x4
80003658:	11 89       	ld.ub	r9,r8[0x0]
8000365a:	f2 0a 15 04 	lsl	r10,r9,0x4
8000365e:	f6 0a 00 0a 	add	r10,r11,r10
80003662:	b8 8a       	st.b	r12[0x0],r10
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
80003664:	a5 89       	lsr	r9,0x4
80003666:	b0 89       	st.b	r8[0x0],r9
80003668:	da 2a       	popm	r4-r7,pc,r12=1
            }
            else
            {  // Read cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
8000366a:	11 89       	ld.ub	r9,r8[0x0]
8000366c:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80003670:	b0 89       	st.b	r8[0x0],r9
80003672:	da 2a       	popm	r4-r7,pc,r12=1
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
      u8_ptr_cluster[1] = u8_data2;
      fat_cache_mark_sector_as_dirty();
#else
      fs_g_status = FS_ERR_COMMAND;
80003674:	32 29       	mov	r9,34
80003676:	48 a8       	lddpc	r8,8000369c <fat_cluster_val+0x140>
80003678:	b0 89       	st.b	r8[0x0],r9
8000367a:	d8 2a       	popm	r4-r7,pc,r12=0
      return false;
8000367c:	d8 2a       	popm	r4-r7,pc,r12=0
8000367e:	00 00       	add	r0,r0
80003680:	00 00       	add	r0,r0
80003682:	29 e4       	sub	r4,-98
80003684:	00 00       	add	r0,r0
80003686:	2a 38       	sub	r8,-93
80003688:	00 00       	add	r0,r0
8000368a:	27 70       	sub	r0,119
8000368c:	00 00       	add	r0,r0
8000368e:	29 9c       	sub	r12,-103
80003690:	00 00       	add	r0,r0
80003692:	27 5c       	sub	r12,117
80003694:	80 00       	ld.sh	r0,r0[0x0]
80003696:	34 48       	mov	r8,68
80003698:	00 00       	add	r0,r0
8000369a:	27 9c       	sub	r12,121
8000369c:	00 00       	add	r0,r0
8000369e:	29 e8       	sub	r8,-98

800036a0 <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list read or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
800036a0:	d4 31       	pushm	r0-r7,lr
800036a2:	20 1d       	sub	sp,4
800036a4:	18 94       	mov	r4,r12
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
800036a6:	30 89       	mov	r9,8
800036a8:	4f a8       	lddpc	r8,80003890 <fat_cluster_list+0x1f0>
800036aa:	b0 89       	st.b	r8[0x0],r9

   if(  Is_fat32
800036ac:	4f a8       	lddpc	r8,80003894 <fat_cluster_list+0x1f4>
800036ae:	11 89       	ld.ub	r9,r8[0x0]
800036b0:	30 38       	mov	r8,3
800036b2:	f0 09 18 00 	cp.b	r9,r8
800036b6:	5f 0a       	sreq	r10
   &&  (FS_CLUST_ACT_CLR == opt_action) )
800036b8:	f0 0c 18 00 	cp.b	r12,r8
800036bc:	5f 08       	sreq	r8
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error

   if(  Is_fat32
800036be:	f5 e8 00 07 	and	r7,r10,r8
800036c2:	e0 81 00 e4 	brne	8000388a <fat_cluster_list+0x1ea>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
800036c6:	4f 5c       	lddpc	r12,80003898 <fat_cluster_list+0x1f8>
800036c8:	78 07       	ld.w	r7,r12[0x0]
800036ca:	58 07       	cp.w	r7,0
800036cc:	c2 a1       	brne	80003720 <fat_cluster_list+0x80>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
800036ce:	58 08       	cp.w	r8,0
800036d0:	e0 81 00 dd 	brne	8000388a <fat_cluster_list+0x1ea>
         return false;           // Impossible to erase ROOT DIR

      if ( Is_fat12 || Is_fat16 )
800036d4:	20 19       	sub	r9,1
800036d6:	30 18       	mov	r8,1
800036d8:	f0 09 18 00 	cp.b	r9,r8
800036dc:	e0 8b 00 1b 	brhi	80003712 <fat_cluster_list+0x72>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
800036e0:	78 19       	ld.w	r9,r12[0x4]
800036e2:	4e f8       	lddpc	r8,8000389c <fat_cluster_list+0x1fc>
800036e4:	f1 18 00 1a 	ld.uh	r8,r8[26]
800036e8:	10 39       	cp.w	r9,r8
800036ea:	c0 f2       	brcc	80003708 <fat_cluster_list+0x68>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
800036ec:	18 9a       	mov	r10,r12
800036ee:	4e cb       	lddpc	r11,8000389c <fat_cluster_list+0x1fc>
800036f0:	76 4c       	ld.w	r12,r11[0x10]
800036f2:	18 09       	add	r9,r12
800036f4:	f7 1b 00 18 	ld.uh	r11,r11[24]
800036f8:	16 09       	add	r9,r11
800036fa:	95 09       	st.w	r10[0x0],r9
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
800036fc:	74 19       	ld.w	r9,r10[0x4]
800036fe:	f0 09 01 09 	sub	r9,r8,r9
80003702:	95 19       	st.w	r10[0x4],r9
80003704:	30 1c       	mov	r12,1
            return true;
80003706:	cc 38       	rjmp	8000388c <fat_cluster_list+0x1ec>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
80003708:	31 a9       	mov	r9,26
8000370a:	4e 28       	lddpc	r8,80003890 <fat_cluster_list+0x1f0>
8000370c:	b0 89       	st.b	r8[0x0],r9
8000370e:	30 0c       	mov	r12,0
            return false;        // Position outside the root area
80003710:	cb e8       	rjmp	8000388c <fat_cluster_list+0x1ec>
         }
      }
      if ( Is_fat32 )
80003712:	58 0a       	cp.w	r10,0
80003714:	c0 80       	breq	80003724 <fat_cluster_list+0x84>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80003716:	4e 28       	lddpc	r8,8000389c <fat_cluster_list+0x1fc>
80003718:	70 69       	ld.w	r9,r8[0x18]
8000371a:	4e 28       	lddpc	r8,800038a0 <fat_cluster_list+0x200>
8000371c:	91 09       	st.w	r8[0x0],r9
8000371e:	c0 38       	rjmp	80003724 <fat_cluster_list+0x84>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80003720:	4e 08       	lddpc	r8,800038a0 <fat_cluster_list+0x200>
80003722:	91 07       	st.w	r8[0x0],r7
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80003724:	30 38       	mov	r8,3
80003726:	f0 04 18 00 	cp.b	r4,r8
8000372a:	c0 70       	breq	80003738 <fat_cluster_list+0x98>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
8000372c:	16 9c       	mov	r12,r11
8000372e:	f0 1f 00 5e 	mcall	800038a4 <fat_cluster_list+0x204>
80003732:	c0 50       	breq	8000373c <fat_cluster_list+0x9c>
80003734:	30 1c       	mov	r12,1
80003736:	ca b8       	rjmp	8000388c <fat_cluster_list+0x1ec>
         return true;            // Segment found in cache
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
80003738:	f0 1f 00 5c 	mcall	800038a8 <fat_cluster_list+0x208>
      fat_clear_info_fat_mod();        // Init cache on fat modification range
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
8000373c:	4d 71       	lddpc	r1,80003898 <fat_cluster_list+0x1f8>
8000373e:	3f f8       	mov	r8,-1
80003740:	a2 88       	st.b	r1[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80003742:	02 96       	mov	r6,r1
80003744:	4d 65       	lddpc	r5,8000389c <fat_cluster_list+0x1fc>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80003746:	4d 77       	lddpc	r7,800038a0 <fat_cluster_list+0x200>
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80003748:	30 22       	mov	r2,2
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
            return true;
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
8000374a:	e2 c9 ff f9 	sub	r9,r1,-7
8000374e:	50 09       	stdsp	sp[0x0],r9

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80003750:	30 13       	mov	r3,1
   MSB0( fs_g_seg.u32_addr ) = 0xFF;

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80003752:	6c 19       	ld.w	r9,r6[0x4]
80003754:	0b 98       	ld.ub	r8,r5[0x1]
80003756:	10 9a       	mov	r10,r8
80003758:	10 39       	cp.w	r9,r8
8000375a:	c3 d2       	brcc	800037d4 <fat_cluster_list+0x134>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
8000375c:	6e 00       	ld.w	r0,r7[0x0]
8000375e:	6a 4b       	ld.w	r11,r5[0x10]
80003760:	16 09       	add	r9,r11
80003762:	6a 5b       	ld.w	r11,r5[0x14]
80003764:	16 09       	add	r9,r11
80003766:	e0 cb 00 02 	sub	r11,r0,2
8000376a:	b1 3b       	mul	r11,r8
8000376c:	16 09       	add	r9,r11
8000376e:	8d 09       	st.w	r6[0x0],r9
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80003770:	e4 04 18 00 	cp.b	r4,r2
80003774:	c0 b1       	brne	8000378a <fat_cluster_list+0xea>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
80003776:	4c 97       	lddpc	r7,80003898 <fat_cluster_list+0x1f8>
80003778:	6e 18       	ld.w	r8,r7[0x4]
8000377a:	f4 08 01 08 	sub	r8,r10,r8
8000377e:	8f 18       	st.w	r7[0x4],r8
            fat_cache_clusterlist_update_finish();
80003780:	f0 1f 00 4b 	mcall	800038ac <fat_cluster_list+0x20c>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80003784:	30 1c       	mov	r12,1
80003786:	8f 1c       	st.w	r7[0x4],r12
            return true;
80003788:	c8 28       	rjmp	8000388c <fat_cluster_list+0x1ec>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
8000378a:	40 0a       	lddsp	r10,sp[0x0]
8000378c:	15 89       	ld.ub	r9,r10[0x0]
8000378e:	f0 09 01 09 	sub	r9,r8,r9
80003792:	8d 19       	st.w	r6[0x4],r9

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80003794:	e6 04 18 00 	cp.b	r4,r3
80003798:	c1 e1       	brne	800037d4 <fat_cluster_list+0x134>
8000379a:	4b fc       	lddpc	r12,80003894 <fat_cluster_list+0x1f4>
8000379c:	19 88       	ld.ub	r8,r12[0x0]
8000379e:	e6 08 18 00 	cp.b	r8,r3
800037a2:	c1 90       	breq	800037d4 <fat_cluster_list+0x134>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
800037a4:	30 0c       	mov	r12,0
800037a6:	f0 1f 00 43 	mcall	800038b0 <fat_cluster_list+0x210>
800037aa:	c7 00       	breq	8000388a <fat_cluster_list+0x1ea>
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
800037ac:	6e 09       	ld.w	r9,r7[0x0]
800037ae:	f2 c8 ff ff 	sub	r8,r9,-1
800037b2:	8f 08       	st.w	r7[0x0],r8
800037b4:	6e 1a       	ld.w	r10,r7[0x4]
800037b6:	14 38       	cp.w	r8,r10
800037b8:	c0 a0       	breq	800037cc <fat_cluster_list+0x12c>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
800037ba:	8f 09       	st.w	r7[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
800037bc:	00 19       	sub	r9,r0
800037be:	0b 98       	ld.ub	r8,r5[0x1]
800037c0:	b1 39       	mul	r9,r8
800037c2:	6c 18       	ld.w	r8,r6[0x4]
800037c4:	f2 08 00 08 	add	r8,r9,r8
800037c8:	8d 18       	st.w	r6[0x4],r8
                  break;
800037ca:	c0 58       	rjmp	800037d4 <fat_cluster_list+0x134>
               }
               if( !fat_cluster_readnext() )
800037cc:	f0 1f 00 3a 	mcall	800038b4 <fat_cluster_list+0x214>
800037d0:	ce e1       	brne	800037ac <fat_cluster_list+0x10c>
800037d2:	c5 c8       	rjmp	8000388a <fat_cluster_list+0x1ea>
                  return false;
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
800037d4:	30 0c       	mov	r12,0
800037d6:	f0 1f 00 37 	mcall	800038b0 <fat_cluster_list+0x210>
800037da:	c5 80       	breq	8000388a <fat_cluster_list+0x1ea>
         return false;

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
800037dc:	f0 1f 00 37 	mcall	800038b8 <fat_cluster_list+0x218>
      if (FS_CLUS_BAD == u8_cluster_status)
800037e0:	e6 0c 18 00 	cp.b	r12,r3
800037e4:	c5 30       	breq	8000388a <fat_cluster_list+0x1ea>
         return false; // error, end of cluster list

      if (0xFF == MSB0(fs_g_seg.u32_addr))
800037e6:	03 89       	ld.ub	r9,r1[0x0]
800037e8:	3f f8       	mov	r8,-1
800037ea:	f0 09 18 00 	cp.b	r9,r8
800037ee:	c3 31       	brne	80003854 <fat_cluster_list+0x1b4>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
800037f0:	e4 0c 18 00 	cp.b	r12,r2
800037f4:	c2 b1       	brne	8000384a <fat_cluster_list+0x1aa>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
800037f6:	4a 98       	lddpc	r8,80003898 <fat_cluster_list+0x1f8>
800037f8:	70 17       	ld.w	r7,r8[0x4]

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
800037fa:	4b 19       	lddpc	r9,800038bc <fat_cluster_list+0x21c>
800037fc:	13 89       	ld.ub	r9,r9[0x0]
800037fe:	f2 09 00 29 	add	r9,r9,r9<<0x2
80003802:	4b 0a       	lddpc	r10,800038c0 <fat_cluster_list+0x220>
80003804:	f4 09 00 29 	add	r9,r10,r9<<0x2
80003808:	72 2a       	ld.w	r10,r9[0x8]
8000380a:	0e 1a       	sub	r10,r7
8000380c:	93 2a       	st.w	r9[0x8],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
8000380e:	4a 49       	lddpc	r9,8000389c <fat_cluster_list+0x1fc>
80003810:	13 9a       	ld.ub	r10,r9[0x1]
80003812:	72 5b       	ld.w	r11,r9[0x14]
80003814:	72 49       	ld.w	r9,r9[0x10]
80003816:	12 0b       	add	r11,r9
80003818:	4a 29       	lddpc	r9,800038a0 <fat_cluster_list+0x200>
8000381a:	72 09       	ld.w	r9,r9[0x0]
8000381c:	20 29       	sub	r9,2
8000381e:	f4 09 02 49 	mul	r9,r10,r9
80003822:	f6 09 00 09 	add	r9,r11,r9
80003826:	91 09       	st.w	r8[0x0],r9
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
80003828:	91 1a       	st.w	r8[0x4],r10
            if (FS_CLUST_ACT_CLR != opt_action)
8000382a:	30 38       	mov	r8,3
8000382c:	f0 04 18 00 	cp.b	r4,r8
80003830:	c0 30       	breq	80003836 <fat_cluster_list+0x196>
               fat_cache_clusterlist_update_finish();
80003832:	f0 1f 00 1f 	mcall	800038ac <fat_cluster_list+0x20c>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
80003836:	49 98       	lddpc	r8,80003898 <fat_cluster_list+0x1f8>
80003838:	49 a9       	lddpc	r9,800038a0 <fat_cluster_list+0x200>
8000383a:	72 09       	ld.w	r9,r9[0x0]
8000383c:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
8000383e:	91 17       	st.w	r8[0x4],r7
            fs_g_status = FS_ERR_OUT_LIST;
80003840:	31 a9       	mov	r9,26
80003842:	49 48       	lddpc	r8,80003890 <fat_cluster_list+0x1f0>
80003844:	b0 89       	st.b	r8[0x0],r9
80003846:	30 0c       	mov	r12,0
            return false;
80003848:	c2 28       	rjmp	8000388c <fat_cluster_list+0x1ec>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
8000384a:	0b 98       	ld.ub	r8,r5[0x1]
8000384c:	6c 19       	ld.w	r9,r6[0x4]
8000384e:	10 19       	sub	r9,r8
80003850:	8d 19       	st.w	r6[0x4],r9
80003852:	c1 98       	rjmp	80003884 <fat_cluster_list+0x1e4>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
80003854:	e6 04 18 00 	cp.b	r4,r3
80003858:	c0 a1       	brne	8000386c <fat_cluster_list+0x1cc>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
8000385a:	6e 09       	ld.w	r9,r7[0x0]
8000385c:	2f f9       	sub	r9,-1
8000385e:	6e 18       	ld.w	r8,r7[0x4]
80003860:	10 39       	cp.w	r9,r8
80003862:	c0 50       	breq	8000386c <fat_cluster_list+0x1cc>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
80003864:	f0 1f 00 12 	mcall	800038ac <fat_cluster_list+0x20c>
80003868:	30 1c       	mov	r12,1
               return true;                              // End of segment
8000386a:	c1 18       	rjmp	8000388c <fat_cluster_list+0x1ec>
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
8000386c:	e4 0c 18 00 	cp.b	r12,r2
80003870:	c0 51       	brne	8000387a <fat_cluster_list+0x1da>
            if (FS_CLUST_ACT_CLR == opt_action)
            {
               return fat_update_fat2();
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
80003872:	f0 1f 00 0f 	mcall	800038ac <fat_cluster_list+0x20c>
80003876:	30 1c       	mov	r12,1
            return true; // End of segment
80003878:	c0 a8       	rjmp	8000388c <fat_cluster_list+0x1ec>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
8000387a:	0b 99       	ld.ub	r9,r5[0x1]
8000387c:	6c 18       	ld.w	r8,r6[0x4]
8000387e:	f2 08 00 08 	add	r8,r9,r8
80003882:	8d 18       	st.w	r6[0x4],r8
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
80003884:	6e 18       	ld.w	r8,r7[0x4]
80003886:	8f 08       	st.w	r7[0x0],r8
   }  // End of main loop
80003888:	c6 5b       	rjmp	80003752 <fat_cluster_list+0xb2>
8000388a:	30 0c       	mov	r12,0
}
8000388c:	2f fd       	sub	sp,-4
8000388e:	d8 32       	popm	r0-r7,pc
80003890:	00 00       	add	r0,r0
80003892:	29 e8       	sub	r8,-98
80003894:	00 00       	add	r0,r0
80003896:	29 e4       	sub	r4,-98
80003898:	00 00       	add	r0,r0
8000389a:	2a 40       	sub	r0,-92
8000389c:	00 00       	add	r0,r0
8000389e:	29 9c       	sub	r12,-103
800038a0:	00 00       	add	r0,r0
800038a2:	2a 38       	sub	r8,-93
800038a4:	80 00       	ld.sh	r0,r0[0x0]
800038a6:	2d 90       	sub	r0,-39
800038a8:	80 00       	ld.sh	r0,r0[0x0]
800038aa:	2c 68       	sub	r8,-58
800038ac:	80 00       	ld.sh	r0,r0[0x0]
800038ae:	2d 38       	sub	r8,-45
800038b0:	80 00       	ld.sh	r0,r0[0x0]
800038b2:	35 5c       	mov	r12,85
800038b4:	80 00       	ld.sh	r0,r0[0x0]
800038b6:	34 c8       	mov	r8,76
800038b8:	80 00       	ld.sh	r0,r0[0x0]
800038ba:	2c 08       	sub	r8,-64
800038bc:	00 00       	add	r0,r0
800038be:	29 ea       	sub	r10,-98
800038c0:	00 00       	add	r0,r0
800038c2:	27 74       	sub	r4,119

800038c4 <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
bool  fat_read_dir( void )
{
800038c4:	eb cd 40 80 	pushm	r7,lr
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
800038c8:	49 98       	lddpc	r8,8000392c <fat_read_dir+0x68>
800038ca:	90 97       	ld.uh	r7,r8[0x2]
800038cc:	a5 87       	lsr	r7,0x4

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
800038ce:	49 98       	lddpc	r8,80003930 <fat_read_dir+0x6c>
800038d0:	11 89       	ld.ub	r9,r8[0x0]
800038d2:	49 98       	lddpc	r8,80003934 <fat_read_dir+0x70>
800038d4:	11 88       	ld.ub	r8,r8[0x0]
800038d6:	f0 09 18 00 	cp.b	r9,r8
800038da:	c0 d1       	brne	800038f4 <fat_read_dir+0x30>
800038dc:	49 58       	lddpc	r8,80003930 <fat_read_dir+0x6c>
800038de:	70 39       	ld.w	r9,r8[0xc]
800038e0:	49 58       	lddpc	r8,80003934 <fat_read_dir+0x70>
800038e2:	70 88       	ld.w	r8,r8[0x20]
800038e4:	10 39       	cp.w	r9,r8
800038e6:	c0 71       	brne	800038f4 <fat_read_dir+0x30>
800038e8:	49 28       	lddpc	r8,80003930 <fat_read_dir+0x6c>
800038ea:	70 48       	ld.w	r8,r8[0x10]
800038ec:	0e 38       	cp.w	r8,r7
800038ee:	c0 31       	brne	800038f4 <fat_read_dir+0x30>
800038f0:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
         return true;      // The internal cache contains the sector asked
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
800038f4:	49 18       	lddpc	r8,80003938 <fat_read_dir+0x74>
800038f6:	49 09       	lddpc	r9,80003934 <fat_read_dir+0x70>
800038f8:	72 89       	ld.w	r9,r9[0x20]
800038fa:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
800038fc:	91 17       	st.w	r8[0x4],r7
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
800038fe:	30 0b       	mov	r11,0
80003900:	30 2c       	mov	r12,2
80003902:	f0 1f 00 0f 	mcall	8000393c <fat_read_dir+0x78>
80003906:	c1 00       	breq	80003926 <fat_read_dir+0x62>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
80003908:	48 c8       	lddpc	r8,80003938 <fat_read_dir+0x74>
8000390a:	70 09       	ld.w	r9,r8[0x0]
8000390c:	48 d8       	lddpc	r8,80003940 <fat_read_dir+0x7c>
8000390e:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
80003910:	30 1c       	mov	r12,1
80003912:	f0 1f 00 0d 	mcall	80003944 <fat_read_dir+0x80>
80003916:	c0 80       	breq	80003926 <fat_read_dir+0x62>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
80003918:	48 68       	lddpc	r8,80003930 <fat_read_dir+0x6c>
8000391a:	48 79       	lddpc	r9,80003934 <fat_read_dir+0x70>
8000391c:	72 89       	ld.w	r9,r9[0x20]
8000391e:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
80003920:	91 47       	st.w	r8[0x10],r7
80003922:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
         return true;
80003926:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
8000392a:	00 00       	add	r0,r0
8000392c:	00 00       	add	r0,r0
8000392e:	29 e4       	sub	r4,-98
80003930:	00 00       	add	r0,r0
80003932:	2a 20       	sub	r0,-94
80003934:	00 00       	add	r0,r0
80003936:	29 9c       	sub	r12,-103
80003938:	00 00       	add	r0,r0
8000393a:	2a 40       	sub	r0,-92
8000393c:	80 00       	ld.sh	r0,r0[0x0]
8000393e:	36 a0       	mov	r0,106
80003940:	00 00       	add	r0,r0
80003942:	27 5c       	sub	r12,117
80003944:	80 00       	ld.sh	r0,r0[0x0]
80003946:	34 48       	mov	r8,68

80003948 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
{
80003948:	eb cd 40 c0 	pushm	r6-r7,lr
8000394c:	18 97       	mov	r7,r12
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
8000394e:	4a e8       	lddpc	r8,80003a04 <fat_read_file+0xbc>
80003950:	70 38       	ld.w	r8,r8[0xc]
80003952:	f0 06 16 09 	lsr	r6,r8,0x9

   if(FS_CLUST_ACT_ONE  == mode)
80003956:	30 29       	mov	r9,2
80003958:	f2 0c 18 00 	cp.b	r12,r9
8000395c:	c1 31       	brne	80003982 <fat_read_file+0x3a>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
8000395e:	4a b8       	lddpc	r8,80003a08 <fat_read_file+0xc0>
80003960:	11 89       	ld.ub	r9,r8[0x0]
80003962:	4a b8       	lddpc	r8,80003a0c <fat_read_file+0xc4>
80003964:	11 88       	ld.ub	r8,r8[0x0]
80003966:	f0 09 18 00 	cp.b	r9,r8
8000396a:	c1 91       	brne	8000399c <fat_read_file+0x54>
8000396c:	4a 78       	lddpc	r8,80003a08 <fat_read_file+0xc0>
8000396e:	70 39       	ld.w	r9,r8[0xc]
80003970:	4a 58       	lddpc	r8,80003a04 <fat_read_file+0xbc>
80003972:	70 18       	ld.w	r8,r8[0x4]
80003974:	10 39       	cp.w	r9,r8
80003976:	c1 31       	brne	8000399c <fat_read_file+0x54>
80003978:	4a 48       	lddpc	r8,80003a08 <fat_read_file+0xc0>
8000397a:	70 48       	ld.w	r8,r8[0x10]
8000397c:	0c 38       	cp.w	r8,r6
8000397e:	c0 f1       	brne	8000399c <fat_read_file+0x54>
80003980:	c3 38       	rjmp	800039e6 <fat_read_file+0x9e>
         return true;      // The internal cache contains the sector requested
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
80003982:	30 39       	mov	r9,3
80003984:	f2 0c 18 00 	cp.b	r12,r9
80003988:	c3 31       	brne	800039ee <fat_read_file+0xa6>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
8000398a:	49 f9       	lddpc	r9,80003a04 <fat_read_file+0xbc>
8000398c:	72 19       	ld.w	r9,r9[0x4]
8000398e:	58 09       	cp.w	r9,0
80003990:	c2 b0       	breq	800039e6 <fat_read_file+0x9e>
            return true;   // No cluster list is linked with the file, then no clear is necessary

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
80003992:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80003996:	c2 c0       	breq	800039ee <fat_read_file+0xa6>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80003998:	2f f6       	sub	r6,-1
8000399a:	c2 a8       	rjmp	800039ee <fat_read_file+0xa6>
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
8000399c:	49 d8       	lddpc	r8,80003a10 <fat_read_file+0xc8>
8000399e:	49 a9       	lddpc	r9,80003a04 <fat_read_file+0xbc>
800039a0:	72 19       	ld.w	r9,r9[0x4]
800039a2:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
800039a4:	91 16       	st.w	r8[0x4],r6
      if( fat_cluster_list( mode, true ) )
         return true;      // Get or clear segment OK
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
800039a6:	30 1b       	mov	r11,1
800039a8:	16 9c       	mov	r12,r11
800039aa:	f0 1f 00 1b 	mcall	80003a14 <fat_read_file+0xcc>
800039ae:	c1 e0       	breq	800039ea <fat_read_file+0xa2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
800039b0:	49 88       	lddpc	r8,80003a10 <fat_read_file+0xc8>
800039b2:	70 09       	ld.w	r9,r8[0x0]
800039b4:	49 98       	lddpc	r8,80003a18 <fat_read_file+0xd0>
800039b6:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( true ) )
800039b8:	30 1c       	mov	r12,1
800039ba:	f0 1f 00 19 	mcall	80003a1c <fat_read_file+0xd4>
800039be:	c1 60       	breq	800039ea <fat_read_file+0xa2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
800039c0:	49 28       	lddpc	r8,80003a08 <fat_read_file+0xc0>
800039c2:	49 19       	lddpc	r9,80003a04 <fat_read_file+0xbc>
800039c4:	72 19       	ld.w	r9,r9[0x4]
800039c6:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
800039c8:	91 46       	st.w	r8[0x10],r6
800039ca:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
800039ce:	30 38       	mov	r8,3
800039d0:	f0 07 18 00 	cp.b	r7,r8
800039d4:	c0 b1       	brne	800039ea <fat_read_file+0xa2>
//! IN :
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
800039d6:	49 38       	lddpc	r8,80003a20 <fat_read_file+0xd8>
800039d8:	11 89       	ld.ub	r9,r8[0x0]
800039da:	31 a8       	mov	r8,26
800039dc:	f0 09 18 00 	cp.b	r9,r8
800039e0:	5f 0c       	sreq	r12
800039e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800039e6:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
800039ea:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
800039ee:	48 98       	lddpc	r8,80003a10 <fat_read_file+0xc8>
800039f0:	48 59       	lddpc	r9,80003a04 <fat_read_file+0xbc>
800039f2:	72 19       	ld.w	r9,r9[0x4]
800039f4:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
800039f6:	91 16       	st.w	r8[0x4],r6
   if( FS_CLUST_ACT_ONE != mode )
   {
      if( fat_cluster_list( mode, true ) )
800039f8:	30 1b       	mov	r11,1
800039fa:	0e 9c       	mov	r12,r7
800039fc:	f0 1f 00 06 	mcall	80003a14 <fat_read_file+0xcc>
80003a00:	ce 70       	breq	800039ce <fat_read_file+0x86>
80003a02:	cf 2b       	rjmp	800039e6 <fat_read_file+0x9e>
80003a04:	00 00       	add	r0,r0
80003a06:	27 60       	sub	r0,118
80003a08:	00 00       	add	r0,r0
80003a0a:	2a 20       	sub	r0,-94
80003a0c:	00 00       	add	r0,r0
80003a0e:	29 9c       	sub	r12,-103
80003a10:	00 00       	add	r0,r0
80003a12:	2a 40       	sub	r0,-92
80003a14:	80 00       	ld.sh	r0,r0[0x0]
80003a16:	36 a0       	mov	r0,106
80003a18:	00 00       	add	r0,r0
80003a1a:	27 5c       	sub	r12,117
80003a1c:	80 00       	ld.sh	r0,r0[0x0]
80003a1e:	34 48       	mov	r8,68
80003a20:	00 00       	add	r0,r0
80003a22:	29 e8       	sub	r8,-98

80003a24 <fat_check_device>:
//! @verbatim
//! This function updates all navigator data when the device state change.
//! @endverbatim
//!
bool  fat_check_device( void )
{
80003a24:	d4 31       	pushm	r0-r7,lr
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
80003a26:	4a 28       	lddpc	r8,80003aac <fat_check_device+0x88>
80003a28:	11 89       	ld.ub	r9,r8[0x0]
80003a2a:	30 08       	mov	r8,0
80003a2c:	f0 09 18 00 	cp.b	r9,r8
80003a30:	c3 c1       	brne	80003aa8 <fat_check_device+0x84>
      return true;

   if( 0xFF == fs_g_nav.u8_lun )
80003a32:	4a 08       	lddpc	r8,80003ab0 <fat_check_device+0x8c>
80003a34:	11 89       	ld.ub	r9,r8[0x0]
80003a36:	3f f8       	mov	r8,-1
80003a38:	f0 09 18 00 	cp.b	r9,r8
80003a3c:	c0 51       	brne	80003a46 <fat_check_device+0x22>
   {
      fs_g_status = FS_ERR_HW;
80003a3e:	30 19       	mov	r9,1
80003a40:	49 d8       	lddpc	r8,80003ab4 <fat_check_device+0x90>
80003a42:	b0 89       	st.b	r8[0x0],r9
80003a44:	d8 3a       	popm	r0-r7,pc,r12=0
      return false;                                // No device selected
80003a46:	30 02       	mov	r2,0
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80003a48:	49 a5       	lddpc	r5,80003ab0 <fat_check_device+0x8c>
      if( CTRL_GOOD       == status )
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80003a4a:	49 c1       	lddpc	r1,80003ab8 <fat_check_device+0x94>
80003a4c:	30 06       	mov	r6,0
      Fat_file_close();                            // By default the file is not open
80003a4e:	49 c0       	lddpc	r0,80003abc <fat_check_device+0x98>
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003a50:	49 c4       	lddpc	r4,80003ac0 <fat_check_device+0x9c>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003a52:	49 d3       	lddpc	r3,80003ac4 <fat_check_device+0xa0>
   }

   for( retry=0 ; retry<100 ; retry++ )
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80003a54:	0b 8c       	ld.ub	r12,r5[0x0]
80003a56:	f0 1f 00 1d 	mcall	80003ac8 <fat_check_device+0xa4>
80003a5a:	18 97       	mov	r7,r12
      if( CTRL_GOOD       == status )
80003a5c:	c2 60       	breq	80003aa8 <fat_check_device+0x84>
         return true;                              // drive ready

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80003a5e:	a2 86       	st.b	r1[0x0],r6
      Fat_file_close();                            // By default the file is not open
80003a60:	a0 86       	st.b	r0[0x0],r6
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80003a62:	0b 88       	ld.ub	r8,r5[0x0]
80003a64:	09 89       	ld.ub	r9,r4[0x0]
80003a66:	f0 09 18 00 	cp.b	r9,r8
80003a6a:	c0 51       	brne	80003a74 <fat_check_device+0x50>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
80003a6c:	49 89       	lddpc	r9,80003acc <fat_check_device+0xa8>
80003a6e:	b2 86       	st.b	r9[0x0],r6
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
80003a70:	49 89       	lddpc	r9,80003ad0 <fat_check_device+0xac>
80003a72:	b2 86       	st.b	r9[0x0],r6
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
80003a74:	07 89       	ld.ub	r9,r3[0x0]
80003a76:	f0 09 18 00 	cp.b	r9,r8
80003a7a:	c0 31       	brne	80003a80 <fat_check_device+0x5c>
      {
         fat_cache_reset();
80003a7c:	f0 1f 00 16 	mcall	80003ad4 <fat_check_device+0xb0>
      }
      fat_cache_clusterlist_reset();
80003a80:	f0 1f 00 16 	mcall	80003ad8 <fat_check_device+0xb4>

      fs_g_status = FS_ERR_HW;                     // By default HW error
80003a84:	30 18       	mov	r8,1
80003a86:	48 c9       	lddpc	r9,80003ab4 <fat_check_device+0x90>
80003a88:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
80003a8a:	58 37       	cp.w	r7,3
80003a8c:	c0 81       	brne	80003a9c <fat_check_device+0x78>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80003a8e:	10 02       	add	r2,r8
80003a90:	5c 52       	castu.b	r2
80003a92:	36 48       	mov	r8,100
80003a94:	f0 02 18 00 	cp.b	r2,r8
80003a98:	cd e1       	brne	80003a54 <fat_check_device+0x30>
80003a9a:	c0 88       	rjmp	80003aaa <fat_check_device+0x86>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80003a9c:	58 27       	cp.w	r7,2
80003a9e:	c0 61       	brne	80003aaa <fat_check_device+0x86>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80003aa0:	31 89       	mov	r9,24
80003aa2:	48 58       	lddpc	r8,80003ab4 <fat_check_device+0x90>
80003aa4:	b0 89       	st.b	r8[0x0],r9
80003aa6:	d8 3a       	popm	r0-r7,pc,r12=0
80003aa8:	da 3a       	popm	r0-r7,pc,r12=1
80003aaa:	d8 3a       	popm	r0-r7,pc,r12=0
80003aac:	00 00       	add	r0,r0
80003aae:	27 72       	sub	r2,119
80003ab0:	00 00       	add	r0,r0
80003ab2:	29 9c       	sub	r12,-103
80003ab4:	00 00       	add	r0,r0
80003ab6:	29 e8       	sub	r8,-98
80003ab8:	00 00       	add	r0,r0
80003aba:	29 e4       	sub	r4,-98
80003abc:	00 00       	add	r0,r0
80003abe:	27 60       	sub	r0,118
80003ac0:	00 00       	add	r0,r0
80003ac2:	29 ec       	sub	r12,-98
80003ac4:	00 00       	add	r0,r0
80003ac6:	2a 20       	sub	r0,-94
80003ac8:	80 00       	ld.sh	r0,r0[0x0]
80003aca:	64 4c       	ld.w	r12,r2[0x10]
80003acc:	00 00       	add	r0,r0
80003ace:	29 e0       	sub	r0,-98
80003ad0:	00 00       	add	r0,r0
80003ad2:	29 d0       	sub	r0,-99
80003ad4:	80 00       	ld.sh	r0,r0[0x0]
80003ad6:	32 88       	mov	r8,40
80003ad8:	80 00       	ld.sh	r0,r0[0x0]
80003ada:	2c 68       	sub	r8,-58

80003adc <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
bool  fat_check_noopen( void )
{
80003adc:	d4 01       	pushm	lr
   if( !fat_check_device() )
80003ade:	f0 1f 00 0b 	mcall	80003b08 <fat_check_noopen+0x2c>
80003ae2:	c1 10       	breq	80003b04 <fat_check_noopen+0x28>
      return true;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80003ae4:	48 a8       	lddpc	r8,80003b0c <fat_check_noopen+0x30>
80003ae6:	11 89       	ld.ub	r9,r8[0x0]
80003ae8:	30 08       	mov	r8,0
80003aea:	f0 09 18 00 	cp.b	r9,r8
80003aee:	c0 b0       	breq	80003b04 <fat_check_noopen+0x28>
      return true;
   if( Fat_file_is_open() )
80003af0:	48 88       	lddpc	r8,80003b10 <fat_check_noopen+0x34>
80003af2:	11 89       	ld.ub	r9,r8[0x0]
80003af4:	30 08       	mov	r8,0
80003af6:	f0 09 18 00 	cp.b	r9,r8
80003afa:	c0 50       	breq	80003b04 <fat_check_noopen+0x28>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80003afc:	30 59       	mov	r9,5
80003afe:	48 68       	lddpc	r8,80003b14 <fat_check_noopen+0x38>
80003b00:	b0 89       	st.b	r8[0x0],r9
80003b02:	d8 0a       	popm	pc,r12=0
      return false;
80003b04:	da 0a       	popm	pc,r12=1
80003b06:	00 00       	add	r0,r0
80003b08:	80 00       	ld.sh	r0,r0[0x0]
80003b0a:	3a 24       	mov	r4,-94
80003b0c:	00 00       	add	r0,r0
80003b0e:	29 e4       	sub	r4,-98
80003b10:	00 00       	add	r0,r0
80003b12:	27 60       	sub	r0,118
80003b14:	00 00       	add	r0,r0
80003b16:	29 e8       	sub	r8,-98

80003b18 <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
bool  fat_check_mount( void )
{
80003b18:	d4 01       	pushm	lr
   if( !fat_check_device() )
80003b1a:	f0 1f 00 0a 	mcall	80003b40 <fat_check_mount+0x28>
80003b1e:	c0 f0       	breq	80003b3c <fat_check_mount+0x24>
      return false;
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80003b20:	48 98       	lddpc	r8,80003b44 <fat_check_mount+0x2c>
80003b22:	11 89       	ld.ub	r9,r8[0x0]
80003b24:	30 08       	mov	r8,0
80003b26:	f0 09 18 00 	cp.b	r9,r8
80003b2a:	c0 81       	brne	80003b3a <fat_check_mount+0x22>
   {
      if( !fat_mount() )
80003b2c:	f0 1f 00 07 	mcall	80003b48 <fat_check_mount+0x30>
80003b30:	c0 51       	brne	80003b3a <fat_check_mount+0x22>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
80003b32:	30 e9       	mov	r9,14
80003b34:	48 68       	lddpc	r8,80003b4c <fat_check_mount+0x34>
80003b36:	b0 89       	st.b	r8[0x0],r9
         return false;
80003b38:	d8 02       	popm	pc
80003b3a:	30 1c       	mov	r12,1
      }
   }
   return true;
}
80003b3c:	d8 02       	popm	pc
80003b3e:	00 00       	add	r0,r0
80003b40:	80 00       	ld.sh	r0,r0[0x0]
80003b42:	3a 24       	mov	r4,-94
80003b44:	00 00       	add	r0,r0
80003b46:	29 e4       	sub	r4,-98
80003b48:	80 00       	ld.sh	r0,r0[0x0]
80003b4a:	3b c8       	mov	r8,-68
80003b4c:	00 00       	add	r0,r0
80003b4e:	29 e8       	sub	r8,-98

80003b50 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select( void )
{
80003b50:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80003b52:	f0 1f 00 04 	mcall	80003b60 <fat_check_mount_select+0x10>
80003b56:	c0 30       	breq	80003b5c <fat_check_mount_select+0xc>
      return false;
   return fat_check_select();
80003b58:	f0 1f 00 03 	mcall	80003b64 <fat_check_mount_select+0x14>
}
80003b5c:	d8 02       	popm	pc
80003b5e:	00 00       	add	r0,r0
80003b60:	80 00       	ld.sh	r0,r0[0x0]
80003b62:	3b 18       	mov	r8,-79
80003b64:	80 00       	ld.sh	r0,r0[0x0]
80003b66:	2b cc       	sub	r12,-68

80003b68 <fat_check_mount_select_open>:
//!
//! @return    true  partition mounted and a file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_select_open( void )
{
80003b68:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80003b6a:	f0 1f 00 06 	mcall	80003b80 <fat_check_mount_select_open+0x18>
80003b6e:	c0 70       	breq	80003b7c <fat_check_mount_select_open+0x14>
      return false;
   if( !fat_check_select() )
80003b70:	f0 1f 00 05 	mcall	80003b84 <fat_check_mount_select_open+0x1c>
80003b74:	c0 40       	breq	80003b7c <fat_check_mount_select_open+0x14>
      return false;
   return fat_check_open();
80003b76:	f0 1f 00 05 	mcall	80003b88 <fat_check_mount_select_open+0x20>
80003b7a:	d8 02       	popm	pc
80003b7c:	d8 0a       	popm	pc,r12=0
80003b7e:	00 00       	add	r0,r0
80003b80:	80 00       	ld.sh	r0,r0[0x0]
80003b82:	3b 18       	mov	r8,-79
80003b84:	80 00       	ld.sh	r0,r0[0x0]
80003b86:	2b cc       	sub	r12,-68
80003b88:	80 00       	ld.sh	r0,r0[0x0]
80003b8a:	2b ac       	sub	r12,-70

80003b8c <fat_check_mount_select_noopen>:
//!
//! @return    true  partition mounted and no file is opened and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select_noopen( void )
{
80003b8c:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80003b8e:	f0 1f 00 06 	mcall	80003ba4 <fat_check_mount_select_noopen+0x18>
80003b92:	c0 70       	breq	80003ba0 <fat_check_mount_select_noopen+0x14>
      return false;
   if( !fat_check_select() )
80003b94:	f0 1f 00 05 	mcall	80003ba8 <fat_check_mount_select_noopen+0x1c>
80003b98:	c0 40       	breq	80003ba0 <fat_check_mount_select_noopen+0x14>
      return false;
   return fat_check_noopen();
80003b9a:	f0 1f 00 05 	mcall	80003bac <fat_check_mount_select_noopen+0x20>
80003b9e:	d8 02       	popm	pc
80003ba0:	d8 0a       	popm	pc,r12=0
80003ba2:	00 00       	add	r0,r0
80003ba4:	80 00       	ld.sh	r0,r0[0x0]
80003ba6:	3b 18       	mov	r8,-79
80003ba8:	80 00       	ld.sh	r0,r0[0x0]
80003baa:	2b cc       	sub	r12,-68
80003bac:	80 00       	ld.sh	r0,r0[0x0]
80003bae:	3a dc       	mov	r12,-83

80003bb0 <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_noopen( void )
{
80003bb0:	d4 01       	pushm	lr
   if( !fat_check_mount() )
80003bb2:	f0 1f 00 04 	mcall	80003bc0 <fat_check_mount_noopen+0x10>
80003bb6:	c0 30       	breq	80003bbc <fat_check_mount_noopen+0xc>
      return false;
   return fat_check_noopen();
80003bb8:	f0 1f 00 03 	mcall	80003bc4 <fat_check_mount_noopen+0x14>
}
80003bbc:	d8 02       	popm	pc
80003bbe:	00 00       	add	r0,r0
80003bc0:	80 00       	ld.sh	r0,r0[0x0]
80003bc2:	3b 18       	mov	r8,-79
80003bc4:	80 00       	ld.sh	r0,r0[0x0]
80003bc6:	3a dc       	mov	r12,-83

80003bc8 <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
bool  fat_mount( void )
{
80003bc8:	d4 31       	pushm	r0-r7,lr
80003bca:	20 3d       	sub	sp,12
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
80003bcc:	30 07       	mov	r7,0
80003bce:	fe f8 02 d2 	ld.w	r8,pc[722]
80003bd2:	91 87       	st.w	r8[0x20],r7
   // No selected file
   fat_clear_entry_info_and_ptr();
80003bd4:	f0 1f 00 b4 	mcall	80003ea4 <fat_mount+0x2dc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80003bd8:	fe f8 02 d0 	ld.w	r8,pc[720]
80003bdc:	b0 87       	st.b	r8[0x0],r7
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80003bde:	fe f8 02 ce 	ld.w	r8,pc[718]
80003be2:	91 07       	st.w	r8[0x0],r7

   // Check if the drive is available
   if( !fat_check_device() )
80003be4:	f0 1f 00 b3 	mcall	80003eb0 <fat_mount+0x2e8>
80003be8:	e0 80 01 58 	breq	80003e98 <fat_mount+0x2d0>
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80003bec:	fe f5 02 c8 	ld.w	r5,pc[712]
      {
         fs_g_status = FS_ERR_NO_FORMAT;
         return false;
      }

      if ( 0 == fs_gu32_addrsector )
80003bf0:	ea c8 fe 42 	sub	r8,r5,-446
80003bf4:	50 08       	stdsp	sp[0x0],r8
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80003bf6:	38 04       	mov	r4,-128
80003bf8:	30 46       	mov	r6,4
      return false;

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
80003bfa:	30 1c       	mov	r12,1
80003bfc:	f0 1f 00 af 	mcall	80003eb8 <fat_mount+0x2f0>
80003c00:	e0 80 01 4c 	breq	80003e98 <fat_mount+0x2d0>
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80003c04:	eb 39 01 fe 	ld.ub	r9,r5[510]
80003c08:	35 58       	mov	r8,85
80003c0a:	f0 09 18 00 	cp.b	r9,r8
80003c0e:	c0 d0       	breq	80003c28 <fat_mount+0x60>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
80003c10:	eb 39 01 ff 	ld.ub	r9,r5[511]
80003c14:	3a a8       	mov	r8,-86
80003c16:	f0 09 18 00 	cp.b	r9,r8
80003c1a:	c0 70       	breq	80003c28 <fat_mount+0x60>
      {
         fs_g_status = FS_ERR_NO_FORMAT;
80003c1c:	30 29       	mov	r9,2
80003c1e:	fe f8 02 9e 	ld.w	r8,pc[670]
80003c22:	b0 89       	st.b	r8[0x0],r9
80003c24:	30 0c       	mov	r12,0
         return false;
80003c26:	c3 a9       	rjmp	80003e9a <fat_mount+0x2d2>
      }

      if ( 0 == fs_gu32_addrsector )
80003c28:	fe f8 02 84 	ld.w	r8,pc[644]
80003c2c:	70 08       	ld.w	r8,r8[0x0]
80003c2e:	58 08       	cp.w	r8,0
80003c30:	c5 21       	brne	80003cd4 <fat_mount+0x10c>
80003c32:	40 08       	lddsp	r8,sp[0x0]
80003c34:	30 0a       	mov	r10,0
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80003c36:	30 1e       	mov	lr,1
80003c38:	30 63       	mov	r3,6
80003c3a:	30 e2       	mov	r2,14
80003c3c:	30 b1       	mov	r1,11
80003c3e:	30 c0       	mov	r0,12
80003c40:	11 89       	ld.ub	r9,r8[0x0]
80003c42:	e8 09 18 00 	cp.b	r9,r4
80003c46:	5f 0b       	sreq	r11
80003c48:	ee 09 18 00 	cp.b	r9,r7
80003c4c:	5f 09       	sreq	r9
80003c4e:	f7 e9 10 09 	or	r9,r11,r9
80003c52:	ee 09 18 00 	cp.b	r9,r7
80003c56:	c1 90       	breq	80003c88 <fat_mount+0xc0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
80003c58:	11 c9       	ld.ub	r9,r8[0x4]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80003c5a:	fc 09 18 00 	cp.b	r9,lr
80003c5e:	5f 0c       	sreq	r12
80003c60:	ec 09 18 00 	cp.b	r9,r6
80003c64:	5f 0b       	sreq	r11
80003c66:	f9 eb 10 0b 	or	r11,r12,r11
80003c6a:	ee 0b 18 00 	cp.b	r11,r7
80003c6e:	c1 41       	brne	80003c96 <fat_mount+0xce>
80003c70:	e6 09 18 00 	cp.b	r9,r3
80003c74:	c1 10       	breq	80003c96 <fat_mount+0xce>
80003c76:	e4 09 18 00 	cp.b	r9,r2
80003c7a:	c0 e0       	breq	80003c96 <fat_mount+0xce>
80003c7c:	e2 09 18 00 	cp.b	r9,r1
80003c80:	c0 b0       	breq	80003c96 <fat_mount+0xce>
80003c82:	e0 09 18 00 	cp.b	r9,r0
80003c86:	c0 80       	breq	80003c96 <fat_mount+0xce>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
80003c88:	2f fa       	sub	r10,-1
80003c8a:	5c 5a       	castu.b	r10
80003c8c:	2f 08       	sub	r8,-16
80003c8e:	ec 0a 18 00 	cp.b	r10,r6
80003c92:	cd 71       	brne	80003c40 <fat_mount+0x78>
80003c94:	c2 08       	rjmp	80003cd4 <fat_mount+0x10c>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
80003c96:	ec 0a 18 00 	cp.b	r10,r6
80003c9a:	c1 d0       	breq	80003cd4 <fat_mount+0x10c>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80003c9c:	fe f3 02 10 	ld.w	r3,pc[528]
80003ca0:	a5 6a       	lsl	r10,0x4
80003ca2:	f4 ca fe 42 	sub	r10,r10,-446
80003ca6:	ea 0a 00 0a 	add	r10,r5,r10
80003caa:	f5 38 00 08 	ld.ub	r8,r10[8]
80003cae:	a6 b8       	st.b	r3[0x3],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
80003cb0:	f5 38 00 09 	ld.ub	r8,r10[9]
80003cb4:	a6 a8       	st.b	r3[0x2],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
80003cb6:	f5 38 00 0a 	ld.ub	r8,r10[10]
80003cba:	a6 98       	st.b	r3[0x1],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80003cbc:	f5 38 00 0b 	ld.ub	r8,r10[11]
80003cc0:	a6 88       	st.b	r3[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
80003cc2:	4f 88       	lddpc	r8,80003ea0 <fat_mount+0x2d8>
80003cc4:	11 8c       	ld.ub	r12,r8[0x0]
80003cc6:	f0 1f 00 7f 	mcall	80003ec0 <fat_mount+0x2f8>
80003cca:	66 08       	ld.w	r8,r3[0x0]
80003ccc:	f8 08 02 48 	mul	r8,r12,r8
80003cd0:	87 08       	st.w	r3[0x0],r8
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
80003cd2:	c9 4b       	rjmp	80003bfa <fat_mount+0x32>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80003cd4:	4f 88       	lddpc	r8,80003eb4 <fat_mount+0x2ec>
80003cd6:	11 89       	ld.ub	r9,r8[0x0]
80003cd8:	3e b8       	mov	r8,-21
80003cda:	f0 09 18 00 	cp.b	r9,r8
80003cde:	c0 f1       	brne	80003cfc <fat_mount+0x134>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
80003ce0:	4f 58       	lddpc	r8,80003eb4 <fat_mount+0x2ec>
80003ce2:	11 a9       	ld.ub	r9,r8[0x2]
80003ce4:	39 08       	mov	r8,-112
80003ce6:	f0 09 18 00 	cp.b	r9,r8
80003cea:	c0 91       	brne	80003cfc <fat_mount+0x134>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
80003cec:	4f 28       	lddpc	r8,80003eb4 <fat_mount+0x2ec>
80003cee:	f1 38 00 15 	ld.ub	r8,r8[21]
80003cf2:	e2 18 00 f0 	andl	r8,0xf0,COH
80003cf6:	e0 48 00 f0 	cp.w	r8,240
80003cfa:	c0 60       	breq	80003d06 <fat_mount+0x13e>
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80003cfc:	30 39       	mov	r9,3
80003cfe:	4f 08       	lddpc	r8,80003ebc <fat_mount+0x2f4>
80003d00:	b0 89       	st.b	r8[0x0],r9
80003d02:	30 0c       	mov	r12,0
      return false;
80003d04:	cc b8       	rjmp	80003e9a <fat_mount+0x2d2>
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80003d06:	30 49       	mov	r9,4
80003d08:	4e d8       	lddpc	r8,80003ebc <fat_mount+0x2f4>
80003d0a:	b0 89       	st.b	r8[0x0],r9

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80003d0c:	4e aa       	lddpc	r10,80003eb4 <fat_mount+0x2ec>
80003d0e:	f5 39 00 0c 	ld.ub	r9,r10[12]
80003d12:	a1 99       	lsr	r9,0x1

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
80003d14:	f5 38 00 0d 	ld.ub	r8,r10[13]
80003d18:	b3 38       	mul	r8,r9
80003d1a:	5c 58       	castu.b	r8
80003d1c:	4e 1b       	lddpc	r11,80003ea0 <fat_mount+0x2d8>
80003d1e:	b6 98       	st.b	r11[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
80003d20:	30 0b       	mov	r11,0
80003d22:	50 1b       	stdsp	sp[0x4],r11
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
80003d24:	fa cb ff fc 	sub	r11,sp,-4
80003d28:	fa c7 ff f9 	sub	r7,sp,-7
80003d2c:	f5 3c 00 16 	ld.ub	r12,r10[22]
80003d30:	ae 8c       	st.b	r7[0x0],r12
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
80003d32:	fa ce ff fa 	sub	lr,sp,-6
80003d36:	f5 3a 00 17 	ld.ub	r10,r10[23]
80003d3a:	bc 8a       	st.b	lr[0x0],r10
   if ( 0==u32_tmp )
80003d3c:	40 1a       	lddsp	r10,sp[0x4]
80003d3e:	58 0a       	cp.w	r10,0
80003d40:	c0 e1       	brne	80003d5c <fat_mount+0x194>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
80003d42:	4d da       	lddpc	r10,80003eb4 <fat_mount+0x2ec>
80003d44:	f5 3c 00 24 	ld.ub	r12,r10[36]
80003d48:	ae 8c       	st.b	r7[0x0],r12
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
80003d4a:	f5 3c 00 25 	ld.ub	r12,r10[37]
80003d4e:	bc 8c       	st.b	lr[0x0],r12
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
80003d50:	f5 3c 00 26 	ld.ub	r12,r10[38]
80003d54:	b6 9c       	st.b	r11[0x1],r12
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
80003d56:	f5 3a 00 27 	ld.ub	r10,r10[39]
80003d5a:	b6 8a       	st.b	r11[0x0],r10
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
80003d5c:	12 95       	mov	r5,r9
80003d5e:	40 1c       	lddsp	r12,sp[0x4]
80003d60:	f2 0c 02 4c 	mul	r12,r9,r12
80003d64:	4c fa       	lddpc	r10,80003ea0 <fat_mount+0x2d8>
80003d66:	95 1c       	st.w	r10[0x4],r12

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80003d68:	4d 3a       	lddpc	r10,80003eb4 <fat_mount+0x2ec>
80003d6a:	f5 3a 00 13 	ld.ub	r10,r10[19]
80003d6e:	58 0a       	cp.w	r10,0
80003d70:	c1 61       	brne	80003d9c <fat_mount+0x1d4>
80003d72:	4d 16       	lddpc	r6,80003eb4 <fat_mount+0x2ec>
80003d74:	ed 34 00 14 	ld.ub	r4,r6[20]
80003d78:	30 06       	mov	r6,0
80003d7a:	ec 04 18 00 	cp.b	r4,r6
80003d7e:	c0 f1       	brne	80003d9c <fat_mount+0x1d4>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
80003d80:	4c da       	lddpc	r10,80003eb4 <fat_mount+0x2ec>
80003d82:	f5 36 00 20 	ld.ub	r6,r10[32]
80003d86:	ae 86       	st.b	r7[0x0],r6
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
80003d88:	f5 37 00 21 	ld.ub	r7,r10[33]
80003d8c:	bc 87       	st.b	lr[0x0],r7
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
80003d8e:	f5 3e 00 22 	ld.ub	lr,r10[34]
80003d92:	b6 9e       	st.b	r11[0x1],lr
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
80003d94:	f5 3a 00 23 	ld.ub	r10,r10[35]
80003d98:	b6 8a       	st.b	r11[0x0],r10
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80003d9a:	c0 98       	rjmp	80003dac <fat_mount+0x1e4>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
80003d9c:	ae 8a       	st.b	r7[0x0],r10
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
80003d9e:	4c 6a       	lddpc	r10,80003eb4 <fat_mount+0x2ec>
80003da0:	f5 3a 00 14 	ld.ub	r10,r10[20]
80003da4:	bc 8a       	st.b	lr[0x0],r10
      LSB2( u32_tmp ) = 0;
80003da6:	30 0a       	mov	r10,0
80003da8:	b6 9a       	st.b	r11[0x1],r10
      LSB3( u32_tmp ) = 0;
80003daa:	b6 8a       	st.b	r11[0x0],r10
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
80003dac:	40 14       	lddsp	r4,sp[0x4]

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
80003dae:	4b da       	lddpc	r10,80003ea0 <fat_mount+0x2d8>
80003db0:	f8 0b 15 01 	lsl	r11,r12,0x1
80003db4:	f5 5b 00 18 	st.h	r10[24],r11

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
80003db8:	fa c6 ff f6 	sub	r6,sp,-10
80003dbc:	fa c7 ff f4 	sub	r7,sp,-12
80003dc0:	4b db       	lddpc	r11,80003eb4 <fat_mount+0x2ec>
80003dc2:	f7 3e 00 11 	ld.ub	lr,r11[17]
80003dc6:	0e fe       	st.b	--r7,lr
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
80003dc8:	f7 3e 00 12 	ld.ub	lr,r11[18]
80003dcc:	ac 8e       	st.b	r6[0x0],lr
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80003dce:	f2 03 15 04 	lsl	r3,r9,0x4
80003dd2:	9a de       	ld.uh	lr,sp[0xa]
80003dd4:	e6 0e 00 0e 	add	lr,r3,lr
80003dd8:	a5 7e       	lsl	lr,0x5
80003dda:	20 1e       	sub	lr,1
80003ddc:	f2 03 15 09 	lsl	r3,r9,0x9
80003de0:	fc 03 0c 02 	divs	r2,lr,r3
80003de4:	e4 09 02 4e 	mul	lr,r2,r9
80003de8:	f5 5e 00 1a 	st.h	r10[26],lr

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80003dec:	f7 33 00 0e 	ld.ub	r3,r11[14]
80003df0:	ae 83       	st.b	r7[0x0],r3
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
80003df2:	f7 37 00 0f 	ld.ub	r7,r11[15]
80003df6:	ac 87       	st.b	r6[0x0],r7
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80003df8:	9a 57       	ld.sh	r7,sp[0xa]
80003dfa:	f7 3b 00 30 	ld.ub	r11,r11[48]
80003dfe:	0e 96       	mov	r6,r7
80003e00:	ee 0b 01 0b 	sub	r11,r7,r11
80003e04:	b3 3b       	mul	r11,r9
80003e06:	b4 4b       	st.h	r10[0x8],r11
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
80003e08:	ee 09 02 49 	mul	r9,r7,r9
80003e0c:	5c 79       	castu.h	r9
80003e0e:	4a 8b       	lddpc	r11,80003eac <fat_mount+0x2e4>
80003e10:	76 0b       	ld.w	r11,r11[0x0]
80003e12:	f2 0b 00 0b 	add	r11,r9,r11
80003e16:	95 4b       	st.w	r10[0x10],r11

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
80003e18:	5c 7e       	castu.h	lr
80003e1a:	fc 0c 00 1c 	add	r12,lr,r12<<0x1
80003e1e:	95 5c       	st.w	r10[0x14],r12
   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
80003e20:	58 08       	cp.w	r8,0
80003e22:	c3 b0       	breq	80003e98 <fat_mount+0x2d0>

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
80003e24:	a9 35       	mul	r5,r4
80003e26:	ea 09 01 09 	sub	r9,r5,r9
80003e2a:	18 19       	sub	r9,r12
80003e2c:	50 19       	stdsp	sp[0x4],r9

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80003e2e:	30 1a       	mov	r10,1
80003e30:	f4 08 18 00 	cp.b	r8,r10
80003e34:	c0 70       	breq	80003e42 <fat_mount+0x27a>
   {
     u32_tmp  >>= 1;   // This computation round down
80003e36:	a1 99       	lsr	r9,0x1

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
80003e38:	a1 98       	lsr	r8,0x1
80003e3a:	f4 08 18 00 	cp.b	r8,r10
80003e3e:	cf c1       	brne	80003e36 <fat_mount+0x26e>
80003e40:	50 19       	stdsp	sp[0x4],r9
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
80003e42:	40 18       	lddsp	r8,sp[0x4]
80003e44:	f0 ca ff fe 	sub	r10,r8,-2
80003e48:	49 69       	lddpc	r9,80003ea0 <fat_mount+0x2d8>
80003e4a:	93 3a       	st.w	r9[0xc],r10

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
80003e4c:	e0 48 0f f4 	cp.w	r8,4084
80003e50:	e0 8b 00 07 	brhi	80003e5e <fat_mount+0x296>
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
80003e54:	30 19       	mov	r9,1
80003e56:	49 58       	lddpc	r8,80003ea8 <fat_mount+0x2e0>
80003e58:	b0 89       	st.b	r8[0x0],r9
80003e5a:	30 1c       	mov	r12,1
80003e5c:	c1 f8       	rjmp	80003e9a <fat_mount+0x2d2>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
80003e5e:	e0 48 ff f4 	cp.w	r8,65524
80003e62:	e0 8b 00 07 	brhi	80003e70 <fat_mount+0x2a8>
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
80003e66:	30 29       	mov	r9,2
80003e68:	49 08       	lddpc	r8,80003ea8 <fat_mount+0x2e0>
80003e6a:	b0 89       	st.b	r8[0x0],r9
80003e6c:	30 1c       	mov	r12,1
80003e6e:	c1 68       	rjmp	80003e9a <fat_mount+0x2d2>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
80003e70:	30 39       	mov	r9,3
80003e72:	48 e8       	lddpc	r8,80003ea8 <fat_mount+0x2e0>
80003e74:	b0 89       	st.b	r8[0x0],r9
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
80003e76:	48 b8       	lddpc	r8,80003ea0 <fat_mount+0x2d8>
80003e78:	2e 88       	sub	r8,-24
80003e7a:	48 f9       	lddpc	r9,80003eb4 <fat_mount+0x2ec>
80003e7c:	f3 3a 00 2c 	ld.ub	r10,r9[44]
80003e80:	b0 ba       	st.b	r8[0x3],r10
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
80003e82:	f3 3a 00 2d 	ld.ub	r10,r9[45]
80003e86:	b0 aa       	st.b	r8[0x2],r10
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
80003e88:	f3 3a 00 2e 	ld.ub	r10,r9[46]
80003e8c:	b0 9a       	st.b	r8[0x1],r10
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
80003e8e:	f3 39 00 2f 	ld.ub	r9,r9[47]
80003e92:	b0 89       	st.b	r8[0x0],r9
80003e94:	30 1c       	mov	r12,1
80003e96:	c0 28       	rjmp	80003e9a <fat_mount+0x2d2>
80003e98:	30 0c       	mov	r12,0
   }
   }

   return true;
}
80003e9a:	2f dd       	sub	sp,-12
80003e9c:	d8 32       	popm	r0-r7,pc
80003e9e:	00 00       	add	r0,r0
80003ea0:	00 00       	add	r0,r0
80003ea2:	29 9c       	sub	r12,-103
80003ea4:	80 00       	ld.sh	r0,r0[0x0]
80003ea6:	2e cc       	sub	r12,-20
80003ea8:	00 00       	add	r0,r0
80003eaa:	29 e4       	sub	r4,-98
80003eac:	00 00       	add	r0,r0
80003eae:	27 5c       	sub	r12,117
80003eb0:	80 00       	ld.sh	r0,r0[0x0]
80003eb2:	3a 24       	mov	r4,-94
80003eb4:	00 00       	add	r0,r0
80003eb6:	27 9c       	sub	r12,121
80003eb8:	80 00       	ld.sh	r0,r0[0x0]
80003eba:	34 48       	mov	r8,68
80003ebc:	00 00       	add	r0,r0
80003ebe:	29 e8       	sub	r8,-98
80003ec0:	80 00       	ld.sh	r0,r0[0x0]
80003ec2:	64 78       	ld.w	r8,r2[0x1c]

80003ec4 <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
80003ec4:	d4 01       	pushm	lr
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
80003ec6:	f0 1f 00 04 	mcall	80003ed4 <file_close+0x10>
80003eca:	c0 40       	breq	80003ed2 <file_close+0xe>
            return;           // error
         fat_write_entry_file();
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
80003ecc:	30 09       	mov	r9,0
80003ece:	48 38       	lddpc	r8,80003ed8 <file_close+0x14>
80003ed0:	b0 89       	st.b	r8[0x0],r9
80003ed2:	d8 02       	popm	pc
80003ed4:	80 00       	ld.sh	r0,r0[0x0]
80003ed6:	3b 68       	mov	r8,-74
80003ed8:	00 00       	add	r0,r0
80003eda:	27 60       	sub	r0,118

80003edc <file_eof>:
//! @return    1     the position is at the end of file
//! @return    0     the position isn't at the end of file
//! @return    FFh   error
//!
uint8_t    file_eof( void )
{
80003edc:	d4 01       	pushm	lr
   if( !fat_check_mount_select_open() )
80003ede:	f0 1f 00 07 	mcall	80003ef8 <file_eof+0x1c>
80003ee2:	c0 41       	brne	80003eea <file_eof+0xe>
80003ee4:	e0 6c 00 ff 	mov	r12,255
80003ee8:	d8 02       	popm	pc
      return 0xFF;
   return (fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file );
80003eea:	48 58       	lddpc	r8,80003efc <file_eof+0x20>
80003eec:	70 29       	ld.w	r9,r8[0x8]
80003eee:	70 38       	ld.w	r8,r8[0xc]
80003ef0:	10 39       	cp.w	r9,r8
80003ef2:	5f 8c       	srls	r12
}
80003ef4:	d8 02       	popm	pc
80003ef6:	00 00       	add	r0,r0
80003ef8:	80 00       	ld.sh	r0,r0[0x0]
80003efa:	3b 68       	mov	r8,-74
80003efc:	00 00       	add	r0,r0
80003efe:	27 60       	sub	r0,118

80003f00 <file_bof>:
//! @return    1     the position is at the beginning of file
//! @return    0     the position isn't at the beginning of file
//! @return    FFh   error
//!
uint8_t    file_bof( void )
{
80003f00:	d4 01       	pushm	lr
   if( !fat_check_mount_select_open() )
80003f02:	f0 1f 00 06 	mcall	80003f18 <file_bof+0x18>
80003f06:	c0 41       	brne	80003f0e <file_bof+0xe>
80003f08:	e0 6c 00 ff 	mov	r12,255
80003f0c:	d8 02       	popm	pc
      return 0xFF;

   return (0 == fs_g_nav_entry.u32_pos_in_file );
80003f0e:	48 48       	lddpc	r8,80003f1c <file_bof+0x1c>
80003f10:	70 38       	ld.w	r8,r8[0xc]
80003f12:	58 08       	cp.w	r8,0
80003f14:	5f 0c       	sreq	r12
}
80003f16:	d8 02       	popm	pc
80003f18:	80 00       	ld.sh	r0,r0[0x0]
80003f1a:	3b 68       	mov	r8,-74
80003f1c:	00 00       	add	r0,r0
80003f1e:	27 60       	sub	r0,118

80003f20 <file_seek>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_seek( uint32_t u32_pos , uint8_t u8_whence )
{
80003f20:	eb cd 40 c0 	pushm	r6-r7,lr
80003f24:	18 96       	mov	r6,r12
80003f26:	16 97       	mov	r7,r11
   if( !fat_check_mount_select_open())
80003f28:	f0 1f 00 28 	mcall	80003fc8 <file_seek+0xa8>
80003f2c:	c4 c0       	breq	80003fc4 <file_seek+0xa4>
      return false;

   switch(u8_whence)
80003f2e:	30 18       	mov	r8,1
80003f30:	f0 07 18 00 	cp.b	r7,r8
80003f34:	c2 90       	breq	80003f86 <file_seek+0x66>
80003f36:	c1 a3       	brcs	80003f6a <file_seek+0x4a>
80003f38:	30 28       	mov	r8,2
80003f3a:	f0 07 18 00 	cp.b	r7,r8
80003f3e:	c0 70       	breq	80003f4c <file_seek+0x2c>
80003f40:	30 38       	mov	r8,3
80003f42:	f0 07 18 00 	cp.b	r7,r8
80003f46:	c3 00       	breq	80003fa6 <file_seek+0x86>
80003f48:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
   {
      case FS_SEEK_CUR_RE:
      if( fs_g_nav_entry.u32_pos_in_file < u32_pos )
80003f4c:	4a 08       	lddpc	r8,80003fcc <file_seek+0xac>
80003f4e:	70 38       	ld.w	r8,r8[0xc]
80003f50:	0c 38       	cp.w	r8,r6
80003f52:	c0 62       	brcc	80003f5e <file_seek+0x3e>
      {  // Out of the limit
         fs_g_status = FS_ERR_BAD_POS;
80003f54:	30 79       	mov	r9,7
80003f56:	49 f8       	lddpc	r8,80003fd0 <file_seek+0xb0>
80003f58:	b0 89       	st.b	r8[0x0],r9
80003f5a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      // update the position
      fs_g_nav_entry.u32_pos_in_file -= u32_pos;
80003f5e:	49 c9       	lddpc	r9,80003fcc <file_seek+0xac>
80003f60:	f0 06 01 06 	sub	r6,r8,r6
80003f64:	93 36       	st.w	r9[0xc],r6
80003f66:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      break;

      case FS_SEEK_SET:
      if( fs_g_nav_entry.u32_size < u32_pos )
80003f6a:	49 98       	lddpc	r8,80003fcc <file_seek+0xac>
80003f6c:	70 28       	ld.w	r8,r8[0x8]
80003f6e:	10 36       	cp.w	r6,r8
80003f70:	e0 88 00 07 	brls	80003f7e <file_seek+0x5e>
      {  // Out of the limit
         fs_g_status = FS_ERR_BAD_POS;
80003f74:	30 79       	mov	r9,7
80003f76:	49 78       	lddpc	r8,80003fd0 <file_seek+0xb0>
80003f78:	b0 89       	st.b	r8[0x0],r9
80003f7a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      // update the position
      fs_g_nav_entry.u32_pos_in_file = u32_pos;
80003f7e:	49 48       	lddpc	r8,80003fcc <file_seek+0xac>
80003f80:	91 36       	st.w	r8[0xc],r6
80003f82:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      break;

      case FS_SEEK_END:
      if( fs_g_nav_entry.u32_size < u32_pos )
80003f86:	49 28       	lddpc	r8,80003fcc <file_seek+0xac>
80003f88:	70 28       	ld.w	r8,r8[0x8]
80003f8a:	10 36       	cp.w	r6,r8
80003f8c:	e0 88 00 07 	brls	80003f9a <file_seek+0x7a>
      {  // Out of the limit
         fs_g_status = FS_ERR_BAD_POS;
80003f90:	30 79       	mov	r9,7
80003f92:	49 08       	lddpc	r8,80003fd0 <file_seek+0xb0>
80003f94:	b0 89       	st.b	r8[0x0],r9
80003f96:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      // update the position
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size - u32_pos;
80003f9a:	48 d9       	lddpc	r9,80003fcc <file_seek+0xac>
80003f9c:	f0 06 01 06 	sub	r6,r8,r6
80003fa0:	93 36       	st.w	r9[0xc],r6
80003fa2:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
      break;

      case FS_SEEK_CUR_FW:
      u32_pos += fs_g_nav_entry.u32_pos_in_file;
80003fa6:	48 a8       	lddpc	r8,80003fcc <file_seek+0xac>
80003fa8:	70 39       	ld.w	r9,r8[0xc]
80003faa:	12 06       	add	r6,r9
      if( fs_g_nav_entry.u32_size < u32_pos )
80003fac:	70 28       	ld.w	r8,r8[0x8]
80003fae:	10 36       	cp.w	r6,r8
80003fb0:	e0 88 00 07 	brls	80003fbe <file_seek+0x9e>
      {  // Out of the limit
         fs_g_status = FS_ERR_BAD_POS;
80003fb4:	30 79       	mov	r9,7
80003fb6:	48 78       	lddpc	r8,80003fd0 <file_seek+0xb0>
80003fb8:	b0 89       	st.b	r8[0x0],r9
80003fba:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
         return false;
      }
      // update the position
      fs_g_nav_entry.u32_pos_in_file = u32_pos;
80003fbe:	48 48       	lddpc	r8,80003fcc <file_seek+0xac>
80003fc0:	91 36       	st.w	r8[0xc],r6
80003fc2:	30 1c       	mov	r12,1
      break;
   }
   return true;
}
80003fc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003fc8:	80 00       	ld.sh	r0,r0[0x0]
80003fca:	3b 68       	mov	r8,-74
80003fcc:	00 00       	add	r0,r0
80003fce:	27 60       	sub	r0,118
80003fd0:	00 00       	add	r0,r0
80003fd2:	29 e8       	sub	r8,-98

80003fd4 <file_getpos>:
//! This function returns the position in the file
//!
//! @return    Position in file
//!
uint32_t   file_getpos( void )
{
80003fd4:	d4 01       	pushm	lr
   if( !fat_check_mount_select_open() )
80003fd6:	f0 1f 00 04 	mcall	80003fe4 <file_getpos+0x10>
80003fda:	c0 30       	breq	80003fe0 <file_getpos+0xc>
      return 0;

   return fs_g_nav_entry.u32_pos_in_file;
80003fdc:	48 38       	lddpc	r8,80003fe8 <file_getpos+0x14>
80003fde:	70 3c       	ld.w	r12,r8[0xc]
}
80003fe0:	d8 02       	popm	pc
80003fe2:	00 00       	add	r0,r0
80003fe4:	80 00       	ld.sh	r0,r0[0x0]
80003fe6:	3b 68       	mov	r8,-74
80003fe8:	00 00       	add	r0,r0
80003fea:	27 60       	sub	r0,118

80003fec <file_getc>:
//!
//! @return    The byte read
//! @return    EOF, in case of error or end of file
//!
uint16_t   file_getc( void )
{
80003fec:	d4 01       	pushm	lr
   uint16_t   u16_byte;

   while(1)
   {
      if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
80003fee:	49 78       	lddpc	r8,80004048 <file_getc+0x5c>
80003ff0:	11 88       	ld.ub	r8,r8[0x0]
80003ff2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003ff6:	c0 51       	brne	80004000 <file_getc+0x14>
      {
         fs_g_status = FS_ERR_WRITE_ONLY;
80003ff8:	31 e9       	mov	r9,30
80003ffa:	49 58       	lddpc	r8,8000404c <file_getc+0x60>
80003ffc:	b0 89       	st.b	r8[0x0],r9
80003ffe:	dc 0a       	popm	pc,r12=-1
         break;
      }
      if( fs_g_nav_entry.u32_size <= fs_g_nav_entry.u32_pos_in_file )
80004000:	49 28       	lddpc	r8,80004048 <file_getc+0x5c>
80004002:	70 29       	ld.w	r9,r8[0x8]
80004004:	70 38       	ld.w	r8,r8[0xc]
80004006:	10 39       	cp.w	r9,r8
80004008:	e0 8b 00 06 	brhi	80004014 <file_getc+0x28>
      {
         fs_g_status = FS_ERR_EOF;
8000400c:	32 09       	mov	r9,32
8000400e:	49 08       	lddpc	r8,8000404c <file_getc+0x60>
80004010:	b0 89       	st.b	r8[0x0],r9
80004012:	dc 0a       	popm	pc,r12=-1
         break;
      }

      if( !fat_read_file( FS_CLUST_ACT_ONE ))
80004014:	30 2c       	mov	r12,2
80004016:	f0 1f 00 0f 	mcall	80004050 <file_getc+0x64>
8000401a:	c0 c1       	brne	80004032 <file_getc+0x46>
      {
         if( FS_ERR_OUT_LIST == fs_g_status )
8000401c:	48 c8       	lddpc	r8,8000404c <file_getc+0x60>
8000401e:	11 89       	ld.ub	r9,r8[0x0]
80004020:	31 a8       	mov	r8,26
80004022:	f0 09 18 00 	cp.b	r9,r8
80004026:	c0 20       	breq	8000402a <file_getc+0x3e>
80004028:	dc 0a       	popm	pc,r12=-1
         {  // Translate the error
            fs_g_status = FS_ERR_EOF;   // End of file
8000402a:	32 09       	mov	r9,32
8000402c:	48 88       	lddpc	r8,8000404c <file_getc+0x60>
8000402e:	b0 89       	st.b	r8[0x0],r9
80004030:	dc 0a       	popm	pc,r12=-1
         }
         break;
      }

      u16_byte = fs_g_sector[ fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK ];
80004032:	48 68       	lddpc	r8,80004048 <file_getc+0x5c>
80004034:	70 39       	ld.w	r9,r8[0xc]
80004036:	f5 d9 c0 09 	bfextu	r10,r9,0x0,0x9
8000403a:	48 7b       	lddpc	r11,80004054 <file_getc+0x68>
8000403c:	f6 0a 07 0c 	ld.ub	r12,r11[r10]
      fs_g_nav_entry.u32_pos_in_file++;
80004040:	2f f9       	sub	r9,-1
80004042:	91 39       	st.w	r8[0xc],r9
      return u16_byte;
   }
   return FS_EOF;   // No data read
}
80004044:	d8 02       	popm	pc
80004046:	00 00       	add	r0,r0
80004048:	00 00       	add	r0,r0
8000404a:	27 60       	sub	r0,118
8000404c:	00 00       	add	r0,r0
8000404e:	29 e8       	sub	r8,-98
80004050:	80 00       	ld.sh	r0,r0[0x0]
80004052:	39 48       	mov	r8,-108
80004054:	00 00       	add	r0,r0
80004056:	27 9c       	sub	r12,121

80004058 <file_read_buf>:
//!
//! @return    number of byte read
//! @return    0, in case of error
//!
uint16_t   file_read_buf( uint8_t _MEM_TYPE_SLOW_ *buffer , uint16_t u16_buf_size )
{
80004058:	d4 31       	pushm	r0-r7,lr
8000405a:	20 1d       	sub	sp,4
8000405c:	18 95       	mov	r5,r12
8000405e:	16 94       	mov	r4,r11
   _MEM_TYPE_FAST_ uint16_t u16_nb_read_tmp;
   _MEM_TYPE_FAST_ uint16_t u16_nb_read;
   _MEM_TYPE_FAST_ uint16_t u16_pos_in_sector;
   _MEM_TYPE_FAST_ uint32_t u32_byte_remaining;

   if( !fat_check_mount_select_open())
80004060:	f0 1f 00 58 	mcall	800041c0 <file_read_buf+0x168>
80004064:	e0 80 00 a9 	breq	800041b6 <file_read_buf+0x15e>
      return false;

   if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
80004068:	4d 78       	lddpc	r8,800041c4 <file_read_buf+0x16c>
8000406a:	11 88       	ld.ub	r8,r8[0x0]
8000406c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004070:	c0 40       	breq	80004078 <file_read_buf+0x20>
      return false;
   }

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
80004072:	58 04       	cp.w	r4,0
80004074:	c0 71       	brne	80004082 <file_read_buf+0x2a>
80004076:	ca 08       	rjmp	800041b6 <file_read_buf+0x15e>
   if( !fat_check_mount_select_open())
      return false;

   if(!(FOPEN_READ_ACCESS & fs_g_nav_entry.u8_open_mode))
   {
      fs_g_status = FS_ERR_WRITE_ONLY;
80004078:	31 e9       	mov	r9,30
8000407a:	4d 48       	lddpc	r8,800041c8 <file_read_buf+0x170>
8000407c:	b0 89       	st.b	r8[0x0],r9
8000407e:	30 00       	mov	r0,0
      return false;
80004080:	c9 c8       	rjmp	800041b8 <file_read_buf+0x160>
80004082:	30 00       	mov	r0,0
      if ( file_eof() )
      {
         fs_g_status = FS_ERR_EOF;
         return u16_nb_read;     // End of the file
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
80004084:	4d 03       	lddpc	r3,800041c4 <file_read_buf+0x16c>
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;

      if( (0== u16_pos_in_sector)
80004086:	30 09       	mov	r9,0
80004088:	ba b9       	st.b	sp[0x3],r9
            if( FS_ERR_OUT_LIST == fs_g_status )
               fs_g_status = FS_ERR_EOF;  // translate the error
            return u16_nb_read;
         }
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
8000408a:	4d 17       	lddpc	r7,800041cc <file_read_buf+0x174>

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
   {
      if ( file_eof() )
8000408c:	f0 1f 00 51 	mcall	800041d0 <file_read_buf+0x178>
80004090:	c0 50       	breq	8000409a <file_read_buf+0x42>
      {
         fs_g_status = FS_ERR_EOF;
80004092:	32 09       	mov	r9,32
80004094:	4c d8       	lddpc	r8,800041c8 <file_read_buf+0x170>
80004096:	b0 89       	st.b	r8[0x0],r9
         return u16_nb_read;     // End of the file
80004098:	c9 08       	rjmp	800041b8 <file_read_buf+0x160>
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
8000409a:	66 31       	ld.w	r1,r3[0xc]
8000409c:	66 26       	ld.w	r6,r3[0x8]
8000409e:	02 16       	sub	r6,r1
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
800040a0:	e3 d1 c0 09 	bfextu	r1,r1,0x0,0x9

      if( (0== u16_pos_in_sector)
800040a4:	30 08       	mov	r8,0
800040a6:	f0 01 19 00 	cp.h	r1,r8
800040aa:	5f 09       	sreq	r9
800040ac:	e0 46 01 ff 	cp.w	r6,511
800040b0:	5f b8       	srhi	r8
800040b2:	f3 e8 00 08 	and	r8,r9,r8
800040b6:	1b b9       	ld.ub	r9,sp[0x3]
800040b8:	f2 08 18 00 	cp.b	r8,r9
800040bc:	c4 90       	breq	8000414e <file_read_buf+0xf6>
800040be:	e0 68 01 ff 	mov	r8,511
800040c2:	f0 04 19 00 	cp.h	r4,r8
800040c6:	e0 88 00 44 	brls	8000414e <file_read_buf+0xf6>
800040ca:	f1 d5 c0 02 	bfextu	r8,r5,0x0,0x2
800040ce:	c4 01       	brne	8000414e <file_read_buf+0xf6>
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
#endif
      )
      {
         // The file data sector can been directly transfer from memory to buffer (don't use internal cache)
         if( u16_buf_size <= u32_byte_remaining)
800040d0:	08 98       	mov	r8,r4
800040d2:	5c 78       	castu.h	r8
800040d4:	10 36       	cp.w	r6,r8
800040d6:	c0 43       	brcs	800040de <file_read_buf+0x86>
800040d8:	08 96       	mov	r6,r4
800040da:	5c 86       	casts.h	r6
800040dc:	c0 28       	rjmp	800040e0 <file_read_buf+0x88>
         {
            u16_nb_read_tmp = u16_buf_size;
         }else{
            u16_nb_read_tmp = u32_byte_remaining;
800040de:	5c 86       	casts.h	r6
         }
         u16_nb_read_tmp = u16_nb_read_tmp / FS_512B;  // read a modulo sector size

         // Get following sector segment of file
         if( !fat_read_file(FS_CLUST_ACT_SEG))
800040e0:	30 1c       	mov	r12,1
800040e2:	f0 1f 00 3d 	mcall	800041d4 <file_read_buf+0x17c>
800040e6:	c0 b1       	brne	800040fc <file_read_buf+0xa4>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
800040e8:	4b 88       	lddpc	r8,800041c8 <file_read_buf+0x170>
800040ea:	11 89       	ld.ub	r9,r8[0x0]
800040ec:	31 a8       	mov	r8,26
800040ee:	f0 09 18 00 	cp.b	r9,r8
800040f2:	c6 31       	brne	800041b8 <file_read_buf+0x160>
               fs_g_status = FS_ERR_EOF;  // translate the error
800040f4:	32 09       	mov	r9,32
800040f6:	4b 58       	lddpc	r8,800041c8 <file_read_buf+0x170>
800040f8:	b0 89       	st.b	r8[0x0],r9
800040fa:	c5 f8       	rjmp	800041b8 <file_read_buf+0x160>
         {
            u16_nb_read_tmp = u16_buf_size;
         }else{
            u16_nb_read_tmp = u32_byte_remaining;
         }
         u16_nb_read_tmp = u16_nb_read_tmp / FS_512B;  // read a modulo sector size
800040fc:	ed d6 c1 27 	bfextu	r6,r6,0x9,0x7
            if( FS_ERR_OUT_LIST == fs_g_status )
               fs_g_status = FS_ERR_EOF;  // translate the error
            return u16_nb_read;
         }
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
80004100:	f1 d6 c0 10 	bfextu	r8,r6,0x0,0x10
80004104:	6e 19       	ld.w	r9,r7[0x4]
80004106:	12 38       	cp.w	r8,r9
80004108:	e0 88 00 08 	brls	80004118 <file_read_buf+0xc0>
         {
            u16_nb_read_tmp = fs_g_seg.u32_size_or_pos;
8000410c:	ed d9 b0 10 	bfexts	r6,r9,0x0,0x10
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
         }

         // Directly data transfers from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
80004110:	6e 18       	ld.w	r8,r7[0x4]
80004112:	58 08       	cp.w	r8,0
80004114:	c0 41       	brne	8000411c <file_read_buf+0xc4>
80004116:	c1 88       	rjmp	80004146 <file_read_buf+0xee>
         // Truncate the segment size found if more larger than asked size
         if( u16_nb_read_tmp > fs_g_seg.u32_size_or_pos )
         {
            u16_nb_read_tmp = fs_g_seg.u32_size_or_pos;
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
80004118:	8f 18       	st.w	r7[0x4],r8
8000411a:	cf bb       	rjmp	80004110 <file_read_buf+0xb8>
         }

         // Directly data transfers from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
         {
            if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_seg.u32_addr, buffer))
8000411c:	0a 9a       	mov	r10,r5
8000411e:	6e 0b       	ld.w	r11,r7[0x0]
80004120:	4a e8       	lddpc	r8,800041d8 <file_read_buf+0x180>
80004122:	11 8c       	ld.ub	r12,r8[0x0]
80004124:	f0 1f 00 2e 	mcall	800041dc <file_read_buf+0x184>
80004128:	c0 50       	breq	80004132 <file_read_buf+0xda>
            {
               fs_g_status = FS_ERR_HW;
8000412a:	30 19       	mov	r9,1
8000412c:	4a 78       	lddpc	r8,800041c8 <file_read_buf+0x170>
8000412e:	b0 89       	st.b	r8[0x0],r9
               return u16_nb_read;
80004130:	c4 48       	rjmp	800041b8 <file_read_buf+0x160>
            }
            fs_g_seg.u32_size_or_pos--;
80004132:	6e 18       	ld.w	r8,r7[0x4]
80004134:	20 18       	sub	r8,1
80004136:	8f 18       	st.w	r7[0x4],r8
            fs_g_seg.u32_addr++;
80004138:	6e 09       	ld.w	r9,r7[0x0]
8000413a:	2f f9       	sub	r9,-1
8000413c:	8f 09       	st.w	r7[0x0],r9
            buffer += FS_512B;
8000413e:	ea c5 fe 00 	sub	r5,r5,-512
         }else{
            fs_g_seg.u32_size_or_pos = u16_nb_read_tmp;
         }

         // Directly data transfers from memory to buffer
         while( 0 != fs_g_seg.u32_size_or_pos )
80004142:	58 08       	cp.w	r8,0
80004144:	ce c1       	brne	8000411c <file_read_buf+0xc4>
            fs_g_seg.u32_size_or_pos--;
            fs_g_seg.u32_addr++;
            buffer += FS_512B;
         }
         // Translate from sector unit to byte unit
         u16_nb_read_tmp *= FS_512B;
80004146:	a9 76       	lsl	r6,0x9
80004148:	e5 d6 b0 10 	bfexts	r2,r6,0x0,0x10
         return u16_nb_read;     // End of the file
      }
      u32_byte_remaining = fs_g_nav_entry.u32_size-fs_g_nav_entry.u32_pos_in_file;
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;

      if( (0== u16_pos_in_sector)
8000414c:	c2 78       	rjmp	8000419a <file_read_buf+0x142>
      else
      {
         // The file data can't been directly transfer from memory to buffer, the internal cache must be used

         // Transfer data from memory to internal cache
         if( !fat_read_file( FS_CLUST_ACT_ONE ))
8000414e:	30 2c       	mov	r12,2
80004150:	f0 1f 00 21 	mcall	800041d4 <file_read_buf+0x17c>
80004154:	c0 b1       	brne	8000416a <file_read_buf+0x112>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
80004156:	49 d8       	lddpc	r8,800041c8 <file_read_buf+0x170>
80004158:	11 89       	ld.ub	r9,r8[0x0]
8000415a:	31 a8       	mov	r8,26
8000415c:	f0 09 18 00 	cp.b	r9,r8
80004160:	c2 c1       	brne	800041b8 <file_read_buf+0x160>
            {  // Translate the error
               fs_g_status = FS_ERR_EOF;   // End of file
80004162:	32 09       	mov	r9,32
80004164:	49 98       	lddpc	r8,800041c8 <file_read_buf+0x170>
80004166:	b0 89       	st.b	r8[0x0],r9
80004168:	c2 88       	rjmp	800041b8 <file_read_buf+0x160>
            }
            return u16_nb_read;
         }

         // Compute the number of data to transfer
         u16_nb_read_tmp = FS_512B - u16_pos_in_sector;  // The number is limited at sector size
8000416a:	e0 62 02 00 	mov	r2,512
8000416e:	02 12       	sub	r2,r1
80004170:	5c 82       	casts.h	r2
         if( u16_nb_read_tmp > u32_byte_remaining )
80004172:	f1 d2 c0 10 	bfextu	r8,r2,0x0,0x10
80004176:	10 36       	cp.w	r6,r8
80004178:	c0 32       	brcc	8000417e <file_read_buf+0x126>
            u16_nb_read_tmp = u32_byte_remaining;
8000417a:	e5 d6 b0 10 	bfexts	r2,r6,0x0,0x10
8000417e:	e4 04 19 00 	cp.h	r4,r2
80004182:	e8 02 17 30 	movlo	r2,r4
80004186:	5c 82       	casts.h	r2
         if( u16_nb_read_tmp > u16_buf_size )
            u16_nb_read_tmp = u16_buf_size;

         // Transfer data from internal cache to buffer
         memcpy_ram2ram( buffer , &fs_g_sector[ u16_pos_in_sector ], u16_nb_read_tmp );
80004188:	ed d2 c0 10 	bfextu	r6,r2,0x0,0x10
8000418c:	0c 9a       	mov	r10,r6
8000418e:	49 5b       	lddpc	r11,800041e0 <file_read_buf+0x188>
80004190:	02 0b       	add	r11,r1
80004192:	0a 9c       	mov	r12,r5
80004194:	f0 1f 00 14 	mcall	800041e4 <file_read_buf+0x18c>
         buffer += u16_nb_read_tmp;
80004198:	0c 05       	add	r5,r6
      }
      // Update positions
      fs_g_nav_entry.u32_pos_in_file   += u16_nb_read_tmp;
8000419a:	f3 d2 c0 10 	bfextu	r9,r2,0x0,0x10
8000419e:	66 38       	ld.w	r8,r3[0xc]
800041a0:	f2 08 00 08 	add	r8,r9,r8
800041a4:	87 38       	st.w	r3[0xc],r8
      u16_nb_read                      += u16_nb_read_tmp;
800041a6:	e4 00 00 00 	add	r0,r2,r0
800041aa:	5c 80       	casts.h	r0
      u16_buf_size                     -= u16_nb_read_tmp;
800041ac:	04 14       	sub	r4,r2
800041ae:	5c 84       	casts.h	r4
      return false;
   }

   u16_nb_read = 0;

   while( 0 != u16_buf_size )
800041b0:	fe 91 ff 6e 	brne	8000408c <file_read_buf+0x34>
800041b4:	c0 28       	rjmp	800041b8 <file_read_buf+0x160>
800041b6:	30 00       	mov	r0,0
      fs_g_nav_entry.u32_pos_in_file   += u16_nb_read_tmp;
      u16_nb_read                      += u16_nb_read_tmp;
      u16_buf_size                     -= u16_nb_read_tmp;
   }
   return u16_nb_read;  // Buffer is full
}
800041b8:	00 9c       	mov	r12,r0
800041ba:	2f fd       	sub	sp,-4
800041bc:	d8 32       	popm	r0-r7,pc
800041be:	00 00       	add	r0,r0
800041c0:	80 00       	ld.sh	r0,r0[0x0]
800041c2:	3b 68       	mov	r8,-74
800041c4:	00 00       	add	r0,r0
800041c6:	27 60       	sub	r0,118
800041c8:	00 00       	add	r0,r0
800041ca:	29 e8       	sub	r8,-98
800041cc:	00 00       	add	r0,r0
800041ce:	2a 40       	sub	r0,-92
800041d0:	80 00       	ld.sh	r0,r0[0x0]
800041d2:	3e dc       	mov	r12,-19
800041d4:	80 00       	ld.sh	r0,r0[0x0]
800041d6:	39 48       	mov	r8,-108
800041d8:	00 00       	add	r0,r0
800041da:	29 9c       	sub	r12,-103
800041dc:	80 00       	ld.sh	r0,r0[0x0]
800041de:	65 18       	ld.w	r8,r2[0x44]
800041e0:	00 00       	add	r0,r0
800041e2:	27 9c       	sub	r12,121
800041e4:	80 00       	ld.sh	r0,r0[0x0]
800041e6:	80 c0       	ld.uh	r0,r0[0x8]

800041e8 <file_open>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_open( uint8_t fopen_mode )
{
800041e8:	eb cd 40 c0 	pushm	r6-r7,lr
800041ec:	18 97       	mov	r7,r12
   if( !fat_check_mount_select_noopen())
800041ee:	f0 1f 00 18 	mcall	8000424c <file_open+0x64>
800041f2:	c2 b0       	breq	80004248 <file_open+0x60>
      return false;

   if( !fat_check_is_file())
800041f4:	f0 1f 00 17 	mcall	80004250 <file_open+0x68>
800041f8:	c2 80       	breq	80004248 <file_open+0x60>
      return false;

   if(FOPEN_WRITE_ACCESS & fopen_mode)
800041fa:	0e 96       	mov	r6,r7
800041fc:	0e 98       	mov	r8,r7
800041fe:	e2 18 00 02 	andl	r8,0x2,COH
80004202:	c0 a0       	breq	80004216 <file_open+0x2e>
   {
      if( !fat_check_nav_access_file( true ) )
80004204:	30 1c       	mov	r12,1
80004206:	f0 1f 00 14 	mcall	80004254 <file_open+0x6c>
8000420a:	c1 f0       	breq	80004248 <file_open+0x60>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
         return false;
      }
#else
      fs_g_status = FS_ERR_MODE_NOAVIALABLE;
8000420c:	31 f9       	mov	r9,31
8000420e:	49 38       	lddpc	r8,80004258 <file_open+0x70>
80004210:	b0 89       	st.b	r8[0x0],r9
80004212:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
      return false;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( false ) )
80004216:	30 0c       	mov	r12,0
80004218:	f0 1f 00 0f 	mcall	80004254 <file_open+0x6c>
8000421c:	c1 60       	breq	80004248 <file_open+0x60>
         return false;
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
8000421e:	0e 98       	mov	r8,r7
80004220:	e2 18 00 04 	andl	r8,0x4,COH
80004224:	c0 40       	breq	8000422c <file_open+0x44>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
80004226:	30 09       	mov	r9,0
80004228:	48 d8       	lddpc	r8,8000425c <file_open+0x74>
8000422a:	91 29       	st.w	r8[0x8],r9
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
8000422c:	e2 16 00 08 	andl	r6,0x8,COH
80004230:	c0 50       	breq	8000423a <file_open+0x52>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
80004232:	30 09       	mov	r9,0
80004234:	48 a8       	lddpc	r8,8000425c <file_open+0x74>
80004236:	91 39       	st.w	r8[0xc],r9
80004238:	c0 48       	rjmp	80004240 <file_open+0x58>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
8000423a:	48 98       	lddpc	r8,8000425c <file_open+0x74>
8000423c:	70 29       	ld.w	r9,r8[0x8]
8000423e:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
80004240:	48 78       	lddpc	r8,8000425c <file_open+0x74>
80004242:	b0 87       	st.b	r8[0x0],r7
80004244:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
   return true;
80004248:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
8000424c:	80 00       	ld.sh	r0,r0[0x0]
8000424e:	3b 8c       	mov	r12,-72
80004250:	80 00       	ld.sh	r0,r0[0x0]
80004252:	2b ec       	sub	r12,-66
80004254:	80 00       	ld.sh	r0,r0[0x0]
80004256:	32 a0       	mov	r0,42
80004258:	00 00       	add	r0,r0
8000425a:	29 e8       	sub	r8,-98
8000425c:	00 00       	add	r0,r0
8000425e:	27 60       	sub	r0,118

80004260 <nav_getindex>:
//! This routine is interesting to save a file position in small variable.
//! This pointer allow to reinit a navigator quickly with nav_gotoindex() routine.
//! @endverbatim
//!
Fs_index nav_getindex( void )
{
80004260:	20 3d       	sub	sp,12
   // Fill index structure
   index.u8_lun                  = fs_g_nav.u8_lun;
#if (FS_MULTI_PARTITION  ==  true)
   index.u8_partition            = fs_g_nav.u8_partition;
#endif
   index.u32_cluster_sel_dir     = fs_g_nav.u32_cluster_sel_dir;
80004262:	48 69       	lddpc	r9,80004278 <nav_getindex+0x18>
80004264:	72 8b       	ld.w	r11,r9[0x20]
   index.u16_entry_pos_sel_file  = fs_g_nav_fast.u16_entry_pos_sel_file;
80004266:	48 6a       	lddpc	r10,8000427c <nav_getindex+0x1c>
80004268:	94 1a       	ld.sh	r10,r10[0x2]
   return index;
8000426a:	13 89       	ld.ub	r9,r9[0x0]
8000426c:	b8 89       	st.b	r12[0x0],r9
8000426e:	99 1b       	st.w	r12[0x4],r11
80004270:	b8 4a       	st.h	r12[0x8],r10
}
80004272:	2f dd       	sub	sp,-12
80004274:	5e fc       	retal	r12
80004276:	00 00       	add	r0,r0
80004278:	00 00       	add	r0,r0
8000427a:	29 9c       	sub	r12,-103
8000427c:	00 00       	add	r0,r0
8000427e:	29 e4       	sub	r4,-98

80004280 <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
80004280:	d4 31       	pushm	r0-r7,lr
80004282:	20 1d       	sub	sp,4
80004284:	18 95       	mov	r5,r12
80004286:	16 96       	mov	r6,r11
80004288:	14 97       	mov	r7,r10
8000428a:	12 93       	mov	r3,r9
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;

   if ( !fat_check_mount_select())
8000428c:	f0 1f 00 2d 	mcall	80004340 <nav_file_name+0xc0>
80004290:	c5 50       	breq	8000433a <nav_file_name+0xba>
      return false;

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
80004292:	58 07       	cp.w	r7,0
80004294:	c0 50       	breq	8000429e <nav_file_name+0x1e>
80004296:	58 06       	cp.w	r6,0
80004298:	c0 31       	brne	8000429e <nav_file_name+0x1e>
8000429a:	30 1c       	mov	r12,1
8000429c:	c5 08       	rjmp	8000433c <nav_file_name+0xbc>
   {
      return true;
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
8000429e:	4a a8       	lddpc	r8,80004344 <nav_file_name+0xc4>
800042a0:	90 14       	ld.sh	r4,r8[0x2]
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
800042a2:	58 04       	cp.w	r4,0
800042a4:	c0 31       	brne	800042aa <nav_file_name+0x2a>
800042a6:	30 10       	mov	r0,1
800042a8:	c0 68       	rjmp	800042b4 <nav_file_name+0x34>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
800042aa:	08 99       	mov	r9,r4
800042ac:	20 19       	sub	r9,1
800042ae:	4a 68       	lddpc	r8,80004344 <nav_file_name+0xc4>
800042b0:	b0 19       	st.h	r8[0x2],r9
800042b2:	30 00       	mov	r0,0
800042b4:	30 09       	mov	r9,0
800042b6:	50 09       	stdsp	sp[0x0],r9
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
         return true;
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
800042b8:	31 01       	mov	r1,16
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
800042ba:	4a 32       	lddpc	r2,80004344 <nav_file_name+0xc4>
800042bc:	c0 28       	rjmp	800042c0 <nav_file_name+0x40>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
800042be:	30 10       	mov	r0,1

   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
800042c0:	f0 1f 00 22 	mcall	80004348 <nav_file_name+0xc8>
800042c4:	c3 b0       	breq	8000433a <nav_file_name+0xba>
         break; // error

      if ( b_readshortname )
800042c6:	58 00       	cp.w	r0,0
800042c8:	c0 70       	breq	800042d6 <nav_file_name+0x56>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
800042ca:	0e 9a       	mov	r10,r7
800042cc:	0c 9b       	mov	r11,r6
800042ce:	0a 9c       	mov	r12,r5
800042d0:	f0 1f 00 1f 	mcall	8000434c <nav_file_name+0xcc>
800042d4:	c3 48       	rjmp	8000433c <nav_file_name+0xbc>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
800042d6:	06 99       	mov	r9,r3
800042d8:	0e 9a       	mov	r10,r7
800042da:	0c 9b       	mov	r11,r6
800042dc:	0a 9c       	mov	r12,r5
800042de:	f0 1f 00 1d 	mcall	80004350 <nav_file_name+0xd0>
800042e2:	c0 f0       	breq	80004300 <nav_file_name+0x80>
      {
         if( g_b_string_length )
800042e4:	49 c8       	lddpc	r8,80004354 <nav_file_name+0xd4>
800042e6:	11 89       	ld.ub	r9,r8[0x0]
800042e8:	30 08       	mov	r8,0
800042ea:	f0 09 18 00 	cp.b	r9,r8
800042ee:	c0 50       	breq	800042f8 <nav_file_name+0x78>
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
800042f0:	8a 08       	ld.sh	r8,r5[0x0]
800042f2:	40 09       	lddsp	r9,sp[0x0]
800042f4:	12 08       	add	r8,r9
800042f6:	aa 08       	st.h	r5[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
800042f8:	49 38       	lddpc	r8,80004344 <nav_file_name+0xc4>
800042fa:	b0 14       	st.h	r8[0x2],r4
800042fc:	30 1c       	mov	r12,1
         return true;
800042fe:	c1 f8       	rjmp	8000433c <nav_file_name+0xbc>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80004300:	49 69       	lddpc	r9,80004358 <nav_file_name+0xd8>
80004302:	13 88       	ld.ub	r8,r9[0x0]
80004304:	e2 08 18 00 	cp.b	r8,r1
80004308:	c0 70       	breq	80004316 <nav_file_name+0x96>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
8000430a:	a4 14       	st.h	r2[0x2],r4

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
8000430c:	30 b9       	mov	r9,11
8000430e:	f2 08 18 00 	cp.b	r8,r9
80004312:	c1 41       	brne	8000433a <nav_file_name+0xba>
80004314:	cd 5b       	rjmp	800042be <nav_file_name+0x3e>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
80004316:	49 09       	lddpc	r9,80004354 <nav_file_name+0xd4>
80004318:	13 88       	ld.ub	r8,r9[0x0]
8000431a:	30 09       	mov	r9,0
8000431c:	f2 08 18 00 	cp.b	r8,r9
80004320:	c0 60       	breq	8000432c <nav_file_name+0xac>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
80004322:	40 08       	lddsp	r8,sp[0x0]
80004324:	2f 38       	sub	r8,-13
80004326:	5c 88       	casts.h	r8
80004328:	50 08       	stdsp	sp[0x0],r8
8000432a:	c0 48       	rjmp	80004332 <nav_file_name+0xb2>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
8000432c:	2f 35       	sub	r5,-13
         u8_size_max -= FS_SIZE_LFN_ENTRY;
8000432e:	20 d6       	sub	r6,13
80004330:	5c 56       	castu.b	r6
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80004332:	84 18       	ld.sh	r8,r2[0x2]
80004334:	20 18       	sub	r8,1
80004336:	a4 18       	st.h	r2[0x2],r8
80004338:	cc 4b       	rjmp	800042c0 <nav_file_name+0x40>
8000433a:	30 0c       	mov	r12,0

   }  // end of loop while(1)
   return false;
}
8000433c:	2f fd       	sub	sp,-4
8000433e:	d8 32       	popm	r0-r7,pc
80004340:	80 00       	ld.sh	r0,r0[0x0]
80004342:	3b 50       	mov	r0,-75
80004344:	00 00       	add	r0,r0
80004346:	29 e4       	sub	r4,-98
80004348:	80 00       	ld.sh	r0,r0[0x0]
8000434a:	38 c4       	mov	r4,-116
8000434c:	80 00       	ld.sh	r0,r0[0x0]
8000434e:	30 dc       	mov	r12,13
80004350:	80 00       	ld.sh	r0,r0[0x0]
80004352:	2f 48       	sub	r8,-12
80004354:	00 00       	add	r0,r0
80004356:	29 e9       	sub	r9,-98
80004358:	00 00       	add	r0,r0
8000435a:	29 e8       	sub	r8,-98

8000435c <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
bool  nav_filelist_set( uint16_t u16_nb , bool b_direction )
{
8000435c:	d4 31       	pushm	r0-r7,lr
8000435e:	20 4d       	sub	sp,16
80004360:	50 0c       	stdsp	sp[0x0],r12
80004362:	16 92       	mov	r2,r11
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   bool  b_save_entry_type;
   bool  b_find_last_entry = false;

   if ( !fat_check_mount_noopen())
80004364:	f0 1f 00 51 	mcall	800044a8 <nav_filelist_set+0x14c>
80004368:	e0 80 00 9e 	breq	800044a4 <nav_filelist_set+0x148>
      return false;

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
8000436c:	4d 08       	lddpc	r8,800044ac <nav_filelist_set+0x150>
8000436e:	90 18       	ld.sh	r8,r8[0x2]
80004370:	50 28       	stdsp	sp[0x8],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
80004372:	4d 08       	lddpc	r8,800044b0 <nav_filelist_set+0x154>
80004374:	f1 0a 00 24 	ld.sh	r10,r8[36]
80004378:	50 1a       	stdsp	sp[0x4],r10
   b_save_entry_type       = fs_g_nav.b_mode_nav;
8000437a:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000437e:	50 38       	stdsp	sp[0xc],r8
80004380:	30 03       	mov	r3,0
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
80004382:	4c b7       	lddpc	r7,800044ac <nav_filelist_set+0x150>
80004384:	3f f0       	mov	r0,-1
            break;
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
80004386:	4c b6       	lddpc	r6,800044b0 <nav_filelist_set+0x154>
80004388:	30 04       	mov	r4,0
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
8000438a:	3f e1       	mov	r1,-2
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000438c:	4c a5       	lddpc	r5,800044b4 <nav_filelist_set+0x158>
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
8000438e:	58 02       	cp.w	r2,0
80004390:	c0 31       	brne	80004396 <nav_filelist_set+0x3a>
80004392:	58 03       	cp.w	r3,0
80004394:	c0 c0       	breq	800043ac <nav_filelist_set+0x50>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
80004396:	8e 18       	ld.sh	r8,r7[0x2]
80004398:	e2 08 19 00 	cp.h	r8,r1
8000439c:	c0 51       	brne	800043a6 <nav_filelist_set+0x4a>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
8000439e:	30 89       	mov	r9,8
800043a0:	4c 58       	lddpc	r8,800044b4 <nav_filelist_set+0x158>
800043a2:	b0 89       	st.b	r8[0x0],r9
            break;
800043a4:	c7 38       	rjmp	8000448a <nav_filelist_set+0x12e>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
800043a6:	2f f8       	sub	r8,-1
800043a8:	ae 18       	st.h	r7[0x2],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
800043aa:	c1 d8       	rjmp	800043e4 <nav_filelist_set+0x88>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
800043ac:	8e 18       	ld.sh	r8,r7[0x2]
800043ae:	e0 08 19 00 	cp.h	r8,r0
800043b2:	c0 51       	brne	800043bc <nav_filelist_set+0x60>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
800043b4:	30 99       	mov	r9,9
800043b6:	4c 08       	lddpc	r8,800044b4 <nav_filelist_set+0x158>
800043b8:	b0 89       	st.b	r8[0x0],r9
            break;
800043ba:	c6 88       	rjmp	8000448a <nav_filelist_set+0x12e>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
800043bc:	58 08       	cp.w	r8,0
800043be:	c1 11       	brne	800043e0 <nav_filelist_set+0x84>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
800043c0:	ed 38 00 2c 	ld.ub	r8,r6[44]
800043c4:	e8 08 18 00 	cp.b	r8,r4
800043c8:	c0 80       	breq	800043d8 <nav_filelist_set+0x7c>
800043ca:	ed 38 00 2d 	ld.ub	r8,r6[45]
800043ce:	e8 08 18 00 	cp.b	r8,r4
800043d2:	c0 31       	brne	800043d8 <nav_filelist_set+0x7c>
800043d4:	30 13       	mov	r3,1
800043d6:	c0 78       	rjmp	800043e4 <nav_filelist_set+0x88>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
800043d8:	30 99       	mov	r9,9
800043da:	4b 78       	lddpc	r8,800044b4 <nav_filelist_set+0x158>
800043dc:	b0 89       	st.b	r8[0x0],r9
               break;
800043de:	c5 68       	rjmp	8000448a <nav_filelist_set+0x12e>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
800043e0:	20 18       	sub	r8,1
800043e2:	ae 18       	st.h	r7[0x2],r8
         }
      }

      if( !fat_read_dir())
800043e4:	f0 1f 00 35 	mcall	800044b8 <nav_filelist_set+0x15c>
800043e8:	c0 71       	brne	800043f6 <nav_filelist_set+0x9a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
800043ea:	0b 89       	ld.ub	r9,r5[0x0]
800043ec:	31 a8       	mov	r8,26
800043ee:	f0 09 18 00 	cp.b	r9,r8
800043f2:	c3 20       	breq	80004456 <nav_filelist_set+0xfa>
800043f4:	c4 b8       	rjmp	8000448a <nav_filelist_set+0x12e>
            break; // Error
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
800043f6:	ed 38 00 2c 	ld.ub	r8,r6[44]
800043fa:	e8 08 18 00 	cp.b	r8,r4
800043fe:	5f 1c       	srne	r12
80004400:	f0 1f 00 2f 	mcall	800044bc <nav_filelist_set+0x160>
80004404:	c1 c0       	breq	8000443c <nav_filelist_set+0xe0>
         {
           // HERE, the file entry match with the type searched

           if( b_find_last_entry )
80004406:	58 03       	cp.w	r3,0
80004408:	cc 31       	brne	8000438e <nav_filelist_set+0x32>
             continue;  // The search of last directory is on going then continue the search

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
8000440a:	58 02       	cp.w	r2,0
8000440c:	c0 70       	breq	8000441a <nav_filelist_set+0xbe>
              fs_g_nav.u16_pos_sel_file++;
8000440e:	ed 08 00 24 	ld.sh	r8,r6[36]
80004412:	2f f8       	sub	r8,-1
80004414:	ed 58 00 24 	st.h	r6[36],r8
80004418:	c0 68       	rjmp	80004424 <nav_filelist_set+0xc8>
           else
              fs_g_nav.u16_pos_sel_file--;
8000441a:	ed 08 00 24 	ld.sh	r8,r6[36]
8000441e:	20 18       	sub	r8,1
80004420:	ed 58 00 24 	st.h	r6[36],r8

           if (0 == u16_nb)
80004424:	40 09       	lddsp	r9,sp[0x0]
80004426:	58 09       	cp.w	r9,0
80004428:	c0 51       	brne	80004432 <nav_filelist_set+0xd6>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
8000442a:	f0 1f 00 26 	mcall	800044c0 <nav_filelist_set+0x164>
8000442e:	30 1c       	mov	r12,1
              return true;         // NB FILE FIND
80004430:	c3 a8       	rjmp	800044a4 <nav_filelist_set+0x148>
           }
           u16_nb--;
80004432:	40 08       	lddsp	r8,sp[0x0]
80004434:	20 18       	sub	r8,1
80004436:	5c 88       	casts.h	r8
80004438:	50 08       	stdsp	sp[0x0],r8
           continue;
8000443a:	ca ab       	rjmp	8000438e <nav_filelist_set+0x32>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
8000443c:	0b 88       	ld.ub	r8,r5[0x0]
8000443e:	30 a9       	mov	r9,10
80004440:	f2 08 18 00 	cp.b	r8,r9
80004444:	5f 09       	sreq	r9
80004446:	31 aa       	mov	r10,26
80004448:	f4 08 18 00 	cp.b	r8,r10
8000444c:	5f 08       	sreq	r8
8000444e:	10 49       	or	r9,r8
80004450:	e8 09 18 00 	cp.b	r9,r4
80004454:	c9 d0       	breq	8000438e <nav_filelist_set+0x32>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
80004456:	58 03       	cp.w	r3,0
80004458:	c0 50       	breq	80004462 <nav_filelist_set+0x106>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
            fs_g_nav.b_mode_nav = FS_DIR;
8000445a:	ed 64 00 2c 	st.b	r6[44],r4
8000445e:	30 03       	mov	r3,0
            continue;
80004460:	c9 7b       	rjmp	8000438e <nav_filelist_set+0x32>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
80004462:	ed 38 00 2c 	ld.ub	r8,r6[44]
80004466:	30 1a       	mov	r10,1
80004468:	f4 08 18 00 	cp.b	r8,r10
8000446c:	c0 60       	breq	80004478 <nav_filelist_set+0x11c>
8000446e:	ed 38 00 2d 	ld.ub	r8,r6[45]
80004472:	e8 08 18 00 	cp.b	r8,r4
80004476:	c0 50       	breq	80004480 <nav_filelist_set+0x124>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
80004478:	30 99       	mov	r9,9
8000447a:	48 f8       	lddpc	r8,800044b4 <nav_filelist_set+0x158>
8000447c:	b0 89       	st.b	r8[0x0],r9
            break;                        // end of search
8000447e:	c0 68       	rjmp	8000448a <nav_filelist_set+0x12e>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
80004480:	ae 10       	st.h	r7[0x2],r0
            fs_g_nav.b_mode_nav = FS_FILE;
80004482:	30 19       	mov	r9,1
80004484:	ed 69 00 2c 	st.b	r6[44],r9
80004488:	c8 3b       	rjmp	8000438e <nav_filelist_set+0x32>
         }
      }
   }  // end of loop while(1)

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
8000448a:	48 a8       	lddpc	r8,800044b0 <nav_filelist_set+0x154>
8000448c:	40 3a       	lddsp	r10,sp[0xc]
8000448e:	58 0a       	cp.w	r10,0
80004490:	5f 19       	srne	r9
80004492:	f1 69 00 2c 	st.b	r8[44],r9
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
80004496:	48 69       	lddpc	r9,800044ac <nav_filelist_set+0x150>
80004498:	40 2a       	lddsp	r10,sp[0x8]
8000449a:	b2 1a       	st.h	r9[0x2],r10
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
8000449c:	40 19       	lddsp	r9,sp[0x4]
8000449e:	f1 59 00 24 	st.h	r8[36],r9
800044a2:	30 0c       	mov	r12,0
   return false;
}
800044a4:	2f cd       	sub	sp,-16
800044a6:	d8 32       	popm	r0-r7,pc
800044a8:	80 00       	ld.sh	r0,r0[0x0]
800044aa:	3b b0       	mov	r0,-69
800044ac:	00 00       	add	r0,r0
800044ae:	29 e4       	sub	r4,-98
800044b0:	00 00       	add	r0,r0
800044b2:	29 9c       	sub	r12,-103
800044b4:	00 00       	add	r0,r0
800044b6:	29 e8       	sub	r8,-98
800044b8:	80 00       	ld.sh	r0,r0[0x0]
800044ba:	38 c4       	mov	r4,-116
800044bc:	80 00       	ld.sh	r0,r0[0x0]
800044be:	32 2c       	mov	r12,34
800044c0:	80 00       	ld.sh	r0,r0[0x0]
800044c2:	31 e4       	mov	r4,30

800044c4 <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
800044c4:	d4 21       	pushm	r4-r7,lr
800044c6:	18 95       	mov	r5,r12
800044c8:	16 94       	mov	r4,r11
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
800044ca:	30 16       	mov	r6,1
800044cc:	30 07       	mov	r7,0
800044ce:	0c 9b       	mov	r11,r6
800044d0:	0e 9c       	mov	r12,r7
800044d2:	f0 1f 00 07 	mcall	800044ec <nav_filelist_findname+0x28>
800044d6:	c0 90       	breq	800044e8 <nav_filelist_findname+0x24>
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
800044d8:	08 99       	mov	r9,r4
800044da:	0e 9a       	mov	r10,r7
800044dc:	0e 9b       	mov	r11,r7
800044de:	0a 9c       	mov	r12,r5
800044e0:	f0 1f 00 04 	mcall	800044f0 <nav_filelist_findname+0x2c>
800044e4:	cf 50       	breq	800044ce <nav_filelist_findname+0xa>
800044e6:	30 1c       	mov	r12,1
         return true;
   }
}
800044e8:	d8 22       	popm	r4-r7,pc
800044ea:	00 00       	add	r0,r0
800044ec:	80 00       	ld.sh	r0,r0[0x0]
800044ee:	43 5c       	lddsp	r12,sp[0xd4]
800044f0:	80 00       	ld.sh	r0,r0[0x0]
800044f2:	42 80       	lddsp	r0,sp[0xa0]

800044f4 <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
800044f4:	d4 01       	pushm	lr
   if ( !fat_check_mount_noopen())
800044f6:	f0 1f 00 04 	mcall	80004504 <nav_filelist_reset+0x10>
800044fa:	c0 40       	breq	80004502 <nav_filelist_reset+0xe>
      return false;

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
800044fc:	f0 1f 00 03 	mcall	80004508 <nav_filelist_reset+0x14>
80004500:	30 1c       	mov	r12,1
   return true;
}
80004502:	d8 02       	popm	pc
80004504:	80 00       	ld.sh	r0,r0[0x0]
80004506:	3b b0       	mov	r0,-69
80004508:	80 00       	ld.sh	r0,r0[0x0]
8000450a:	2e cc       	sub	r12,-20

8000450c <nav_dir_gotoparent>:
//! After, the file list changes and contains the files and directories of the new directory.
//! By default, the file selected in file list is the previous (children) directory.
//! @endverbatim
//!
bool  nav_dir_gotoparent( void )
{
8000450c:	d4 21       	pushm	r4-r7,lr
   uint32_t u32_cluster_old_dir;

   if (!fat_check_mount_noopen())
8000450e:	f0 1f 00 1f 	mcall	80004588 <nav_dir_gotoparent+0x7c>
80004512:	c3 80       	breq	80004582 <nav_dir_gotoparent+0x76>
      return false;

   if (0 == fs_g_nav.u32_cluster_sel_dir)
80004514:	49 e8       	lddpc	r8,8000458c <nav_dir_gotoparent+0x80>
80004516:	70 88       	ld.w	r8,r8[0x20]
80004518:	58 08       	cp.w	r8,0
8000451a:	c0 51       	brne	80004524 <nav_dir_gotoparent+0x18>
   {
      fs_g_status = FS_ERR_IS_ROOT;        // There aren't parent
8000451c:	31 99       	mov	r9,25
8000451e:	49 d8       	lddpc	r8,80004590 <nav_dir_gotoparent+0x84>
80004520:	b0 89       	st.b	r8[0x0],r9
80004522:	d8 2a       	popm	r4-r7,pc,r12=0
      return false;
   }

   // Select and read information about directory ".."
   fs_g_nav_fast.u16_entry_pos_sel_file = 1;
80004524:	30 19       	mov	r9,1
80004526:	49 c8       	lddpc	r8,80004594 <nav_dir_gotoparent+0x88>
80004528:	b0 19       	st.h	r8[0x2],r9
   if ( !fat_read_dir())
8000452a:	f0 1f 00 1c 	mcall	80004598 <nav_dir_gotoparent+0x8c>
8000452e:	c2 a0       	breq	80004582 <nav_dir_gotoparent+0x76>
      return false;
   fat_get_entry_info();
80004530:	f0 1f 00 1b 	mcall	8000459c <nav_dir_gotoparent+0x90>
   // Save the children directory cluster
   u32_cluster_old_dir = fs_g_nav.u32_cluster_sel_dir;
80004534:	49 68       	lddpc	r8,8000458c <nav_dir_gotoparent+0x80>
80004536:	70 87       	ld.w	r7,r8[0x20]

   // Select the parent directory via information present in the current directory ".."
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
80004538:	49 a9       	lddpc	r9,800045a0 <nav_dir_gotoparent+0x94>
8000453a:	72 19       	ld.w	r9,r9[0x4]
8000453c:	91 89       	st.w	r8[0x20],r9

   // Select the children directory in new directory (=parent directory)
   if( false == nav_filelist_reset())
8000453e:	f0 1f 00 1a 	mcall	800045a4 <nav_dir_gotoparent+0x98>
80004542:	c2 00       	breq	80004582 <nav_dir_gotoparent+0x76>
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
80004544:	49 28       	lddpc	r8,8000458c <nav_dir_gotoparent+0x80>
80004546:	f1 39 00 2d 	ld.ub	r9,r8[45]
8000454a:	30 08       	mov	r8,0
8000454c:	f0 09 18 00 	cp.b	r9,r8
80004550:	c0 d0       	breq	8000456a <nav_dir_gotoparent+0x5e>
80004552:	48 f8       	lddpc	r8,8000458c <nav_dir_gotoparent+0x80>
80004554:	f1 39 00 2c 	ld.ub	r9,r8[44]
80004558:	30 08       	mov	r8,0
8000455a:	f0 09 18 00 	cp.b	r9,r8
8000455e:	c0 60       	breq	8000456a <nav_dir_gotoparent+0x5e>
80004560:	c1 28       	rjmp	80004584 <nav_dir_gotoparent+0x78>
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
80004562:	6c 18       	ld.w	r8,r6[0x4]
80004564:	0e 38       	cp.w	r8,r7
80004566:	c0 51       	brne	80004570 <nav_dir_gotoparent+0x64>
80004568:	c0 e8       	rjmp	80004584 <nav_dir_gotoparent+0x78>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
8000456a:	30 15       	mov	r5,1
8000456c:	30 04       	mov	r4,0
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
8000456e:	48 d6       	lddpc	r6,800045a0 <nav_dir_gotoparent+0x94>
   if( false == nav_filelist_reset())
      return false;
   if( fs_g_nav.b_mode_nav_single && (FS_DIR != fs_g_nav.b_mode_nav) )
      return true;

   while( nav_filelist_set( 0 , FS_FIND_NEXT ) )
80004570:	0a 9b       	mov	r11,r5
80004572:	08 9c       	mov	r12,r4
80004574:	f0 1f 00 0d 	mcall	800045a8 <nav_dir_gotoparent+0x9c>
80004578:	cf 51       	brne	80004562 <nav_dir_gotoparent+0x56>
   {
      if (fs_g_nav_entry.u32_cluster == u32_cluster_old_dir)
         return true;         // It is the children directory
   }
   fs_g_status = FS_ERR_FS;
8000457a:	30 89       	mov	r9,8
8000457c:	48 58       	lddpc	r8,80004590 <nav_dir_gotoparent+0x84>
8000457e:	b0 89       	st.b	r8[0x0],r9
   return false;
80004580:	d8 22       	popm	r4-r7,pc
80004582:	d8 2a       	popm	r4-r7,pc,r12=0
80004584:	da 2a       	popm	r4-r7,pc,r12=1
80004586:	00 00       	add	r0,r0
80004588:	80 00       	ld.sh	r0,r0[0x0]
8000458a:	3b b0       	mov	r0,-69
8000458c:	00 00       	add	r0,r0
8000458e:	29 9c       	sub	r12,-103
80004590:	00 00       	add	r0,r0
80004592:	29 e8       	sub	r8,-98
80004594:	00 00       	add	r0,r0
80004596:	29 e4       	sub	r4,-98
80004598:	80 00       	ld.sh	r0,r0[0x0]
8000459a:	38 c4       	mov	r4,-116
8000459c:	80 00       	ld.sh	r0,r0[0x0]
8000459e:	31 e4       	mov	r4,30
800045a0:	00 00       	add	r0,r0
800045a2:	27 60       	sub	r0,118
800045a4:	80 00       	ld.sh	r0,r0[0x0]
800045a6:	44 f4       	lddsp	r4,sp[0x13c]
800045a8:	80 00       	ld.sh	r0,r0[0x0]
800045aa:	43 5c       	lddsp	r12,sp[0xd4]

800045ac <nav_dir_cd>:
//! After this routine the file list changes and contains the files and directories of the new directory.
//! By default no file is selected.
//! @endverbatim
//!
bool  nav_dir_cd( void )
{
800045ac:	d4 01       	pushm	lr
   if ( !fat_check_mount_select_noopen())
800045ae:	f0 1f 00 0a 	mcall	800045d4 <nav_dir_cd+0x28>
800045b2:	c0 f0       	breq	800045d0 <nav_dir_cd+0x24>
      return false;

   // The current selection, is it a directory ?
   if ( !fat_entry_is_dir())
800045b4:	f0 1f 00 09 	mcall	800045d8 <nav_dir_cd+0x2c>
800045b8:	c0 c0       	breq	800045d0 <nav_dir_cd+0x24>
      return false;

   // Select the current directory
   fs_g_nav.u16_entry_pos_sel_dir = fs_g_nav_fast.u16_entry_pos_sel_file;
800045ba:	48 98       	lddpc	r8,800045dc <nav_dir_cd+0x30>
800045bc:	48 99       	lddpc	r9,800045e0 <nav_dir_cd+0x34>
800045be:	92 19       	ld.sh	r9,r9[0x2]
800045c0:	f1 59 00 1c 	st.h	r8[28],r9
   fs_g_nav.u32_cluster_sel_dir = fs_g_nav_entry.u32_cluster;
800045c4:	48 89       	lddpc	r9,800045e4 <nav_dir_cd+0x38>
800045c6:	72 19       	ld.w	r9,r9[0x4]
800045c8:	91 89       	st.w	r8[0x20],r9

   // Reset file list
   if( false == nav_filelist_reset())
800045ca:	f0 1f 00 08 	mcall	800045e8 <nav_dir_cd+0x3c>
800045ce:	d8 02       	popm	pc
800045d0:	d8 0a       	popm	pc,r12=0
800045d2:	00 00       	add	r0,r0
800045d4:	80 00       	ld.sh	r0,r0[0x0]
800045d6:	3b 8c       	mov	r12,-72
800045d8:	80 00       	ld.sh	r0,r0[0x0]
800045da:	2e b4       	sub	r4,-21
800045dc:	00 00       	add	r0,r0
800045de:	29 9c       	sub	r12,-103
800045e0:	00 00       	add	r0,r0
800045e2:	29 e4       	sub	r4,-98
800045e4:	00 00       	add	r0,r0
800045e6:	27 60       	sub	r0,118
800045e8:	80 00       	ld.sh	r0,r0[0x0]
800045ea:	44 f4       	lddsp	r4,sp[0x13c]

800045ec <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
800045ec:	d4 01       	pushm	lr
   if ( !fat_check_noopen() )
800045ee:	f0 1f 00 0a 	mcall	80004614 <nav_partition_mount+0x28>
800045f2:	c0 f0       	breq	80004610 <nav_partition_mount+0x24>
      return false;

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
800045f4:	48 98       	lddpc	r8,80004618 <nav_partition_mount+0x2c>
800045f6:	11 89       	ld.ub	r9,r8[0x0]
800045f8:	30 08       	mov	r8,0
800045fa:	f0 09 18 00 	cp.b	r9,r8
800045fe:	c0 70       	breq	8000460c <nav_partition_mount+0x20>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
80004600:	30 09       	mov	r9,0
80004602:	48 78       	lddpc	r8,8000461c <nav_partition_mount+0x30>
80004604:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
80004606:	f0 1f 00 07 	mcall	80004620 <nav_partition_mount+0x34>
8000460a:	da 0a       	popm	pc,r12=1
      return true;
   }

   return fat_mount();
8000460c:	f0 1f 00 06 	mcall	80004624 <nav_partition_mount+0x38>
}
80004610:	d8 02       	popm	pc
80004612:	00 00       	add	r0,r0
80004614:	80 00       	ld.sh	r0,r0[0x0]
80004616:	3a dc       	mov	r12,-83
80004618:	00 00       	add	r0,r0
8000461a:	29 e4       	sub	r4,-98
8000461c:	00 00       	add	r0,r0
8000461e:	29 9c       	sub	r12,-103
80004620:	80 00       	ld.sh	r0,r0[0x0]
80004622:	2e cc       	sub	r12,-20
80004624:	80 00       	ld.sh	r0,r0[0x0]
80004626:	3b c8       	mov	r8,-68

80004628 <nav_dir_root>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_dir_root( void )
{
80004628:	d4 01       	pushm	lr
   return nav_partition_mount();
8000462a:	f0 1f 00 02 	mcall	80004630 <nav_dir_root+0x8>
}
8000462e:	d8 02       	popm	pc
80004630:	80 00       	ld.sh	r0,r0[0x0]
80004632:	45 ec       	lddsp	r12,sp[0x178]

80004634 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_drive_set( uint8_t u8_number )
{
80004634:	eb cd 40 80 	pushm	r7,lr
80004638:	18 97       	mov	r7,r12
   if ( !fat_check_noopen() )
8000463a:	f0 1f 00 0f 	mcall	80004674 <nav_drive_set+0x40>
8000463e:	c1 90       	breq	80004670 <nav_drive_set+0x3c>
      return false;

   if (u8_number >= get_nb_lun() )
80004640:	f0 1f 00 0e 	mcall	80004678 <nav_drive_set+0x44>
80004644:	ee 0c 18 00 	cp.b	r12,r7
80004648:	e0 8b 00 07 	brhi	80004656 <nav_drive_set+0x22>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
8000464c:	30 69       	mov	r9,6
8000464e:	48 c8       	lddpc	r8,8000467c <nav_drive_set+0x48>
80004650:	b0 89       	st.b	r8[0x0],r9
80004652:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }

   if ( fs_g_nav.u8_lun == u8_number)
80004656:	48 b8       	lddpc	r8,80004680 <nav_drive_set+0x4c>
80004658:	11 88       	ld.ub	r8,r8[0x0]
8000465a:	ee 08 18 00 	cp.b	r8,r7
8000465e:	c0 31       	brne	80004664 <nav_drive_set+0x30>
80004660:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
      return true;   // It is the same drive number

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
80004664:	48 78       	lddpc	r8,80004680 <nav_drive_set+0x4c>
80004666:	b0 87       	st.b	r8[0x0],r7
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80004668:	30 09       	mov	r9,0
8000466a:	48 78       	lddpc	r8,80004684 <nav_drive_set+0x50>
8000466c:	b0 89       	st.b	r8[0x0],r9
8000466e:	30 1c       	mov	r12,1
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
}
80004670:	e3 cd 80 80 	ldm	sp++,r7,pc
80004674:	80 00       	ld.sh	r0,r0[0x0]
80004676:	3a dc       	mov	r12,-83
80004678:	80 00       	ld.sh	r0,r0[0x0]
8000467a:	64 48       	ld.w	r8,r2[0x10]
8000467c:	00 00       	add	r0,r0
8000467e:	29 e8       	sub	r8,-98
80004680:	00 00       	add	r0,r0
80004682:	29 9c       	sub	r12,-103
80004684:	00 00       	add	r0,r0
80004686:	29 e4       	sub	r4,-98

80004688 <nav_gotoindex>:
//! This routine allow to reinit a navigator quickly via a file index (disk, partition, dir, file/dir selected )
//! To get a file index, you shall used the routine nav_getindex().
//! @endverbatim
//!
bool  nav_gotoindex( const Fs_index _MEM_TYPE_SLOW_ *index )
{
80004688:	d4 21       	pushm	r4-r7,lr
8000468a:	18 97       	mov	r7,r12
   // Select the drive and partition corresponding at file index
   if( !nav_drive_set( index->u8_lun ))
8000468c:	19 8c       	ld.ub	r12,r12[0x0]
8000468e:	f0 1f 00 10 	mcall	800046cc <nav_gotoindex+0x44>
80004692:	c1 c0       	breq	800046ca <nav_gotoindex+0x42>
      return false;
#if (FS_MULTI_PARTITION  ==  true)
   if( !nav_partition_set(index->u8_partition))
      return false;
#endif
   if( !nav_partition_mount())
80004694:	f0 1f 00 0f 	mcall	800046d0 <nav_gotoindex+0x48>
80004698:	c1 90       	breq	800046ca <nav_gotoindex+0x42>
      return false;

   // Select the directory corresponding at file index
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;
8000469a:	6e 19       	ld.w	r9,r7[0x4]
8000469c:	48 e8       	lddpc	r8,800046d4 <nav_gotoindex+0x4c>
8000469e:	91 89       	st.w	r8[0x20],r9

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
800046a0:	f0 1f 00 0e 	mcall	800046d8 <nav_gotoindex+0x50>
800046a4:	c0 a1       	brne	800046b8 <nav_gotoindex+0x30>
800046a6:	c1 28       	rjmp	800046ca <nav_gotoindex+0x42>
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
800046a8:	0a 9b       	mov	r11,r5
800046aa:	08 9c       	mov	r12,r4
800046ac:	f0 1f 00 0c 	mcall	800046dc <nav_gotoindex+0x54>
800046b0:	c0 71       	brne	800046be <nav_gotoindex+0x36>
      {
         nav_filelist_reset();
800046b2:	f0 1f 00 0a 	mcall	800046d8 <nav_gotoindex+0x50>
800046b6:	d8 2a       	popm	r4-r7,pc,r12=0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
800046b8:	48 a6       	lddpc	r6,800046e0 <nav_gotoindex+0x58>
   {
      if( !nav_filelist_set( 0 , FS_FIND_NEXT ) )
800046ba:	30 15       	mov	r5,1
800046bc:	30 04       	mov	r4,0
   fs_g_nav.u32_cluster_sel_dir   = index->u32_cluster_sel_dir;

   // Search the file position corresponding at file index
   if ( !nav_filelist_reset())
      return false;
   while( fs_g_nav_fast.u16_entry_pos_sel_file != index->u16_entry_pos_sel_file )
800046be:	8c 19       	ld.sh	r9,r6[0x2]
800046c0:	8e 48       	ld.sh	r8,r7[0x8]
800046c2:	f0 09 19 00 	cp.h	r9,r8
800046c6:	cf 11       	brne	800046a8 <nav_gotoindex+0x20>
800046c8:	da 2a       	popm	r4-r7,pc,r12=1
800046ca:	d8 2a       	popm	r4-r7,pc,r12=0
800046cc:	80 00       	ld.sh	r0,r0[0x0]
800046ce:	46 34       	lddsp	r4,sp[0x18c]
800046d0:	80 00       	ld.sh	r0,r0[0x0]
800046d2:	45 ec       	lddsp	r12,sp[0x178]
800046d4:	00 00       	add	r0,r0
800046d6:	29 9c       	sub	r12,-103
800046d8:	80 00       	ld.sh	r0,r0[0x0]
800046da:	44 f4       	lddsp	r4,sp[0x13c]
800046dc:	80 00       	ld.sh	r0,r0[0x0]
800046de:	43 5c       	lddsp	r12,sp[0xd4]
800046e0:	00 00       	add	r0,r0
800046e2:	29 e4       	sub	r4,-98

800046e4 <nav_setcwd>:
//! With syntax "./dir_parent/directory_name"  the file list corresponding at "dir_parent" and "directory_name" is selected.
//! With syntax "./dir_parent/directory_name/" the file list corresponding at "directory_name" and no file is selected.
//! @endverbatim
//!
bool  nav_setcwd( FS_STRING sz_path , bool b_match_case , bool b_create )
{
800046e4:	d4 31       	pushm	r0-r7,lr
800046e6:	20 6d       	sub	sp,24
800046e8:	18 97       	mov	r7,r12
800046ea:	16 91       	mov	r1,r11
800046ec:	14 90       	mov	r0,r10
    (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET))
   FS_STRING sz_save_path = 0;
#endif
   bool b_create_name = false;

   if ( !fat_check_noopen())
800046ee:	f0 1f 00 5d 	mcall	80004860 <nav_setcwd+0x17c>
800046f2:	e0 80 00 b4 	breq	8000485a <nav_setcwd+0x176>
      return false;

   index = nav_getindex();             // Save current position
800046f6:	1a 96       	mov	r6,sp
800046f8:	1a 9c       	mov	r12,sp
800046fa:	f0 1f 00 5b 	mcall	80004864 <nav_setcwd+0x180>
800046fe:	fa c8 ff f4 	sub	r8,sp,-12
80004702:	fa ea 00 00 	ld.d	r10,sp[0]
80004706:	f0 eb 00 00 	st.d	r8[0],r10
8000470a:	40 29       	lddsp	r9,sp[0x8]
8000470c:	91 29       	st.w	r8[0x8],r9

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
8000470e:	0f 88       	ld.ub	r8,r7[0x0]
      return false;

   index = nav_getindex();             // Save current position

   // Check syntax "\path..."
   if( (( Is_unicode) && (('\\'  == ((FS_STR_UNICODE)sz_path )[0]) || ('/'  == ((FS_STR_UNICODE)sz_path )[0])) )
80004710:	35 c9       	mov	r9,92
80004712:	f2 08 18 00 	cp.b	r8,r9
80004716:	5f 0a       	sreq	r10
80004718:	32 f9       	mov	r9,47
8000471a:	f2 08 18 00 	cp.b	r8,r9
8000471e:	5f 09       	sreq	r9
80004720:	f5 e9 10 09 	or	r9,r10,r9
80004724:	c0 70       	breq	80004732 <nav_setcwd+0x4e>
   ||  ((!Is_unicode) && (('\\'  == sz_path [0]) || ('/'  == sz_path [0])) ) )
   {
      // Go to the root of current drive
      if( !nav_dir_root())
80004726:	f0 1f 00 51 	mcall	80004868 <nav_setcwd+0x184>
8000472a:	e0 80 00 93 	breq	80004850 <nav_setcwd+0x16c>
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
8000472e:	2f f7       	sub	r7,-1
80004730:	c5 e8       	rjmp	800047ec <nav_setcwd+0x108>
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
80004732:	0f 99       	ld.ub	r9,r7[0x1]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80004734:	33 aa       	mov	r10,58
80004736:	f4 09 18 00 	cp.b	r9,r10
8000473a:	c2 01       	brne	8000477a <nav_setcwd+0x96>
   ||  ((!Is_unicode) && (( ':'  == sz_path [1] ) && (('\\'  == sz_path [2] ) || ('/'  == sz_path [2]))) ) )
8000473c:	0f aa       	ld.ub	r10,r7[0x2]
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
8000473e:	35 cb       	mov	r11,92
80004740:	f6 0a 18 00 	cp.b	r10,r11
80004744:	5f 0b       	sreq	r11
80004746:	32 fc       	mov	r12,47
80004748:	f8 0a 18 00 	cp.b	r10,r12
8000474c:	5f 0a       	sreq	r10
8000474e:	f7 ea 10 0a 	or	r10,r11,r10
80004752:	c1 40       	breq	8000477a <nav_setcwd+0x96>
      if( Is_unicode )
      {
         if( !nav_drive_set( toupper(((FS_STR_UNICODE)sz_path )[0])-'A' ) )
            goto nav_setcwd_fail;
      }else{
         if( !nav_drive_set( toupper(sz_path [0])-'A' ) )
80004754:	4c 69       	lddpc	r9,8000486c <nav_setcwd+0x188>
80004756:	72 09       	ld.w	r9,r9[0x0]
80004758:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000475c:	e2 19 00 02 	andl	r9,0x2,COH
80004760:	c0 20       	breq	80004764 <nav_setcwd+0x80>
80004762:	22 08       	sub	r8,32
80004764:	24 18       	sub	r8,65
80004766:	f9 d8 c0 08 	bfextu	r12,r8,0x0,0x8
8000476a:	f0 1f 00 42 	mcall	80004870 <nav_setcwd+0x18c>
8000476e:	c7 10       	breq	80004850 <nav_setcwd+0x16c>
            goto nav_setcwd_fail;
      }
      if( !nav_partition_mount())
80004770:	f0 1f 00 41 	mcall	80004874 <nav_setcwd+0x190>
80004774:	c6 e0       	breq	80004850 <nav_setcwd+0x16c>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
80004776:	2f d7       	sub	r7,-3
         goto nav_setcwd_fail;
      sz_path  += (Is_unicode? 2 : 1 );
   }else

   // Check syntax "x:\path..."
   if( (( Is_unicode) && (( ':'  == ((FS_STR_UNICODE)sz_path )[1] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[2] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[2]))) )
80004778:	c3 a8       	rjmp	800047ec <nav_setcwd+0x108>
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
8000477a:	32 ea       	mov	r10,46
8000477c:	f4 08 18 00 	cp.b	r8,r10
80004780:	c1 a1       	brne	800047b4 <nav_setcwd+0xd0>
80004782:	35 c8       	mov	r8,92
80004784:	f0 09 18 00 	cp.b	r9,r8
80004788:	5f 0a       	sreq	r10
8000478a:	32 f8       	mov	r8,47
8000478c:	f0 09 18 00 	cp.b	r9,r8
80004790:	5f 08       	sreq	r8
80004792:	f5 e8 10 08 	or	r8,r10,r8
80004796:	c0 f0       	breq	800047b4 <nav_setcwd+0xd0>
   ||  ((!Is_unicode) && (( '.'  == sz_path [0] ) && (('\\'  == sz_path [1] ) || ('/'  == sz_path [1] ))) ) )
   {
      // Search in current directory
      sz_path  += 2*(Is_unicode? 2 : 1 );
80004798:	2f e7       	sub	r7,-2
         goto nav_setcwd_fail;
      sz_path  += 3*(Is_unicode? 2 : 1 );
   }else

   // Check syntax ".\path..."
   if( (( Is_unicode) && (( '.'  == ((FS_STR_UNICODE)sz_path )[0] ) && (('\\'  == ((FS_STR_UNICODE)sz_path )[1] ) || ('/'  == ((FS_STR_UNICODE)sz_path )[1] ))) )
8000479a:	c2 98       	rjmp	800047ec <nav_setcwd+0x108>
         while(( '.'  == sz_path [0] )
         &&    ( '.'  == sz_path [1] )
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
         {
         // Go to parent directory
         if( !nav_dir_gotoparent() )
8000479c:	f0 1f 00 37 	mcall	80004878 <nav_setcwd+0x194>
800047a0:	c5 80       	breq	80004850 <nav_setcwd+0x16c>
            goto nav_setcwd_fail;
            sz_path  += 2; // jump ".."
            if( 0 != sz_path [0])
800047a2:	0d 88       	ld.ub	r8,r6[0x0]
800047a4:	e8 08 18 00 	cp.b	r8,r4
800047a8:	c0 31       	brne	800047ae <nav_setcwd+0xca>
800047aa:	0c 97       	mov	r7,r6
800047ac:	c0 88       	rjmp	800047bc <nav_setcwd+0xd8>
               sz_path  +=1; // jump "/"
800047ae:	ec c7 ff ff 	sub	r7,r6,-1
800047b2:	c0 58       	rjmp	800047bc <nav_setcwd+0xd8>
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
800047b4:	32 e5       	mov	r5,46
800047b6:	35 c3       	mov	r3,92
800047b8:	32 f2       	mov	r2,47
800047ba:	30 04       	mov	r4,0
800047bc:	0f 88       	ld.ub	r8,r7[0x0]
800047be:	ea 08 18 00 	cp.b	r8,r5
800047c2:	c1 51       	brne	800047ec <nav_setcwd+0x108>
         &&    ( '.'  == sz_path [1] )
800047c4:	0f 98       	ld.ub	r8,r7[0x1]
800047c6:	ea 08 18 00 	cp.b	r8,r5
800047ca:	c1 11       	brne	800047ec <nav_setcwd+0x108>
         &&    (('\\'  == sz_path [2]) || ('/'  == sz_path [2]) || (0  == sz_path [2])) )
800047cc:	ee c6 ff fe 	sub	r6,r7,-2
800047d0:	0d 88       	ld.ub	r8,r6[0x0]
            sz_path  += (2*2); // jump ".."
            if( 0 != ((FS_STR_UNICODE)sz_path )[0])
               sz_path  += (2*1); // jump "/"
         }
      }else{
         while(( '.'  == sz_path [0] )
800047d2:	e6 08 18 00 	cp.b	r8,r3
800047d6:	5f 0a       	sreq	r10
800047d8:	e4 08 18 00 	cp.b	r8,r2
800047dc:	5f 09       	sreq	r9
800047de:	f5 e9 10 09 	or	r9,r10,r9
800047e2:	e8 09 18 00 	cp.b	r9,r4
800047e6:	cd b1       	brne	8000479c <nav_setcwd+0xb8>
800047e8:	58 08       	cp.w	r8,0
800047ea:	cd 90       	breq	8000479c <nav_setcwd+0xb8>
         }
      }
   }

   // Reset list to start the search at the beginning
   if( !nav_filelist_reset())
800047ec:	f0 1f 00 24 	mcall	8000487c <nav_setcwd+0x198>
800047f0:	c3 00       	breq	80004850 <nav_setcwd+0x16c>
800047f2:	30 03       	mov	r3,0
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
800047f4:	30 06       	mov	r6,0
         return true;   // path (without file) is found or create
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
      {
         // The file or directory is not found
         if( !b_create )
800047f6:	30 12       	mov	r2,1
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
800047f8:	35 c5       	mov	r5,92
800047fa:	32 f4       	mov	r4,47
      goto nav_setcwd_fail;

   while( 1 )
   {
      if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
      ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
800047fc:	0f 88       	ld.ub	r8,r7[0x0]
800047fe:	ec 08 18 00 	cp.b	r8,r6
80004802:	c0 31       	brne	80004808 <nav_setcwd+0x124>
80004804:	30 1c       	mov	r12,1
80004806:	c2 a8       	rjmp	8000485a <nav_setcwd+0x176>
      {
         return true;   // path (without file) is found or create
      }
      if( !nav_filelist_findname( sz_path  , b_match_case  ))
80004808:	02 9b       	mov	r11,r1
8000480a:	0e 9c       	mov	r12,r7
8000480c:	f0 1f 00 1d 	mcall	80004880 <nav_setcwd+0x19c>
80004810:	c0 41       	brne	80004818 <nav_setcwd+0x134>
      {
         // The file or directory is not found
         if( !b_create )
80004812:	58 00       	cp.w	r0,0
80004814:	c1 e0       	breq	80004850 <nav_setcwd+0x16c>
80004816:	04 93       	mov	r3,r2
#endif
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
80004818:	2f f7       	sub	r7,-1
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
8000481a:	0f 88       	ld.ub	r8,r7[0x0]
      }

      while( 1 )
      {
         sz_path  += (Is_unicode? 2 : 1 );
         if( (( Is_unicode) && ( 0 == ((FS_STR_UNICODE)sz_path )[0] ) )
8000481c:	58 08       	cp.w	r8,0
8000481e:	c0 41       	brne	80004826 <nav_setcwd+0x142>
         ||  ((!Is_unicode) && ( 0 == sz_path [0] ) ) )
         {
            // Is it the last name of path and it is a file
            if( b_create_name )
80004820:	58 03       	cp.w	r3,0
80004822:	ce d0       	breq	800047fc <nav_setcwd+0x118>
80004824:	c1 68       	rjmp	80004850 <nav_setcwd+0x16c>
#endif
            }
            break;   // The file include in path is found or created, then end of set_cwd
         }

         if( (( Is_unicode) && (('\\' == ((FS_STR_UNICODE)sz_path )[0] ) || ('/' == ((FS_STR_UNICODE)sz_path )[0] )) )
80004826:	ea 08 18 00 	cp.b	r8,r5
8000482a:	5f 09       	sreq	r9
8000482c:	e8 08 18 00 	cp.b	r8,r4
80004830:	5f 08       	sreq	r8
80004832:	f3 e8 10 08 	or	r8,r9,r8
80004836:	ec 08 18 00 	cp.b	r8,r6
8000483a:	ce f0       	breq	80004818 <nav_setcwd+0x134>
         ||  ((!Is_unicode) && (('\\' == sz_path [0] ) || ('/' == sz_path [0] )) ) )
         {
            // Is it a folder name
            if( b_create_name )
8000483c:	58 03       	cp.w	r3,0
8000483e:	c0 91       	brne	80004850 <nav_setcwd+0x16c>
                  goto nav_setcwd_fail;
#else
               goto nav_setcwd_fail;
#endif
            }
            if( !fat_entry_is_dir() )
80004840:	f0 1f 00 11 	mcall	80004884 <nav_setcwd+0x1a0>
80004844:	c0 60       	breq	80004850 <nav_setcwd+0x16c>
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
            if( !nav_dir_cd())
80004846:	f0 1f 00 11 	mcall	80004888 <nav_setcwd+0x1a4>
8000484a:	c0 30       	breq	80004850 <nav_setcwd+0x16c>
#endif
            }
            if( !fat_entry_is_dir() )
               goto nav_setcwd_fail;
            // jump '\'
            sz_path  += (Is_unicode? 2 : 1 );
8000484c:	2f f7       	sub	r7,-1
8000484e:	cd 7b       	rjmp	800047fc <nav_setcwd+0x118>
      }

   }

nav_setcwd_fail:
   nav_gotoindex( &index );   // Restore the position
80004850:	fa cc ff f4 	sub	r12,sp,-12
80004854:	f0 1f 00 0e 	mcall	8000488c <nav_setcwd+0x1a8>
80004858:	30 0c       	mov	r12,0
   return false;
}
8000485a:	2f ad       	sub	sp,-24
8000485c:	d8 32       	popm	r0-r7,pc
8000485e:	00 00       	add	r0,r0
80004860:	80 00       	ld.sh	r0,r0[0x0]
80004862:	3a dc       	mov	r12,-83
80004864:	80 00       	ld.sh	r0,r0[0x0]
80004866:	42 60       	lddsp	r0,sp[0x98]
80004868:	80 00       	ld.sh	r0,r0[0x0]
8000486a:	46 28       	lddsp	r8,sp[0x188]
8000486c:	00 00       	add	r0,r0
8000486e:	01 68       	ld.uh	r8,--r0
80004870:	80 00       	ld.sh	r0,r0[0x0]
80004872:	46 34       	lddsp	r4,sp[0x18c]
80004874:	80 00       	ld.sh	r0,r0[0x0]
80004876:	45 ec       	lddsp	r12,sp[0x178]
80004878:	80 00       	ld.sh	r0,r0[0x0]
8000487a:	45 0c       	lddsp	r12,sp[0x140]
8000487c:	80 00       	ld.sh	r0,r0[0x0]
8000487e:	44 f4       	lddsp	r4,sp[0x13c]
80004880:	80 00       	ld.sh	r0,r0[0x0]
80004882:	44 c4       	lddsp	r4,sp[0x130]
80004884:	80 00       	ld.sh	r0,r0[0x0]
80004886:	2e b4       	sub	r4,-21
80004888:	80 00       	ld.sh	r0,r0[0x0]
8000488a:	45 ac       	lddsp	r12,sp[0x168]
8000488c:	80 00       	ld.sh	r0,r0[0x0]
8000488e:	46 88       	lddsp	r8,sp[0x1a0]

80004890 <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
bool  nav_select( uint8_t u8_idnav )
{
80004890:	eb cd 40 80 	pushm	r7,lr
80004894:	18 97       	mov	r7,r12
   if( FS_NB_NAVIGATOR <= u8_idnav )
80004896:	30 18       	mov	r8,1
80004898:	f0 0c 18 00 	cp.b	r12,r8
8000489c:	e0 88 00 07 	brls	800048aa <nav_select+0x1a>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
800048a0:	32 79       	mov	r9,39
800048a2:	48 b8       	lddpc	r8,800048cc <nav_select+0x3c>
800048a4:	b0 89       	st.b	r8[0x0],r9
800048a6:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
      return false;
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
800048aa:	48 a8       	lddpc	r8,800048d0 <nav_select+0x40>
800048ac:	11 8c       	ld.ub	r12,r8[0x0]
800048ae:	ee 0c 18 00 	cp.b	r12,r7
800048b2:	c0 31       	brne	800048b8 <nav_select+0x28>
800048b4:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
800048b8:	f0 1f 00 07 	mcall	800048d4 <nav_select+0x44>
      fat_invert_nav( u8_idnav );               // Select new navigator
800048bc:	0e 9c       	mov	r12,r7
800048be:	f0 1f 00 06 	mcall	800048d4 <nav_select+0x44>
      fs_g_u8_nav_selected = u8_idnav;
800048c2:	48 48       	lddpc	r8,800048d0 <nav_select+0x40>
800048c4:	b0 87       	st.b	r8[0x0],r7
800048c6:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
800048ca:	00 00       	add	r0,r0
800048cc:	00 00       	add	r0,r0
800048ce:	29 e8       	sub	r8,-98
800048d0:	00 00       	add	r0,r0
800048d2:	2a 48       	sub	r8,-92
800048d4:	80 00       	ld.sh	r0,r0[0x0]
800048d6:	33 18       	mov	r8,49

800048d8 <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
800048d8:	eb cd 40 f8 	pushm	r3-r7,lr
#if ( (FS_ASCII   == true) && (FS_UNICODE == true))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
800048dc:	30 07       	mov	r7,0
800048de:	49 18       	lddpc	r8,80004920 <nav_reset+0x48>
800048e0:	b0 87       	st.b	r8[0x0],r7
   g_b_no_check_disk = false;
800048e2:	49 18       	lddpc	r8,80004924 <nav_reset+0x4c>
800048e4:	b0 87       	st.b	r8[0x0],r7

   fat_cache_reset();
800048e6:	f0 1f 00 11 	mcall	80004928 <nav_reset+0x50>
   fat_cache_clusterlist_reset();
800048ea:	f0 1f 00 11 	mcall	8000492c <nav_reset+0x54>
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
800048ee:	30 0c       	mov	r12,0
800048f0:	f0 1f 00 10 	mcall	80004930 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
800048f4:	49 03       	lddpc	r3,80004934 <nav_reset+0x5c>
800048f6:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
800048f8:	49 05       	lddpc	r5,80004938 <nav_reset+0x60>
800048fa:	3f f4       	mov	r4,-1
800048fc:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
800048fe:	49 06       	lddpc	r6,8000493c <nav_reset+0x64>
80004900:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80004902:	eb 67 00 2d 	st.b	r5[45],r7
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
   {
      nav_select(i);
80004906:	30 1c       	mov	r12,1
80004908:	f0 1f 00 0a 	mcall	80004930 <nav_reset+0x58>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000490c:	a6 87       	st.b	r3[0x0],r7
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
8000490e:	aa 84       	st.b	r5[0x0],r4
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
80004910:	ac 87       	st.b	r6[0x0],r7
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80004912:	eb 67 00 2d 	st.b	r5[45],r7
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
80004916:	48 b8       	lddpc	r8,80004940 <nav_reset+0x68>
80004918:	b0 87       	st.b	r8[0x0],r7
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
8000491a:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
8000491e:	00 00       	add	r0,r0
80004920:	00 00       	add	r0,r0
80004922:	29 e9       	sub	r9,-98
80004924:	00 00       	add	r0,r0
80004926:	27 72       	sub	r2,119
80004928:	80 00       	ld.sh	r0,r0[0x0]
8000492a:	32 88       	mov	r8,40
8000492c:	80 00       	ld.sh	r0,r0[0x0]
8000492e:	2c 68       	sub	r8,-58
80004930:	80 00       	ld.sh	r0,r0[0x0]
80004932:	48 90       	lddpc	r0,80004954 <sd_mmc_spi_write_multiple_sector_callback+0xc>
80004934:	00 00       	add	r0,r0
80004936:	29 e4       	sub	r4,-98
80004938:	00 00       	add	r0,r0
8000493a:	29 9c       	sub	r12,-103
8000493c:	00 00       	add	r0,r0
8000493e:	27 60       	sub	r0,118
80004940:	00 00       	add	r0,r0
80004942:	2a 48       	sub	r8,-92

80004944 <sd_mmc_spi_wr_protect>:
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
   return false;
}
80004944:	5e fd       	retal	0

80004946 <sd_mmc_spi_removal>:
//!/
bool  sd_mmc_spi_removal(void)
{
  return false;
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
80004946:	5e fd       	retal	0

80004948 <sd_mmc_spi_write_multiple_sector_callback>:
     return CTRL_NO_PRESENT;
}


void sd_mmc_spi_write_multiple_sector_callback(void *psector)
{
80004948:	d4 01       	pushm	lr
#ifdef USB_DEVICE_VENDOR_ID
   // USB Device Stack V2
   udi_msc_trans_block( false, (uint8_t*)psector, MMC_SECTOR_SIZE, NULL);
8000494a:	30 09       	mov	r9,0
8000494c:	e0 6a 02 00 	mov	r10,512
80004950:	18 9b       	mov	r11,r12
80004952:	12 9c       	mov	r12,r9
80004954:	f0 1f 00 02 	mcall	8000495c <sd_mmc_spi_write_multiple_sector_callback+0x14>
    data_to_transfer = usb_read_ep_rxpacket(g_scsi_ep_ms_out, psector,
                                            data_to_transfer, &psector);
    Usb_ack_out_received_free(g_scsi_ep_ms_out);
  }
#endif
}
80004958:	d8 02       	popm	pc
8000495a:	00 00       	add	r0,r0
8000495c:	80 00       	ld.sh	r0,r0[0x0]
8000495e:	6a 24       	ld.w	r4,r5[0x8]

80004960 <sd_mmc_spi_read_multiple_sector_callback>:
   return CTRL_FAIL;
}


void sd_mmc_spi_read_multiple_sector_callback(const void *psector)
{
80004960:	d4 01       	pushm	lr
#ifdef USB_DEVICE_VENDOR_ID
   // USB Device Stack V2
   udi_msc_trans_block( true, (uint8_t*)psector, MMC_SECTOR_SIZE, NULL);
80004962:	30 09       	mov	r9,0
80004964:	e0 6a 02 00 	mov	r10,512
80004968:	18 9b       	mov	r11,r12
8000496a:	30 1c       	mov	r12,1
8000496c:	f0 1f 00 02 	mcall	80004974 <sd_mmc_spi_read_multiple_sector_callback+0x14>
    data_to_transfer = usb_write_ep_txpacket(g_scsi_ep_ms_in, psector,
                                             data_to_transfer, &psector);
    Usb_ack_in_ready_send(g_scsi_ep_ms_in);
  }
#endif
}
80004970:	d8 02       	popm	pc
80004972:	00 00       	add	r0,r0
80004974:	80 00       	ld.sh	r0,r0[0x0]
80004976:	6a 24       	ld.w	r4,r5[0x8]

80004978 <sd_mmc_spi_test_unit_ready>:
}



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80004978:	d4 01       	pushm	lr
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
8000497a:	49 88       	lddpc	r8,800049d8 <sd_mmc_spi_test_unit_ready+0x60>
8000497c:	11 88       	ld.ub	r8,r8[0x0]
8000497e:	30 19       	mov	r9,1
80004980:	f2 08 18 00 	cp.b	r8,r9
80004984:	c1 40       	breq	800049ac <sd_mmc_spi_test_unit_ready+0x34>
80004986:	c0 63       	brcs	80004992 <sd_mmc_spi_test_unit_ready+0x1a>
80004988:	30 29       	mov	r9,2
8000498a:	f2 08 18 00 	cp.b	r8,r9
8000498e:	c2 01       	brne	800049ce <sd_mmc_spi_test_unit_ready+0x56>
80004990:	c1 a8       	rjmp	800049c4 <sd_mmc_spi_test_unit_ready+0x4c>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80004992:	30 09       	mov	r9,0
80004994:	49 28       	lddpc	r8,800049dc <sd_mmc_spi_test_unit_ready+0x64>
80004996:	b0 89       	st.b	r8[0x0],r9
      if (sd_mmc_spi_mem_check())
80004998:	f0 1f 00 12 	mcall	800049e0 <sd_mmc_spi_test_unit_ready+0x68>
8000499c:	c0 31       	brne	800049a2 <sd_mmc_spi_test_unit_ready+0x2a>
8000499e:	30 2c       	mov	r12,2
800049a0:	d8 02       	popm	pc
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
800049a2:	30 19       	mov	r9,1
800049a4:	48 d8       	lddpc	r8,800049d8 <sd_mmc_spi_test_unit_ready+0x60>
800049a6:	b0 89       	st.b	r8[0x0],r9
800049a8:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
800049aa:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
800049ac:	f0 1f 00 0d 	mcall	800049e0 <sd_mmc_spi_test_unit_ready+0x68>
800049b0:	c0 20       	breq	800049b4 <sd_mmc_spi_test_unit_ready+0x3c>
800049b2:	d8 0a       	popm	pc,r12=0
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
800049b4:	30 29       	mov	r9,2
800049b6:	48 98       	lddpc	r8,800049d8 <sd_mmc_spi_test_unit_ready+0x60>
800049b8:	b0 89       	st.b	r8[0x0],r9
        sd_mmc_spi_init_done = false;
800049ba:	30 09       	mov	r9,0
800049bc:	48 88       	lddpc	r8,800049dc <sd_mmc_spi_test_unit_ready+0x64>
800049be:	b0 89       	st.b	r8[0x0],r9
800049c0:	30 3c       	mov	r12,3
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
800049c2:	d8 02       	popm	pc
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
800049c4:	30 09       	mov	r9,0
800049c6:	48 58       	lddpc	r8,800049d8 <sd_mmc_spi_test_unit_ready+0x60>
800049c8:	b0 89       	st.b	r8[0x0],r9
800049ca:	30 2c       	mov	r12,2
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
800049cc:	d8 02       	popm	pc

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
800049ce:	30 09       	mov	r9,0
800049d0:	48 28       	lddpc	r8,800049d8 <sd_mmc_spi_test_unit_ready+0x60>
800049d2:	b0 89       	st.b	r8[0x0],r9
800049d4:	30 3c       	mov	r12,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
800049d6:	d8 02       	popm	pc
800049d8:	00 00       	add	r0,r0
800049da:	00 08       	add	r8,r0
800049dc:	00 00       	add	r0,r0
800049de:	03 88       	ld.ub	r8,r1[0x0]
800049e0:	80 00       	ld.sh	r0,r0[0x0]
800049e2:	2b 50       	sub	r0,-75

800049e4 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
800049e4:	d4 01       	pushm	lr
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
800049e6:	f0 1f 00 02 	mcall	800049ec <sd_mmc_spi_mem_init+0x8>
}
800049ea:	d8 02       	popm	pc
800049ec:	80 00       	ld.sh	r0,r0[0x0]
800049ee:	28 a8       	sub	r8,-118

800049f0 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
800049f0:	eb cd 40 c0 	pushm	r6-r7,lr
800049f4:	18 96       	mov	r6,r12
800049f6:	16 97       	mov	r7,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
800049f8:	f0 1f 00 12 	mcall	80004a40 <sd_mmc_spi_ram_2_mem+0x50>

   if (!sd_mmc_spi_init_done)
800049fc:	49 28       	lddpc	r8,80004a44 <sd_mmc_spi_ram_2_mem+0x54>
800049fe:	11 89       	ld.ub	r9,r8[0x0]
80004a00:	30 08       	mov	r8,0
80004a02:	f0 09 18 00 	cp.b	r9,r8
80004a06:	c0 c1       	brne	80004a1e <sd_mmc_spi_ram_2_mem+0x2e>
   {
      sd_mmc_spi_mem_init();
80004a08:	f0 1f 00 10 	mcall	80004a48 <sd_mmc_spi_ram_2_mem+0x58>
   }

   if (sd_mmc_spi_init_done)
80004a0c:	48 e8       	lddpc	r8,80004a44 <sd_mmc_spi_ram_2_mem+0x54>
80004a0e:	11 89       	ld.ub	r9,r8[0x0]
80004a10:	30 08       	mov	r8,0
80004a12:	f0 09 18 00 	cp.b	r9,r8
80004a16:	c0 41       	brne	80004a1e <sd_mmc_spi_ram_2_mem+0x2e>
80004a18:	30 2c       	mov	r12,2
80004a1a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   {
     sd_mmc_spi_write_open(addr);
80004a1e:	0c 9c       	mov	r12,r6
80004a20:	f0 1f 00 0b 	mcall	80004a4c <sd_mmc_spi_ram_2_mem+0x5c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
80004a24:	0e 9c       	mov	r12,r7
80004a26:	f0 1f 00 0b 	mcall	80004a50 <sd_mmc_spi_ram_2_mem+0x60>
80004a2a:	c0 61       	brne	80004a36 <sd_mmc_spi_ram_2_mem+0x46>
     {
       sd_mmc_spi_write_close();
80004a2c:	f0 1f 00 0a 	mcall	80004a54 <sd_mmc_spi_ram_2_mem+0x64>
80004a30:	30 2c       	mov	r12,2
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80004a32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     }
     sd_mmc_spi_write_close();
80004a36:	f0 1f 00 08 	mcall	80004a54 <sd_mmc_spi_ram_2_mem+0x64>
80004a3a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80004a3e:	00 00       	add	r0,r0
80004a40:	80 00       	ld.sh	r0,r0[0x0]
80004a42:	22 f8       	sub	r8,47
80004a44:	00 00       	add	r0,r0
80004a46:	03 88       	ld.ub	r8,r1[0x0]
80004a48:	80 00       	ld.sh	r0,r0[0x0]
80004a4a:	49 e4       	lddpc	r4,80004ac0 <sd_mmc_spi_usb_write_10>
80004a4c:	80 00       	ld.sh	r0,r0[0x0]
80004a4e:	21 b4       	sub	r4,27
80004a50:	80 00       	ld.sh	r0,r0[0x0]
80004a52:	23 74       	sub	r4,55
80004a54:	80 00       	ld.sh	r0,r0[0x0]
80004a56:	21 24       	sub	r4,18

80004a58 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80004a58:	eb cd 40 c0 	pushm	r6-r7,lr
80004a5c:	18 97       	mov	r7,r12
80004a5e:	16 96       	mov	r6,r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80004a60:	f0 1f 00 12 	mcall	80004aa8 <sd_mmc_spi_mem_2_ram+0x50>

   if (!sd_mmc_spi_init_done)
80004a64:	49 28       	lddpc	r8,80004aac <sd_mmc_spi_mem_2_ram+0x54>
80004a66:	11 89       	ld.ub	r9,r8[0x0]
80004a68:	30 08       	mov	r8,0
80004a6a:	f0 09 18 00 	cp.b	r9,r8
80004a6e:	c0 c1       	brne	80004a86 <sd_mmc_spi_mem_2_ram+0x2e>
   {
      sd_mmc_spi_mem_init();
80004a70:	f0 1f 00 10 	mcall	80004ab0 <sd_mmc_spi_mem_2_ram+0x58>
   }

   if (!sd_mmc_spi_init_done)
80004a74:	48 e8       	lddpc	r8,80004aac <sd_mmc_spi_mem_2_ram+0x54>
80004a76:	11 89       	ld.ub	r9,r8[0x0]
80004a78:	30 08       	mov	r8,0
80004a7a:	f0 09 18 00 	cp.b	r9,r8
80004a7e:	c0 41       	brne	80004a86 <sd_mmc_spi_mem_2_ram+0x2e>
80004a80:	30 2c       	mov	r12,2
80004a82:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
80004a86:	0e 9c       	mov	r12,r7
80004a88:	f0 1f 00 0b 	mcall	80004ab4 <sd_mmc_spi_mem_2_ram+0x5c>
80004a8c:	c0 c0       	breq	80004aa4 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80004a8e:	0c 9c       	mov	r12,r6
80004a90:	f0 1f 00 0a 	mcall	80004ab8 <sd_mmc_spi_mem_2_ram+0x60>
80004a94:	c0 80       	breq	80004aa4 <sd_mmc_spi_mem_2_ram+0x4c>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80004a96:	f0 1f 00 0a 	mcall	80004abc <sd_mmc_spi_mem_2_ram+0x64>
80004a9a:	ec 1c 00 01 	eorl	r12,0x1
80004a9e:	5c 5c       	castu.b	r12
80004aa0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004aa4:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80004aa8:	80 00       	ld.sh	r0,r0[0x0]
80004aaa:	22 f8       	sub	r8,47
80004aac:	00 00       	add	r0,r0
80004aae:	03 88       	ld.ub	r8,r1[0x0]
80004ab0:	80 00       	ld.sh	r0,r0[0x0]
80004ab2:	49 e4       	lddpc	r4,80004b28 <sd_mmc_spi_usb_read_10+0xc>
80004ab4:	80 00       	ld.sh	r0,r0[0x0]
80004ab6:	21 d8       	sub	r8,29
80004ab8:	80 00       	ld.sh	r0,r0[0x0]
80004aba:	26 04       	sub	r4,96
80004abc:	80 00       	ld.sh	r0,r0[0x0]
80004abe:	21 cc       	sub	r12,28

80004ac0 <sd_mmc_spi_usb_write_10>:
}



Ctrl_status sd_mmc_spi_usb_write_10(uint32_t addr, uint16_t nb_sector)
{
80004ac0:	eb cd 40 c0 	pushm	r6-r7,lr
80004ac4:	18 96       	mov	r6,r12
80004ac6:	16 97       	mov	r7,r11
  bool status;

   if (!sd_mmc_spi_init_done)
80004ac8:	49 08       	lddpc	r8,80004b08 <sd_mmc_spi_usb_write_10+0x48>
80004aca:	11 89       	ld.ub	r9,r8[0x0]
80004acc:	30 08       	mov	r8,0
80004ace:	f0 09 18 00 	cp.b	r9,r8
80004ad2:	c0 91       	brne	80004ae4 <sd_mmc_spi_usb_write_10+0x24>
   {
      sd_mmc_spi_mem_init();
80004ad4:	f0 1f 00 0e 	mcall	80004b0c <sd_mmc_spi_usb_write_10+0x4c>
   }

   if (sd_mmc_spi_init_done)
80004ad8:	48 c8       	lddpc	r8,80004b08 <sd_mmc_spi_usb_write_10+0x48>
80004ada:	11 89       	ld.ub	r9,r8[0x0]
80004adc:	30 08       	mov	r8,0
80004ade:	f0 09 18 00 	cp.b	r9,r8
80004ae2:	c0 f0       	breq	80004b00 <sd_mmc_spi_usb_write_10+0x40>
   {
     Sd_mmc_spi_access_signal_on();
     sd_mmc_spi_write_open(addr);
80004ae4:	0c 9c       	mov	r12,r6
80004ae6:	f0 1f 00 0b 	mcall	80004b10 <sd_mmc_spi_usb_write_10+0x50>
     status = sd_mmc_spi_write_multiple_sector(nb_sector);
80004aea:	0e 9c       	mov	r12,r7
80004aec:	5c 7c       	castu.h	r12
80004aee:	f0 1f 00 0a 	mcall	80004b14 <sd_mmc_spi_usb_write_10+0x54>
80004af2:	18 97       	mov	r7,r12
     sd_mmc_spi_write_close();
80004af4:	f0 1f 00 09 	mcall	80004b18 <sd_mmc_spi_usb_write_10+0x58>
     Sd_mmc_spi_access_signal_off();
     if (status)
80004af8:	58 07       	cp.w	r7,0
80004afa:	c0 30       	breq	80004b00 <sd_mmc_spi_usb_write_10+0x40>
80004afc:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80004b00:	30 2c       	mov	r12,2
     else
       return CTRL_NO_PRESENT;
   }
   else
     return CTRL_NO_PRESENT;
}
80004b02:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004b06:	00 00       	add	r0,r0
80004b08:	00 00       	add	r0,r0
80004b0a:	03 88       	ld.ub	r8,r1[0x0]
80004b0c:	80 00       	ld.sh	r0,r0[0x0]
80004b0e:	49 e4       	lddpc	r4,80004b84 <sd_mmc_spi_read_capacity+0x4>
80004b10:	80 00       	ld.sh	r0,r0[0x0]
80004b12:	21 b4       	sub	r4,27
80004b14:	80 00       	ld.sh	r0,r0[0x0]
80004b16:	28 48       	sub	r8,-124
80004b18:	80 00       	ld.sh	r0,r0[0x0]
80004b1a:	21 24       	sub	r4,18

80004b1c <sd_mmc_spi_usb_read_10>:
#include "usb_drv.h"
#include "scsi_decoder.h"
#endif

Ctrl_status sd_mmc_spi_usb_read_10(uint32_t addr, uint16_t nb_sector)
{
80004b1c:	eb cd 40 c0 	pushm	r6-r7,lr
80004b20:	18 97       	mov	r7,r12
80004b22:	16 96       	mov	r6,r11
   if (!sd_mmc_spi_init_done)
80004b24:	49 28       	lddpc	r8,80004b6c <sd_mmc_spi_usb_read_10+0x50>
80004b26:	11 89       	ld.ub	r9,r8[0x0]
80004b28:	30 08       	mov	r8,0
80004b2a:	f0 09 18 00 	cp.b	r9,r8
80004b2e:	c0 c1       	brne	80004b46 <sd_mmc_spi_usb_read_10+0x2a>
   {
      sd_mmc_spi_mem_init();
80004b30:	f0 1f 00 10 	mcall	80004b70 <sd_mmc_spi_usb_read_10+0x54>
   }

   if (!sd_mmc_spi_init_done)
80004b34:	48 e8       	lddpc	r8,80004b6c <sd_mmc_spi_usb_read_10+0x50>
80004b36:	11 89       	ld.ub	r9,r8[0x0]
80004b38:	30 08       	mov	r8,0
80004b3a:	f0 09 18 00 	cp.b	r9,r8
80004b3e:	c0 41       	brne	80004b46 <sd_mmc_spi_usb_read_10+0x2a>
80004b40:	30 2c       	mov	r12,2
80004b42:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
     return CTRL_NO_PRESENT;

   Sd_mmc_spi_access_signal_on();

   if( !sd_mmc_spi_read_open(addr) )
80004b46:	0e 9c       	mov	r12,r7
80004b48:	f0 1f 00 0b 	mcall	80004b74 <sd_mmc_spi_usb_read_10+0x58>
80004b4c:	c0 d0       	breq	80004b66 <sd_mmc_spi_usb_read_10+0x4a>
     goto sd_mmc_spi_usb_read_10_fail;

   if( !sd_mmc_spi_read_multiple_sector(nb_sector) )
80004b4e:	f9 d6 c0 10 	bfextu	r12,r6,0x0,0x10
80004b52:	f0 1f 00 0a 	mcall	80004b78 <sd_mmc_spi_usb_read_10+0x5c>
80004b56:	c0 80       	breq	80004b66 <sd_mmc_spi_usb_read_10+0x4a>
     goto sd_mmc_spi_usb_read_10_fail;

   if( !sd_mmc_spi_read_close() )
80004b58:	f0 1f 00 09 	mcall	80004b7c <sd_mmc_spi_usb_read_10+0x60>
80004b5c:	ec 1c 00 01 	eorl	r12,0x1
80004b60:	5c 5c       	castu.b	r12
80004b62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004b66:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
80004b6a:	00 00       	add	r0,r0
80004b6c:	00 00       	add	r0,r0
80004b6e:	03 88       	ld.ub	r8,r1[0x0]
80004b70:	80 00       	ld.sh	r0,r0[0x0]
80004b72:	49 e4       	lddpc	r4,80004be8 <board_init+0x28>
80004b74:	80 00       	ld.sh	r0,r0[0x0]
80004b76:	21 d8       	sub	r8,29
80004b78:	80 00       	ld.sh	r0,r0[0x0]
80004b7a:	28 78       	sub	r8,-121
80004b7c:	80 00       	ld.sh	r0,r0[0x0]
80004b7e:	21 cc       	sub	r12,28

80004b80 <sd_mmc_spi_read_capacity>:
}



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
80004b80:	eb cd 40 80 	pushm	r7,lr
80004b84:	18 97       	mov	r7,r12
//   sd_mmc_spi_check_presence();   // omitted because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
80004b86:	48 c8       	lddpc	r8,80004bb4 <sd_mmc_spi_read_capacity+0x34>
80004b88:	11 89       	ld.ub	r9,r8[0x0]
80004b8a:	30 08       	mov	r8,0
80004b8c:	f0 09 18 00 	cp.b	r9,r8
80004b90:	c0 c1       	brne	80004ba8 <sd_mmc_spi_read_capacity+0x28>
   {
      sd_mmc_spi_mem_init();
80004b92:	f0 1f 00 0a 	mcall	80004bb8 <sd_mmc_spi_read_capacity+0x38>
   }

   if (sd_mmc_spi_init_done)
80004b96:	48 88       	lddpc	r8,80004bb4 <sd_mmc_spi_read_capacity+0x34>
80004b98:	11 89       	ld.ub	r9,r8[0x0]
80004b9a:	30 08       	mov	r8,0
80004b9c:	f0 09 18 00 	cp.b	r9,r8
80004ba0:	c0 41       	brne	80004ba8 <sd_mmc_spi_read_capacity+0x28>
80004ba2:	30 2c       	mov	r12,2
80004ba4:	e3 cd 80 80 	ldm	sp++,r7,pc
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80004ba8:	48 58       	lddpc	r8,80004bbc <sd_mmc_spi_read_capacity+0x3c>
80004baa:	70 08       	ld.w	r8,r8[0x0]
80004bac:	2f f8       	sub	r8,-1
80004bae:	8f 08       	st.w	r7[0x0],r8
80004bb0:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80004bb4:	00 00       	add	r0,r0
80004bb6:	03 88       	ld.ub	r8,r1[0x0]
80004bb8:	80 00       	ld.sh	r0,r0[0x0]
80004bba:	49 e4       	lddpc	r4,80004c30 <board_init+0x70>
80004bbc:	00 00       	add	r0,r0
80004bbe:	27 40       	sub	r0,116

80004bc0 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#	define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80004bc0:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004bc2:	30 3b       	mov	r11,3
80004bc4:	30 7c       	mov	r12,7
80004bc6:	f0 1f 00 1a 	mcall	80004c2c <board_init+0x6c>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004bca:	30 3b       	mov	r11,3
80004bcc:	30 8c       	mov	r12,8
80004bce:	f0 1f 00 18 	mcall	80004c2c <board_init+0x6c>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004bd2:	30 3b       	mov	r11,3
80004bd4:	31 5c       	mov	r12,21
80004bd6:	f0 1f 00 16 	mcall	80004c2c <board_init+0x6c>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004bda:	30 3b       	mov	r11,3
80004bdc:	31 6c       	mov	r12,22
80004bde:	f0 1f 00 14 	mcall	80004c2c <board_init+0x6c>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
80004be2:	30 0b       	mov	r11,0
80004be4:	32 2c       	mov	r12,34
80004be6:	f0 1f 00 12 	mcall	80004c2c <board_init+0x6c>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
80004bea:	30 0b       	mov	r11,0
80004bec:	32 3c       	mov	r12,35
80004bee:	f0 1f 00 10 	mcall	80004c2c <board_init+0x6c>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
80004bf2:	30 0b       	mov	r11,0
80004bf4:	30 dc       	mov	r12,13
80004bf6:	f0 1f 00 0e 	mcall	80004c2c <board_init+0x6c>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
80004bfa:	30 0b       	mov	r11,0
80004bfc:	32 6c       	mov	r12,38
80004bfe:	f0 1f 00 0c 	mcall	80004c2c <board_init+0x6c>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
80004c02:	30 0b       	mov	r11,0
80004c04:	32 7c       	mov	r12,39
80004c06:	f0 1f 00 0a 	mcall	80004c2c <board_init+0x6c>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
80004c0a:	30 0b       	mov	r11,0
80004c0c:	32 8c       	mov	r12,40
80004c0e:	f0 1f 00 08 	mcall	80004c2c <board_init+0x6c>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
80004c12:	30 4b       	mov	r11,4
80004c14:	48 7c       	lddpc	r12,80004c30 <board_init+0x70>
80004c16:	f0 1f 00 08 	mcall	80004c34 <board_init+0x74>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
80004c1a:	30 0b       	mov	r11,0
80004c1c:	32 0c       	mov	r12,32
80004c1e:	f0 1f 00 04 	mcall	80004c2c <board_init+0x6c>
80004c22:	30 0b       	mov	r11,0
80004c24:	32 1c       	mov	r12,33
80004c26:	f0 1f 00 02 	mcall	80004c2c <board_init+0x6c>

	// Assign GPIO pins to USB.
	gpio_enable_module(USB_GPIO_MAP,
			sizeof(USB_GPIO_MAP) / sizeof(USB_GPIO_MAP[0]));
#endif
}
80004c2a:	d8 02       	popm	pc
80004c2c:	80 00       	ld.sh	r0,r0[0x0]
80004c2e:	4e 48       	lddpc	r8,80004dbc <flashc_set_bus_freq+0x1c>
80004c30:	80 00       	ld.sh	r0,r0[0x0]
80004c32:	86 00       	ld.sh	r0,r3[0x0]
80004c34:	80 00       	ld.sh	r0,r0[0x0]
80004c36:	4e 18       	lddpc	r8,80004db8 <flashc_set_bus_freq+0x18>

80004c38 <LED_Set_Intensity>:
           AVR32_PWM.channel[led_descriptor->PWM.CHANNEL].cdty : 0;
}


void LED_Set_Intensity(U32 leds, U8 intensity)
{
80004c38:	eb cd 40 f8 	pushm	r3-r7,lr
  volatile avr32_pwm_channel_t *led_pwm_channel;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // For each specified LED...
  for (leds &= (1 << LED_COUNT) - 1; leds; leds >>= led_shift)
80004c3c:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80004c40:	c4 70       	breq	80004cce <LED_Set_Intensity+0x96>
80004c42:	4a 58       	lddpc	r8,80004cd4 <LED_Set_Intensity+0x9c>
80004c44:	21 08       	sub	r8,16
    led_descriptor += led_shift;
    if (led_descriptor->PWM.CHANNEL < 0) continue;

    // Initialize or update the LED PWM channel.
    led_pwm_channel = &AVR32_PWM.channel[led_descriptor->PWM.CHANNEL];
    if (!(AVR32_PWM.sr & (1 << led_descriptor->PWM.CHANNEL)))
80004c46:	fe 7a 30 00 	mov	r10,-53248
80004c4a:	30 15       	mov	r5,1
    {
      led_pwm_channel->cmr = (AVR32_PWM_CPRE_MCK << AVR32_PWM_CPRE_OFFSET) &
80004c4c:	30 03       	mov	r3,0
                             ~(AVR32_PWM_CALG_MASK |
                               AVR32_PWM_CPOL_MASK |
                               AVR32_PWM_CPD_MASK);
      led_pwm_channel->cprd = 0x000000FF;
80004c4e:	e0 64 00 ff 	mov	r4,255

  // For each specified LED...
  for (leds &= (1 << LED_COUNT) - 1; leds; leds >>= led_shift)
  {
    // Select the next specified LED and check that it has a PWM channel.
    led_shift = 1 + ctz(leds);
80004c52:	18 97       	mov	r7,r12
80004c54:	5c 97       	brev	r7
80004c56:	ee 07 12 00 	clz	r7,r7
80004c5a:	2f f7       	sub	r7,-1
    led_descriptor += led_shift;
80004c5c:	ee 09 15 04 	lsl	r9,r7,0x4
80004c60:	12 08       	add	r8,r9
    if (led_descriptor->PWM.CHANNEL < 0) continue;
80004c62:	70 2e       	ld.w	lr,r8[0x8]
80004c64:	58 0e       	cp.w	lr,0
80004c66:	c3 15       	brlt	80004cc8 <LED_Set_Intensity+0x90>

    // Initialize or update the LED PWM channel.
    led_pwm_channel = &AVR32_PWM.channel[led_descriptor->PWM.CHANNEL];
80004c68:	fc 06 15 05 	lsl	r6,lr,0x5
80004c6c:	e0 26 ce 00 	sub	r6,52736
    if (!(AVR32_PWM.sr & (1 << led_descriptor->PWM.CHANNEL)))
80004c70:	74 39       	ld.w	r9,r10[0xc]
80004c72:	ea 0e 09 4e 	lsl	lr,r5,lr
80004c76:	fd e9 00 09 	and	r9,lr,r9
80004c7a:	c0 91       	brne	80004c8c <LED_Set_Intensity+0x54>
    {
      led_pwm_channel->cmr = (AVR32_PWM_CPRE_MCK << AVR32_PWM_CPRE_OFFSET) &
80004c7c:	8d 03       	st.w	r6[0x0],r3
                             ~(AVR32_PWM_CALG_MASK |
                               AVR32_PWM_CPOL_MASK |
                               AVR32_PWM_CPD_MASK);
      led_pwm_channel->cprd = 0x000000FF;
80004c7e:	8d 24       	st.w	r6[0x8],r4
      led_pwm_channel->cdty = intensity;
80004c80:	8d 1b       	st.w	r6[0x4],r11
      AVR32_PWM.ena = 1 << led_descriptor->PWM.CHANNEL;
80004c82:	70 29       	ld.w	r9,r8[0x8]
80004c84:	ea 09 09 49 	lsl	r9,r5,r9
80004c88:	95 19       	st.w	r10[0x4],r9
80004c8a:	c0 78       	rjmp	80004c98 <LED_Set_Intensity+0x60>
    }
    else
    {
      AVR32_PWM.isr;
80004c8c:	74 79       	ld.w	r9,r10[0x1c]
      while (!(AVR32_PWM.isr & (1 << led_descriptor->PWM.CHANNEL)));
80004c8e:	74 79       	ld.w	r9,r10[0x1c]
80004c90:	fd e9 00 09 	and	r9,lr,r9
80004c94:	cf d0       	breq	80004c8e <LED_Set_Intensity+0x56>
      led_pwm_channel->cupd = intensity;
80004c96:	8d 4b       	st.w	r6[0x10],r11
    }

    // Switch the LED pin to its PWM function.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80004c98:	70 09       	ld.w	r9,r8[0x0]
80004c9a:	a9 69       	lsl	r9,0x8
80004c9c:	e0 29 f0 00 	sub	r9,61440
    if (led_descriptor->PWM.FUNCTION & 0x1)
80004ca0:	70 3e       	ld.w	lr,r8[0xc]
80004ca2:	fd de c0 01 	bfextu	lr,lr,0x0,0x1
80004ca6:	c0 40       	breq	80004cae <LED_Set_Intensity+0x76>
    {
      led_gpio_port->pmr0s = led_descriptor->GPIO.PIN_MASK;
80004ca8:	70 1e       	ld.w	lr,r8[0x4]
80004caa:	93 5e       	st.w	r9[0x14],lr
80004cac:	c0 38       	rjmp	80004cb2 <LED_Set_Intensity+0x7a>
    }
    else
    {
      led_gpio_port->pmr0c = led_descriptor->GPIO.PIN_MASK;
80004cae:	70 1e       	ld.w	lr,r8[0x4]
80004cb0:	93 6e       	st.w	r9[0x18],lr
    }
    if (led_descriptor->PWM.FUNCTION & 0x2)
80004cb2:	70 3e       	ld.w	lr,r8[0xc]
80004cb4:	e2 1e 00 02 	andl	lr,0x2,COH
80004cb8:	c0 40       	breq	80004cc0 <LED_Set_Intensity+0x88>
    {
      led_gpio_port->pmr1s = led_descriptor->GPIO.PIN_MASK;
80004cba:	70 1e       	ld.w	lr,r8[0x4]
80004cbc:	93 9e       	st.w	r9[0x24],lr
80004cbe:	c0 38       	rjmp	80004cc4 <LED_Set_Intensity+0x8c>
    }
    else
    {
      led_gpio_port->pmr1c = led_descriptor->GPIO.PIN_MASK;
80004cc0:	70 1e       	ld.w	lr,r8[0x4]
80004cc2:	93 ae       	st.w	r9[0x28],lr
    }
    led_gpio_port->gperc = led_descriptor->GPIO.PIN_MASK;
80004cc4:	70 1e       	ld.w	lr,r8[0x4]
80004cc6:	93 2e       	st.w	r9[0x8],lr
  volatile avr32_pwm_channel_t *led_pwm_channel;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // For each specified LED...
  for (leds &= (1 << LED_COUNT) - 1; leds; leds >>= led_shift)
80004cc8:	f8 07 0a 4c 	lsr	r12,r12,r7
80004ccc:	cc 31       	brne	80004c52 <LED_Set_Intensity+0x1a>
80004cce:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80004cd2:	00 00       	add	r0,r0
80004cd4:	80 00       	ld.sh	r0,r0[0x0]
80004cd6:	86 20       	ld.sh	r0,r3[0x4]

80004cd8 <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80004cd8:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80004cdc:	49 18       	lddpc	r8,80004d20 <LED_On+0x48>
80004cde:	70 09       	ld.w	r9,r8[0x0]
80004ce0:	f9 e9 10 09 	or	r9,r12,r9
80004ce4:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80004ce6:	58 0c       	cp.w	r12,0
80004ce8:	5e 0c       	reteq	r12
80004cea:	48 f8       	lddpc	r8,80004d24 <LED_On+0x4c>
80004cec:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80004cee:	18 9a       	mov	r10,r12
80004cf0:	5c 9a       	brev	r10
80004cf2:	f4 0a 12 00 	clz	r10,r10
80004cf6:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80004cf8:	f4 09 15 04 	lsl	r9,r10,0x4
80004cfc:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80004cfe:	70 09       	ld.w	r9,r8[0x0]
80004d00:	a9 69       	lsl	r9,0x8
80004d02:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
80004d06:	70 1b       	ld.w	r11,r8[0x4]
80004d08:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80004d0c:	70 1b       	ld.w	r11,r8[0x4]
80004d0e:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80004d12:	70 1b       	ld.w	r11,r8[0x4]
80004d14:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80004d16:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80004d1a:	ce a1       	brne	80004cee <LED_On+0x16>
80004d1c:	5e fc       	retal	r12
80004d1e:	00 00       	add	r0,r0
80004d20:	00 00       	add	r0,r0
80004d22:	00 0c       	add	r12,r0
80004d24:	80 00       	ld.sh	r0,r0[0x0]
80004d26:	86 20       	ld.sh	r0,r3[0x4]

80004d28 <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80004d28:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80004d2c:	49 28       	lddpc	r8,80004d74 <LED_Off+0x4c>
80004d2e:	70 09       	ld.w	r9,r8[0x0]
80004d30:	f8 0a 11 ff 	rsub	r10,r12,-1
80004d34:	f5 e9 00 09 	and	r9,r10,r9
80004d38:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80004d3a:	58 0c       	cp.w	r12,0
80004d3c:	5e 0c       	reteq	r12
80004d3e:	48 f8       	lddpc	r8,80004d78 <LED_Off+0x50>
80004d40:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80004d42:	18 9a       	mov	r10,r12
80004d44:	5c 9a       	brev	r10
80004d46:	f4 0a 12 00 	clz	r10,r10
80004d4a:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80004d4c:	f4 09 15 04 	lsl	r9,r10,0x4
80004d50:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80004d52:	70 09       	ld.w	r9,r8[0x0]
80004d54:	a9 69       	lsl	r9,0x8
80004d56:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80004d5a:	70 1b       	ld.w	r11,r8[0x4]
80004d5c:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80004d60:	70 1b       	ld.w	r11,r8[0x4]
80004d62:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80004d66:	70 1b       	ld.w	r11,r8[0x4]
80004d68:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80004d6a:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80004d6e:	ce a1       	brne	80004d42 <LED_Off+0x1a>
80004d70:	5e fc       	retal	r12
80004d72:	00 00       	add	r0,r0
80004d74:	00 00       	add	r0,r0
80004d76:	00 0c       	add	r12,r0
80004d78:	80 00       	ld.sh	r0,r0[0x0]
80004d7a:	86 20       	ld.sh	r0,r3[0x4]

80004d7c <eic_clear_interrupt_line>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80004d7c:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80004d80:	d3 03       	ssrf	0x10

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	eic->icr = 1 << line_number;
80004d82:	30 19       	mov	r9,1
80004d84:	f2 0b 09 4b 	lsl	r11,r9,r11
80004d88:	99 4b       	st.w	r12[0x10],r11
	eic->isr;
80004d8a:	78 39       	ld.w	r9,r12[0xc]
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80004d8c:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);
}
80004d90:	5e fc       	retal	r12

80004d92 <flashc_set_wait_state>:
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80004d92:	fe 68 14 00 	mov	r8,-125952
80004d96:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80004d98:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80004d9c:	91 09       	st.w	r8[0x0],r9
}
80004d9e:	5e fc       	retal	r12

80004da0 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80004da0:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80004da2:	e0 68 8a 3f 	mov	r8,35391
80004da6:	ea 18 01 f7 	orh	r8,0x1f7
80004daa:	10 3c       	cp.w	r12,r8
80004dac:	e0 88 00 06 	brls	80004db8 <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
80004db0:	30 1c       	mov	r12,1
80004db2:	f0 1f 00 04 	mcall	80004dc0 <flashc_set_bus_freq+0x20>
80004db6:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
80004db8:	30 0c       	mov	r12,0
80004dba:	f0 1f 00 02 	mcall	80004dc0 <flashc_set_bus_freq+0x20>
80004dbe:	d8 02       	popm	pc
80004dc0:	80 00       	ld.sh	r0,r0[0x0]
80004dc2:	4d 92       	lddpc	r2,80004f24 <gpio_clear_pin_interrupt_flag+0xe>

80004dc4 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004dc4:	f8 08 16 05 	lsr	r8,r12,0x5
80004dc8:	a9 68       	lsl	r8,0x8
80004dca:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80004dce:	58 1b       	cp.w	r11,1
80004dd0:	c0 d0       	breq	80004dea <gpio_enable_module_pin+0x26>
80004dd2:	c0 63       	brcs	80004dde <gpio_enable_module_pin+0x1a>
80004dd4:	58 2b       	cp.w	r11,2
80004dd6:	c1 00       	breq	80004df6 <gpio_enable_module_pin+0x32>
80004dd8:	58 3b       	cp.w	r11,3
80004dda:	c1 40       	breq	80004e02 <gpio_enable_module_pin+0x3e>
80004ddc:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004dde:	30 19       	mov	r9,1
80004de0:	f2 0c 09 49 	lsl	r9,r9,r12
80004de4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004de6:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80004de8:	c1 28       	rjmp	80004e0c <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004dea:	30 19       	mov	r9,1
80004dec:	f2 0c 09 49 	lsl	r9,r9,r12
80004df0:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004df2:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80004df4:	c0 c8       	rjmp	80004e0c <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004df6:	30 19       	mov	r9,1
80004df8:	f2 0c 09 49 	lsl	r9,r9,r12
80004dfc:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004dfe:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80004e00:	c0 68       	rjmp	80004e0c <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004e02:	30 19       	mov	r9,1
80004e04:	f2 0c 09 49 	lsl	r9,r9,r12
80004e08:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004e0a:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80004e0c:	30 19       	mov	r9,1
80004e0e:	f2 0c 09 4c 	lsl	r12,r9,r12
80004e12:	91 2c       	st.w	r8[0x8],r12
80004e14:	5e fd       	retal	0
80004e16:	d7 03       	nop

80004e18 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80004e18:	d4 21       	pushm	r4-r7,lr
80004e1a:	18 97       	mov	r7,r12
80004e1c:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80004e1e:	58 0b       	cp.w	r11,0
80004e20:	c0 31       	brne	80004e26 <gpio_enable_module+0xe>
80004e22:	30 05       	mov	r5,0
80004e24:	c0 d8       	rjmp	80004e3e <gpio_enable_module+0x26>
80004e26:	30 06       	mov	r6,0
80004e28:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80004e2a:	6e 1b       	ld.w	r11,r7[0x4]
80004e2c:	6e 0c       	ld.w	r12,r7[0x0]
80004e2e:	f0 1f 00 06 	mcall	80004e44 <gpio_enable_module+0x2c>
80004e32:	18 45       	or	r5,r12
		gpiomap++;
80004e34:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80004e36:	2f f6       	sub	r6,-1
80004e38:	0c 34       	cp.w	r4,r6
80004e3a:	fe 9b ff f8 	brhi	80004e2a <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
80004e3e:	0a 9c       	mov	r12,r5
80004e40:	d8 22       	popm	r4-r7,pc
80004e42:	00 00       	add	r0,r0
80004e44:	80 00       	ld.sh	r0,r0[0x0]
80004e46:	4d c4       	lddpc	r4,80004fb4 <INTC_init_interrupts+0x4>

80004e48 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004e48:	f8 08 16 05 	lsr	r8,r12,0x5
80004e4c:	a9 68       	lsl	r8,0x8
80004e4e:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
80004e52:	16 99       	mov	r9,r11
80004e54:	e2 19 00 04 	andl	r9,0x4,COH
80004e58:	c0 70       	breq	80004e66 <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
80004e5a:	30 19       	mov	r9,1
80004e5c:	f2 0c 09 49 	lsl	r9,r9,r12
80004e60:	f1 49 00 74 	st.w	r8[116],r9
80004e64:	c0 68       	rjmp	80004e70 <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80004e66:	30 19       	mov	r9,1
80004e68:	f2 0c 09 49 	lsl	r9,r9,r12
80004e6c:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80004e70:	16 99       	mov	r9,r11
80004e72:	e2 19 00 80 	andl	r9,0x80,COH
80004e76:	c2 40       	breq	80004ebe <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
80004e78:	16 99       	mov	r9,r11
80004e7a:	e2 19 01 80 	andl	r9,0x180,COH
80004e7e:	c0 90       	breq	80004e90 <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004e80:	30 19       	mov	r9,1
80004e82:	f2 0c 09 49 	lsl	r9,r9,r12
80004e86:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80004e8a:	f1 49 00 b8 	st.w	r8[184],r9
80004e8e:	c1 88       	rjmp	80004ebe <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
80004e90:	16 99       	mov	r9,r11
80004e92:	e2 19 02 80 	andl	r9,0x280,COH
80004e96:	c0 90       	breq	80004ea8 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80004e98:	30 19       	mov	r9,1
80004e9a:	f2 0c 09 49 	lsl	r9,r9,r12
80004e9e:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80004ea2:	f1 49 00 b8 	st.w	r8[184],r9
80004ea6:	c0 c8       	rjmp	80004ebe <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
80004ea8:	16 99       	mov	r9,r11
80004eaa:	e2 19 03 80 	andl	r9,0x380,COH
80004eae:	c0 80       	breq	80004ebe <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004eb0:	30 19       	mov	r9,1
80004eb2:	f2 0c 09 49 	lsl	r9,r9,r12
80004eb6:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80004eba:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80004ebe:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
80004ec2:	c1 50       	breq	80004eec <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80004ec4:	e2 1b 00 02 	andl	r11,0x2,COH
80004ec8:	c0 70       	breq	80004ed6 <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80004eca:	30 19       	mov	r9,1
80004ecc:	f2 0c 09 49 	lsl	r9,r9,r12
80004ed0:	f1 49 00 54 	st.w	r8[84],r9
80004ed4:	c0 68       	rjmp	80004ee0 <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80004ed6:	30 19       	mov	r9,1
80004ed8:	f2 0c 09 49 	lsl	r9,r9,r12
80004edc:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80004ee0:	30 19       	mov	r9,1
80004ee2:	f2 0c 09 49 	lsl	r9,r9,r12
80004ee6:	f1 49 00 44 	st.w	r8[68],r9
80004eea:	c0 68       	rjmp	80004ef6 <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80004eec:	30 19       	mov	r9,1
80004eee:	f2 0c 09 49 	lsl	r9,r9,r12
80004ef2:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004ef6:	30 19       	mov	r9,1
80004ef8:	f2 0c 09 4c 	lsl	r12,r9,r12
80004efc:	91 1c       	st.w	r8[0x4],r12
}
80004efe:	5e fc       	retal	r12

80004f00 <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004f00:	f8 08 16 05 	lsr	r8,r12,0x5
80004f04:	a9 68       	lsl	r8,0x8
80004f06:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80004f0a:	71 88       	ld.w	r8,r8[0x60]
80004f0c:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
80004f10:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
80004f14:	5e fc       	retal	r12

80004f16 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004f16:	f8 08 16 05 	lsr	r8,r12,0x5
80004f1a:	a9 68       	lsl	r8,0x8
80004f1c:	e0 28 f0 00 	sub	r8,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80004f20:	30 19       	mov	r9,1
80004f22:	f2 0c 09 4c 	lsl	r12,r9,r12
80004f26:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
80004f2a:	5e fc       	retal	r12

80004f2c <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80004f2c:	c0 08       	rjmp	80004f2c <_unhandled_interrupt>
80004f2e:	d7 03       	nop

80004f30 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80004f30:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
80004f34:	49 99       	lddpc	r9,80004f98 <INTC_register_interrupt+0x68>
80004f36:	f2 08 00 39 	add	r9,r9,r8<<0x3
80004f3a:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80004f3e:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80004f40:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
80004f44:	58 0a       	cp.w	r10,0
80004f46:	c0 91       	brne	80004f58 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004f48:	49 59       	lddpc	r9,80004f9c <INTC_register_interrupt+0x6c>
80004f4a:	49 6a       	lddpc	r10,80004fa0 <INTC_register_interrupt+0x70>
80004f4c:	12 1a       	sub	r10,r9
80004f4e:	fe 79 08 00 	mov	r9,-63488
80004f52:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80004f56:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80004f58:	58 1a       	cp.w	r10,1
80004f5a:	c0 a1       	brne	80004f6e <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80004f5c:	49 09       	lddpc	r9,80004f9c <INTC_register_interrupt+0x6c>
80004f5e:	49 2a       	lddpc	r10,80004fa4 <INTC_register_interrupt+0x74>
80004f60:	12 1a       	sub	r10,r9
80004f62:	bf aa       	sbr	r10,0x1e
80004f64:	fe 79 08 00 	mov	r9,-63488
80004f68:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80004f6c:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80004f6e:	58 2a       	cp.w	r10,2
80004f70:	c0 a1       	brne	80004f84 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80004f72:	48 b9       	lddpc	r9,80004f9c <INTC_register_interrupt+0x6c>
80004f74:	48 da       	lddpc	r10,80004fa8 <INTC_register_interrupt+0x78>
80004f76:	12 1a       	sub	r10,r9
80004f78:	bf ba       	sbr	r10,0x1f
80004f7a:	fe 79 08 00 	mov	r9,-63488
80004f7e:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80004f82:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80004f84:	48 69       	lddpc	r9,80004f9c <INTC_register_interrupt+0x6c>
80004f86:	48 aa       	lddpc	r10,80004fac <INTC_register_interrupt+0x7c>
80004f88:	12 1a       	sub	r10,r9
80004f8a:	ea 1a c0 00 	orh	r10,0xc000
80004f8e:	fe 79 08 00 	mov	r9,-63488
80004f92:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80004f96:	5e fc       	retal	r12
80004f98:	80 00       	ld.sh	r0,r0[0x0]
80004f9a:	86 60       	ld.sh	r0,r3[0xc]
80004f9c:	80 00       	ld.sh	r0,r0[0x0]
80004f9e:	84 00       	ld.sh	r0,r2[0x0]
80004fa0:	80 00       	ld.sh	r0,r0[0x0]
80004fa2:	85 04       	st.w	r2[0x0],r4
80004fa4:	80 00       	ld.sh	r0,r0[0x0]
80004fa6:	85 12       	st.w	r2[0x4],r2
80004fa8:	80 00       	ld.sh	r0,r0[0x0]
80004faa:	85 20       	st.w	r2[0x8],r0
80004fac:	80 00       	ld.sh	r0,r0[0x0]
80004fae:	85 2e       	st.w	r2[0x8],lr

80004fb0 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80004fb0:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80004fb2:	49 18       	lddpc	r8,80004ff4 <INTC_init_interrupts+0x44>
80004fb4:	e3 b8 00 01 	mtsr	0x4,r8
80004fb8:	49 0e       	lddpc	lr,80004ff8 <INTC_init_interrupts+0x48>
80004fba:	30 07       	mov	r7,0
80004fbc:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004fbe:	49 0c       	lddpc	r12,80004ffc <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004fc0:	49 05       	lddpc	r5,80005000 <INTC_init_interrupts+0x50>
80004fc2:	10 15       	sub	r5,r8
80004fc4:	fe 76 08 00 	mov	r6,-63488
80004fc8:	c1 08       	rjmp	80004fe8 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80004fca:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80004fcc:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004fce:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80004fd0:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80004fd4:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004fd6:	10 3a       	cp.w	r10,r8
80004fd8:	fe 9b ff fc 	brhi	80004fd0 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80004fdc:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80004fe0:	2f f7       	sub	r7,-1
80004fe2:	2f 8e       	sub	lr,-8
80004fe4:	59 27       	cp.w	r7,18
80004fe6:	c0 50       	breq	80004ff0 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80004fe8:	7c 08       	ld.w	r8,lr[0x0]
80004fea:	58 08       	cp.w	r8,0
80004fec:	ce f1       	brne	80004fca <INTC_init_interrupts+0x1a>
80004fee:	cf 7b       	rjmp	80004fdc <INTC_init_interrupts+0x2c>
80004ff0:	d8 22       	popm	r4-r7,pc
80004ff2:	00 00       	add	r0,r0
80004ff4:	80 00       	ld.sh	r0,r0[0x0]
80004ff6:	84 00       	ld.sh	r0,r2[0x0]
80004ff8:	80 00       	ld.sh	r0,r0[0x0]
80004ffa:	86 60       	ld.sh	r0,r3[0xc]
80004ffc:	80 00       	ld.sh	r0,r0[0x0]
80004ffe:	4f 2c       	lddpc	r12,800051c4 <spi_setupChipReg+0x90>
80005000:	80 00       	ld.sh	r0,r0[0x0]
80005002:	85 04       	st.w	r2[0x0],r4

80005004 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80005004:	fe 78 08 00 	mov	r8,-63488
80005008:	e0 69 00 83 	mov	r9,131
8000500c:	f2 0c 01 0c 	sub	r12,r9,r12
80005010:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80005014:	f2 ca ff c0 	sub	r10,r9,-64
80005018:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000501c:	58 08       	cp.w	r8,0
8000501e:	c0 21       	brne	80005022 <_get_interrupt_handler+0x1e>
80005020:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
80005022:	f0 08 12 00 	clz	r8,r8
80005026:	48 5a       	lddpc	r10,80005038 <_get_interrupt_handler+0x34>
80005028:	f4 09 00 39 	add	r9,r10,r9<<0x3
8000502c:	f0 08 11 1f 	rsub	r8,r8,31
80005030:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80005032:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80005036:	5e fc       	retal	r12
80005038:	80 00       	ld.sh	r0,r0[0x0]
8000503a:	86 60       	ld.sh	r0,r3[0xc]

8000503c <getBaudDiv>:
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
8000503c:	f8 c8 00 01 	sub	r8,r12,1
80005040:	f0 0b 00 0b 	add	r11,r8,r11
80005044:	f6 0c 0d 0a 	divu	r10,r11,r12
80005048:	14 9c       	mov	r12,r10

	if (baudDiv <= 0 || baudDiv > 255) {
8000504a:	f4 c8 00 01 	sub	r8,r10,1
8000504e:	e0 48 00 fe 	cp.w	r8,254
80005052:	e0 88 00 03 	brls	80005058 <getBaudDiv+0x1c>
80005056:	5e fe       	retal	-1
		return -1;
	}

	return baudDiv;
80005058:	5c 8c       	casts.h	r12
}
8000505a:	5e fc       	retal	r12

8000505c <spi_initMaster>:
spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
8000505c:	f7 39 00 0d 	ld.ub	r9,r11[13]
80005060:	30 18       	mov	r8,1
80005062:	f0 09 18 00 	cp.b	r9,r8
80005066:	e0 88 00 04 	brls	8000506e <spi_initMaster+0x12>
8000506a:	30 2c       	mov	r12,2
8000506c:	5e fc       	retal	r12
		return SPI_ERROR_ARGUMENT;
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
8000506e:	e0 68 00 80 	mov	r8,128
80005072:	99 08       	st.w	r12[0x0],r8

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
80005074:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.mstr = 1;
80005076:	30 19       	mov	r9,1
80005078:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
8000507c:	f7 39 00 0d 	ld.ub	r9,r11[13]
80005080:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
	u_avr32_spi_mr.MR.llb = 0;
80005084:	30 09       	mov	r9,0
80005086:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
8000508a:	30 fa       	mov	r10,15
8000508c:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
	spi->mr = u_avr32_spi_mr.mr;
80005090:	99 18       	st.w	r12[0x4],r8
80005092:	5e f9       	retal	r9

80005094 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80005094:	d4 01       	pushm	lr
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80005096:	30 18       	mov	r8,1
80005098:	f0 0b 18 00 	cp.b	r11,r8
8000509c:	5f be       	srhi	lr
8000509e:	f0 0a 18 00 	cp.b	r10,r8
800050a2:	5f b8       	srhi	r8
800050a4:	fd e8 10 08 	or	r8,lr,r8
800050a8:	c0 30       	breq	800050ae <spi_selectionMode+0x1a>
800050aa:	30 2c       	mov	r12,2
800050ac:	d8 02       	popm	pc
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
	}

	u_avr32_spi_mr.mr = spi->mr;
800050ae:	78 18       	ld.w	r8,r12[0x4]
	u_avr32_spi_mr.MR.ps = variable_ps;
800050b0:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
800050b4:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
	u_avr32_spi_mr.MR.dlybcs = delay;
800050b8:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8
	spi->mr = u_avr32_spi_mr.mr;
800050bc:	99 18       	st.w	r12[0x4],r8
800050be:	d8 0a       	popm	pc,r12=0

800050c0 <spi_selectChip>:
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800050c0:	78 18       	ld.w	r8,r12[0x4]
800050c2:	ea 18 00 0f 	orh	r8,0xf
800050c6:	99 18       	st.w	r12[0x4],r8

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800050c8:	78 18       	ld.w	r8,r12[0x4]
800050ca:	e2 18 00 04 	andl	r8,0x4,COH
800050ce:	c0 f0       	breq	800050ec <spi_selectChip+0x2c>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800050d0:	30 e8       	mov	r8,14
800050d2:	f0 0b 18 00 	cp.b	r11,r8
800050d6:	e0 8b 00 19 	brhi	80005108 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800050da:	78 18       	ld.w	r8,r12[0x4]
800050dc:	b1 6b       	lsl	r11,0x10
800050de:	ea 1b ff f0 	orh	r11,0xfff0
800050e2:	e8 1b ff ff 	orl	r11,0xffff
800050e6:	10 6b       	and	r11,r8
800050e8:	99 1b       	st.w	r12[0x4],r11
800050ea:	5e fd       	retal	0
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800050ec:	30 38       	mov	r8,3
800050ee:	f0 0b 18 00 	cp.b	r11,r8
800050f2:	e0 8b 00 0b 	brhi	80005108 <spi_selectChip+0x48>
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800050f6:	78 18       	ld.w	r8,r12[0x4]
800050f8:	2f 0b       	sub	r11,-16
800050fa:	30 19       	mov	r9,1
800050fc:	f2 0b 09 4b 	lsl	r11,r9,r11
80005100:	5c db       	com	r11
80005102:	10 6b       	and	r11,r8
80005104:	99 1b       	st.w	r12[0x4],r11
80005106:	5e fd       	retal	0
80005108:	30 2c       	mov	r12,2
	}

	return SPI_OK;
}
8000510a:	5e fc       	retal	r12

8000510c <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000510c:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80005110:	c0 58       	rjmp	8000511a <spi_unselectChip+0xe>
		if (!timeout--) {
80005112:	58 08       	cp.w	r8,0
80005114:	c0 21       	brne	80005118 <spi_unselectChip+0xc>
80005116:	5e ff       	retal	1
80005118:	20 18       	sub	r8,1

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000511a:	78 49       	ld.w	r9,r12[0x10]
8000511c:	e2 19 02 00 	andl	r9,0x200,COH
80005120:	cf 90       	breq	80005112 <spi_unselectChip+0x6>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80005122:	78 18       	ld.w	r8,r12[0x4]
80005124:	ea 18 00 0f 	orh	r8,0xf
80005128:	99 18       	st.w	r12[0x4],r8

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000512a:	30 08       	mov	r8,0
8000512c:	ea 18 01 00 	orh	r8,0x100
80005130:	99 08       	st.w	r12[0x0],r8
80005132:	5e fd       	retal	0

80005134 <spi_setupChipReg>:
}

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80005134:	eb cd 40 f8 	pushm	r3-r7,lr
80005138:	18 95       	mov	r5,r12
8000513a:	16 97       	mov	r7,r11
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000513c:	f7 36 00 0c 	ld.ub	r6,r11[12]
80005140:	30 38       	mov	r8,3
80005142:	f0 06 18 00 	cp.b	r6,r8
80005146:	e0 8b 00 4d 	brhi	800051e0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
8000514a:	f7 34 00 0b 	ld.ub	r4,r11[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000514e:	30 18       	mov	r8,1
80005150:	f0 04 18 00 	cp.b	r4,r8
80005154:	e0 8b 00 46 	brhi	800051e0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80005158:	f7 33 00 08 	ld.ub	r3,r11[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000515c:	30 78       	mov	r8,7
8000515e:	f0 03 18 00 	cp.b	r3,r8
80005162:	e0 88 00 3f 	brls	800051e0 <spi_setupChipReg+0xac>
80005166:	31 08       	mov	r8,16
80005168:	f0 03 18 00 	cp.b	r3,r8
8000516c:	e0 8b 00 3a 	brhi	800051e0 <spi_setupChipReg+0xac>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80005170:	14 9b       	mov	r11,r10
80005172:	6e 1c       	ld.w	r12,r7[0x4]
80005174:	f0 1f 00 1d 	mcall	800051e8 <spi_setupChipReg+0xb4>

	if (baudDiv < 0) {
80005178:	c3 45       	brlt	800051e0 <spi_setupChipReg+0xac>
		return SPI_ERROR_ARGUMENT;
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
8000517a:	30 08       	mov	r8,0
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
8000517c:	ec 09 16 01 	lsr	r9,r6,0x1
80005180:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80005184:	ec 16 00 01 	eorl	r6,0x1
80005188:	f1 d6 d0 21 	bfins	r8,r6,0x1,0x1
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000518c:	f1 d4 d0 61 	bfins	r8,r4,0x3,0x1
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80005190:	20 83       	sub	r3,8
80005192:	f1 d3 d0 84 	bfins	r8,r3,0x4,0x4
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80005196:	f1 dc d1 08 	bfins	r8,r12,0x8,0x8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8000519a:	ef 39 00 09 	ld.ub	r9,r7[9]
8000519e:	f1 d9 d2 08 	bfins	r8,r9,0x10,0x8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800051a2:	ef 39 00 0a 	ld.ub	r9,r7[10]
800051a6:	f1 d9 d3 08 	bfins	r8,r9,0x18,0x8

	switch (options->reg) {
800051aa:	0f 89       	ld.ub	r9,r7[0x0]
800051ac:	30 1a       	mov	r10,1
800051ae:	f4 09 18 00 	cp.b	r9,r10
800051b2:	c0 e0       	breq	800051ce <spi_setupChipReg+0x9a>
800051b4:	c0 a3       	brcs	800051c8 <spi_setupChipReg+0x94>
800051b6:	30 2a       	mov	r10,2
800051b8:	f4 09 18 00 	cp.b	r9,r10
800051bc:	c0 c0       	breq	800051d4 <spi_setupChipReg+0xa0>
800051be:	30 3a       	mov	r10,3
800051c0:	f4 09 18 00 	cp.b	r9,r10
800051c4:	c0 e1       	brne	800051e0 <spi_setupChipReg+0xac>
800051c6:	c0 a8       	rjmp	800051da <spi_setupChipReg+0xa6>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800051c8:	8b c8       	st.w	r5[0x30],r8
800051ca:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
800051ce:	8b d8       	st.w	r5[0x34],r8
800051d0:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
800051d4:	8b e8       	st.w	r5[0x38],r8
800051d6:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
800051da:	8b f8       	st.w	r5[0x3c],r8
800051dc:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
		break;
800051e0:	30 2c       	mov	r12,2
		}
	}
#endif

	return SPI_OK;
}
800051e2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800051e6:	00 00       	add	r0,r0
800051e8:	80 00       	ld.sh	r0,r0[0x0]
800051ea:	50 3c       	stdsp	sp[0xc],r12

800051ec <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
800051ec:	30 18       	mov	r8,1
800051ee:	99 08       	st.w	r12[0x0],r8
}
800051f0:	5e fc       	retal	r12

800051f2 <spi_is_enabled>:
	spi->cr = AVR32_SPI_CR_SPIDIS_MASK;
}

bool spi_is_enabled(volatile avr32_spi_t *spi)
{
	return (spi->sr & AVR32_SPI_SR_SPIENS_MASK) != 0;
800051f2:	78 4c       	ld.w	r12,r12[0x10]
}
800051f4:	f9 dc c2 01 	bfextu	r12,r12,0x10,0x1
800051f8:	5e fc       	retal	r12

800051fa <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
800051fa:	e0 68 3a 98 	mov	r8,15000
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800051fe:	c0 58       	rjmp	80005208 <spi_write+0xe>
		if (!timeout--) {
80005200:	58 08       	cp.w	r8,0
80005202:	c0 21       	brne	80005206 <spi_write+0xc>
80005204:	5e ff       	retal	1
80005206:	20 18       	sub	r8,1

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80005208:	78 49       	ld.w	r9,r12[0x10]
8000520a:	e2 19 00 02 	andl	r9,0x2,COH
8000520e:	cf 90       	breq	80005200 <spi_write+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80005210:	5c 7b       	castu.h	r11
80005212:	99 3b       	st.w	r12[0xc],r11
80005214:	5e fd       	retal	0

80005216 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80005216:	e0 68 3a 98 	mov	r8,15000
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
8000521a:	c0 58       	rjmp	80005224 <spi_read+0xe>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
8000521c:	58 08       	cp.w	r8,0
8000521e:	c0 21       	brne	80005222 <spi_read+0xc>
80005220:	5e ff       	retal	1
80005222:	20 18       	sub	r8,1

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80005224:	78 49       	ld.w	r9,r12[0x10]
80005226:	e2 19 02 01 	andl	r9,0x201,COH
8000522a:	e0 49 02 01 	cp.w	r9,513
8000522e:	cf 71       	brne	8000521c <spi_read+0x6>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80005230:	78 28       	ld.w	r8,r12[0x8]
80005232:	b6 08       	st.h	r11[0x0],r8
80005234:	5e fd       	retal	0

80005236 <udd_set_address>:
}


void udd_set_address(uint8_t address)
{
	udd_disable_address();
80005236:	fe 68 00 00 	mov	r8,-131072
8000523a:	70 09       	ld.w	r9,r8[0x0]
8000523c:	a7 d9       	cbr	r9,0x7
8000523e:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80005240:	70 09       	ld.w	r9,r8[0x0]
80005242:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80005246:	e0 19 ff 80 	andl	r9,0xff80
8000524a:	f9 e9 10 09 	or	r9,r12,r9
8000524e:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80005250:	70 09       	ld.w	r9,r8[0x0]
80005252:	a7 b9       	sbr	r9,0x7
80005254:	91 09       	st.w	r8[0x0],r9
}
80005256:	5e fc       	retal	r12

80005258 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
80005258:	fe 68 00 00 	mov	r8,-131072
8000525c:	70 0c       	ld.w	r12,r8[0x0]
}
8000525e:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80005262:	5e fc       	retal	r12

80005264 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
80005264:	fe 68 00 20 	mov	r8,-131040
80005268:	70 0c       	ld.w	r12,r8[0x0]
}
8000526a:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
8000526e:	5e fc       	retal	r12

80005270 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
80005270:	48 28       	lddpc	r8,80005278 <udd_set_setup_payload+0x8>
80005272:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
80005274:	b0 6b       	st.h	r8[0xc],r11
}
80005276:	5e fc       	retal	r12
80005278:	00 00       	add	r0,r0
8000527a:	2a 4c       	sub	r12,-92

8000527c <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
8000527c:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
80005280:	a3 68       	lsl	r8,0x2
80005282:	e0 38 fe 40 	sub	r8,130624
80005286:	70 0c       	ld.w	r12,r8[0x0]
}
80005288:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
8000528c:	5e fc       	retal	r12
8000528e:	d7 03       	nop

80005290 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
80005290:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80005292:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index) {
80005296:	30 39       	mov	r9,3
80005298:	f2 08 18 00 	cp.b	r8,r9
8000529c:	e0 8b 00 49 	brhi	8000532e <udd_ep_set_halt+0x9e>
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
800052a0:	f0 09 15 02 	lsl	r9,r8,0x2
800052a4:	fe 6e 01 c0 	mov	lr,-130624
800052a8:	f2 0e 00 0a 	add	r10,r9,lr
800052ac:	74 0a       	ld.w	r10,r10[0x0]
800052ae:	e6 1a 00 08 	andh	r10,0x8,COH
800052b2:	c3 f1       	brne	80005330 <udd_ep_set_halt+0xa0>

	if (USB_DEVICE_MAX_EP < index) {
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];
800052b4:	f0 ca 00 01 	sub	r10,r8,1
800052b8:	f4 0a 00 2a 	add	r10,r10,r10<<0x2
800052bc:	49 eb       	lddpc	r11,80005334 <udd_ep_set_halt+0xa4>
800052be:	f6 0a 00 2a 	add	r10,r11,r10<<0x2

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
			|| ptr_job->stall_requested) { // Endpoint stall is requested
800052c2:	74 0b       	ld.w	r11,r10[0x0]
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
800052c4:	16 9e       	mov	lr,r11
800052c6:	e6 1e 20 00 	andh	lr,0x2000,COH
800052ca:	c3 31       	brne	80005330 <udd_ep_set_halt+0xa0>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
	}

	if (ptr_job->busy == true) {
800052cc:	58 0b       	cp.w	r11,0
800052ce:	c3 05       	brlt	8000532e <udd_ep_set_halt+0x9e>
		return false; // Job on going, stall impossible
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
800052d0:	30 0b       	mov	r11,0
800052d2:	f6 0c 18 00 	cp.b	r12,r11
800052d6:	c1 94       	brge	80005308 <udd_ep_set_halt+0x78>
800052d8:	fe 6c 01 30 	mov	r12,-130768
800052dc:	f2 0c 00 0b 	add	r11,r9,r12
800052e0:	76 0b       	ld.w	r11,r11[0x0]
800052e2:	f7 db c1 82 	bfextu	r11,r11,0xc,0x2
800052e6:	c1 10       	breq	80005308 <udd_ep_set_halt+0x78>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
800052e8:	74 0b       	ld.w	r11,r10[0x0]
800052ea:	30 1c       	mov	r12,1
800052ec:	f7 dc d3 a1 	bfins	r11,r12,0x1d,0x1
800052f0:	95 0b       	st.w	r10[0x0],r11
			udd_enable_bank_interrupt(index);
800052f2:	e0 39 fe 10 	sub	r9,130576
800052f6:	e0 6a 10 00 	mov	r10,4096
800052fa:	93 0a       	st.w	r9[0x0],r10
			udd_enable_endpoint_interrupt(index);
800052fc:	f4 08 09 48 	lsl	r8,r10,r8
80005300:	fe 69 00 00 	mov	r9,-131072
80005304:	93 68       	st.w	r9[0x18],r8
			return true;
80005306:	d8 02       	popm	pc
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
80005308:	fe 6a 01 00 	mov	r10,-130816
8000530c:	f2 0a 00 08 	add	r8,r9,r10
80005310:	70 0a       	ld.w	r10,r8[0x0]
80005312:	a9 da       	cbr	r10,0x9
80005314:	91 0a       	st.w	r8[0x0],r10
	udd_ack_stall(index);
80005316:	fe 6e 01 60 	mov	lr,-130720
8000531a:	f2 0e 00 08 	add	r8,r9,lr
8000531e:	34 0a       	mov	r10,64
80005320:	91 0a       	st.w	r8[0x0],r10
	udd_enable_stall_handshake(index);
80005322:	e0 39 fe 10 	sub	r9,130576
80005326:	e8 68 00 00 	mov	r8,524288
8000532a:	93 08       	st.w	r9[0x0],r8
8000532c:	da 0a       	popm	pc,r12=1
	return true;
8000532e:	d8 0a       	popm	pc,r12=0
80005330:	da 0a       	popm	pc,r12=1
80005332:	00 00       	add	r0,r0
80005334:	00 00       	add	r0,r0
80005336:	04 34       	cp.w	r4,r2

80005338 <udd_ep_clear_halt>:
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80005338:	d4 01       	pushm	lr
	bool b_stall_cleared = false;
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000533a:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep)
8000533e:	30 38       	mov	r8,3
80005340:	f0 0c 18 00 	cp.b	r12,r8
80005344:	e0 88 00 03 	brls	8000534a <udd_ep_clear_halt+0x12>
80005348:	d8 0a       	popm	pc,r12=0
		return false;
	ptr_job = &udd_ep_job[ep - 1];
8000534a:	18 99       	mov	r9,r12
8000534c:	f8 c8 00 01 	sub	r8,r12,1
80005350:	f0 08 00 28 	add	r8,r8,r8<<0x2
80005354:	4a aa       	lddpc	r10,800053fc <udd_ep_clear_halt+0xc4>
80005356:	f4 08 00 28 	add	r8,r10,r8<<0x2

	if (ptr_job->stall_requested) {
8000535a:	70 0a       	ld.w	r10,r8[0x0]
8000535c:	e6 1a 20 00 	andh	r10,0x2000,COH
80005360:	c0 31       	brne	80005366 <udd_ep_clear_halt+0x2e>
80005362:	30 0b       	mov	r11,0
80005364:	c1 38       	rjmp	8000538a <udd_ep_clear_halt+0x52>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
80005366:	70 0a       	ld.w	r10,r8[0x0]
80005368:	30 0b       	mov	r11,0
8000536a:	f5 db d3 a1 	bfins	r10,r11,0x1d,0x1
8000536e:	91 0a       	st.w	r8[0x0],r10
		udd_disable_bank_interrupt(ep);
80005370:	f8 0b 15 02 	lsl	r11,r12,0x2
80005374:	e0 3b fd e0 	sub	r11,130528
80005378:	e0 6a 10 00 	mov	r10,4096
8000537c:	97 0a       	st.w	r11[0x0],r10
		udd_disable_endpoint_interrupt(ep);
8000537e:	f4 0c 09 4c 	lsl	r12,r10,r12
80005382:	fe 6b 00 00 	mov	r11,-131072
80005386:	97 5c       	st.w	r11[0x14],r12
80005388:	30 1b       	mov	r11,1
		b_stall_cleared = true;
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
8000538a:	a3 69       	lsl	r9,0x2
8000538c:	fe 6c 01 c0 	mov	r12,-130624
80005390:	f2 0c 00 0a 	add	r10,r9,r12
80005394:	74 0a       	ld.w	r10,r10[0x0]
80005396:	e6 1a 00 08 	andh	r10,0x8,COH
8000539a:	c2 30       	breq	800053e0 <udd_ep_clear_halt+0xa8>
		if (Is_udd_stall(ep)) {
8000539c:	fe 6b 01 30 	mov	r11,-130768
800053a0:	f2 0b 00 0a 	add	r10,r9,r11
800053a4:	74 0a       	ld.w	r10,r10[0x0]
800053a6:	e2 1a 00 40 	andl	r10,0x40,COH
800053aa:	c0 e0       	breq	800053c6 <udd_ep_clear_halt+0x8e>
			udd_ack_stall(ep);
800053ac:	fe 6c 01 60 	mov	r12,-130720
800053b0:	f2 0c 00 0a 	add	r10,r9,r12
800053b4:	34 0b       	mov	r11,64
800053b6:	95 0b       	st.w	r10[0x0],r11
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
800053b8:	fe 6b 01 f0 	mov	r11,-130576
800053bc:	f2 0b 00 0a 	add	r10,r9,r11
800053c0:	e4 6b 00 00 	mov	r11,262144
800053c4:	95 0b       	st.w	r10[0x0],r11
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
800053c6:	fe 6c 02 20 	mov	r12,-130528
800053ca:	f2 0c 00 0a 	add	r10,r9,r12
800053ce:	e8 6b 00 00 	mov	r11,524288
800053d2:	95 0b       	st.w	r10[0x0],r11
		udd_enable_endpoint_bank_autoswitch(ep);
800053d4:	e0 39 ff 00 	sub	r9,130816
800053d8:	72 0a       	ld.w	r10,r9[0x0]
800053da:	a9 ba       	sbr	r10,0x9
800053dc:	93 0a       	st.w	r9[0x0],r10
800053de:	c0 38       	rjmp	800053e4 <udd_ep_clear_halt+0xac>
		b_stall_cleared = true;
	}
	if (b_stall_cleared) {
800053e0:	58 0b       	cp.w	r11,0
800053e2:	c0 b0       	breq	800053f8 <udd_ep_clear_halt+0xc0>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
800053e4:	70 09       	ld.w	r9,r8[0x0]
800053e6:	58 09       	cp.w	r9,0
800053e8:	c0 84       	brge	800053f8 <udd_ep_clear_halt+0xc0>
			ptr_job->busy = false;
800053ea:	30 0a       	mov	r10,0
800053ec:	f3 da d3 e1 	bfins	r9,r10,0x1f,0x1
800053f0:	91 09       	st.w	r8[0x0],r9
			ptr_job->call_nohalt();
800053f2:	70 48       	ld.w	r8,r8[0x10]
800053f4:	5d 18       	icall	r8
800053f6:	da 0a       	popm	pc,r12=1
800053f8:	da 0a       	popm	pc,r12=1
800053fa:	00 00       	add	r0,r0
800053fc:	00 00       	add	r0,r0
800053fe:	04 34       	cp.w	r4,r2

80005400 <udd_ep_wait_stall_clear>:
}


bool udd_ep_wait_stall_clear(udd_ep_id_t ep,
		udd_callback_halt_cleared_t callback)
{
80005400:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
80005402:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep) {
80005406:	30 38       	mov	r8,3
80005408:	f0 0c 18 00 	cp.b	r12,r8
8000540c:	e0 8b 00 27 	brhi	8000545a <udd_ep_wait_stall_clear+0x5a>
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];

	if (!Is_udd_endpoint_enabled(ep)) {
80005410:	fe 68 00 00 	mov	r8,-131072
80005414:	70 79       	ld.w	r9,r8[0x1c]
80005416:	30 18       	mov	r8,1
80005418:	f0 0c 09 48 	lsl	r8,r8,r12
8000541c:	12 68       	and	r8,r9
8000541e:	c1 e0       	breq	8000545a <udd_ep_wait_stall_clear+0x5a>
	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	ptr_job = &udd_ep_job[ep - 1];
80005420:	f8 c8 00 01 	sub	r8,r12,1
80005424:	f0 08 00 28 	add	r8,r8,r8<<0x2
80005428:	48 d9       	lddpc	r9,8000545c <udd_ep_wait_stall_clear+0x5c>
8000542a:	f2 08 00 28 	add	r8,r9,r8<<0x2
	if (!Is_udd_endpoint_enabled(ep)) {
		return false; // Endpoint not enabled
	}

	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
8000542e:	70 09       	ld.w	r9,r8[0x0]
80005430:	58 09       	cp.w	r9,0
80005432:	c1 45       	brlt	8000545a <udd_ep_wait_stall_clear+0x5a>
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
80005434:	a3 6c       	lsl	r12,0x2
80005436:	e0 3c fe 40 	sub	r12,130624
8000543a:	78 0a       	ld.w	r10,r12[0x0]
8000543c:	e6 1a 00 08 	andh	r10,0x8,COH
80005440:	c0 41       	brne	80005448 <udd_ep_wait_stall_clear+0x48>
80005442:	e6 19 20 00 	andh	r9,0x2000,COH
80005446:	c0 80       	breq	80005456 <udd_ep_wait_stall_clear+0x56>
			|| ptr_job->stall_requested) {
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
80005448:	70 09       	ld.w	r9,r8[0x0]
8000544a:	30 1c       	mov	r12,1
8000544c:	f3 dc d3 e1 	bfins	r9,r12,0x1f,0x1
80005450:	91 09       	st.w	r8[0x0],r9
		ptr_job->call_nohalt = callback;
80005452:	91 4b       	st.w	r8[0x10],r11
	// Wait clear halt endpoint
	if (ptr_job->busy == true) {
		return false; // Job already on going
	}

	if (Is_udd_endpoint_stall_requested(ep)
80005454:	d8 02       	popm	pc
		// Endpoint halted then registers the callback
		ptr_job->busy = true;
		ptr_job->call_nohalt = callback;
	} else {
		// endpoint not halted then call directly callback
		callback();
80005456:	5d 1b       	icall	r11
80005458:	da 0a       	popm	pc,r12=1
8000545a:	d8 0a       	popm	pc,r12=0
8000545c:	00 00       	add	r0,r0
8000545e:	04 34       	cp.w	r4,r2

80005460 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80005460:	30 59       	mov	r9,5
80005462:	48 58       	lddpc	r8,80005474 <udd_ctrl_stall_data+0x14>
80005464:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80005466:	e8 69 00 00 	mov	r9,524288
8000546a:	fe 68 01 f0 	mov	r8,-130576
8000546e:	91 09       	st.w	r8[0x0],r9
}
80005470:	5e fc       	retal	r12
80005472:	00 00       	add	r0,r0
80005474:	00 00       	add	r0,r0
80005476:	04 74       	tst	r4,r2

80005478 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
80005478:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
8000547a:	48 48       	lddpc	r8,80005488 <udd_ctrl_endofrequest+0x10>
8000547c:	70 48       	ld.w	r8,r8[0x10]
8000547e:	58 08       	cp.w	r8,0
80005480:	c0 20       	breq	80005484 <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
80005482:	5d 18       	icall	r8
80005484:	d8 02       	popm	pc
80005486:	00 00       	add	r0,r0
80005488:	00 00       	add	r0,r0
8000548a:	2a 4c       	sub	r12,-92

8000548c <udd_ep_finish_job>:
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
8000548c:	d4 01       	pushm	lr
8000548e:	16 99       	mov	r9,r11
	if (ptr_job->busy == false) {
80005490:	78 08       	ld.w	r8,r12[0x0]
80005492:	58 08       	cp.w	r8,0
80005494:	c1 84       	brge	800054c4 <udd_ep_finish_job+0x38>
		return; // No on-going job
	}
	ptr_job->busy = false;
80005496:	30 0b       	mov	r11,0
80005498:	f1 db d3 e1 	bfins	r8,r11,0x1f,0x1
8000549c:	99 08       	st.w	r12[0x0],r8
	if (NULL == ptr_job->call_trans) {
8000549e:	78 48       	ld.w	r8,r12[0x10]
800054a0:	58 08       	cp.w	r8,0
800054a2:	c1 10       	breq	800054c4 <udd_ep_finish_job+0x38>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
800054a4:	f4 0b 15 02 	lsl	r11,r10,0x2
800054a8:	e0 3b ff 00 	sub	r11,130816
800054ac:	76 0b       	ld.w	r11,r11[0x0]
800054ae:	e2 1b 01 00 	andl	r11,0x100,COH
800054b2:	c0 60       	breq	800054be <udd_ep_finish_job+0x32>
		ep_num |= USB_EP_DIR_IN;
800054b4:	ea 1a ff ff 	orh	r10,0xffff
800054b8:	e8 1a ff 80 	orl	r10,0xff80
800054bc:	5c 5a       	castu.b	r10
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
800054be:	78 2b       	ld.w	r11,r12[0x8]
800054c0:	12 9c       	mov	r12,r9
800054c2:	5d 18       	icall	r8
800054c4:	d8 02       	popm	pc
800054c6:	d7 03       	nop

800054c8 <udd_ep_abort_job>:
	}
}


static void udd_ep_abort_job(udd_ep_id_t ep)
{
800054c8:	d4 01       	pushm	lr
	ep &= USB_EP_ADDR_MASK;
800054ca:	f5 dc c0 04 	bfextu	r10,r12,0x0,0x4

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
800054ce:	f4 cc 00 01 	sub	r12,r10,1
800054d2:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
800054d6:	30 1b       	mov	r11,1
800054d8:	48 38       	lddpc	r8,800054e4 <udd_ep_abort_job+0x1c>
800054da:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
800054de:	f0 1f 00 03 	mcall	800054e8 <udd_ep_abort_job+0x20>
}
800054e2:	d8 02       	popm	pc
800054e4:	00 00       	add	r0,r0
800054e6:	04 34       	cp.w	r4,r2
800054e8:	80 00       	ld.sh	r0,r0[0x0]
800054ea:	54 8c       	stdsp	sp[0x120],r12

800054ec <udd_ep_abort>:
	return true;
}


void udd_ep_abort(udd_ep_id_t ep)
{
800054ec:	d4 01       	pushm	lr
	uint8_t index = ep & USB_EP_ADDR_MASK;
800054ee:	f3 dc c0 04 	bfextu	r9,r12,0x0,0x4

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
800054f2:	f2 c8 00 01 	sub	r8,r9,1
800054f6:	30 0a       	mov	r10,0
800054f8:	ea 1a 02 00 	orh	r10,0x200
800054fc:	f4 08 09 4a 	lsl	r10,r10,r8
80005500:	fe 68 00 00 	mov	r8,-131072
80005504:	91 5a       	st.w	r8[0x14],r10
	udd_endpoint_dma_set_control(index, 0);
80005506:	f2 0a 15 04 	lsl	r10,r9,0x4
8000550a:	e0 3a fd 00 	sub	r10,130304
8000550e:	30 0b       	mov	r11,0
80005510:	95 2b       	st.w	r10[0x8],r11
	// Kill banks
	udd_disable_endpoint_interrupt(index);
80005512:	e0 6a 10 00 	mov	r10,4096
80005516:	f4 09 09 4a 	lsl	r10,r10,r9
8000551a:	91 5a       	st.w	r8[0x14],r10
	while (udd_nb_busy_bank(index)) {
8000551c:	a3 69       	lsl	r9,0x2
8000551e:	fe 68 01 30 	mov	r8,-130768
80005522:	f2 08 00 0a 	add	r10,r9,r8
		udd_kill_last_in_bank(index);
80005526:	fe 68 01 f0 	mov	r8,-130576
8000552a:	f2 08 00 0e 	add	lr,r9,r8
8000552e:	e0 6b 20 00 	mov	r11,8192
		while(Is_udd_killing_last_in_bank(index));
80005532:	e0 39 fe 40 	sub	r9,130624
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
80005536:	c0 68       	rjmp	80005542 <udd_ep_abort+0x56>
		udd_kill_last_in_bank(index);
80005538:	9d 0b       	st.w	lr[0x0],r11
		while(Is_udd_killing_last_in_bank(index));
8000553a:	72 08       	ld.w	r8,r9[0x0]
8000553c:	e2 18 20 00 	andl	r8,0x2000,COH
80005540:	cf d1       	brne	8000553a <udd_ep_abort+0x4e>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
80005542:	74 08       	ld.w	r8,r10[0x0]
80005544:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
80005548:	cf 81       	brne	80005538 <udd_ep_abort+0x4c>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
8000554a:	f0 1f 00 02 	mcall	80005550 <udd_ep_abort+0x64>
}
8000554e:	d8 02       	popm	pc
80005550:	80 00       	ld.sh	r0,r0[0x0]
80005552:	54 c8       	stdsp	sp[0x130],r8

80005554 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80005554:	eb cd 40 80 	pushm	r7,lr
	uint8_t index = ep & USB_EP_ADDR_MASK;
80005558:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < index) {
8000555c:	30 38       	mov	r8,3
8000555e:	f0 07 18 00 	cp.b	r7,r8
80005562:	e0 8b 00 1f 	brhi	800055a0 <udd_ep_free+0x4c>
		return;
	}
	udd_disable_endpoint(index);
80005566:	fe 68 00 00 	mov	r8,-131072
8000556a:	70 7a       	ld.w	r10,r8[0x1c]
8000556c:	30 19       	mov	r9,1
8000556e:	f2 07 09 49 	lsl	r9,r9,r7
80005572:	5c d9       	com	r9
80005574:	14 69       	and	r9,r10
80005576:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
80005578:	ee 08 15 02 	lsl	r8,r7,0x2
8000557c:	e0 38 ff 00 	sub	r8,130816
80005580:	70 09       	ld.w	r9,r8[0x0]
80005582:	a1 d9       	cbr	r9,0x1
80005584:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80005586:	f0 1f 00 08 	mcall	800055a4 <udd_ep_free+0x50>
	udd_ep_job[index - 1].stall_requested = false;
8000558a:	20 17       	sub	r7,1
8000558c:	ee 07 00 27 	add	r7,r7,r7<<0x2
80005590:	48 68       	lddpc	r8,800055a8 <udd_ep_free+0x54>
80005592:	f0 07 00 27 	add	r7,r8,r7<<0x2
80005596:	6e 08       	ld.w	r8,r7[0x0]
80005598:	30 09       	mov	r9,0
8000559a:	f1 d9 d3 a1 	bfins	r8,r9,0x1d,0x1
8000559e:	8f 08       	st.w	r7[0x0],r8
800055a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800055a4:	80 00       	ld.sh	r0,r0[0x0]
800055a6:	54 c8       	stdsp	sp[0x130],r8
800055a8:	00 00       	add	r0,r0
800055aa:	04 34       	cp.w	r4,r2

800055ac <udd_sleep_mode>:
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
	if (!b_idle && udd_b_idle) {
800055ac:	58 0c       	cp.w	r12,0
800055ae:	c1 11       	brne	800055d0 <udd_sleep_mode+0x24>
800055b0:	49 18       	lddpc	r8,800055f4 <udd_sleep_mode+0x48>
800055b2:	11 89       	ld.ub	r9,r8[0x0]
800055b4:	30 08       	mov	r8,0
800055b6:	f0 09 18 00 	cp.b	r9,r8
800055ba:	c1 a0       	breq	800055ee <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800055bc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800055c0:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
800055c2:	48 e8       	lddpc	r8,800055f8 <udd_sleep_mode+0x4c>
800055c4:	11 9a       	ld.ub	r10,r8[0x1]
800055c6:	20 1a       	sub	r10,1
800055c8:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800055ca:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
800055ce:	c1 08       	rjmp	800055ee <udd_sleep_mode+0x42>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
800055d0:	48 98       	lddpc	r8,800055f4 <udd_sleep_mode+0x48>
800055d2:	11 89       	ld.ub	r9,r8[0x0]
800055d4:	30 08       	mov	r8,0
800055d6:	f0 09 18 00 	cp.b	r9,r8
800055da:	c0 a1       	brne	800055ee <udd_sleep_mode+0x42>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800055dc:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800055e0:	d3 03       	ssrf	0x10
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800055e2:	48 68       	lddpc	r8,800055f8 <udd_sleep_mode+0x4c>
800055e4:	11 9a       	ld.ub	r10,r8[0x1]
800055e6:	2f fa       	sub	r10,-1
800055e8:	b0 9a       	st.b	r8[0x1],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800055ea:	e3 b9 00 00 	mtsr	0x0,r9
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
800055ee:	48 28       	lddpc	r8,800055f4 <udd_sleep_mode+0x48>
800055f0:	b0 8c       	st.b	r8[0x0],r12
}
800055f2:	5e fc       	retal	r12
800055f4:	00 00       	add	r0,r0
800055f6:	04 70       	tst	r0,r2
800055f8:	00 00       	add	r0,r0
800055fa:	2a 64       	sub	r4,-90

800055fc <udd_send_remotewakeup>:
{
	return udd_micro_frame_number();
}

void udd_send_remotewakeup(void)
{
800055fc:	d4 01       	pushm	lr
#ifndef UDD_NO_SLEEP_MGR
	if (!udd_b_idle)
800055fe:	48 b8       	lddpc	r8,80005628 <udd_send_remotewakeup+0x2c>
80005600:	11 89       	ld.ub	r9,r8[0x0]
80005602:	30 08       	mov	r8,0
80005604:	f0 09 18 00 	cp.b	r9,r8
80005608:	c0 e1       	brne	80005624 <udd_send_remotewakeup+0x28>
#endif
	{
		udd_sleep_mode(true); // Enter in IDLE mode
8000560a:	30 1c       	mov	r12,1
8000560c:	f0 1f 00 08 	mcall	8000562c <udd_send_remotewakeup+0x30>
		otg_unfreeze_clock();
80005610:	fe 68 08 00 	mov	r8,-129024
80005614:	70 09       	ld.w	r9,r8[0x0]
80005616:	af c9       	cbr	r9,0xe
80005618:	91 09       	st.w	r8[0x0],r9
		udd_initiate_remote_wake_up();
8000561a:	fe 68 00 00 	mov	r8,-131072
8000561e:	70 09       	ld.w	r9,r8[0x0]
80005620:	a9 b9       	sbr	r9,0x9
80005622:	91 09       	st.w	r8[0x0],r9
80005624:	d8 02       	popm	pc
80005626:	00 00       	add	r0,r0
80005628:	00 00       	add	r0,r0
8000562a:	04 70       	tst	r0,r2
8000562c:	80 00       	ld.sh	r0,r0[0x0]
8000562e:	55 ac       	stdsp	sp[0x168],r12

80005630 <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
80005630:	d4 01       	pushm	lr
	otg_unfreeze_clock();
80005632:	fe 68 08 00 	mov	r8,-129024
80005636:	70 09       	ld.w	r9,r8[0x0]
80005638:	af c9       	cbr	r9,0xe
8000563a:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
8000563c:	fe 69 00 00 	mov	r9,-131072
80005640:	72 0a       	ld.w	r10,r9[0x0]
80005642:	a9 aa       	sbr	r10,0x8
80005644:	93 0a       	st.w	r9[0x0],r10
	otg_freeze_clock();
80005646:	70 09       	ld.w	r9,r8[0x0]
80005648:	af a9       	sbr	r9,0xe
8000564a:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
8000564c:	30 0c       	mov	r12,0
8000564e:	f0 1f 00 02 	mcall	80005654 <udd_detach+0x24>
}
80005652:	d8 02       	popm	pc
80005654:	80 00       	ld.sh	r0,r0[0x0]
80005656:	55 ac       	stdsp	sp[0x168],r12

80005658 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80005658:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000565c:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80005660:	d3 03       	ssrf	0x10
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80005662:	30 1c       	mov	r12,1
80005664:	f0 1f 00 18 	mcall	800056c4 <udd_attach+0x6c>
	otg_unfreeze_clock();
80005668:	fe 68 08 00 	mov	r8,-129024
8000566c:	70 09       	ld.w	r9,r8[0x0]
8000566e:	af c9       	cbr	r9,0xe
80005670:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );
80005672:	fe 68 08 04 	mov	r8,-129020
80005676:	70 09       	ld.w	r9,r8[0x0]
80005678:	e2 19 40 00 	andl	r9,0x4000,COH
8000567c:	cf d0       	breq	80005676 <udd_attach+0x1e>

	// Authorize attach if Vbus is present
	udd_attach_device();
8000567e:	fe 68 00 00 	mov	r8,-131072
80005682:	70 09       	ld.w	r9,r8[0x0]
80005684:	a9 c9       	cbr	r9,0x8
80005686:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
80005688:	fe 68 00 18 	mov	r8,-131048
8000568c:	30 8c       	mov	r12,8
8000568e:	91 0c       	st.w	r8[0x0],r12
	udd_enable_suspend_interrupt();
80005690:	30 1a       	mov	r10,1
80005692:	91 0a       	st.w	r8[0x0],r10
	udd_enable_wake_up_interrupt();
80005694:	31 09       	mov	r9,16
80005696:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80005698:	30 4b       	mov	r11,4
8000569a:	91 0b       	st.w	r8[0x0],r11
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interrupts flag
	udd_ack_reset();
8000569c:	fe 68 00 08 	mov	r8,-131064
800056a0:	91 0c       	st.w	r8[0x0],r12
	udd_ack_sof();
800056a2:	91 0b       	st.w	r8[0x0],r11
	udd_ack_msof();
800056a4:	30 2b       	mov	r11,2
800056a6:	91 0b       	st.w	r8[0x0],r11
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
800056a8:	fe 6b 00 0c 	mov	r11,-131060
800056ac:	97 0a       	st.w	r11[0x0],r10
#endif
	udd_ack_wake_up();
800056ae:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
800056b0:	fe 68 08 00 	mov	r8,-129024
800056b4:	70 09       	ld.w	r9,r8[0x0]
800056b6:	af a9       	sbr	r9,0xe
800056b8:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800056ba:	e3 b7 00 00 	mtsr	0x0,r7
	cpu_irq_restore(flags);
}
800056be:	e3 cd 80 80 	ldm	sp++,r7,pc
800056c2:	00 00       	add	r0,r0
800056c4:	80 00       	ld.sh	r0,r0[0x0]
800056c6:	55 ac       	stdsp	sp[0x168],r12

800056c8 <udd_ctrl_send_zlp_in>:

static void udd_ctrl_send_zlp_in(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
800056c8:	30 39       	mov	r9,3
800056ca:	48 a8       	lddpc	r8,800056f0 <udd_ctrl_send_zlp_in+0x28>
800056cc:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800056ce:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
800056d2:	d3 03       	ssrf	0x10

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
800056d4:	fe 6a 01 60 	mov	r10,-130720
800056d8:	30 19       	mov	r9,1
800056da:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
800056dc:	fe 68 01 f0 	mov	r8,-130576
800056e0:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
800056e2:	30 89       	mov	r9,8
800056e4:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
800056e6:	91 09       	st.w	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800056e8:	e3 bb 00 00 	mtsr	0x0,r11
	cpu_irq_restore(flags);
}
800056ec:	5e fc       	retal	r12
800056ee:	00 00       	add	r0,r0
800056f0:	00 00       	add	r0,r0
800056f2:	04 74       	tst	r4,r2

800056f4 <udd_ctrl_init>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800056f4:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
800056f8:	d3 03       	ssrf	0x10
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
800056fa:	30 1a       	mov	r10,1
800056fc:	fe 69 02 20 	mov	r9,-130528
80005700:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80005702:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80005706:	30 29       	mov	r9,2
80005708:	fe 68 01 60 	mov	r8,-130720
8000570c:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
8000570e:	48 59       	lddpc	r9,80005720 <udd_ctrl_init+0x2c>
80005710:	30 08       	mov	r8,0
80005712:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80005714:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
80005716:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
80005718:	48 39       	lddpc	r9,80005724 <udd_ctrl_init+0x30>
8000571a:	93 08       	st.w	r9[0x0],r8
}
8000571c:	5e fc       	retal	r12
8000571e:	00 00       	add	r0,r0
80005720:	00 00       	add	r0,r0
80005722:	2a 4c       	sub	r12,-92
80005724:	00 00       	add	r0,r0
80005726:	04 74       	tst	r4,r2

80005728 <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
80005728:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000572c:	e1 b8 00 00 	mfsr	r8,0x0
	cpu_irq_disable();
80005730:	d3 03       	ssrf	0x10
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
80005732:	30 1a       	mov	r10,1
80005734:	fe 69 02 20 	mov	r9,-130528
80005738:	93 0a       	st.w	r9[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000573a:	e3 b8 00 00 	mtsr	0x0,r8
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000573e:	4c 08       	lddpc	r8,8000583c <udd_ctrl_in_sent+0x114>
80005740:	70 08       	ld.w	r8,r8[0x0]
80005742:	58 38       	cp.w	r8,3
80005744:	c0 71       	brne	80005752 <udd_ctrl_in_sent+0x2a>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80005746:	f0 1f 00 3f 	mcall	80005840 <udd_ctrl_in_sent+0x118>
		// Reinitializes control endpoint management
		udd_ctrl_init();
8000574a:	f0 1f 00 3f 	mcall	80005844 <udd_ctrl_in_sent+0x11c>
		return;
8000574e:	e3 cd 80 80 	ldm	sp++,r7,pc
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
80005752:	4b e8       	lddpc	r8,80005848 <udd_ctrl_in_sent+0x120>
80005754:	90 08       	ld.sh	r8,r8[0x0]
80005756:	4b e9       	lddpc	r9,8000584c <udd_ctrl_in_sent+0x124>
80005758:	92 67       	ld.sh	r7,r9[0xc]
8000575a:	10 17       	sub	r7,r8
8000575c:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
8000575e:	c2 d1       	brne	800057b8 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80005760:	4b c9       	lddpc	r9,80005850 <udd_ctrl_in_sent+0x128>
80005762:	92 0a       	ld.sh	r10,r9[0x0]
80005764:	f4 08 00 08 	add	r8,r10,r8
80005768:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
8000576a:	4b 99       	lddpc	r9,8000584c <udd_ctrl_in_sent+0x124>
8000576c:	92 39       	ld.sh	r9,r9[0x6]
8000576e:	f0 09 19 00 	cp.h	r9,r8
80005772:	c0 70       	breq	80005780 <udd_ctrl_in_sent+0x58>
80005774:	4b 88       	lddpc	r8,80005854 <udd_ctrl_in_sent+0x12c>
80005776:	11 89       	ld.ub	r9,r8[0x0]
80005778:	30 08       	mov	r8,0
8000577a:	f0 09 18 00 	cp.b	r9,r8
8000577e:	c1 20       	breq	800057a2 <udd_ctrl_in_sent+0x7a>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80005780:	30 49       	mov	r9,4
80005782:	4a f8       	lddpc	r8,8000583c <udd_ctrl_in_sent+0x114>
80005784:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005786:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000578a:	d3 03       	ssrf	0x10
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
8000578c:	31 08       	mov	r8,16
8000578e:	fe 6a 01 60 	mov	r10,-130720
80005792:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
80005794:	fe 6a 01 f0 	mov	r10,-130576
80005798:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000579a:	e3 b9 00 00 	mtsr	0x0,r9
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
8000579e:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
800057a2:	4a b8       	lddpc	r8,8000584c <udd_ctrl_in_sent+0x124>
800057a4:	70 5c       	ld.w	r12,r8[0x14]
800057a6:	58 0c       	cp.w	r12,0
800057a8:	c1 20       	breq	800057cc <udd_ctrl_in_sent+0xa4>
800057aa:	5d 1c       	icall	r12
800057ac:	c1 00       	breq	800057cc <udd_ctrl_in_sent+0xa4>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
800057ae:	30 09       	mov	r9,0
800057b0:	4a 68       	lddpc	r8,80005848 <udd_ctrl_in_sent+0x120>
800057b2:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
800057b4:	4a 68       	lddpc	r8,8000584c <udd_ctrl_in_sent+0x124>
800057b6:	90 67       	ld.sh	r7,r8[0xc]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
800057b8:	33 f8       	mov	r8,63
800057ba:	f0 07 19 00 	cp.h	r7,r8
800057be:	e0 88 00 07 	brls	800057cc <udd_ctrl_in_sent+0xa4>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
800057c2:	30 09       	mov	r9,0
800057c4:	4a 48       	lddpc	r8,80005854 <udd_ctrl_in_sent+0x12c>
800057c6:	b0 89       	st.b	r8[0x0],r9
800057c8:	34 07       	mov	r7,64
800057ca:	c0 48       	rjmp	800057d2 <udd_ctrl_in_sent+0xaa>
	} else {
		b_shortpacket = true;
800057cc:	30 19       	mov	r9,1
800057ce:	4a 28       	lddpc	r8,80005854 <udd_ctrl_in_sent+0x12c>
800057d0:	b0 89       	st.b	r8[0x0],r9
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800057d2:	49 f8       	lddpc	r8,8000584c <udd_ctrl_in_sent+0x124>
800057d4:	70 2a       	ld.w	r10,r8[0x8]
800057d6:	49 d8       	lddpc	r8,80005848 <udd_ctrl_in_sent+0x120>
800057d8:	90 09       	ld.sh	r9,r8[0x0]

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800057da:	e1 bb 00 00 	mfsr	r11,0x0
	cpu_irq_disable();
800057de:	d3 03       	ssrf	0x10
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
800057e0:	fe 68 01 30 	mov	r8,-130768
800057e4:	70 08       	ld.w	r8,r8[0x0]
800057e6:	e2 18 00 02 	andl	r8,0x2,COH
800057ea:	c0 41       	brne	800057f2 <udd_ctrl_in_sent+0xca>
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
800057ec:	58 07       	cp.w	r7,0
800057ee:	c0 91       	brne	80005800 <udd_ctrl_in_sent+0xd8>
800057f0:	c1 58       	rjmp	8000581a <udd_ctrl_in_sent+0xf2>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800057f2:	e3 bb 00 00 	mtsr	0x0,r11
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
800057f6:	30 49       	mov	r9,4
800057f8:	49 18       	lddpc	r8,8000583c <udd_ctrl_in_sent+0x114>
800057fa:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
800057fc:	e3 cd 80 80 	ldm	sp++,r7,pc
	} else {
		b_shortpacket = true;
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80005800:	5c 79       	castu.h	r9
80005802:	f4 09 00 09 	add	r9,r10,r9
80005806:	30 08       	mov	r8,0
80005808:	ea 18 d0 00 	orh	r8,0xd000
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
		*ptr_dest++ = *ptr_src++;
8000580c:	13 3a       	ld.ub	r10,r9++
8000580e:	10 ca       	st.b	r8++,r10
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80005810:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80005814:	ee 0a 19 00 	cp.h	r10,r7
80005818:	cf a3       	brcs	8000580c <udd_ctrl_in_sent+0xe4>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
8000581a:	48 c8       	lddpc	r8,80005848 <udd_ctrl_in_sent+0x120>
8000581c:	90 09       	ld.sh	r9,r8[0x0]
8000581e:	f2 07 00 07 	add	r7,r9,r7
80005822:	b0 07       	st.h	r8[0x0],r7

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
80005824:	30 18       	mov	r8,1
80005826:	fe 69 01 60 	mov	r9,-130720
8000582a:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
8000582c:	fe 69 01 f0 	mov	r9,-130576
80005830:	93 08       	st.w	r9[0x0],r8
80005832:	e3 bb 00 00 	mtsr	0x0,r11
#endif
	barrier();
80005836:	e3 cd 80 80 	ldm	sp++,r7,pc
8000583a:	00 00       	add	r0,r0
8000583c:	00 00       	add	r0,r0
8000583e:	04 74       	tst	r4,r2
80005840:	80 00       	ld.sh	r0,r0[0x0]
80005842:	54 78       	stdsp	sp[0x11c],r8
80005844:	80 00       	ld.sh	r0,r0[0x0]
80005846:	56 f4       	stdsp	sp[0x1bc],r4
80005848:	00 00       	add	r0,r0
8000584a:	04 72       	tst	r2,r2
8000584c:	00 00       	add	r0,r0
8000584e:	2a 4c       	sub	r12,-92
80005850:	00 00       	add	r0,r0
80005852:	04 30       	cp.w	r0,r2
80005854:	00 00       	add	r0,r0
80005856:	04 32       	cp.w	r2,r2

80005858 <udd_ep_trans_done>:
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}

static void udd_ep_trans_done(udd_ep_id_t ep)
{
80005858:	eb cd 40 c0 	pushm	r6-r7,lr
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000585c:	18 99       	mov	r9,r12
8000585e:	f8 c8 00 01 	sub	r8,r12,1
80005862:	f0 08 00 28 	add	r8,r8,r8<<0x2
80005866:	4c fa       	lddpc	r10,800059a0 <udd_ep_trans_done+0x148>
80005868:	f4 08 00 28 	add	r8,r10,r8<<0x2

	if (!ptr_job->busy) {
8000586c:	70 0a       	ld.w	r10,r8[0x0]
8000586e:	58 0a       	cp.w	r10,0
80005870:	e0 84 00 96 	brge	8000599c <udd_ep_trans_done+0x144>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80005874:	70 3a       	ld.w	r10,r8[0xc]
80005876:	70 2b       	ld.w	r11,r8[0x8]
80005878:	16 3a       	cp.w	r10,r11
8000587a:	c5 e0       	breq	80005936 <udd_ep_trans_done+0xde>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
8000587c:	f6 0a 01 0a 	sub	r10,r11,r10

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80005880:	e0 5a 00 00 	cp.w	r10,65536
80005884:	e0 88 00 06 	brls	80005890 <udd_ep_trans_done+0x38>
80005888:	e0 7a 00 00 	mov	r10,65536
8000588c:	30 0e       	mov	lr,0
8000588e:	c0 38       	rjmp	80005894 <udd_ep_trans_done+0x3c>
			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
80005890:	f4 0e 15 10 	lsl	lr,r10,0x10
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
80005894:	f2 0b 15 02 	lsl	r11,r9,0x2
80005898:	e0 3b ff 00 	sub	r11,130816
8000589c:	76 07       	ld.w	r7,r11[0x0]
8000589e:	e2 17 01 00 	andl	r7,0x100,COH
800058a2:	c1 20       	breq	800058c6 <udd_ep_trans_done+0x6e>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
800058a4:	76 0b       	ld.w	r11,r11[0x0]
800058a6:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
800058aa:	30 87       	mov	r7,8
800058ac:	ee 0b 09 4b 	lsl	r11,r7,r11
800058b0:	20 1b       	sub	r11,1
800058b2:	f5 eb 00 0b 	and	r11,r10,r11
800058b6:	c1 80       	breq	800058e6 <udd_ep_trans_done+0x8e>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
800058b8:	0e 4e       	or	lr,r7
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
800058ba:	70 0b       	ld.w	r11,r8[0x0]
800058bc:	30 07       	mov	r7,0
800058be:	f7 d7 d3 c1 	bfins	r11,r7,0x1e,0x1
800058c2:	91 0b       	st.w	r8[0x0],r11
800058c4:	c1 18       	rjmp	800058e6 <udd_ep_trans_done+0x8e>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
800058c6:	76 07       	ld.w	r7,r11[0x0]
800058c8:	ef d7 c1 62 	bfextu	r7,r7,0xb,0x2
800058cc:	58 17       	cp.w	r7,1
800058ce:	c0 a1       	brne	800058e2 <udd_ep_trans_done+0x8a>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
800058d0:	76 0b       	ld.w	r11,r11[0x0]
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
800058d2:	f7 db c0 83 	bfextu	r11,r11,0x4,0x3
800058d6:	30 87       	mov	r7,8
800058d8:	ee 0b 09 4b 	lsl	r11,r7,r11
800058dc:	16 3a       	cp.w	r10,r11
800058de:	e0 8b 00 04 	brhi	800058e6 <udd_ep_trans_done+0x8e>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
800058e2:	e8 1e 00 14 	orl	lr,0x14
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
800058e6:	f2 0b 15 04 	lsl	r11,r9,0x4
800058ea:	e0 3b fd 00 	sub	r11,130304
800058ee:	70 16       	ld.w	r6,r8[0x4]
800058f0:	70 37       	ld.w	r7,r8[0xc]
800058f2:	ec 07 00 07 	add	r7,r6,r7
800058f6:	97 17       	st.w	r11[0x4],r7

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800058f8:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
800058fc:	d3 03       	ssrf	0x10
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
800058fe:	76 37       	ld.w	r7,r11[0xc]
80005900:	e2 17 00 10 	andl	r7,0x10,COH
80005904:	c1 51       	brne	8000592e <udd_ep_trans_done+0xd6>
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80005906:	e8 1e 00 21 	orl	lr,0x21
		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if ( !(udd_endpoint_dma_get_status(ep)
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
8000590a:	97 2e       	st.w	r11[0x8],lr
			ptr_job->nb_trans += next_trans;
8000590c:	70 39       	ld.w	r9,r8[0xc]
8000590e:	f2 0a 00 0a 	add	r10,r9,r10
80005912:	91 3a       	st.w	r8[0xc],r10
			udd_enable_endpoint_dma_interrupt(ep);
80005914:	20 1c       	sub	r12,1
80005916:	30 08       	mov	r8,0
80005918:	ea 18 02 00 	orh	r8,0x200
8000591c:	f0 0c 09 4c 	lsl	r12,r8,r12
80005920:	fe 68 00 00 	mov	r8,-131072
80005924:	91 6c       	st.w	r8[0x18],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80005926:	e3 b6 00 00 	mtsr	0x0,r6
#endif
	barrier();
8000592a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000592e:	e3 b6 00 00 	mtsr	0x0,r6
		cpu_irq_restore(flags);

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
80005932:	70 3a       	ld.w	r10,r8[0xc]
80005934:	91 2a       	st.w	r8[0x8],r10
	}
	if (Is_udd_endpoint_in(ep)) {
80005936:	a3 69       	lsl	r9,0x2
80005938:	fe 6b 01 00 	mov	r11,-130816
8000593c:	f2 0b 00 0a 	add	r10,r9,r11
80005940:	74 0a       	ld.w	r10,r10[0x0]
80005942:	e2 1a 01 00 	andl	r10,0x100,COH
80005946:	c2 60       	breq	80005992 <udd_ep_trans_done+0x13a>
		if (ptr_job->b_shortpacket) {
80005948:	70 0a       	ld.w	r10,r8[0x0]
8000594a:	e6 1a 40 00 	andh	r10,0x4000,COH
8000594e:	c2 20       	breq	80005992 <udd_ep_trans_done+0x13a>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
80005950:	fe 6a 01 60 	mov	r10,-130720
80005954:	f2 0a 00 08 	add	r8,r9,r10
80005958:	30 1a       	mov	r10,1
8000595a:	91 0a       	st.w	r8[0x0],r10
			if (Is_udd_write_enabled(ep)) {
8000595c:	fe 6b 01 30 	mov	r11,-130768
80005960:	f2 0b 00 08 	add	r8,r9,r11
80005964:	70 08       	ld.w	r8,r8[0x0]
80005966:	e6 18 00 01 	andh	r8,0x1,COH
8000596a:	c0 70       	breq	80005978 <udd_ep_trans_done+0x120>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
8000596c:	fe 6a 01 90 	mov	r10,-130672
80005970:	f2 0a 00 08 	add	r8,r9,r10
80005974:	30 1a       	mov	r10,1
80005976:	91 0a       	st.w	r8[0x0],r10
			}
			udd_enable_in_send_interrupt(ep);
80005978:	e0 39 fe 10 	sub	r9,130576
8000597c:	30 18       	mov	r8,1
8000597e:	93 08       	st.w	r9[0x0],r8
			udd_enable_endpoint_interrupt(ep);
80005980:	e0 68 10 00 	mov	r8,4096
80005984:	f0 0c 09 4c 	lsl	r12,r8,r12
80005988:	fe 68 00 00 	mov	r8,-131072
8000598c:	91 6c       	st.w	r8[0x18],r12
			return;
8000598e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
80005992:	18 9a       	mov	r10,r12
80005994:	30 0b       	mov	r11,0
80005996:	10 9c       	mov	r12,r8
80005998:	f0 1f 00 03 	mcall	800059a4 <udd_ep_trans_done+0x14c>
8000599c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800059a0:	00 00       	add	r0,r0
800059a2:	04 34       	cp.w	r4,r2
800059a4:	80 00       	ld.sh	r0,r0[0x0]
800059a6:	54 8c       	stdsp	sp[0x120],r12

800059a8 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
800059a8:	eb cd 40 fe 	pushm	r1-r7,lr
	if (Is_udd_sof()) {
800059ac:	fe 68 00 04 	mov	r8,-131068
800059b0:	70 08       	ld.w	r8,r8[0x0]
800059b2:	e2 18 00 04 	andl	r8,0x4,COH
800059b6:	c1 10       	breq	800059d8 <udd_interrupt+0x30>
		udd_ack_sof();
800059b8:	30 49       	mov	r9,4
800059ba:	fe 68 00 08 	mov	r8,-131064
800059be:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
800059c0:	fe 68 08 04 	mov	r8,-129020
800059c4:	70 08       	ld.w	r8,r8[0x0]
800059c6:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
800059ca:	c0 31       	brne	800059d0 <udd_interrupt+0x28>
			udc_sof_notify();
800059cc:	f0 1f 01 6f 	mcall	80005f88 <udd_interrupt+0x5e0>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
800059d0:	f0 1f 01 6f 	mcall	80005f8c <udd_interrupt+0x5e4>
#endif
		goto udd_interrupt_end;
800059d4:	e0 8f 02 c8 	bral	80005f64 <udd_interrupt+0x5bc>
	}
	if (Is_udd_msof()) {
800059d8:	fe 68 00 04 	mov	r8,-131068
800059dc:	70 08       	ld.w	r8,r8[0x0]
800059de:	e2 18 00 02 	andl	r8,0x2,COH
800059e2:	c0 90       	breq	800059f4 <udd_interrupt+0x4c>
		udd_ack_msof();
800059e4:	30 29       	mov	r9,2
800059e6:	fe 68 00 08 	mov	r8,-131064
800059ea:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
800059ec:	f0 1f 01 67 	mcall	80005f88 <udd_interrupt+0x5e0>
		goto udd_interrupt_end;
800059f0:	e0 8f 02 ba 	bral	80005f64 <udd_interrupt+0x5bc>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0))
800059f4:	fe 68 00 00 	mov	r8,-131072
800059f8:	70 18       	ld.w	r8,r8[0x4]
800059fa:	e2 18 10 00 	andl	r8,0x1000,COH
800059fe:	e0 80 01 69 	breq	80005cd0 <udd_interrupt+0x328>
		return false; // No interrupt events on control endpoint

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80005a02:	fe 68 02 20 	mov	r8,-130528
80005a06:	31 09       	mov	r9,16
80005a08:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80005a0a:	30 89       	mov	r9,8
80005a0c:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80005a0e:	fe 68 01 30 	mov	r8,-130768
80005a12:	70 08       	ld.w	r8,r8[0x0]
80005a14:	e2 18 00 04 	andl	r8,0x4,COH
80005a18:	c7 f0       	breq	80005b16 <udd_interrupt+0x16e>
static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80005a1a:	fe f8 05 76 	ld.w	r8,pc[1398]
80005a1e:	70 08       	ld.w	r8,r8[0x0]
80005a20:	58 08       	cp.w	r8,0
80005a22:	c0 50       	breq	80005a2c <udd_interrupt+0x84>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80005a24:	f0 1f 01 5c 	mcall	80005f94 <udd_interrupt+0x5ec>

		// Reinitializes control endpoint management
		udd_ctrl_init();
80005a28:	f0 1f 01 5c 	mcall	80005f98 <udd_interrupt+0x5f0>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
80005a2c:	fe 68 01 30 	mov	r8,-130768
80005a30:	70 08       	ld.w	r8,r8[0x0]
80005a32:	f1 d8 c2 8b 	bfextu	r8,r8,0x14,0xb
80005a36:	58 88       	cp.w	r8,8
80005a38:	c0 90       	breq	80005a4a <udd_interrupt+0xa2>
		udd_ctrl_stall_data();
80005a3a:	f0 1f 01 59 	mcall	80005f9c <udd_interrupt+0x5f4>
		udd_ack_setup_received(0);
80005a3e:	30 49       	mov	r9,4
80005a40:	fe 68 01 60 	mov	r8,-130720
80005a44:	91 09       	st.w	r8[0x0],r9
80005a46:	e0 8f 02 8f 	bral	80005f64 <udd_interrupt+0x5bc>
80005a4a:	30 08       	mov	r8,0
80005a4c:	ea 18 d0 00 	orh	r8,0xd000
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
80005a50:	fe fc 05 50 	ld.w	r12,pc[1360]
80005a54:	30 0b       	mov	r11,0
80005a56:	ea 1b 30 00 	orh	r11,0x3000
80005a5a:	f0 0c 00 09 	add	r9,r8,r12
80005a5e:	11 3a       	ld.ub	r10,r8++
80005a60:	f2 0b 0b 0a 	st.b	r9[r11],r10
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80005a64:	30 8a       	mov	r10,8
80005a66:	ea 1a d0 00 	orh	r10,0xd000
80005a6a:	14 38       	cp.w	r8,r10
80005a6c:	cf 71       	brne	80005a5a <udd_interrupt+0xb2>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80005a6e:	fe f8 05 32 	ld.w	r8,pc[1330]
80005a72:	90 19       	ld.sh	r9,r8[0x2]
80005a74:	5c c9       	swap.bh	r9
80005a76:	b0 19       	st.h	r8[0x2],r9
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80005a78:	90 29       	ld.sh	r9,r8[0x4]
80005a7a:	5c c9       	swap.bh	r9
80005a7c:	b0 29       	st.h	r8[0x4],r9
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80005a7e:	90 39       	ld.sh	r9,r8[0x6]
80005a80:	5c c9       	swap.bh	r9
80005a82:	b0 39       	st.h	r8[0x6],r9

	// Decode setup request
	if (udc_process_setup() == false) {
80005a84:	f0 1f 01 48 	mcall	80005fa4 <udd_interrupt+0x5fc>
80005a88:	c0 91       	brne	80005a9a <udd_interrupt+0xf2>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
80005a8a:	f0 1f 01 45 	mcall	80005f9c <udd_interrupt+0x5f4>
		udd_ack_setup_received(0);
80005a8e:	30 49       	mov	r9,4
80005a90:	fe 68 01 60 	mov	r8,-130720
80005a94:	91 09       	st.w	r8[0x0],r9
80005a96:	e0 8f 02 67 	bral	80005f64 <udd_interrupt+0x5bc>
		return;
	}
	udd_ack_setup_received(0);
80005a9a:	30 49       	mov	r9,4
80005a9c:	fe 68 01 60 	mov	r8,-130720
80005aa0:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80005aa2:	fe f8 04 fe 	ld.w	r8,pc[1278]
80005aa6:	11 89       	ld.ub	r9,r8[0x0]
80005aa8:	30 08       	mov	r8,0
80005aaa:	f0 09 18 00 	cp.b	r9,r8
80005aae:	c1 04       	brge	80005ace <udd_interrupt+0x126>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80005ab0:	30 08       	mov	r8,0
80005ab2:	fe f9 04 f6 	ld.w	r9,pc[1270]
80005ab6:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80005ab8:	fe f9 04 f4 	ld.w	r9,pc[1268]
80005abc:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80005abe:	30 29       	mov	r9,2
80005ac0:	fe f8 04 d0 	ld.w	r8,pc[1232]
80005ac4:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
80005ac6:	f0 1f 01 3b 	mcall	80005fb0 <udd_interrupt+0x608>
80005aca:	e0 8f 02 4d 	bral	80005f64 <udd_interrupt+0x5bc>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80005ace:	fe f8 04 d2 	ld.w	r8,pc[1234]
80005ad2:	90 39       	ld.sh	r9,r8[0x6]
80005ad4:	30 08       	mov	r8,0
80005ad6:	f0 09 19 00 	cp.h	r9,r8
80005ada:	c0 51       	brne	80005ae4 <udd_interrupt+0x13c>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80005adc:	f0 1f 01 36 	mcall	80005fb4 <udd_interrupt+0x60c>
80005ae0:	e0 8f 02 42 	bral	80005f64 <udd_interrupt+0x5bc>
			return;
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80005ae4:	30 08       	mov	r8,0
80005ae6:	fe f9 04 c2 	ld.w	r9,pc[1218]
80005aea:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80005aec:	fe f9 04 c0 	ld.w	r9,pc[1216]
80005af0:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80005af2:	30 19       	mov	r9,1
80005af4:	fe f8 04 9c 	ld.w	r8,pc[1180]
80005af8:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80005afa:	31 08       	mov	r8,16
80005afc:	fe 69 01 60 	mov	r9,-130720
80005b00:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005b02:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80005b06:	d3 03       	ssrf	0x10
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80005b08:	fe 6a 01 f0 	mov	r10,-130576
80005b0c:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80005b0e:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80005b12:	e0 8f 02 29 	bral	80005f64 <udd_interrupt+0x5bc>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80005b16:	fe 68 01 30 	mov	r8,-130768
80005b1a:	70 08       	ld.w	r8,r8[0x0]
80005b1c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005b20:	c0 b0       	breq	80005b36 <udd_interrupt+0x18e>
80005b22:	fe 68 01 c0 	mov	r8,-130624
80005b26:	70 08       	ld.w	r8,r8[0x0]
80005b28:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005b2c:	c0 50       	breq	80005b36 <udd_interrupt+0x18e>
		// IN packet sent
		udd_ctrl_in_sent();
80005b2e:	f0 1f 01 21 	mcall	80005fb0 <udd_interrupt+0x608>
80005b32:	e0 8f 02 19 	bral	80005f64 <udd_interrupt+0x5bc>
		return true;
	}
	if (Is_udd_out_received(0)) {
80005b36:	fe 68 01 30 	mov	r8,-130768
80005b3a:	70 08       	ld.w	r8,r8[0x0]
80005b3c:	e2 18 00 02 	andl	r8,0x2,COH
80005b40:	e0 80 00 a5 	breq	80005c8a <udd_interrupt+0x2e2>
{
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80005b44:	fe f8 04 4c 	ld.w	r8,pc[1100]
80005b48:	70 08       	ld.w	r8,r8[0x0]
80005b4a:	58 18       	cp.w	r8,1
80005b4c:	c1 10       	breq	80005b6e <udd_interrupt+0x1c6>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
80005b4e:	58 28       	cp.w	r8,2
80005b50:	5f 09       	sreq	r9
80005b52:	58 48       	cp.w	r8,4
80005b54:	5f 08       	sreq	r8
80005b56:	f3 e8 10 08 	or	r8,r9,r8
80005b5a:	c0 40       	breq	80005b62 <udd_interrupt+0x1ba>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
80005b5c:	f0 1f 01 0e 	mcall	80005f94 <udd_interrupt+0x5ec>
80005b60:	c0 38       	rjmp	80005b66 <udd_interrupt+0x1be>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80005b62:	f0 1f 01 0f 	mcall	80005f9c <udd_interrupt+0x5f4>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80005b66:	f0 1f 01 0d 	mcall	80005f98 <udd_interrupt+0x5f0>
80005b6a:	e0 8f 01 fd 	bral	80005f64 <udd_interrupt+0x5bc>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
80005b6e:	fe 68 01 30 	mov	r8,-130768
80005b72:	70 0b       	ld.w	r11,r8[0x0]
80005b74:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80005b78:	fe f8 04 28 	ld.w	r8,pc[1064]
80005b7c:	90 69       	ld.sh	r9,r8[0xc]
80005b7e:	fe f8 04 2e 	ld.w	r8,pc[1070]
80005b82:	90 08       	ld.sh	r8,r8[0x0]
80005b84:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
80005b88:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80005b8c:	f6 0a 00 0a 	add	r10,r11,r10
80005b90:	14 3c       	cp.w	r12,r10
80005b92:	c0 44       	brge	80005b9a <udd_interrupt+0x1f2>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80005b94:	10 19       	sub	r9,r8
80005b96:	f7 d9 b0 10 	bfexts	r11,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80005b9a:	fe f9 04 06 	ld.w	r9,pc[1030]
80005b9e:	72 29       	ld.w	r9,r9[0x8]
	for (i = 0; i < nb_data; i++) {
80005ba0:	58 0b       	cp.w	r11,0
80005ba2:	e0 80 01 e8 	breq	80005f72 <udd_interrupt+0x5ca>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
80005ba6:	5c 78       	castu.h	r8
80005ba8:	10 09       	add	r9,r8
80005baa:	30 08       	mov	r8,0
80005bac:	ea 18 d0 00 	orh	r8,0xd000
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
80005bb0:	11 3a       	ld.ub	r10,r8++
80005bb2:	12 ca       	st.b	r9++,r10
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80005bb4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80005bb8:	f6 0a 19 00 	cp.h	r10,r11
80005bbc:	cf a3       	brcs	80005bb0 <udd_interrupt+0x208>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80005bbe:	fe f9 03 ee 	ld.w	r9,pc[1006]
80005bc2:	92 08       	ld.sh	r8,r9[0x0]
80005bc4:	16 08       	add	r8,r11
80005bc6:	5c 88       	casts.h	r8
80005bc8:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
80005bca:	34 09       	mov	r9,64
80005bcc:	f2 0b 19 00 	cp.h	r11,r9
80005bd0:	c0 e1       	brne	80005bec <udd_interrupt+0x244>
80005bd2:	fe f9 03 ce 	ld.w	r9,pc[974]
80005bd6:	92 ba       	ld.uh	r10,r9[0x6]
80005bd8:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80005bdc:	fe f9 03 cc 	ld.w	r9,pc[972]
80005be0:	92 89       	ld.uh	r9,r9[0x0]
80005be2:	f6 09 00 09 	add	r9,r11,r9
80005be6:	12 3a       	cp.w	r10,r9
80005be8:	e0 89 00 1a 	brgt	80005c1c <udd_interrupt+0x274>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80005bec:	fe f9 03 b4 	ld.w	r9,pc[948]
80005bf0:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80005bf2:	72 5c       	ld.w	r12,r9[0x14]
80005bf4:	58 0c       	cp.w	r12,0
80005bf6:	c0 b0       	breq	80005c0c <udd_interrupt+0x264>
			if (!udd_g_ctrlreq.over_under_run()) {
80005bf8:	5d 1c       	icall	r12
80005bfa:	c0 91       	brne	80005c0c <udd_interrupt+0x264>
				// Stall ZLP
				udd_ctrl_stall_data();
80005bfc:	f0 1f 00 e8 	mcall	80005f9c <udd_interrupt+0x5f4>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80005c00:	30 29       	mov	r9,2
80005c02:	fe 68 01 60 	mov	r8,-130720
80005c06:	91 09       	st.w	r8[0x0],r9
80005c08:	e0 8f 01 ae 	bral	80005f64 <udd_interrupt+0x5bc>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80005c0c:	30 29       	mov	r9,2
80005c0e:	fe 68 01 60 	mov	r8,-130720
80005c12:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80005c14:	f0 1f 00 e8 	mcall	80005fb4 <udd_interrupt+0x60c>
80005c18:	e0 8f 01 a6 	bral	80005f64 <udd_interrupt+0x5bc>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80005c1c:	fe f9 03 84 	ld.w	r9,pc[900]
80005c20:	92 69       	ld.sh	r9,r9[0xc]
80005c22:	f0 09 19 00 	cp.h	r9,r8
80005c26:	c2 31       	brne	80005c6c <udd_interrupt+0x2c4>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80005c28:	fe f8 03 78 	ld.w	r8,pc[888]
80005c2c:	70 5c       	ld.w	r12,r8[0x14]
80005c2e:	58 0c       	cp.w	r12,0
80005c30:	c0 91       	brne	80005c42 <udd_interrupt+0x29a>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
80005c32:	f0 1f 00 db 	mcall	80005f9c <udd_interrupt+0x5f4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80005c36:	30 29       	mov	r9,2
80005c38:	fe 68 01 60 	mov	r8,-130720
80005c3c:	91 09       	st.w	r8[0x0],r9
80005c3e:	e0 8f 01 93 	bral	80005f64 <udd_interrupt+0x5bc>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80005c42:	5d 1c       	icall	r12
80005c44:	c0 91       	brne	80005c56 <udd_interrupt+0x2ae>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80005c46:	f0 1f 00 d6 	mcall	80005f9c <udd_interrupt+0x5f4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80005c4a:	30 29       	mov	r9,2
80005c4c:	fe 68 01 60 	mov	r8,-130720
80005c50:	91 09       	st.w	r8[0x0],r9
80005c52:	e0 8f 01 89 	bral	80005f64 <udd_interrupt+0x5bc>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80005c56:	fe f9 03 52 	ld.w	r9,pc[850]
80005c5a:	fe f8 03 52 	ld.w	r8,pc[850]
80005c5e:	90 0b       	ld.sh	r11,r8[0x0]
80005c60:	92 0a       	ld.sh	r10,r9[0x0]
80005c62:	f6 0a 00 0a 	add	r10,r11,r10
80005c66:	b2 0a       	st.h	r9[0x0],r10
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80005c68:	30 09       	mov	r9,0
80005c6a:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80005c6c:	fe 69 01 60 	mov	r9,-130720
80005c70:	30 28       	mov	r8,2
80005c72:	93 08       	st.w	r9[0x0],r8
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80005c74:	31 08       	mov	r8,16
80005c76:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005c78:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
80005c7c:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
80005c7e:	fe 6a 01 f0 	mov	r10,-130576
80005c82:	95 08       	st.w	r10[0x0],r8
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80005c84:	e3 b9 00 00 	mtsr	0x0,r9
#endif
	barrier();
80005c88:	c6 e9       	rjmp	80005f64 <udd_interrupt+0x5bc>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_nak_out(0)) {
80005c8a:	fe 68 01 30 	mov	r8,-130768
80005c8e:	70 08       	ld.w	r8,r8[0x0]
80005c90:	e2 18 00 08 	andl	r8,0x8,COH
80005c94:	c1 80       	breq	80005cc4 <udd_interrupt+0x31c>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80005c96:	30 89       	mov	r9,8
80005c98:	fe 68 01 60 	mov	r8,-130720
80005c9c:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
80005c9e:	fe 68 01 30 	mov	r8,-130768
80005ca2:	70 08       	ld.w	r8,r8[0x0]
80005ca4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005ca8:	e0 81 01 5e 	brne	80005f64 <udd_interrupt+0x5bc>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80005cac:	fe f8 02 e4 	ld.w	r8,pc[740]
80005cb0:	70 08       	ld.w	r8,r8[0x0]
80005cb2:	58 38       	cp.w	r8,3
80005cb4:	e0 81 01 58 	brne	80005f64 <udd_interrupt+0x5bc>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80005cb8:	e8 69 00 00 	mov	r9,524288
80005cbc:	fe 68 01 f0 	mov	r8,-130576
80005cc0:	91 09       	st.w	r8[0x0],r9
80005cc2:	c5 19       	rjmp	80005f64 <udd_interrupt+0x5bc>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
80005cc4:	fe 68 01 30 	mov	r8,-130768
80005cc8:	70 08       	ld.w	r8,r8[0x0]
80005cca:	e2 18 00 10 	andl	r8,0x10,COH
80005cce:	c0 f1       	brne	80005cec <udd_interrupt+0x344>
80005cd0:	fe f7 02 e8 	ld.w	r7,pc[744]
80005cd4:	0e 96       	mov	r6,r7
80005cd6:	fe 6b 01 34 	mov	r11,-130764
80005cda:	30 05       	mov	r5,0
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80005cdc:	fe 6a 00 00 	mov	r10,-131072
80005ce0:	30 04       	mov	r4,0
80005ce2:	ea 14 02 00 	orh	r4,0x200
			}
			udd_ep_trans_done(ep);
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80005ce6:	e0 63 10 00 	mov	r3,4096
80005cea:	c1 e8       	rjmp	80005d26 <udd_interrupt+0x37e>
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
		// Underflow on IN packet
		udd_ack_nak_in(0);
80005cec:	31 09       	mov	r9,16
80005cee:	fe 68 01 60 	mov	r8,-130720
80005cf2:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
80005cf4:	fe 68 01 30 	mov	r8,-130768
80005cf8:	70 08       	ld.w	r8,r8[0x0]
80005cfa:	e2 18 00 02 	andl	r8,0x2,COH
80005cfe:	e0 81 01 33 	brne	80005f64 <udd_interrupt+0x5bc>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80005d02:	fe f8 02 8e 	ld.w	r8,pc[654]
80005d06:	70 08       	ld.w	r8,r8[0x0]
80005d08:	58 18       	cp.w	r8,1
80005d0a:	c0 41       	brne	80005d12 <udd_interrupt+0x36a>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80005d0c:	f0 1f 00 aa 	mcall	80005fb4 <udd_interrupt+0x60c>
80005d10:	c2 a9       	rjmp	80005f64 <udd_interrupt+0x5bc>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80005d12:	58 48       	cp.w	r8,4
80005d14:	e0 81 01 28 	brne	80005f64 <udd_interrupt+0x5bc>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80005d18:	e8 69 00 00 	mov	r9,524288
80005d1c:	fe 68 01 f0 	mov	r8,-130576
80005d20:	91 09       	st.w	r8[0x0],r9
80005d22:	c2 19       	rjmp	80005f64 <udd_interrupt+0x5bc>
80005d24:	12 95       	mov	r5,r9
80005d26:	ea c9 ff ff 	sub	r9,r5,-1
80005d2a:	0c 98       	mov	r8,r6
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80005d2c:	74 4e       	ld.w	lr,r10[0x10]
80005d2e:	12 9c       	mov	r12,r9
80005d30:	e8 05 09 45 	lsl	r5,r4,r5
80005d34:	eb ee 00 0e 	and	lr,r5,lr
80005d38:	c1 b0       	breq	80005d6e <udd_interrupt+0x3c6>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
80005d3a:	74 1e       	ld.w	lr,r10[0x4]
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
80005d3c:	eb ee 00 0e 	and	lr,r5,lr
80005d40:	c1 70       	breq	80005d6e <udd_interrupt+0x3c6>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
80005d42:	a5 69       	lsl	r9,0x4
80005d44:	e0 39 fd 00 	sub	r9,130304
80005d48:	72 3a       	ld.w	r10,r9[0xc]
80005d4a:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80005d4e:	e0 81 01 0b 	brne	80005f64 <udd_interrupt+0x5bc>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
			}
			udd_disable_endpoint_dma_interrupt(ep);
80005d52:	fe 6a 00 00 	mov	r10,-131072
80005d56:	95 55       	st.w	r10[0x14],r5
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
80005d58:	72 39       	ld.w	r9,r9[0xc]
80005d5a:	b1 89       	lsr	r9,0x10
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
80005d5c:	c0 60       	breq	80005d68 <udd_interrupt+0x3c0>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
80005d5e:	6c 3a       	ld.w	r10,r6[0xc]
80005d60:	f4 09 01 09 	sub	r9,r10,r9
80005d64:	8d 39       	st.w	r6[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
80005d66:	8d 29       	st.w	r6[0x8],r9
			}
			udd_ep_trans_done(ep);
80005d68:	f0 1f 00 95 	mcall	80005fbc <udd_interrupt+0x614>
80005d6c:	cf c8       	rjmp	80005f64 <udd_interrupt+0x5bc>
			return true;
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
80005d6e:	74 45       	ld.w	r5,r10[0x10]
80005d70:	e6 0c 09 4e 	lsl	lr,r3,r12
80005d74:	fd e5 00 05 	and	r5,lr,r5
80005d78:	c4 80       	breq	80005e08 <udd_interrupt+0x460>
80005d7a:	e0 75 fe d0 	mov	r5,130768
80005d7e:	f6 05 00 01 	add	r1,r11,r5
80005d82:	f6 c5 ff 70 	sub	r5,r11,-144
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
80005d86:	6a 02       	ld.w	r2,r5[0x0]
80005d88:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80005d8c:	c1 70       	breq	80005dba <udd_interrupt+0x412>
80005d8e:	76 02       	ld.w	r2,r11[0x0]
80005d90:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80005d94:	c1 30       	breq	80005dba <udd_interrupt+0x412>
				udd_disable_in_send_interrupt(ep);
80005d96:	fe 6a 02 20 	mov	r10,-130528
80005d9a:	e2 0a 00 09 	add	r9,r1,r10
80005d9e:	30 1a       	mov	r10,1
80005da0:	93 0a       	st.w	r9[0x0],r10
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
80005da2:	e0 31 fe a0 	sub	r1,130720
80005da6:	83 0a       	st.w	r1[0x0],r10
				udd_ack_fifocon(ep);
80005da8:	e0 6a 40 00 	mov	r10,16384
80005dac:	93 0a       	st.w	r9[0x0],r10
				udd_ep_finish_job(ptr_job, false, ep);
80005dae:	18 9a       	mov	r10,r12
80005db0:	30 0b       	mov	r11,0
80005db2:	10 9c       	mov	r12,r8
80005db4:	f0 1f 00 83 	mcall	80005fc0 <udd_interrupt+0x618>
80005db8:	cd 68       	rjmp	80005f64 <udd_interrupt+0x5bc>
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
80005dba:	6a 0c       	ld.w	r12,r5[0x0]
80005dbc:	e2 1c 10 00 	andl	r12,0x1000,COH
80005dc0:	c2 40       	breq	80005e08 <udd_interrupt+0x460>
80005dc2:	76 0c       	ld.w	r12,r11[0x0]
80005dc4:	f9 dc c1 82 	bfextu	r12,r12,0xc,0x2
80005dc8:	c2 01       	brne	80005e08 <udd_interrupt+0x460>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
80005dca:	fe 65 02 20 	mov	r5,-130528
80005dce:	e2 05 00 09 	add	r9,r1,r5
80005dd2:	e0 6a 10 00 	mov	r10,4096
80005dd6:	93 0a       	st.w	r9[0x0],r10
				udd_disable_endpoint_interrupt(ep);
80005dd8:	fe 69 00 00 	mov	r9,-131072
80005ddc:	93 5e       	st.w	r9[0x14],lr

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
80005dde:	70 09       	ld.w	r9,r8[0x0]
80005de0:	30 0a       	mov	r10,0
80005de2:	f3 da d3 a1 	bfins	r9,r10,0x1d,0x1
80005de6:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_bank_autoswitch(ep);
80005de8:	fe 6a 01 00 	mov	r10,-130816
80005dec:	e2 0a 00 08 	add	r8,r1,r10
80005df0:	70 09       	ld.w	r9,r8[0x0]
80005df2:	a9 d9       	cbr	r9,0x9
80005df4:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
80005df6:	e0 31 fe 10 	sub	r1,130576
80005dfa:	e8 68 00 00 	mov	r8,524288
80005dfe:	83 08       	st.w	r1[0x0],r8
				udd_reset_data_toggle(ep);
80005e00:	e4 68 00 00 	mov	r8,262144
80005e04:	83 08       	st.w	r1[0x0],r8
80005e06:	ca f8       	rjmp	80005f64 <udd_interrupt+0x5bc>
80005e08:	2e c6       	sub	r6,-20
80005e0a:	2f cb       	sub	r11,-4
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
80005e0c:	58 39       	cp.w	r9,3
80005e0e:	c8 b1       	brne	80005d24 <udd_interrupt+0x37c>
80005e10:	cb 58       	rjmp	80005f7a <udd_interrupt+0x5d2>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
80005e12:	30 89       	mov	r9,8
80005e14:	fe 68 00 08 	mov	r8,-131064
80005e18:	91 09       	st.w	r8[0x0],r9
80005e1a:	30 06       	mov	r6,0
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
80005e1c:	30 15       	mov	r5,1
#  ifdef FREERTOS_USED
#    include "FreeRTOS.h"
#    include "task.h"
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
80005e1e:	2f f6       	sub	r6,-1
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
80005e20:	0c 9a       	mov	r10,r6
80005e22:	0a 9b       	mov	r11,r5
80005e24:	0e 9c       	mov	r12,r7
80005e26:	f0 1f 00 67 	mcall	80005fc0 <udd_interrupt+0x618>
80005e2a:	2e c7       	sub	r7,-20
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80005e2c:	58 36       	cp.w	r6,3
80005e2e:	cf 81       	brne	80005e1e <udd_interrupt+0x476>
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
#endif
		// Reset USB Device Stack Core
		udc_reset();
80005e30:	f0 1f 00 65 	mcall	80005fc4 <udd_interrupt+0x61c>
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
80005e34:	fe 68 00 00 	mov	r8,-131072
80005e38:	70 09       	ld.w	r9,r8[0x0]
80005e3a:	e0 19 ff 80 	andl	r9,0xff80
80005e3e:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80005e40:	70 09       	ld.w	r9,r8[0x0]
80005e42:	a7 b9       	sbr	r9,0x7
80005e44:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
80005e46:	fe 69 01 00 	mov	r9,-130816
80005e4a:	72 0a       	ld.w	r10,r9[0x0]
80005e4c:	30 8c       	mov	r12,8
80005e4e:	34 0b       	mov	r11,64
80005e50:	f6 0c 0c 4b 	max	r11,r11,r12
80005e54:	e0 6c 04 00 	mov	r12,1024
80005e58:	f6 0c 0d 4b 	min	r11,r11,r12
80005e5c:	a1 7b       	lsl	r11,0x1
80005e5e:	20 1b       	sub	r11,1
80005e60:	f6 0b 12 00 	clz	r11,r11
80005e64:	f6 0b 11 1c 	rsub	r11,r11,28
80005e68:	a5 6b       	lsl	r11,0x4
80005e6a:	e2 1b 19 7c 	andl	r11,0x197c,COH
80005e6e:	e0 1a e6 83 	andl	r10,0xe683
80005e72:	f7 ea 10 0a 	or	r10,r11,r10
80005e76:	93 0a       	st.w	r9[0x0],r10
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80005e78:	72 0a       	ld.w	r10,r9[0x0]
80005e7a:	a1 ba       	sbr	r10,0x1
80005e7c:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(0);
80005e7e:	70 79       	ld.w	r9,r8[0x1c]
80005e80:	a1 a9       	sbr	r9,0x0
80005e82:	91 79       	st.w	r8[0x1c],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80005e84:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
80005e88:	d3 03       	ssrf	0x10
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
80005e8a:	fe 69 01 f0 	mov	r9,-130576
80005e8e:	30 4b       	mov	r11,4
80005e90:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80005e92:	30 2b       	mov	r11,2
80005e94:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80005e96:	e0 69 10 00 	mov	r9,4096
80005e9a:	91 69       	st.w	r8[0x18],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80005e9c:	e3 ba 00 00 	mtsr	0x0,r10
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
80005ea0:	f0 1f 00 3e 	mcall	80005f98 <udd_interrupt+0x5f0>
		goto udd_interrupt_end;
80005ea4:	c6 08       	rjmp	80005f64 <udd_interrupt+0x5bc>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80005ea6:	fe 68 00 10 	mov	r8,-131056
80005eaa:	70 08       	ld.w	r8,r8[0x0]
80005eac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005eb0:	c1 d0       	breq	80005eea <udd_interrupt+0x542>
80005eb2:	fe 68 00 04 	mov	r8,-131068
80005eb6:	70 08       	ld.w	r8,r8[0x0]
80005eb8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80005ebc:	c1 70       	breq	80005eea <udd_interrupt+0x542>
		otg_unfreeze_clock();
80005ebe:	fe 68 08 00 	mov	r8,-129024
80005ec2:	70 09       	ld.w	r9,r8[0x0]
80005ec4:	af c9       	cbr	r9,0xe
80005ec6:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
80005ec8:	30 1a       	mov	r10,1
80005eca:	fe 69 00 14 	mov	r9,-131052
80005ece:	93 0a       	st.w	r9[0x0],r10
		udd_enable_wake_up_interrupt();
80005ed0:	31 0a       	mov	r10,16
80005ed2:	fe 69 00 18 	mov	r9,-131048
80005ed6:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
80005ed8:	70 09       	ld.w	r9,r8[0x0]
80005eda:	af a9       	sbr	r9,0xe
80005edc:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80005ede:	30 0c       	mov	r12,0
80005ee0:	f0 1f 00 3a 	mcall	80005fc8 <udd_interrupt+0x620>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
80005ee4:	f0 1f 00 3a 	mcall	80005fcc <udd_interrupt+0x624>
#endif
		goto udd_interrupt_end;
80005ee8:	c3 e8       	rjmp	80005f64 <udd_interrupt+0x5bc>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
80005eea:	fe 68 00 10 	mov	r8,-131056
80005eee:	70 08       	ld.w	r8,r8[0x0]
80005ef0:	e2 18 00 10 	andl	r8,0x10,COH
80005ef4:	c1 f0       	breq	80005f32 <udd_interrupt+0x58a>
80005ef6:	fe 68 00 04 	mov	r8,-131068
80005efa:	70 08       	ld.w	r8,r8[0x0]
80005efc:	e2 18 00 10 	andl	r8,0x10,COH
80005f00:	c1 90       	breq	80005f32 <udd_interrupt+0x58a>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80005f02:	fe 68 08 00 	mov	r8,-129024
80005f06:	70 09       	ld.w	r9,r8[0x0]
80005f08:	af c9       	cbr	r9,0xe
80005f0a:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
80005f0c:	fe 69 08 04 	mov	r9,-129020
80005f10:	72 08       	ld.w	r8,r9[0x0]
80005f12:	e2 18 40 00 	andl	r8,0x4000,COH
80005f16:	cf d0       	breq	80005f10 <udd_interrupt+0x568>

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
80005f18:	31 09       	mov	r9,16
80005f1a:	fe 68 00 14 	mov	r8,-131052
80005f1e:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
80005f20:	30 1c       	mov	r12,1
80005f22:	fe 68 00 18 	mov	r8,-131048
80005f26:	91 0c       	st.w	r8[0x0],r12
		udd_sleep_mode(true); // Enter in IDLE mode
80005f28:	f0 1f 00 28 	mcall	80005fc8 <udd_interrupt+0x620>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
80005f2c:	f0 1f 00 29 	mcall	80005fd0 <udd_interrupt+0x628>
#endif
		goto udd_interrupt_end;
80005f30:	c1 a8       	rjmp	80005f64 <udd_interrupt+0x5bc>
	}

	if (Is_otg_vbus_transition()) {
80005f32:	fe 68 08 04 	mov	r8,-129020
80005f36:	70 08       	ld.w	r8,r8[0x0]
80005f38:	e2 18 00 02 	andl	r8,0x2,COH
80005f3c:	c1 40       	breq	80005f64 <udd_interrupt+0x5bc>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
80005f3e:	fe 68 08 00 	mov	r8,-129024
80005f42:	70 09       	ld.w	r9,r8[0x0]
80005f44:	af c9       	cbr	r9,0xe
80005f46:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80005f48:	30 2a       	mov	r10,2
80005f4a:	fe 69 08 08 	mov	r9,-129016
80005f4e:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock();
80005f50:	70 09       	ld.w	r9,r8[0x0]
80005f52:	af a9       	sbr	r9,0xe
80005f54:	91 09       	st.w	r8[0x0],r9
#ifdef UDC_VBUS_EVENT
		UDC_VBUS_EVENT(Is_otg_vbus_high());
80005f56:	fe 68 08 04 	mov	r8,-129020
80005f5a:	70 0c       	ld.w	r12,r8[0x0]
80005f5c:	f9 dc c1 61 	bfextu	r12,r12,0xb,0x1
80005f60:	f0 1f 00 1d 	mcall	80005fd4 <udd_interrupt+0x62c>
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
80005f64:	fe 68 00 00 	mov	r8,-131072
80005f68:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80005f6c:	e3 cd 40 fe 	ldm	sp++,r1-r7,lr
80005f70:	d6 03       	rete
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
80005f72:	48 f9       	lddpc	r9,80005fac <udd_interrupt+0x604>
80005f74:	b2 08       	st.h	r9[0x0],r8
80005f76:	fe 9f fe 3b 	bral	80005bec <udd_interrupt+0x244>
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
80005f7a:	fe 68 00 04 	mov	r8,-131068
80005f7e:	70 08       	ld.w	r8,r8[0x0]
80005f80:	e2 18 00 08 	andl	r8,0x8,COH
80005f84:	c9 10       	breq	80005ea6 <udd_interrupt+0x4fe>
80005f86:	c4 6b       	rjmp	80005e12 <udd_interrupt+0x46a>
80005f88:	80 00       	ld.sh	r0,r0[0x0]
80005f8a:	73 0c       	ld.w	r12,r9[0x40]
80005f8c:	80 00       	ld.sh	r0,r0[0x0]
80005f8e:	7d 50       	ld.w	r0,lr[0x54]
80005f90:	00 00       	add	r0,r0
80005f92:	04 74       	tst	r4,r2
80005f94:	80 00       	ld.sh	r0,r0[0x0]
80005f96:	54 78       	stdsp	sp[0x11c],r8
80005f98:	80 00       	ld.sh	r0,r0[0x0]
80005f9a:	56 f4       	stdsp	sp[0x1bc],r4
80005f9c:	80 00       	ld.sh	r0,r0[0x0]
80005f9e:	54 60       	stdsp	sp[0x118],r0
80005fa0:	00 00       	add	r0,r0
80005fa2:	2a 4c       	sub	r12,-92
80005fa4:	80 00       	ld.sh	r0,r0[0x0]
80005fa6:	75 88       	ld.w	r8,r10[0x60]
80005fa8:	00 00       	add	r0,r0
80005faa:	04 30       	cp.w	r0,r2
80005fac:	00 00       	add	r0,r0
80005fae:	04 72       	tst	r2,r2
80005fb0:	80 00       	ld.sh	r0,r0[0x0]
80005fb2:	57 28       	stdsp	sp[0x1c8],r8
80005fb4:	80 00       	ld.sh	r0,r0[0x0]
80005fb6:	56 c8       	stdsp	sp[0x1b0],r8
80005fb8:	00 00       	add	r0,r0
80005fba:	04 34       	cp.w	r4,r2
80005fbc:	80 00       	ld.sh	r0,r0[0x0]
80005fbe:	58 58       	cp.w	r8,5
80005fc0:	80 00       	ld.sh	r0,r0[0x0]
80005fc2:	54 8c       	stdsp	sp[0x120],r12
80005fc4:	80 00       	ld.sh	r0,r0[0x0]
80005fc6:	75 2c       	ld.w	r12,r10[0x48]
80005fc8:	80 00       	ld.sh	r0,r0[0x0]
80005fca:	55 ac       	stdsp	sp[0x168],r12
80005fcc:	80 00       	ld.sh	r0,r0[0x0]
80005fce:	7d 84       	ld.w	r4,lr[0x60]
80005fd0:	80 00       	ld.sh	r0,r0[0x0]
80005fd2:	7d 78       	ld.w	r8,lr[0x5c]
80005fd4:	80 00       	ld.sh	r0,r0[0x0]
80005fd6:	7d 90       	ld.w	r0,lr[0x64]

80005fd8 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
80005fd8:	eb cd 40 e0 	pushm	r5-r7,lr
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
80005fdc:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep) {
80005fe0:	30 37       	mov	r7,3
80005fe2:	ee 0c 18 00 	cp.b	r12,r7
80005fe6:	e0 8b 00 3d 	brhi	80006060 <udd_ep_run+0x88>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80005fea:	fe 6e 00 00 	mov	lr,-131072
80005fee:	7c 7e       	ld.w	lr,lr[0x1c]
80005ff0:	18 96       	mov	r6,r12
80005ff2:	30 17       	mov	r7,1
80005ff4:	ee 0c 09 47 	lsl	r7,r7,r12
80005ff8:	1c 67       	and	r7,lr
80005ffa:	c3 30       	breq	80006060 <udd_ep_run+0x88>
			|| Is_udd_endpoint_stall_requested(ep)
80005ffc:	f8 0e 15 02 	lsl	lr,r12,0x2
80006000:	e0 3e fe 40 	sub	lr,130624
80006004:	7c 0e       	ld.w	lr,lr[0x0]
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80006006:	e6 1e 00 08 	andh	lr,0x8,COH
8000600a:	c2 b1       	brne	80006060 <udd_ep_run+0x88>
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
8000600c:	20 1c       	sub	r12,1
8000600e:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80006012:	49 57       	lddpc	r7,80006064 <udd_ep_run+0x8c>
80006014:	ee 0c 00 2e 	add	lr,r7,r12<<0x2

	if ((!Is_udd_endpoint_enabled(ep))
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
80006018:	7c 0c       	ld.w	r12,lr[0x0]
8000601a:	e6 1c 20 00 	andh	r12,0x2000,COH
8000601e:	c2 11       	brne	80006060 <udd_ep_run+0x88>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006020:	e1 bc 00 00 	mfsr	r12,0x0
	cpu_irq_disable();
80006024:	d3 03       	ssrf	0x10
		return false; // Endpoint is halted
	}

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80006026:	7c 07       	ld.w	r7,lr[0x0]
80006028:	58 07       	cp.w	r7,0
8000602a:	c0 54       	brge	80006034 <udd_ep_run+0x5c>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000602c:	e3 bc 00 00 	mtsr	0x0,r12
#endif
	barrier();
80006030:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
		cpu_irq_restore(flags);
		return false; // Job already on going
	}
	ptr_job->busy = true;
80006034:	7c 05       	ld.w	r5,lr[0x0]
80006036:	30 17       	mov	r7,1
80006038:	eb d7 d3 e1 	bfins	r5,r7,0x1f,0x1
8000603c:	9d 05       	st.w	lr[0x0],r5
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000603e:	e3 bc 00 00 	mtsr	0x0,r12
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
80006042:	9d 1a       	st.w	lr[0x4],r10
	ptr_job->buf_size = buf_size;
80006044:	9d 29       	st.w	lr[0x8],r9
	ptr_job->nb_trans = 0;
80006046:	30 09       	mov	r9,0
80006048:	9d 39       	st.w	lr[0xc],r9
	ptr_job->call_trans = callback;
8000604a:	9d 48       	st.w	lr[0x10],r8
	ptr_job->b_shortpacket = b_shortpacket;
8000604c:	7c 08       	ld.w	r8,lr[0x0]
8000604e:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
80006052:	9d 08       	st.w	lr[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
80006054:	0c 9c       	mov	r12,r6
80006056:	f0 1f 00 05 	mcall	80006068 <udd_ep_run+0x90>
8000605a:	0e 9c       	mov	r12,r7
	return true;
8000605c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006060:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80006064:	00 00       	add	r0,r0
80006066:	04 34       	cp.w	r4,r2
80006068:	80 00       	ld.sh	r0,r0[0x0]
8000606a:	58 58       	cp.w	r8,5

8000606c <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
8000606c:	d4 31       	pushm	r0-r7,lr
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
	ep = ep & USB_EP_ADDR_MASK;
8000606e:	ef dc c0 04 	bfextu	r7,r12,0x0,0x4

	if (ep > USB_DEVICE_MAX_EP) {
80006072:	30 38       	mov	r8,3
80006074:	f0 07 18 00 	cp.b	r7,r8
80006078:	e0 8b 00 ae 	brhi	800061d4 <udd_ep_alloc+0x168>
		return false;
	}
	if (Is_udd_endpoint_enabled(ep)) {
8000607c:	fe 68 00 00 	mov	r8,-131072
80006080:	70 78       	ld.w	r8,r8[0x1c]
80006082:	30 15       	mov	r5,1
80006084:	ea 07 09 45 	lsl	r5,r5,r7
80006088:	eb e8 00 08 	and	r8,r5,r8
8000608c:	e0 81 00 a4 	brne	800061d4 <udd_ep_alloc+0x168>
		return false;
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80006090:	f1 db c0 02 	bfextu	r8,r11,0x0,0x2
80006094:	58 18       	cp.w	r8,1
80006096:	e0 85 00 9f 	brlt	800061d4 <udd_ep_alloc+0x168>
8000609a:	58 28       	cp.w	r8,2
8000609c:	e0 8a 00 07 	brle	800060aa <udd_ep_alloc+0x3e>
800060a0:	58 38       	cp.w	r8,3
800060a2:	e0 81 00 99 	brne	800061d4 <udd_ep_alloc+0x168>
800060a6:	30 09       	mov	r9,0
800060a8:	c0 28       	rjmp	800060ac <udd_ep_alloc+0x40>
800060aa:	30 19       	mov	r9,1
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
800060ac:	ee 08 15 02 	lsl	r8,r7,0x2
800060b0:	e0 38 ff 00 	sub	r8,130816
800060b4:	70 0e       	ld.w	lr,r8[0x0]
800060b6:	5c 7a       	castu.h	r10
800060b8:	30 86       	mov	r6,8
800060ba:	f4 06 0c 4a 	max	r10,r10,r6
800060be:	e0 66 04 00 	mov	r6,1024
800060c2:	f4 06 0d 4a 	min	r10,r10,r6
800060c6:	a1 7a       	lsl	r10,0x1
800060c8:	20 1a       	sub	r10,1
800060ca:	f4 0a 12 00 	clz	r10,r10
800060ce:	f9 dc c0 e1 	bfextu	r12,r12,0x7,0x1
800060d2:	ab 7b       	lsl	r11,0xb
800060d4:	e2 1b 18 00 	andl	r11,0x1800,COH
800060d8:	f7 ec 10 8b 	or	r11,r11,r12<<0x8
800060dc:	f4 0c 11 1c 	rsub	r12,r10,28
800060e0:	f7 ec 10 4c 	or	r12,r11,r12<<0x4
800060e4:	f9 e9 10 29 	or	r9,r12,r9<<0x2
800060e8:	e2 19 19 7c 	andl	r9,0x197c,COH
800060ec:	1c 9a       	mov	r10,lr
800060ee:	e0 1a e6 83 	andl	r10,0xe683
800060f2:	14 49       	or	r9,r10
800060f4:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
800060f6:	5c 85       	casts.h	r5

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
800060f8:	30 28       	mov	r8,2
800060fa:	f0 07 18 00 	cp.b	r7,r8
800060fe:	e0 8b 00 1d 	brhi	80006138 <udd_ep_alloc+0xcc>
80006102:	fe 69 01 0c 	mov	r9,-130804
80006106:	30 38       	mov	r8,3
		if (Is_udd_endpoint_enabled(i)) {
80006108:	fe 6b 00 00 	mov	r11,-131072
8000610c:	30 1e       	mov	lr,1
8000610e:	76 7c       	ld.w	r12,r11[0x1c]
80006110:	fc 08 09 4a 	lsl	r10,lr,r8
80006114:	f5 ec 00 0c 	and	r12,r10,r12
80006118:	c0 b0       	breq	8000612e <udd_ep_alloc+0xc2>
			ep_allocated |= 1 << i;
8000611a:	f5 e5 10 05 	or	r5,r10,r5
8000611e:	5c 85       	casts.h	r5
			udd_disable_endpoint(i);
80006120:	76 7c       	ld.w	r12,r11[0x1c]
80006122:	5c da       	com	r10
80006124:	18 6a       	and	r10,r12
80006126:	97 7a       	st.w	r11[0x1c],r10
			udd_unallocate_memory(i);
80006128:	72 0a       	ld.w	r10,r9[0x0]
8000612a:	a1 da       	cbr	r10,0x1
8000612c:	93 0a       	st.w	r9[0x0],r10
8000612e:	20 18       	sub	r8,1
80006130:	20 49       	sub	r9,4
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80006132:	f0 07 18 00 	cp.b	r7,r8
80006136:	ce c3       	brcs	8000610e <udd_ep_alloc+0xa2>
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
		if (ep_allocated & (1 << i)) {
80006138:	5c 75       	castu.h	r5
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
8000613a:	4a 83       	lddpc	r3,800061d8 <udd_ep_alloc+0x16c>
			bool b_restart = ptr_job->busy;
			ptr_job->busy = false;
8000613c:	30 02       	mov	r2,0

			udd_allocate_memory(i);
			udd_enable_endpoint(i);
8000613e:	fe 64 00 00 	mov	r4,-131072
80006142:	30 11       	mov	r1,1
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80006144:	30 36       	mov	r6,3
		if (ep_allocated & (1 << i)) {
80006146:	0e 9c       	mov	r12,r7
80006148:	ea 07 08 48 	asr	r8,r5,r7
8000614c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80006150:	c3 b0       	breq	800061c6 <udd_ep_alloc+0x15a>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
80006152:	ee ce 00 01 	sub	lr,r7,1
80006156:	fc 0e 00 2e 	add	lr,lr,lr<<0x2
8000615a:	e6 0e 00 2e 	add	lr,r3,lr<<0x2
			bool b_restart = ptr_job->busy;
8000615e:	7c 0a       	ld.w	r10,lr[0x0]
			ptr_job->busy = false;
80006160:	14 98       	mov	r8,r10
80006162:	f1 d2 d3 e1 	bfins	r8,r2,0x1f,0x1
80006166:	9d 08       	st.w	lr[0x0],r8

			udd_allocate_memory(i);
80006168:	ee 08 15 02 	lsl	r8,r7,0x2
8000616c:	fe 6b 01 00 	mov	r11,-130816
80006170:	f0 0b 00 09 	add	r9,r8,r11
80006174:	72 0b       	ld.w	r11,r9[0x0]
80006176:	a1 bb       	sbr	r11,0x1
80006178:	93 0b       	st.w	r9[0x0],r11
			udd_enable_endpoint(i);
8000617a:	68 7b       	ld.w	r11,r4[0x1c]
8000617c:	e2 07 09 40 	lsl	r0,r1,r7
80006180:	e1 eb 10 0b 	or	r11,r0,r11
80006184:	89 7b       	st.w	r4[0x1c],r11
			if (!Is_udd_endpoint_configured(i)) {
80006186:	e0 38 fe d0 	sub	r8,130768
8000618a:	70 08       	ld.w	r8,r8[0x0]
8000618c:	e6 18 00 04 	andh	r8,0x4,COH
80006190:	c0 e1       	brne	800061ac <udd_ep_alloc+0x140>
				if (NULL == ptr_job->call_trans) {
80006192:	7c 48       	ld.w	r8,lr[0x10]
80006194:	58 08       	cp.w	r8,0
80006196:	c1 f0       	breq	800061d4 <udd_ep_alloc+0x168>
					return false;
				}
				if (Is_udd_endpoint_in(i)) {
80006198:	72 09       	ld.w	r9,r9[0x0]
8000619a:	e2 19 01 00 	andl	r9,0x100,COH
8000619e:	c0 20       	breq	800061a2 <udd_ep_alloc+0x136>
					i |= USB_EP_DIR_IN;
800061a0:	a7 b7       	sbr	r7,0x7
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
800061a2:	0e 9a       	mov	r10,r7
800061a4:	7c 2b       	ld.w	r11,lr[0x8]
800061a6:	30 1c       	mov	r12,1
800061a8:	5d 18       	icall	r8
800061aa:	d8 3a       	popm	r0-r7,pc,r12=0
						ptr_job->buf_size, i);
				return false;
			}
			udd_enable_endpoint_bank_autoswitch(i);
800061ac:	72 08       	ld.w	r8,r9[0x0]
800061ae:	a9 b8       	sbr	r8,0x9
800061b0:	93 08       	st.w	r9[0x0],r8
			if (b_restart) {
800061b2:	58 0a       	cp.w	r10,0
800061b4:	c0 94       	brge	800061c6 <udd_ep_alloc+0x15a>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
800061b6:	7c 0b       	ld.w	r11,lr[0x0]
800061b8:	7c 48       	ld.w	r8,lr[0x10]
800061ba:	7c 29       	ld.w	r9,lr[0x8]
800061bc:	7c 1a       	ld.w	r10,lr[0x4]
800061be:	f7 db c3 c1 	bfextu	r11,r11,0x1e,0x1
800061c2:	f0 1f 00 07 	mcall	800061dc <udd_ep_alloc+0x170>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
800061c6:	2f f7       	sub	r7,-1
800061c8:	5c 57       	castu.b	r7
800061ca:	ec 07 18 00 	cp.b	r7,r6
800061ce:	fe 98 ff bc 	brls	80006146 <udd_ep_alloc+0xda>
800061d2:	da 3a       	popm	r0-r7,pc,r12=1
800061d4:	d8 3a       	popm	r0-r7,pc,r12=0
800061d6:	00 00       	add	r0,r0
800061d8:	00 00       	add	r0,r0
800061da:	04 34       	cp.w	r4,r2
800061dc:	80 00       	ld.sh	r0,r0[0x0]
800061de:	5f d8       	srvc	r8

800061e0 <udd_enable>:
	return true;
}


void udd_enable(void)
{
800061e0:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800061e4:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
800061e8:	d3 03       	ssrf	0x10
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
800061ea:	f0 1f 00 32 	mcall	800062b0 <udd_enable+0xd0>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
800061ee:	30 0a       	mov	r10,0
800061f0:	e0 6b 02 20 	mov	r11,544
800061f4:	4b 0c       	lddpc	r12,800062b4 <udd_enable+0xd4>
800061f6:	f0 1f 00 31 	mcall	800062b8 <udd_enable+0xd8>
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
800061fa:	fe 78 0c 00 	mov	r8,-62464
800061fe:	f0 f9 01 44 	ld.w	r9,r8[324]
80006202:	a1 a9       	sbr	r9,0x0
80006204:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
80006208:	fe 68 08 00 	mov	r8,-129024
8000620c:	70 09       	ld.w	r9,r8[0x0]
8000620e:	b9 c9       	cbr	r9,0x18
80006210:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
80006212:	70 09       	ld.w	r9,r8[0x0]
80006214:	b9 b9       	sbr	r9,0x19
80006216:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
80006218:	70 09       	ld.w	r9,r8[0x0]
8000621a:	ad a9       	sbr	r9,0xc
8000621c:	91 09       	st.w	r8[0x0],r9
	otg_enable();
8000621e:	70 09       	ld.w	r9,r8[0x0]
80006220:	af b9       	sbr	r9,0xf
80006222:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80006224:	70 09       	ld.w	r9,r8[0x0]
80006226:	af c9       	cbr	r9,0xe
80006228:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
8000622a:	70 08       	ld.w	r8,r8[0x0]

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
8000622c:	4a 48       	lddpc	r8,800062bc <udd_enable+0xdc>
8000622e:	70 0a       	ld.w	r10,r8[0x0]
80006230:	30 09       	mov	r9,0
		udd_ep_job[i].stall_requested = false;
80006232:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80006236:	f5 d9 d3 a1 	bfins	r10,r9,0x1d,0x1
8000623a:	91 0a       	st.w	r8[0x0],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
8000623c:	70 5a       	ld.w	r10,r8[0x14]
		udd_ep_job[i].stall_requested = false;
8000623e:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
80006242:	f5 d9 d3 a1 	bfins	r10,r9,0x1d,0x1
80006246:	91 5a       	st.w	r8[0x14],r10

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
		udd_ep_job[i].busy = false;
80006248:	70 aa       	ld.w	r10,r8[0x28]
		udd_ep_job[i].stall_requested = false;
8000624a:	f5 da c0 1f 	bfextu	r10,r10,0x0,0x1f
8000624e:	f5 d9 d3 a1 	bfins	r10,r9,0x1d,0x1
80006252:	91 aa       	st.w	r8[0x28],r10

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80006254:	fe 68 00 00 	mov	r8,-131072
80006258:	70 09       	ld.w	r9,r8[0x0]
8000625a:	ad c9       	cbr	r9,0xc
8000625c:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
8000625e:	70 09       	ld.w	r9,r8[0x0]
80006260:	e8 19 0c 00 	orl	r9,0xc00
80006264:	91 09       	st.w	r8[0x0],r9
#  endif
#endif
	otg_ack_vbus_transition();
80006266:	30 29       	mov	r9,2
80006268:	fe 68 08 08 	mov	r8,-129016
8000626c:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
8000626e:	fe 68 08 04 	mov	r8,-129020
80006272:	70 08       	ld.w	r8,r8[0x0]
80006274:	e2 18 08 00 	andl	r8,0x800,COH
80006278:	c0 40       	breq	80006280 <udd_enable+0xa0>
		otg_raise_vbus_transition();
8000627a:	fe 68 08 0c 	mov	r8,-129012
8000627e:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80006280:	fe 68 08 00 	mov	r8,-129024
80006284:	70 09       	ld.w	r9,r8[0x0]
80006286:	a1 b9       	sbr	r9,0x1
80006288:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
8000628a:	70 09       	ld.w	r9,r8[0x0]
8000628c:	af a9       	sbr	r9,0xe
8000628e:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80006290:	30 09       	mov	r9,0
80006292:	48 c8       	lddpc	r8,800062c0 <udd_enable+0xe0>
80006294:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006296:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000629a:	d3 03       	ssrf	0x10
8000629c:	48 a8       	lddpc	r8,800062c4 <udd_enable+0xe4>
8000629e:	11 ba       	ld.ub	r10,r8[0x3]
800062a0:	2f fa       	sub	r10,-1
800062a2:	b0 ba       	st.b	r8[0x3],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800062a4:	e3 b9 00 00 	mtsr	0x0,r9
800062a8:	e3 b7 00 00 	mtsr	0x0,r7
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
#endif

	cpu_irq_restore(flags);
}
800062ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800062b0:	80 00       	ld.sh	r0,r0[0x0]
800062b2:	63 74       	ld.w	r4,r1[0x5c]
800062b4:	80 00       	ld.sh	r0,r0[0x0]
800062b6:	59 a8       	cp.w	r8,26
800062b8:	80 00       	ld.sh	r0,r0[0x0]
800062ba:	4f 30       	lddpc	r0,80006484 <mem_wr_protect+0x4>
800062bc:	00 00       	add	r0,r0
800062be:	04 34       	cp.w	r4,r2
800062c0:	00 00       	add	r0,r0
800062c2:	04 70       	tst	r0,r2
800062c4:	00 00       	add	r0,r0
800062c6:	2a 64       	sub	r4,-90

800062c8 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800062c8:	e0 6d 80 00 	mov	sp,32768

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800062cc:	fe c0 de cc 	sub	r0,pc,-8500

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
800062d0:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
800062d4:	d5 53       	csrf	0x15
  cp      r0, r1
800062d6:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
800062d8:	e0 61 01 70 	mov	r1,368
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
800062dc:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
800062de:	c0 72       	brcc	800062ec <idata_load_loop_end>
  cp      r0, r1
800062e0:	fe c2 d8 d8 	sub	r2,pc,-10024

800062e4 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800062e4:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
800062e6:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800062e8:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800062ea:	cf d3       	brcs	800062e4 <idata_load_loop>

800062ec <idata_load_loop_end>:
  mov     r2, 0
800062ec:	e0 60 01 70 	mov	r0,368
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800062f0:	e0 61 2a 70 	mov	r1,10864
  cp      r0, r1
  brlo    udata_clear_loop
800062f4:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800062f6:	c0 62       	brcc	80006302 <udata_clear_loop_end>
800062f8:	30 02       	mov	r2,0
800062fa:	30 03       	mov	r3,0

800062fc <udata_clear_loop>:
800062fc:	a1 22       	st.d	r0++,r2
800062fe:	02 30       	cp.w	r0,r1
80006300:	cf e3       	brcs	800062fc <udata_clear_loop>

80006302 <udata_clear_loop_end>:
80006302:	fe cf e5 56 	sub	pc,pc,-6826
80006306:	d7 03       	nop

80006308 <sysclk_priv_enable_module>:

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006308:	e1 ba 00 00 	mfsr	r10,0x0
	cpu_irq_disable();
8000630c:	d3 03       	ssrf	0x10

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000630e:	fe 78 0c 00 	mov	r8,-62464
80006312:	71 59       	ld.w	r9,r8[0x54]
80006314:	e2 19 00 40 	andl	r9,0x40,COH
80006318:	cf d0       	breq	80006312 <sysclk_priv_enable_module+0xa>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000631a:	a3 6c       	lsl	r12,0x2
8000631c:	e0 2c f3 f8 	sub	r12,62456
80006320:	78 08       	ld.w	r8,r12[0x0]
	mask |= 1U << module_index;
80006322:	30 19       	mov	r9,1
80006324:	f2 0b 09 4b 	lsl	r11,r9,r11
80006328:	10 4b       	or	r11,r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000632a:	99 0b       	st.w	r12[0x0],r11
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000632c:	e3 ba 00 00 	mtsr	0x0,r10

	cpu_irq_restore(flags);
}
80006330:	5e fc       	retal	r12
80006332:	d7 03       	nop

80006334 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
80006334:	eb cd 40 c0 	pushm	r6-r7,lr
80006338:	18 97       	mov	r7,r12

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000633a:	e1 b6 00 00 	mfsr	r6,0x0
	cpu_irq_disable();
8000633e:	d3 03       	ssrf	0x10
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();

	if (!sysclk_pbb_refcount)
80006340:	48 b8       	lddpc	r8,8000636c <sysclk_enable_pbb_module+0x38>
80006342:	11 89       	ld.ub	r9,r8[0x0]
80006344:	30 08       	mov	r8,0
80006346:	f0 09 18 00 	cp.b	r9,r8
8000634a:	c0 51       	brne	80006354 <sysclk_enable_pbb_module+0x20>
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000634c:	30 2b       	mov	r11,2
8000634e:	30 1c       	mov	r12,1
80006350:	f0 1f 00 08 	mcall	80006370 <sysclk_enable_pbb_module+0x3c>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
	sysclk_pbb_refcount++;
80006354:	48 68       	lddpc	r8,8000636c <sysclk_enable_pbb_module+0x38>
80006356:	11 89       	ld.ub	r9,r8[0x0]
80006358:	2f f9       	sub	r9,-1
8000635a:	b0 89       	st.b	r8[0x0],r9
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000635c:	e3 b6 00 00 	mtsr	0x0,r6

	cpu_irq_restore(flags);

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
80006360:	0e 9b       	mov	r11,r7
80006362:	30 3c       	mov	r12,3
80006364:	f0 1f 00 03 	mcall	80006370 <sysclk_enable_pbb_module+0x3c>
}
80006368:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000636c:	00 00       	add	r0,r0
8000636e:	04 78       	tst	r8,r2
80006370:	80 00       	ld.sh	r0,r0[0x0]
80006372:	63 08       	ld.w	r8,r1[0x40]

80006374 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80006374:	d4 01       	pushm	lr
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
80006376:	30 1c       	mov	r12,1
80006378:	f0 1f 00 1e 	mcall	800063f0 <sysclk_enable_usb+0x7c>
8000637c:	30 3b       	mov	r11,3
8000637e:	30 1c       	mov	r12,1
80006380:	f0 1f 00 1d 	mcall	800063f4 <sysclk_enable_usb+0x80>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
80006384:	fe 78 0c 00 	mov	r8,-62464
80006388:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
8000638a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000638e:	c2 b1       	brne	800063e4 <sysclk_enable_usb+0x70>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80006390:	fe 78 0c 00 	mov	r8,-62464
80006394:	71 58       	ld.w	r8,r8[0x54]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
80006396:	e2 18 00 80 	andl	r8,0x80,COH
8000639a:	c1 31       	brne	800063c0 <sysclk_enable_usb+0x4c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000639c:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800063a0:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
800063a2:	fe 78 0c 00 	mov	r8,-62464
800063a6:	e0 6a 03 07 	mov	r10,775
800063aa:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
800063ac:	70 0a       	ld.w	r10,r8[0x0]
800063ae:	a3 aa       	sbr	r10,0x2
800063b0:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800063b2:	e3 b9 00 00 	mtsr	0x0,r9
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
800063b6:	10 99       	mov	r9,r8
800063b8:	73 58       	ld.w	r8,r9[0x54]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
800063ba:	e2 18 00 80 	andl	r8,0x80,COH
800063be:	cf d0       	breq	800063b8 <sysclk_enable_usb+0x44>
	cfg->ctrl = 0;

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
		mul *= 2;
		vco_hz *= 2;
800063c0:	30 88       	mov	r8,8
static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
800063c2:	a3 a8       	sbr	r8,0x2
static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
800063c4:	31 09       	mov	r9,16
800063c6:	20 19       	sub	r9,1
800063c8:	b1 69       	lsl	r9,0x10
800063ca:	ea 19 3f 00 	orh	r9,0x3f00
800063ce:	e8 19 02 01 	orl	r9,0x201
800063d2:	f3 e8 10 08 	or	r8,r9,r8
800063d6:	fe 79 0c 00 	mov	r9,-62464
800063da:	93 88       	st.w	r9[0x20],r8

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
800063dc:	73 58       	ld.w	r8,r9[0x54]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
800063de:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800063e2:	cf d0       	breq	800063dc <sysclk_enable_usb+0x68>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
800063e4:	30 69       	mov	r9,6
800063e6:	fe 78 0c 00 	mov	r8,-62464
800063ea:	f1 49 00 6c 	st.w	r8[108],r9
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
800063ee:	d8 02       	popm	pc
800063f0:	80 00       	ld.sh	r0,r0[0x0]
800063f2:	63 34       	ld.w	r4,r1[0x4c]
800063f4:	80 00       	ld.sh	r0,r0[0x0]
800063f6:	63 08       	ld.w	r8,r1[0x40]

800063f8 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
800063f8:	d4 01       	pushm	lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800063fa:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
800063fe:	d3 03       	ssrf	0x10
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
		AVR32_PM.oscctrl0 = oscctrl;
80006400:	fe 78 0c 00 	mov	r8,-62464
80006404:	e0 6a 03 07 	mov	r10,775
80006408:	91 aa       	st.w	r8[0x28],r10
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
8000640a:	70 0a       	ld.w	r10,r8[0x0]
8000640c:	a3 aa       	sbr	r10,0x2
8000640e:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006410:	e3 b9 00 00 	mtsr	0x0,r9
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
80006414:	71 59       	ld.w	r9,r8[0x54]
80006416:	e2 19 00 80 	andl	r9,0x80,COH
8000641a:	cf d0       	breq	80006414 <sysclk_init+0x1c>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
8000641c:	e0 6c 1b 00 	mov	r12,6912
80006420:	ea 1c 00 b7 	orh	r12,0xb7
80006424:	f0 1f 00 08 	mcall	80006444 <sysclk_init+0x4c>

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006428:	e1 b9 00 00 	mfsr	r9,0x0
	cpu_irq_disable();
8000642c:	d3 03       	ssrf	0x10
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
8000642e:	fe 78 0c 00 	mov	r8,-62464
80006432:	70 0a       	ld.w	r10,r8[0x0]
80006434:	e0 1a ff fc 	andl	r10,0xfffc
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
80006438:	a1 aa       	sbr	r10,0x0
	AVR32_PM.mcctrl = mcctrl;
8000643a:	91 0a       	st.w	r8[0x0],r10
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000643c:	e3 b9 00 00 	mtsr	0x0,r9

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
80006440:	d8 02       	popm	pc
80006442:	00 00       	add	r0,r0
80006444:	80 00       	ld.sh	r0,r0[0x0]
80006446:	4d a0       	lddpc	r0,800065ac <ui_wakeup>

80006448 <get_nb_lun>:

  return nb_lun;
#else
  return MAX_LUN;
#endif
}
80006448:	5e ff       	retal	1
8000644a:	d7 03       	nop

8000644c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
8000644c:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
8000644e:	58 0c       	cp.w	r12,0
80006450:	c0 20       	breq	80006454 <mem_test_unit_ready+0x8>
80006452:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
80006454:	48 28       	lddpc	r8,8000645c <mem_test_unit_ready+0x10>
80006456:	70 0c       	ld.w	r12,r8[0x0]
80006458:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return status;
}
8000645a:	d8 02       	popm	pc
8000645c:	80 00       	ld.sh	r0,r0[0x0]
8000645e:	86 f0       	ld.uh	r0,r3[0xe]

80006460 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
80006460:	d4 01       	pushm	lr
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80006462:	58 0c       	cp.w	r12,0
80006464:	c0 20       	breq	80006468 <mem_read_capacity+0x8>
80006466:	da 0a       	popm	pc,r12=1
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
80006468:	48 38       	lddpc	r8,80006474 <mem_read_capacity+0x14>
8000646a:	70 18       	ld.w	r8,r8[0x4]
8000646c:	16 9c       	mov	r12,r11
8000646e:	5d 18       	icall	r8
#endif

  Ctrl_access_unlock();

  return status;
}
80006470:	d8 02       	popm	pc
80006472:	00 00       	add	r0,r0
80006474:	80 00       	ld.sh	r0,r0[0x0]
80006476:	86 f0       	ld.uh	r0,r3[0xe]

80006478 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
80006478:	58 0c       	cp.w	r12,0
#endif

  Ctrl_access_unlock();

  return sector_size;
}
8000647a:	5f 0c       	sreq	r12
8000647c:	5e fc       	retal	r12
8000647e:	d7 03       	nop

80006480 <mem_wr_protect>:


bool mem_wr_protect(U8 lun)
{
80006480:	d4 01       	pushm	lr
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
80006482:	58 0c       	cp.w	r12,0
80006484:	c0 20       	breq	80006488 <mem_wr_protect+0x8>
80006486:	da 0a       	popm	pc,r12=1
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
80006488:	48 28       	lddpc	r8,80006490 <mem_wr_protect+0x10>
8000648a:	70 2c       	ld.w	r12,r8[0x8]
8000648c:	5d 1c       	icall	r12
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
8000648e:	d8 02       	popm	pc
80006490:	80 00       	ld.sh	r0,r0[0x0]
80006492:	86 f0       	ld.uh	r0,r3[0xe]

80006494 <mem_name>:
const char *mem_name(U8 lun)
{
#if MAX_LUN==0
  UNUSED(lun);
#endif
  return
80006494:	58 0c       	cp.w	r12,0
80006496:	c0 20       	breq	8000649a <mem_name+0x6>
80006498:	5e fd       	retal	0
8000649a:	48 28       	lddpc	r8,800064a0 <mem_name+0xc>
8000649c:	70 8c       	ld.w	r12,r8[0x20]
#if LUN_USB == ENABLE
                           LUN_USB_NAME;
#else
                           NULL;
#endif
}
8000649e:	5e fc       	retal	r12
800064a0:	80 00       	ld.sh	r0,r0[0x0]
800064a2:	86 f0       	ld.uh	r0,r3[0xe]

800064a4 <ram_2_memory>:
  return status;
}


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
800064a4:	eb cd 40 e0 	pushm	r5-r7,lr
800064a8:	18 97       	mov	r7,r12
800064aa:	16 95       	mov	r5,r11
800064ac:	14 96       	mov	r6,r10
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
800064ae:	f0 1f 00 09 	mcall	800064d0 <ram_2_memory+0x2c>
  status =
800064b2:	58 07       	cp.w	r7,0
800064b4:	c0 30       	breq	800064ba <ram_2_memory+0x16>
800064b6:	30 17       	mov	r7,1
800064b8:	c0 78       	rjmp	800064c6 <ram_2_memory+0x22>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
800064ba:	48 78       	lddpc	r8,800064d4 <ram_2_memory+0x30>
800064bc:	70 78       	ld.w	r8,r8[0x1c]
800064be:	0c 9b       	mov	r11,r6
800064c0:	0a 9c       	mov	r12,r5
800064c2:	5d 18       	icall	r8
800064c4:	18 97       	mov	r7,r12
#if LUN_USB == ENABLE
                             Lun_usb_ram_2_mem(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_write_action();
800064c6:	f0 1f 00 05 	mcall	800064d8 <ram_2_memory+0x34>

  Ctrl_access_unlock();

  return status;
}
800064ca:	0e 9c       	mov	r12,r7
800064cc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800064d0:	80 00       	ld.sh	r0,r0[0x0]
800064d2:	65 8c       	ld.w	r12,r2[0x60]
800064d4:	80 00       	ld.sh	r0,r0[0x0]
800064d6:	86 f0       	ld.uh	r0,r3[0xe]
800064d8:	80 00       	ld.sh	r0,r0[0x0]
800064da:	65 bc       	ld.w	r12,r2[0x6c]

800064dc <usb_2_memory>:
  return status;
}


Ctrl_status usb_2_memory(U8 lun, U32 addr, U16 nb_sector)
{
800064dc:	eb cd 40 e0 	pushm	r5-r7,lr
800064e0:	18 97       	mov	r7,r12
800064e2:	16 95       	mov	r5,r11
800064e4:	14 96       	mov	r6,r10
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(nb_sector);
800064e6:	f0 1f 00 0a 	mcall	8000650c <usb_2_memory+0x30>
  status =
800064ea:	58 07       	cp.w	r7,0
800064ec:	c0 30       	breq	800064f2 <usb_2_memory+0x16>
800064ee:	30 17       	mov	r7,1
800064f0:	c0 88       	rjmp	80006500 <usb_2_memory+0x24>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_write_10(addr, nb_sector) :
800064f2:	48 88       	lddpc	r8,80006510 <usb_2_memory+0x34>
800064f4:	70 58       	ld.w	r8,r8[0x14]
800064f6:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
800064fa:	0a 9c       	mov	r12,r5
800064fc:	5d 18       	icall	r8
800064fe:	18 97       	mov	r7,r12
#endif
                             CTRL_FAIL;
  memory_stop_write_action();
80006500:	f0 1f 00 05 	mcall	80006514 <usb_2_memory+0x38>

  Ctrl_access_unlock();

  return status;
}
80006504:	0e 9c       	mov	r12,r7
80006506:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000650a:	00 00       	add	r0,r0
8000650c:	80 00       	ld.sh	r0,r0[0x0]
8000650e:	65 8c       	ld.w	r12,r2[0x60]
80006510:	80 00       	ld.sh	r0,r0[0x0]
80006512:	86 f0       	ld.uh	r0,r3[0xe]
80006514:	80 00       	ld.sh	r0,r0[0x0]
80006516:	65 bc       	ld.w	r12,r2[0x6c]

80006518 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
80006518:	eb cd 40 e0 	pushm	r5-r7,lr
8000651c:	18 97       	mov	r7,r12
8000651e:	16 95       	mov	r5,r11
80006520:	14 96       	mov	r6,r10
  UNUSED(lun);
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
80006522:	f0 1f 00 09 	mcall	80006544 <memory_2_ram+0x2c>
  status =
80006526:	58 07       	cp.w	r7,0
80006528:	c0 30       	breq	8000652e <memory_2_ram+0x16>
8000652a:	30 17       	mov	r7,1
8000652c:	c0 78       	rjmp	8000653a <memory_2_ram+0x22>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
8000652e:	48 78       	lddpc	r8,80006548 <memory_2_ram+0x30>
80006530:	70 68       	ld.w	r8,r8[0x18]
80006532:	0c 9b       	mov	r11,r6
80006534:	0a 9c       	mov	r12,r5
80006536:	5d 18       	icall	r8
80006538:	18 97       	mov	r7,r12
#if LUN_USB == ENABLE
                             Lun_usb_mem_2_ram(addr, ram);
#else
                             CTRL_FAIL;
#endif
  memory_stop_read_action();
8000653a:	f0 1f 00 05 	mcall	8000654c <memory_2_ram+0x34>

  Ctrl_access_unlock();

  return status;
}
8000653e:	0e 9c       	mov	r12,r7
80006540:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006544:	80 00       	ld.sh	r0,r0[0x0]
80006546:	65 9c       	ld.w	r12,r2[0x64]
80006548:	80 00       	ld.sh	r0,r0[0x0]
8000654a:	86 f0       	ld.uh	r0,r3[0xe]
8000654c:	80 00       	ld.sh	r0,r0[0x0]
8000654e:	65 cc       	ld.w	r12,r2[0x70]

80006550 <memory_2_usb>:
 */
//! @{


Ctrl_status memory_2_usb(U8 lun, U32 addr, U16 nb_sector)
{
80006550:	eb cd 40 e0 	pushm	r5-r7,lr
80006554:	18 97       	mov	r7,r12
80006556:	16 95       	mov	r5,r11
80006558:	14 96       	mov	r6,r10
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(nb_sector);
8000655a:	f0 1f 00 0a 	mcall	80006580 <memory_2_usb+0x30>
  status =
8000655e:	58 07       	cp.w	r7,0
80006560:	c0 30       	breq	80006566 <memory_2_usb+0x16>
80006562:	30 17       	mov	r7,1
80006564:	c0 88       	rjmp	80006574 <memory_2_usb+0x24>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].usb_read_10(addr, nb_sector) :
80006566:	48 88       	lddpc	r8,80006584 <memory_2_usb+0x34>
80006568:	70 48       	ld.w	r8,r8[0x10]
8000656a:	f7 d6 c0 10 	bfextu	r11,r6,0x0,0x10
8000656e:	0a 9c       	mov	r12,r5
80006570:	5d 18       	icall	r8
80006572:	18 97       	mov	r7,r12
#endif
                             CTRL_FAIL;
  memory_stop_read_action();
80006574:	f0 1f 00 05 	mcall	80006588 <memory_2_usb+0x38>

  Ctrl_access_unlock();

  return status;
}
80006578:	0e 9c       	mov	r12,r7
8000657a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000657e:	00 00       	add	r0,r0
80006580:	80 00       	ld.sh	r0,r0[0x0]
80006582:	65 9c       	ld.w	r12,r2[0x64]
80006584:	80 00       	ld.sh	r0,r0[0x0]
80006586:	86 f0       	ld.uh	r0,r3[0xe]
80006588:	80 00       	ld.sh	r0,r0[0x0]
8000658a:	65 cc       	ld.w	r12,r2[0x70]

8000658c <ui_start_write>:
{
	LED_Off(LED1);
}

void ui_start_write(void)
{
8000658c:	d4 01       	pushm	lr
	LED_On(LED0);
8000658e:	30 1c       	mov	r12,1
80006590:	f0 1f 00 02 	mcall	80006598 <ui_start_write+0xc>
}
80006594:	d8 02       	popm	pc
80006596:	00 00       	add	r0,r0
80006598:	80 00       	ld.sh	r0,r0[0x0]
8000659a:	4c d8       	lddpc	r8,800066cc <udi_hid_kbd_send_report+0x38>

8000659c <ui_start_read>:
{
	LED_On(LED0);
}

void ui_start_read(void)
{
8000659c:	d4 01       	pushm	lr
	LED_On(LED1);
8000659e:	30 2c       	mov	r12,2
800065a0:	f0 1f 00 02 	mcall	800065a8 <ui_start_read+0xc>
}
800065a4:	d8 02       	popm	pc
800065a6:	00 00       	add	r0,r0
800065a8:	80 00       	ld.sh	r0,r0[0x0]
800065aa:	4c d8       	lddpc	r8,800066dc <udi_hid_kbd_send_report+0x48>

800065ac <ui_wakeup>:
	/* Disable joystick input change ITs. */
	gpio_disable_pin_interrupt(GPIO_JOYSTICK_PUSH);
}

void ui_wakeup(void)
{
800065ac:	d4 01       	pushm	lr
	LED_On(LED0);
800065ae:	30 1c       	mov	r12,1
800065b0:	f0 1f 00 02 	mcall	800065b8 <ui_wakeup+0xc>
}
800065b4:	d8 02       	popm	pc
800065b6:	00 00       	add	r0,r0
800065b8:	80 00       	ld.sh	r0,r0[0x0]
800065ba:	4c d8       	lddpc	r8,800066ec <udi_hid_kbd_report_sent+0x8>

800065bc <ui_stop_write>:
{
	LED_On(LED0);
}

void ui_stop_write(void)
{
800065bc:	d4 01       	pushm	lr
	LED_Off(LED0);
800065be:	30 1c       	mov	r12,1
800065c0:	f0 1f 00 02 	mcall	800065c8 <ui_stop_write+0xc>
}
800065c4:	d8 02       	popm	pc
800065c6:	00 00       	add	r0,r0
800065c8:	80 00       	ld.sh	r0,r0[0x0]
800065ca:	4d 28       	lddpc	r8,80006710 <udi_hid_kbd_down+0x8>

800065cc <ui_stop_read>:
{
	LED_On(LED1);
}

void ui_stop_read(void)
{
800065cc:	d4 01       	pushm	lr
	LED_Off(LED1);
800065ce:	30 2c       	mov	r12,2
800065d0:	f0 1f 00 02 	mcall	800065d8 <ui_stop_read+0xc>
}
800065d4:	d8 02       	popm	pc
800065d6:	00 00       	add	r0,r0
800065d8:	80 00       	ld.sh	r0,r0[0x0]
800065da:	4d 28       	lddpc	r8,80006720 <udi_hid_kbd_down+0x18>

800065dc <ui_powerdown>:
	LED_On(LED0);
	LED_Off(LED1);
}

void ui_powerdown(void)
{
800065dc:	d4 01       	pushm	lr
	LED_Off(LED0);
800065de:	30 1c       	mov	r12,1
800065e0:	f0 1f 00 03 	mcall	800065ec <ui_powerdown+0x10>
	LED_Off(LED1);
800065e4:	30 2c       	mov	r12,2
800065e6:	f0 1f 00 02 	mcall	800065ec <ui_powerdown+0x10>
}
800065ea:	d8 02       	popm	pc
800065ec:	80 00       	ld.sh	r0,r0[0x0]
800065ee:	4d 28       	lddpc	r8,80006734 <udi_hid_kbd_down+0x2c>

800065f0 <ui_init>:
	udc_remotewakeup();
}


void ui_init(void)
{
800065f0:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800065f4:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
800065f8:	d3 03       	ssrf	0x10
	/* register joystick handler on level 0 */
	irqflags_t flags = cpu_irq_save();
	irq_register_handler(ui_wakeup_isr,
800065fa:	30 0a       	mov	r10,0
800065fc:	34 1b       	mov	r11,65
800065fe:	48 7c       	lddpc	r12,80006618 <ui_init+0x28>
80006600:	f0 1f 00 07 	mcall	8000661c <ui_init+0x2c>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006604:	e3 b7 00 00 	mtsr	0x0,r7
			AVR32_GPIO_IRQ_0 + (GPIO_JOYSTICK_PUSH / 8), 0);
	cpu_irq_restore(flags);

	LED_On(LED0);
80006608:	30 1c       	mov	r12,1
8000660a:	f0 1f 00 06 	mcall	80006620 <ui_init+0x30>
	LED_Off(LED1);
8000660e:	30 2c       	mov	r12,2
80006610:	f0 1f 00 05 	mcall	80006624 <ui_init+0x34>
}
80006614:	e3 cd 80 80 	ldm	sp++,r7,pc
80006618:	80 00       	ld.sh	r0,r0[0x0]
8000661a:	66 28       	ld.w	r8,r3[0x8]
8000661c:	80 00       	ld.sh	r0,r0[0x0]
8000661e:	4f 30       	lddpc	r0,800067e8 <udi_hid_kbd_up+0x68>
80006620:	80 00       	ld.sh	r0,r0[0x0]
80006622:	4c d8       	lddpc	r8,80006754 <udi_hid_kbd_down+0x4c>
80006624:	80 00       	ld.sh	r0,r0[0x0]
80006626:	4d 28       	lddpc	r8,8000676c <udi_hid_kbd_down+0x64>

80006628 <ui_wakeup_isr>:
// Interrupt on "pin change" from switch to do wakeup on USB
// Note:
// This interrupt is enable when the USB host enable remotewakeup feature
// This interrupt wakeup the CPU if this one is in idle mode
ISR(ui_wakeup_isr, AVR32_GPIO0_IRQ_GROUP, 0)
{
80006628:	d4 01       	pushm	lr
	// Clear GPIO interrupts.
	gpio_clear_pin_interrupt_flag(GPIO_JOYSTICK_PUSH);
8000662a:	30 dc       	mov	r12,13
8000662c:	f0 1f 00 06 	mcall	80006644 <ui_wakeup_isr+0x1c>
	// Clear External Interrupt Line else Wakeup event always enabled
	eic_clear_interrupt_line(&AVR32_EIC, EXT_INT6);
80006630:	30 6b       	mov	r11,6
80006632:	fe 7c 0d 80 	mov	r12,-62080
80006636:	f0 1f 00 05 	mcall	80006648 <ui_wakeup_isr+0x20>
/*! \brief The USB driver sends a resume signal called \e "Upstream Resume"
 * This is authorized only when the remote wakeup feature is enabled by host.
 */
static inline void udc_remotewakeup(void)
{
	udd_send_remotewakeup();
8000663a:	f0 1f 00 05 	mcall	8000664c <ui_wakeup_isr+0x24>
	// It is a wakeup then send wakeup USB
	udc_remotewakeup();
}
8000663e:	d4 02       	popm	lr
80006640:	d6 03       	rete
80006642:	00 00       	add	r0,r0
80006644:	80 00       	ld.sh	r0,r0[0x0]
80006646:	4f 16       	lddpc	r6,80006808 <udi_hid_kbd_up+0x88>
80006648:	80 00       	ld.sh	r0,r0[0x0]
8000664a:	4d 7c       	lddpc	r12,800067a4 <udi_hid_kbd_up+0x24>
8000664c:	80 00       	ld.sh	r0,r0[0x0]
8000664e:	55 fc       	stdsp	sp[0x17c],r12

80006650 <udi_hid_kbd_getsetting>:


uint8_t udi_hid_kbd_getsetting(void)
{
	return 0;
}
80006650:	5e fd       	retal	0
80006652:	d7 03       	nop

80006654 <udi_hid_kbd_setreport>:


static bool udi_hid_kbd_setreport(void)
{
	if ((USB_HID_REPORT_TYPE_OUTPUT == (udd_g_ctrlreq.req.wValue >> 8))
80006654:	48 d8       	lddpc	r8,80006688 <udi_hid_kbd_setreport+0x34>
80006656:	90 18       	ld.sh	r8,r8[0x2]
80006658:	f5 d8 c1 08 	bfextu	r10,r8,0x8,0x8
8000665c:	30 29       	mov	r9,2
8000665e:	f2 0a 19 00 	cp.h	r10,r9
80006662:	c1 11       	brne	80006684 <udi_hid_kbd_setreport+0x30>
80006664:	5c 58       	castu.b	r8
80006666:	c0 f1       	brne	80006684 <udi_hid_kbd_setreport+0x30>
80006668:	48 88       	lddpc	r8,80006688 <udi_hid_kbd_setreport+0x34>
8000666a:	90 39       	ld.sh	r9,r8[0x6]
8000666c:	30 18       	mov	r8,1
8000666e:	f0 09 19 00 	cp.h	r9,r8
80006672:	c0 91       	brne	80006684 <udi_hid_kbd_setreport+0x30>
			&& (0 == (0xFF & udd_g_ctrlreq.req.wValue))
			&& (1 == udd_g_ctrlreq.req.wLength)) {
		// Report OUT type on report ID 0 from USB Host
		udd_g_ctrlreq.payload = &udi_hid_kbd_report_set;
80006674:	48 58       	lddpc	r8,80006688 <udi_hid_kbd_setreport+0x34>
80006676:	48 69       	lddpc	r9,8000668c <udi_hid_kbd_setreport+0x38>
80006678:	91 29       	st.w	r8[0x8],r9
		udd_g_ctrlreq.callback = udi_hid_kbd_setreport_valid;
8000667a:	48 69       	lddpc	r9,80006690 <udi_hid_kbd_setreport+0x3c>
8000667c:	91 49       	st.w	r8[0x10],r9
		udd_g_ctrlreq.payload_size = 1;
8000667e:	30 19       	mov	r9,1
80006680:	b0 69       	st.h	r8[0xc],r9
80006682:	5e ff       	retal	1
		return true;
80006684:	5e fd       	retal	0
80006686:	00 00       	add	r0,r0
80006688:	00 00       	add	r0,r0
8000668a:	2a 4c       	sub	r12,-92
8000668c:	00 00       	add	r0,r0
8000668e:	04 85       	andn	r5,r2
80006690:	80 00       	ld.sh	r0,r0[0x0]
80006692:	68 a0       	ld.w	r0,r4[0x28]

80006694 <udi_hid_kbd_send_report>:

//--------------------------------------------
//------ Internal routines

static bool udi_hid_kbd_send_report(void)
{
80006694:	d4 01       	pushm	lr
	if (udi_hid_kbd_b_report_trans_ongoing)
80006696:	48 e8       	lddpc	r8,800066cc <udi_hid_kbd_send_report+0x38>
80006698:	11 89       	ld.ub	r9,r8[0x0]
8000669a:	30 08       	mov	r8,0
8000669c:	f0 09 18 00 	cp.b	r9,r8
800066a0:	c0 20       	breq	800066a4 <udi_hid_kbd_send_report+0x10>
800066a2:	d8 0a       	popm	pc,r12=0
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
800066a4:	48 ba       	lddpc	r10,800066d0 <udi_hid_kbd_send_report+0x3c>
800066a6:	48 c8       	lddpc	r8,800066d4 <udi_hid_kbd_send_report+0x40>
800066a8:	f0 e8 00 00 	ld.d	r8,r8[0]
800066ac:	f4 e9 00 00 	st.d	r10[0],r8
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
800066b0:	30 09       	mov	r9,0
800066b2:	48 a8       	lddpc	r8,800066d8 <udi_hid_kbd_send_report+0x44>
800066b4:	b0 89       	st.b	r8[0x0],r9
	udi_hid_kbd_b_report_trans_ongoing =
			udd_ep_run(	UDI_HID_KBD_EP_IN,
800066b6:	48 a8       	lddpc	r8,800066dc <udi_hid_kbd_send_report+0x48>
800066b8:	30 89       	mov	r9,8
800066ba:	30 0b       	mov	r11,0
800066bc:	e0 6c 00 83 	mov	r12,131
800066c0:	f0 1f 00 08 	mcall	800066e0 <udi_hid_kbd_send_report+0x4c>
	if (udi_hid_kbd_b_report_trans_ongoing)
		return false;
	memcpy(udi_hid_kbd_report_trans, udi_hid_kbd_report,
			UDI_HID_KBD_REPORT_SIZE);
	udi_hid_kbd_b_report_valid = false;
	udi_hid_kbd_b_report_trans_ongoing =
800066c4:	48 28       	lddpc	r8,800066cc <udi_hid_kbd_send_report+0x38>
800066c6:	b0 8c       	st.b	r8[0x0],r12
							false,
							udi_hid_kbd_report_trans,
							UDI_HID_KBD_REPORT_SIZE,
							udi_hid_kbd_report_sent);
	return udi_hid_kbd_b_report_trans_ongoing;
}
800066c8:	d8 02       	popm	pc
800066ca:	00 00       	add	r0,r0
800066cc:	00 00       	add	r0,r0
800066ce:	04 7a       	tst	r10,r2
800066d0:	00 00       	add	r0,r0
800066d2:	04 7c       	tst	r12,r2
800066d4:	00 00       	add	r0,r0
800066d6:	04 88       	andn	r8,r2
800066d8:	00 00       	add	r0,r0
800066da:	04 79       	tst	r9,r2
800066dc:	80 00       	ld.sh	r0,r0[0x0]
800066de:	66 e4       	ld.w	r4,r3[0x38]
800066e0:	80 00       	ld.sh	r0,r0[0x0]
800066e2:	5f d8       	srvc	r8

800066e4 <udi_hid_kbd_report_sent>:

static void udi_hid_kbd_report_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
800066e4:	d4 01       	pushm	lr
	UNUSED(status);
	UNUSED(nb_sent);
	UNUSED(ep);
	udi_hid_kbd_b_report_trans_ongoing = false;
800066e6:	30 08       	mov	r8,0
800066e8:	48 59       	lddpc	r9,800066fc <udi_hid_kbd_report_sent+0x18>
800066ea:	b2 88       	st.b	r9[0x0],r8
	if (udi_hid_kbd_b_report_valid) {
800066ec:	48 59       	lddpc	r9,80006700 <udi_hid_kbd_report_sent+0x1c>
800066ee:	13 89       	ld.ub	r9,r9[0x0]
800066f0:	f0 09 18 00 	cp.b	r9,r8
800066f4:	c0 30       	breq	800066fa <udi_hid_kbd_report_sent+0x16>
		udi_hid_kbd_send_report();
800066f6:	f0 1f 00 04 	mcall	80006704 <udi_hid_kbd_report_sent+0x20>
800066fa:	d8 02       	popm	pc
800066fc:	00 00       	add	r0,r0
800066fe:	04 7a       	tst	r10,r2
80006700:	00 00       	add	r0,r0
80006702:	04 79       	tst	r9,r2
80006704:	80 00       	ld.sh	r0,r0[0x0]
80006706:	66 94       	ld.w	r4,r3[0x24]

80006708 <udi_hid_kbd_down>:
	return true;
}


bool udi_hid_kbd_down(uint8_t key_id)
{
80006708:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000670c:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80006710:	d3 03       	ssrf	0x10

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i])
80006712:	49 98       	lddpc	r8,80006774 <udi_hid_kbd_down+0x6c>
80006714:	11 a8       	ld.ub	r8,r8[0x2]
80006716:	58 08       	cp.w	r8,0
80006718:	c2 10       	breq	8000675a <udi_hid_kbd_down+0x52>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
8000671a:	f8 08 18 00 	cp.b	r8,r12
8000671e:	c0 b0       	breq	80006734 <udi_hid_kbd_down+0x2c>
80006720:	49 59       	lddpc	r9,80006774 <udi_hid_kbd_down+0x6c>
80006722:	2f d9       	sub	r9,-3
80006724:	30 38       	mov	r8,3
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
80006726:	30 8b       	mov	r11,8
		if (0 == udi_hid_kbd_report[i])
80006728:	13 8a       	ld.ub	r10,r9[0x0]
8000672a:	58 0a       	cp.w	r10,0
8000672c:	c0 f0       	breq	8000674a <udi_hid_kbd_down+0x42>
			break;
		if (key_id == udi_hid_kbd_report[i]) {
8000672e:	f8 0a 18 00 	cp.b	r10,r12
80006732:	c0 51       	brne	8000673c <udi_hid_kbd_down+0x34>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006734:	e3 b7 00 00 	mtsr	0x0,r7
#endif
	barrier();
80006738:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
8000673c:	2f f8       	sub	r8,-1
8000673e:	5c 58       	castu.b	r8
80006740:	2f f9       	sub	r9,-1
80006742:	f6 08 18 00 	cp.b	r8,r11
80006746:	cf 11       	brne	80006728 <udi_hid_kbd_down+0x20>
80006748:	c0 58       	rjmp	80006752 <udi_hid_kbd_down+0x4a>
			cpu_irq_restore(flags);
			return true;
		}
	}

	if (UDI_HID_KBD_REPORT_SIZE == i) {
8000674a:	30 89       	mov	r9,8
8000674c:	f2 08 18 00 	cp.b	r8,r9
80006750:	c0 61       	brne	8000675c <udi_hid_kbd_down+0x54>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006752:	e3 b7 00 00 	mtsr	0x0,r7
#endif
	barrier();
80006756:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
		// Array full
		// TODO manage more than UDI_HID_KBD_REPORT_SIZE key pressed in same time
		cpu_irq_restore(flags);
		return false;
8000675a:	30 28       	mov	r8,2
	}
	// Add key at the end of array
	udi_hid_kbd_report[i] = key_id;
8000675c:	48 69       	lddpc	r9,80006774 <udi_hid_kbd_down+0x6c>
8000675e:	f2 08 0b 0c 	st.b	r9[r8],r12
	udi_hid_kbd_b_report_valid = true;
80006762:	30 19       	mov	r9,1
80006764:	48 58       	lddpc	r8,80006778 <udi_hid_kbd_down+0x70>
80006766:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_kbd_send_report();
80006768:	f0 1f 00 05 	mcall	8000677c <udi_hid_kbd_down+0x74>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8000676c:	e3 b7 00 00 	mtsr	0x0,r7
#endif
	barrier();
80006770:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80006774:	00 00       	add	r0,r0
80006776:	04 88       	andn	r8,r2
80006778:	00 00       	add	r0,r0
8000677a:	04 79       	tst	r9,r2
8000677c:	80 00       	ld.sh	r0,r0[0x0]
8000677e:	66 94       	ld.w	r4,r3[0x24]

80006780 <udi_hid_kbd_up>:
	return true;
}


bool udi_hid_kbd_up(uint8_t key_id)
{
80006780:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80006784:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80006788:	d3 03       	ssrf	0x10

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
		if (0 == udi_hid_kbd_report[i]) {
8000678a:	4a 18       	lddpc	r8,8000680c <udi_hid_kbd_up+0x8c>
8000678c:	11 a8       	ld.ub	r8,r8[0x2]
8000678e:	58 08       	cp.w	r8,0
80006790:	c0 b0       	breq	800067a6 <udi_hid_kbd_up+0x26>
			// Already removed
			cpu_irq_restore(flags);
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
80006792:	f8 08 18 00 	cp.b	r8,r12
80006796:	c2 20       	breq	800067da <udi_hid_kbd_up+0x5a>
80006798:	49 d9       	lddpc	r9,8000680c <udi_hid_kbd_up+0x8c>
8000679a:	2f d9       	sub	r9,-3
8000679c:	30 38       	mov	r8,3
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
8000679e:	30 8b       	mov	r11,8
		if (0 == udi_hid_kbd_report[i]) {
800067a0:	13 8a       	ld.ub	r10,r9[0x0]
800067a2:	58 0a       	cp.w	r10,0
800067a4:	c0 41       	brne	800067ac <udi_hid_kbd_up+0x2c>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800067a6:	e3 b7 00 00 	mtsr	0x0,r7
			// Already removed
			cpu_irq_restore(flags);
			return true;
800067aa:	c2 f8       	rjmp	80006808 <udi_hid_kbd_up+0x88>
		}
		if (key_id == udi_hid_kbd_report[i])
800067ac:	f8 0a 18 00 	cp.b	r10,r12
800067b0:	c0 80       	breq	800067c0 <udi_hid_kbd_up+0x40>
	uint8_t i;

	irqflags_t flags = cpu_irq_save();

	// Fill report
	for (i = 2; i < UDI_HID_KBD_REPORT_SIZE; i++) {
800067b2:	2f f8       	sub	r8,-1
800067b4:	5c 58       	castu.b	r8
800067b6:	2f f9       	sub	r9,-1
800067b8:	f6 08 18 00 	cp.b	r8,r11
800067bc:	cf 21       	brne	800067a0 <udi_hid_kbd_up+0x20>
800067be:	c0 b8       	rjmp	800067d4 <udi_hid_kbd_up+0x54>
			return true;
		}
		if (key_id == udi_hid_kbd_report[i])
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
800067c0:	30 89       	mov	r9,8
800067c2:	f2 08 18 00 	cp.b	r8,r9
800067c6:	c0 70       	breq	800067d4 <udi_hid_kbd_up+0x54>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
800067c8:	30 69       	mov	r9,6
800067ca:	f2 08 18 00 	cp.b	r8,r9
800067ce:	e0 88 00 07 	brls	800067dc <udi_hid_kbd_up+0x5c>
800067d2:	c1 18       	rjmp	800067f4 <udi_hid_kbd_up+0x74>
800067d4:	e3 b7 00 00 	mtsr	0x0,r7
			break;
	}
	if (UDI_HID_KBD_REPORT_SIZE == i) {
		// Already removed
		cpu_irq_restore(flags);
		return true;
800067d8:	c1 88       	rjmp	80006808 <udi_hid_kbd_up+0x88>
800067da:	30 28       	mov	r8,2
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
800067dc:	48 c9       	lddpc	r9,8000680c <udi_hid_kbd_up+0x8c>
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
800067de:	30 7b       	mov	r11,7
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
800067e0:	f2 08 00 0a 	add	r10,r9,r8
800067e4:	15 9a       	ld.ub	r10,r10[0x1]
800067e6:	f2 08 0b 0a 	st.b	r9[r8],r10
		i++;
800067ea:	2f f8       	sub	r8,-1
800067ec:	5c 58       	castu.b	r8
		// Already removed
		cpu_irq_restore(flags);
		return true;
	}
	// Remove key and shift
	while (i < (UDI_HID_KBD_REPORT_SIZE - 1)) {
800067ee:	f6 08 18 00 	cp.b	r8,r11
800067f2:	cf 71       	brne	800067e0 <udi_hid_kbd_up+0x60>
		udi_hid_kbd_report[i] = udi_hid_kbd_report[i + 1];
		i++;
	}
	udi_hid_kbd_report[UDI_HID_KBD_REPORT_SIZE - 1] = 0x00;
800067f4:	30 09       	mov	r9,0
800067f6:	48 68       	lddpc	r8,8000680c <udi_hid_kbd_up+0x8c>
800067f8:	b0 f9       	st.b	r8[0x7],r9
	udi_hid_kbd_b_report_valid = true;
800067fa:	30 19       	mov	r9,1
800067fc:	48 58       	lddpc	r8,80006810 <udi_hid_kbd_up+0x90>
800067fe:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_kbd_send_report();
80006800:	f0 1f 00 05 	mcall	80006814 <udi_hid_kbd_up+0x94>
80006804:	e3 b7 00 00 	mtsr	0x0,r7

	cpu_irq_restore(flags);
	return true;
}
80006808:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
8000680c:	00 00       	add	r0,r0
8000680e:	04 88       	andn	r8,r2
80006810:	00 00       	add	r0,r0
80006812:	04 79       	tst	r9,r2
80006814:	80 00       	ld.sh	r0,r0[0x0]
80006816:	66 94       	ld.w	r4,r3[0x24]

80006818 <udi_hid_kbd_modifier_down>:
	return true;
}


bool udi_hid_kbd_modifier_down(uint8_t modifier_id)
{
80006818:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000681c:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80006820:	d3 03       	ssrf	0x10
	irqflags_t flags = cpu_irq_save();

	// Fill report
	udi_hid_kbd_report[0] |= modifier_id;
80006822:	48 78       	lddpc	r8,8000683c <udi_hid_kbd_modifier_down+0x24>
80006824:	11 89       	ld.ub	r9,r8[0x0]
80006826:	12 4c       	or	r12,r9
80006828:	b0 8c       	st.b	r8[0x0],r12
	udi_hid_kbd_b_report_valid = true;
8000682a:	30 19       	mov	r9,1
8000682c:	48 58       	lddpc	r8,80006840 <udi_hid_kbd_modifier_down+0x28>
8000682e:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_kbd_send_report();
80006830:	f0 1f 00 05 	mcall	80006844 <udi_hid_kbd_modifier_down+0x2c>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006834:	e3 b7 00 00 	mtsr	0x0,r7

	cpu_irq_restore(flags);
	return true;
}
80006838:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
8000683c:	00 00       	add	r0,r0
8000683e:	04 88       	andn	r8,r2
80006840:	00 00       	add	r0,r0
80006842:	04 79       	tst	r9,r2
80006844:	80 00       	ld.sh	r0,r0[0x0]
80006846:	66 94       	ld.w	r4,r3[0x24]

80006848 <udi_hid_kbd_modifier_up>:

//--------------------------------------------
//------ Interface for application

bool udi_hid_kbd_modifier_up(uint8_t modifier_id)
{
80006848:	eb cd 40 80 	pushm	r7,lr

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000684c:	e1 b7 00 00 	mfsr	r7,0x0
	cpu_irq_disable();
80006850:	d3 03       	ssrf	0x10
	irqflags_t flags = cpu_irq_save();

	// Fill report
	udi_hid_kbd_report[0] &= ~(unsigned)modifier_id;
80006852:	48 88       	lddpc	r8,80006870 <udi_hid_kbd_modifier_up+0x28>
80006854:	5c dc       	com	r12
80006856:	11 89       	ld.ub	r9,r8[0x0]
80006858:	12 6c       	and	r12,r9
8000685a:	b0 8c       	st.b	r8[0x0],r12
	udi_hid_kbd_b_report_valid = true;
8000685c:	30 19       	mov	r9,1
8000685e:	48 68       	lddpc	r8,80006874 <udi_hid_kbd_modifier_up+0x2c>
80006860:	b0 89       	st.b	r8[0x0],r9

	// Send report
	udi_hid_kbd_send_report();
80006862:	f0 1f 00 06 	mcall	80006878 <udi_hid_kbd_modifier_up+0x30>
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
80006866:	e3 b7 00 00 	mtsr	0x0,r7

	cpu_irq_restore(flags);
	return true;
}
8000686a:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
8000686e:	00 00       	add	r0,r0
80006870:	00 00       	add	r0,r0
80006872:	04 88       	andn	r8,r2
80006874:	00 00       	add	r0,r0
80006876:	04 79       	tst	r9,r2
80006878:	80 00       	ld.sh	r0,r0[0x0]
8000687a:	66 94       	ld.w	r4,r3[0x24]

8000687c <udi_hid_kbd_setup>:
	UDI_HID_KBD_DISABLE_EXT();
}


bool udi_hid_kbd_setup(void)
{
8000687c:	d4 01       	pushm	lr
	return udi_hid_setup(&udi_hid_kbd_rate,
8000687e:	48 49       	lddpc	r9,8000688c <udi_hid_kbd_setup+0x10>
80006880:	48 4a       	lddpc	r10,80006890 <udi_hid_kbd_setup+0x14>
80006882:	48 5b       	lddpc	r11,80006894 <udi_hid_kbd_setup+0x18>
80006884:	48 5c       	lddpc	r12,80006898 <udi_hid_kbd_setup+0x1c>
80006886:	f0 1f 00 06 	mcall	8000689c <udi_hid_kbd_setup+0x20>
								&udi_hid_kbd_protocol,
								(uint8_t *) &udi_hid_kbd_report_desc,
								udi_hid_kbd_setreport);
}
8000688a:	d8 02       	popm	pc
8000688c:	80 00       	ld.sh	r0,r0[0x0]
8000688e:	66 54       	ld.w	r4,r3[0x14]
80006890:	00 00       	add	r0,r0
80006892:	00 78       	tst	r8,r0
80006894:	00 00       	add	r0,r0
80006896:	04 84       	andn	r4,r2
80006898:	00 00       	add	r0,r0
8000689a:	04 90       	mov	r0,r2
8000689c:	80 00       	ld.sh	r0,r0[0x0]
8000689e:	68 fc       	ld.w	r12,r4[0x3c]

800068a0 <udi_hid_kbd_setreport_valid>:
		udi_hid_kbd_send_report();
	}
}

static void udi_hid_kbd_setreport_valid(void)
{
800068a0:	d4 01       	pushm	lr
	UDI_HID_KBD_CHANGE_LED(udi_hid_kbd_report_set);
800068a2:	48 38       	lddpc	r8,800068ac <udi_hid_kbd_setreport_valid+0xc>
800068a4:	11 8c       	ld.ub	r12,r8[0x0]
800068a6:	f0 1f 00 03 	mcall	800068b0 <udi_hid_kbd_setreport_valid+0x10>
}
800068aa:	d8 02       	popm	pc
800068ac:	00 00       	add	r0,r0
800068ae:	04 85       	andn	r5,r2
800068b0:	80 00       	ld.sh	r0,r0[0x0]
800068b2:	7a 68       	ld.w	r8,sp[0x18]

800068b4 <udi_hid_kbd_disable>:
	return UDI_HID_KBD_ENABLE_EXT();
}


void udi_hid_kbd_disable(void)
{
800068b4:	d4 01       	pushm	lr
	UDI_HID_KBD_DISABLE_EXT();
800068b6:	f0 1f 00 02 	mcall	800068bc <udi_hid_kbd_disable+0x8>
}
800068ba:	d8 02       	popm	pc
800068bc:	80 00       	ld.sh	r0,r0[0x0]
800068be:	7a 44       	ld.w	r4,sp[0x10]

800068c0 <udi_hid_kbd_enable>:

//--------------------------------------------
//------ Interface for UDI HID level

bool udi_hid_kbd_enable(void)
{
800068c0:	d4 01       	pushm	lr
	// Initialize internal values
	udi_hid_kbd_rate = 0;
800068c2:	30 08       	mov	r8,0
800068c4:	48 89       	lddpc	r9,800068e4 <udi_hid_kbd_enable+0x24>
800068c6:	b2 88       	st.b	r9[0x0],r8
	udi_hid_kbd_protocol = 0;
800068c8:	48 89       	lddpc	r9,800068e8 <udi_hid_kbd_enable+0x28>
800068ca:	b2 88       	st.b	r9[0x0],r8
	udi_hid_kbd_b_report_trans_ongoing = false;
800068cc:	48 89       	lddpc	r9,800068ec <udi_hid_kbd_enable+0x2c>
800068ce:	b2 88       	st.b	r9[0x0],r8
	memset(udi_hid_kbd_report, 0, UDI_HID_KBD_REPORT_SIZE);
800068d0:	30 0a       	mov	r10,0
800068d2:	30 0b       	mov	r11,0
800068d4:	48 79       	lddpc	r9,800068f0 <udi_hid_kbd_enable+0x30>
800068d6:	f2 eb 00 00 	st.d	r9[0],r10
	udi_hid_kbd_b_report_valid = false;
800068da:	48 79       	lddpc	r9,800068f4 <udi_hid_kbd_enable+0x34>
800068dc:	b2 88       	st.b	r9[0x0],r8
	return UDI_HID_KBD_ENABLE_EXT();
800068de:	f0 1f 00 07 	mcall	800068f8 <udi_hid_kbd_enable+0x38>
}
800068e2:	d8 02       	popm	pc
800068e4:	00 00       	add	r0,r0
800068e6:	04 90       	mov	r0,r2
800068e8:	00 00       	add	r0,r0
800068ea:	04 84       	andn	r4,r2
800068ec:	00 00       	add	r0,r0
800068ee:	04 7a       	tst	r10,r2
800068f0:	00 00       	add	r0,r0
800068f2:	04 88       	andn	r8,r2
800068f4:	00 00       	add	r0,r0
800068f6:	04 79       	tst	r9,r2
800068f8:	80 00       	ld.sh	r0,r0[0x0]
800068fa:	7a 38       	ld.w	r8,sp[0xc]

800068fc <udi_hid_setup>:
 * \retval true if the descriptor is supported
 */
static bool udi_hid_reqstdifaceget_descriptor(uint8_t *report_desc);

bool udi_hid_setup( uint8_t *rate, uint8_t *protocol, uint8_t *report_desc, bool (*set_report)(void) )
{
800068fc:	eb cd 40 80 	pushm	r7,lr
80006900:	14 97       	mov	r7,r10
	if (Udd_setup_is_in()) {
80006902:	4c 08       	lddpc	r8,80006a00 <udi_hid_setup+0x104>
80006904:	11 88       	ld.ub	r8,r8[0x0]
80006906:	30 0a       	mov	r10,0
80006908:	f4 08 18 00 	cp.b	r8,r10
8000690c:	c5 04       	brge	800069ac <udi_hid_setup+0xb0>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
8000690e:	e2 18 00 60 	andl	r8,0x60,COH
80006912:	c3 31       	brne	80006978 <udi_hid_setup+0x7c>
			// Requests Standard Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
80006914:	4b b9       	lddpc	r9,80006a00 <udi_hid_setup+0x104>
80006916:	13 9a       	ld.ub	r10,r9[0x1]
80006918:	30 69       	mov	r9,6
8000691a:	f2 0a 18 00 	cp.b	r10,r9
8000691e:	c2 d1       	brne	80006978 <udi_hid_setup+0x7c>
{
	usb_hid_descriptor_t UDC_DESC_STORAGE *ptr_hid_desc;

	// Get the USB descriptor which is located after the interface descriptor
	// This descriptor must be the HID descriptor
	ptr_hid_desc = (usb_hid_descriptor_t UDC_DESC_STORAGE *) ((uint8_t *)
80006920:	f0 1f 00 39 	mcall	80006a04 <udi_hid_setup+0x108>
80006924:	2f 7c       	sub	r12,-9
			udc_get_interface_desc() + sizeof(usb_iface_desc_t));
	if (USB_DT_HID != ptr_hid_desc->bDescriptorType)
80006926:	19 99       	ld.ub	r9,r12[0x1]
80006928:	32 18       	mov	r8,33
8000692a:	f0 09 18 00 	cp.b	r9,r8
8000692e:	c2 31       	brne	80006974 <udi_hid_setup+0x78>

	// The SETUP request can ask for:
	// - an USB_DT_HID descriptor
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80006930:	4b 48       	lddpc	r8,80006a00 <udi_hid_setup+0x104>
80006932:	11 a8       	ld.ub	r8,r8[0x2]
80006934:	32 19       	mov	r9,33
80006936:	f2 08 18 00 	cp.b	r8,r9
8000693a:	c0 a1       	brne	8000694e <udi_hid_setup+0x52>
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
8000693c:	4b 18       	lddpc	r8,80006a00 <udi_hid_setup+0x104>
8000693e:	91 2c       	st.w	r8[0x8],r12
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
80006940:	90 b9       	ld.uh	r9,r8[0x6]
80006942:	19 8a       	ld.ub	r10,r12[0x0]
80006944:	f2 0a 0d 49 	min	r9,r9,r10
	// - or USB_DT_HID_REPORT descriptor
	// - or USB_DT_HID_PHYSICAL descriptor
	if (USB_DT_HID == (uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// USB_DT_HID descriptor requested then send it
		udd_g_ctrlreq.payload = (uint8_t *) ptr_hid_desc;
		udd_g_ctrlreq.payload_size =
80006948:	b0 69       	st.h	r8[0xc],r9
8000694a:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
				ptr_hid_desc->bLength);
		return true;
	}
	// The HID_X descriptor requested must correspond to report type
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
8000694e:	19 e9       	ld.ub	r9,r12[0x6]
80006950:	f0 09 18 00 	cp.b	r9,r8
80006954:	c1 01       	brne	80006974 <udi_hid_setup+0x78>
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
80006956:	4a b8       	lddpc	r8,80006a00 <udi_hid_setup+0x104>
80006958:	91 27       	st.w	r8[0x8],r7
		udd_g_ctrlreq.payload_size =
				min(udd_g_ctrlreq.req.wLength,
8000695a:	90 ba       	ld.uh	r10,r8[0x6]
8000695c:	19 fb       	ld.ub	r11,r12[0x7]
8000695e:	f9 39 00 08 	ld.ub	r9,r12[8]
80006962:	f3 eb 10 89 	or	r9,r9,r11<<0x8
80006966:	5c c9       	swap.bh	r9
80006968:	5c 79       	castu.h	r9
8000696a:	f4 09 0d 49 	min	r9,r10,r9
	// included in the HID descriptor
	if (ptr_hid_desc->bRDescriptorType ==
			(uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
		// Send HID Report descriptor given by high level
		udd_g_ctrlreq.payload = report_desc;
		udd_g_ctrlreq.payload_size =
8000696e:	b0 69       	st.h	r8[0xc],r9
80006970:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
80006974:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0

			case USB_REQ_GET_DESCRIPTOR:
				return udi_hid_reqstdifaceget_descriptor(report_desc);
			}
		}
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80006978:	e0 48 00 20 	cp.w	r8,32
8000697c:	c4 01       	brne	800069fc <udi_hid_setup+0x100>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000697e:	4a 18       	lddpc	r8,80006a00 <udi_hid_setup+0x104>
80006980:	11 98       	ld.ub	r8,r8[0x1]
80006982:	30 29       	mov	r9,2
80006984:	f2 08 18 00 	cp.b	r8,r9
80006988:	c0 60       	breq	80006994 <udi_hid_setup+0x98>
8000698a:	30 39       	mov	r9,3
8000698c:	f2 08 18 00 	cp.b	r8,r9
80006990:	c3 61       	brne	800069fc <udi_hid_setup+0x100>
80006992:	c0 78       	rjmp	800069a0 <udi_hid_setup+0xa4>
			case USB_REQ_HID_GET_REPORT:
				// TODO
				break;

			case USB_REQ_HID_GET_IDLE:
				udd_g_ctrlreq.payload = rate;
80006994:	49 b8       	lddpc	r8,80006a00 <udi_hid_setup+0x104>
80006996:	91 2c       	st.w	r8[0x8],r12
				udd_g_ctrlreq.payload_size = 1;
80006998:	30 19       	mov	r9,1
8000699a:	b0 69       	st.h	r8[0xc],r9
8000699c:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
				return true;

			case USB_REQ_HID_GET_PROTOCOL:
				udd_g_ctrlreq.payload = protocol;
800069a0:	49 88       	lddpc	r8,80006a00 <udi_hid_setup+0x104>
800069a2:	91 2b       	st.w	r8[0x8],r11
				udd_g_ctrlreq.payload_size = 1;
800069a4:	30 19       	mov	r9,1
800069a6:	b0 69       	st.h	r8[0xc],r9
800069a8:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800069ac:	e2 18 00 60 	andl	r8,0x60,COH
800069b0:	e0 48 00 20 	cp.w	r8,32
800069b4:	c2 41       	brne	800069fc <udi_hid_setup+0x100>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
800069b6:	49 38       	lddpc	r8,80006a00 <udi_hid_setup+0x104>
800069b8:	11 98       	ld.ub	r8,r8[0x1]
800069ba:	30 9a       	mov	r10,9
800069bc:	f4 08 18 00 	cp.b	r8,r10
800069c0:	c0 b0       	breq	800069d6 <udi_hid_setup+0xda>
800069c2:	c1 d3       	brcs	800069fc <udi_hid_setup+0x100>
800069c4:	30 a9       	mov	r9,10
800069c6:	f2 08 18 00 	cp.b	r8,r9
800069ca:	c0 90       	breq	800069dc <udi_hid_setup+0xe0>
800069cc:	30 b9       	mov	r9,11
800069ce:	f2 08 18 00 	cp.b	r8,r9
800069d2:	c1 51       	brne	800069fc <udi_hid_setup+0x100>
800069d4:	c0 98       	rjmp	800069e6 <udi_hid_setup+0xea>

			case USB_REQ_HID_SET_REPORT:
				return set_report();
800069d6:	5d 19       	icall	r9
800069d8:	e3 cd 80 80 	ldm	sp++,r7,pc

			case USB_REQ_HID_SET_IDLE:
				*rate = udd_g_ctrlreq.req.wValue >> 8;
800069dc:	48 98       	lddpc	r8,80006a00 <udi_hid_setup+0x104>
800069de:	11 a8       	ld.ub	r8,r8[0x2]
800069e0:	b8 88       	st.b	r12[0x0],r8
800069e2:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
				return true;

			case USB_REQ_HID_SET_PROTOCOL:
				if (0 != udd_g_ctrlreq.req.wLength)
800069e6:	48 78       	lddpc	r8,80006a00 <udi_hid_setup+0x104>
800069e8:	90 39       	ld.sh	r9,r8[0x6]
800069ea:	30 08       	mov	r8,0
800069ec:	f0 09 19 00 	cp.h	r9,r8
800069f0:	c0 61       	brne	800069fc <udi_hid_setup+0x100>
					return false;
				*protocol = udd_g_ctrlreq.req.wValue;
800069f2:	48 48       	lddpc	r8,80006a00 <udi_hid_setup+0x104>
800069f4:	90 18       	ld.sh	r8,r8[0x2]
800069f6:	b6 88       	st.b	r11[0x0],r8
800069f8:	e3 cf 90 80 	ldm	sp++,r7,pc,r12=1
				return true;
800069fc:	e3 cf 80 80 	ldm	sp++,r7,pc,r12=0
80006a00:	00 00       	add	r0,r0
80006a02:	2a 4c       	sub	r12,-92
80006a04:	80 00       	ld.sh	r0,r0[0x0]
80006a06:	73 00       	ld.w	r0,r9[0x40]

80006a08 <udi_msc_getsetting>:
}

uint8_t udi_msc_getsetting(void)
{
	return 0;	// MSC don't have multiple alternate setting
}
80006a08:	5e fd       	retal	0
80006a0a:	d7 03       	nop

80006a0c <udi_msc_trans_ack>:
		udd_ep_id_t ep)
{
	UNUSED(ep);
	UNUSED(n);
	// Update variable to signal the end of transfer
	udi_msc_b_abort_trans = (UDD_EP_TRANSFER_OK != status) ? true : false;
80006a0c:	58 0c       	cp.w	r12,0
80006a0e:	5f 19       	srne	r9
80006a10:	48 38       	lddpc	r8,80006a1c <udi_msc_trans_ack+0x10>
80006a12:	b0 89       	st.b	r8[0x0],r9
	udi_msc_b_ack_trans = true;
80006a14:	30 19       	mov	r9,1
80006a16:	48 38       	lddpc	r8,80006a20 <udi_msc_trans_ack+0x14>
80006a18:	b0 89       	st.b	r8[0x0],r9
}
80006a1a:	5e fc       	retal	r12
80006a1c:	00 00       	add	r0,r0
80006a1e:	2a 6b       	sub	r11,-90
80006a20:	00 00       	add	r0,r0
80006a22:	00 c8       	st.b	r0++,r8

80006a24 <udi_msc_trans_block>:


bool udi_msc_trans_block(bool b_read, uint8_t * block, iram_size_t block_size,
		void (*callback) (udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep))
{
80006a24:	eb cd 40 c0 	pushm	r6-r7,lr
80006a28:	14 96       	mov	r6,r10
80006a2a:	12 97       	mov	r7,r9
	if (!udi_msc_b_ack_trans)
80006a2c:	49 d8       	lddpc	r8,80006aa0 <udi_msc_trans_block+0x7c>
80006a2e:	11 88       	ld.ub	r8,r8[0x0]
80006a30:	58 08       	cp.w	r8,0
80006a32:	c3 40       	breq	80006a9a <udi_msc_trans_block+0x76>
		return false;	// No possible, transfer on going

	// Start transfer Internal RAM<->USB line
	udi_msc_b_ack_trans = false;
80006a34:	30 09       	mov	r9,0
80006a36:	49 b8       	lddpc	r8,80006aa0 <udi_msc_trans_block+0x7c>
80006a38:	b0 89       	st.b	r8[0x0],r9
	if (!udd_ep_run((b_read) ? UDI_MSC_EP_IN : UDI_MSC_EP_OUT,
80006a3a:	49 b8       	lddpc	r8,80006aa4 <udi_msc_trans_block+0x80>
80006a3c:	58 07       	cp.w	r7,0
80006a3e:	ee 08 17 10 	movne	r8,r7
80006a42:	14 99       	mov	r9,r10
80006a44:	16 9a       	mov	r10,r11
80006a46:	30 0b       	mov	r11,0
80006a48:	e0 6e 00 81 	mov	lr,129
80006a4c:	16 3c       	cp.w	r12,r11
80006a4e:	fc 0c 17 10 	movne	r12,lr
80006a52:	f9 bc 00 02 	moveq	r12,2
80006a56:	f0 1f 00 15 	mcall	80006aa8 <udi_msc_trans_block+0x84>
80006a5a:	c0 61       	brne	80006a66 <udi_msc_trans_block+0x42>
					false,
					block,
					block_size,
					(NULL == callback) ? udi_msc_trans_ack :
					callback)) {
		udi_msc_b_ack_trans = true;
80006a5c:	30 19       	mov	r9,1
80006a5e:	49 18       	lddpc	r8,80006aa0 <udi_msc_trans_block+0x7c>
80006a60:	b0 89       	st.b	r8[0x0],r9
		return false;
80006a62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	}
	if (NULL == callback) {
80006a66:	58 07       	cp.w	r7,0
80006a68:	c1 31       	brne	80006a8e <udi_msc_trans_block+0x6a>
		while (!udi_msc_b_ack_trans);
80006a6a:	48 e9       	lddpc	r9,80006aa0 <udi_msc_trans_block+0x7c>
80006a6c:	13 88       	ld.ub	r8,r9[0x0]
80006a6e:	58 08       	cp.w	r8,0
80006a70:	cf e0       	breq	80006a6c <udi_msc_trans_block+0x48>
		if (udi_msc_b_abort_trans) {
80006a72:	48 f8       	lddpc	r8,80006aac <udi_msc_trans_block+0x88>
80006a74:	11 88       	ld.ub	r8,r8[0x0]
80006a76:	58 08       	cp.w	r8,0
80006a78:	c1 11       	brne	80006a9a <udi_msc_trans_block+0x76>
			return false;
		}
		udi_msc_csw.dCSWDataResidue -= block_size;
80006a7a:	48 e8       	lddpc	r8,80006ab0 <udi_msc_trans_block+0x8c>
80006a7c:	70 29       	ld.w	r9,r8[0x8]
80006a7e:	0c 19       	sub	r9,r6
80006a80:	91 29       	st.w	r8[0x8],r9
		return (!udi_msc_b_abort_trans);
80006a82:	48 b8       	lddpc	r8,80006aac <udi_msc_trans_block+0x88>
80006a84:	11 8c       	ld.ub	r12,r8[0x0]
80006a86:	ec 1c 00 01 	eorl	r12,0x1
80006a8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	}
	udi_msc_csw.dCSWDataResidue -= block_size;
80006a8e:	48 98       	lddpc	r8,80006ab0 <udi_msc_trans_block+0x8c>
80006a90:	70 29       	ld.w	r9,r8[0x8]
80006a92:	0c 19       	sub	r9,r6
80006a94:	91 29       	st.w	r8[0x8],r9
80006a96:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
	return true;
80006a9a:	e3 cf 80 c0 	ldm	sp++,r6-r7,pc,r12=0
80006a9e:	00 00       	add	r0,r0
80006aa0:	00 00       	add	r0,r0
80006aa2:	00 c8       	st.b	r0++,r8
80006aa4:	80 00       	ld.sh	r0,r0[0x0]
80006aa6:	6a 0c       	ld.w	r12,r5[0x0]
80006aa8:	80 00       	ld.sh	r0,r0[0x0]
80006aaa:	5f d8       	srvc	r8
80006aac:	00 00       	add	r0,r0
80006aae:	2a 6b       	sub	r11,-90
80006ab0:	00 00       	add	r0,r0
80006ab2:	01 04       	ld.w	r4,r0++

80006ab4 <udi_msc_clear_sense>:
//---------------------------------------------
//------- Routines manage sense data

static void udi_msc_clear_sense(void)
{
	memset((uint8_t*)&udi_msc_sense, 0, sizeof(struct scsi_request_sense_data));
80006ab4:	48 79       	lddpc	r9,80006ad0 <udi_msc_clear_sense+0x1c>
80006ab6:	30 0a       	mov	r10,0
80006ab8:	30 0b       	mov	r11,0
80006aba:	12 98       	mov	r8,r9
80006abc:	b1 2a       	st.d	r8++,r10
80006abe:	b1 2a       	st.d	r8++,r10
80006ac0:	30 0a       	mov	r10,0
80006ac2:	b0 0a       	st.h	r8[0x0],r10
	udi_msc_sense.valid_reponse_code = SCSI_SENSE_VALID | SCSI_SENSE_CURRENT;
80006ac4:	3f 08       	mov	r8,-16
80006ac6:	b2 88       	st.b	r9[0x0],r8
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
80006ac8:	30 a8       	mov	r8,10
80006aca:	b2 f8       	st.b	r9[0x7],r8
}
80006acc:	5e fc       	retal	r12
80006ace:	00 00       	add	r0,r0
80006ad0:	00 00       	add	r0,r0
80006ad2:	04 e4       	st.h	--r2,r4

80006ad4 <udi_msc_sense_pass>:
	udi_msc_sense.AddSenseCode = add_sense >> 8;
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
}

static void udi_msc_sense_pass(void)
{
80006ad4:	d4 01       	pushm	lr
	udi_msc_clear_sense();
80006ad6:	f0 1f 00 04 	mcall	80006ae4 <udi_msc_sense_pass+0x10>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
80006ada:	30 09       	mov	r9,0
80006adc:	48 38       	lddpc	r8,80006ae8 <udi_msc_sense_pass+0x14>
80006ade:	f1 69 00 0c 	st.b	r8[12],r9
}
80006ae2:	d8 02       	popm	pc
80006ae4:	80 00       	ld.sh	r0,r0[0x0]
80006ae6:	6a b4       	ld.w	r4,r5[0x2c]
80006ae8:	00 00       	add	r0,r0
80006aea:	01 04       	ld.w	r4,r0++

80006aec <udi_msc_sense_fail>:
	udi_msc_sense.AddSenseLen = SCSI_SENSE_ADDL_LEN(sizeof(udi_msc_sense));
}

static void udi_msc_sense_fail(uint8_t sense_key, uint16_t add_sense,
		uint32_t lba)
{
80006aec:	eb cd 40 e0 	pushm	r5-r7,lr
80006af0:	18 95       	mov	r5,r12
80006af2:	16 96       	mov	r6,r11
80006af4:	14 97       	mov	r7,r10
	udi_msc_clear_sense();
80006af6:	f0 1f 00 0e 	mcall	80006b2c <udi_msc_sense_fail+0x40>
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_FAIL;
80006afa:	30 19       	mov	r9,1
80006afc:	48 d8       	lddpc	r8,80006b30 <udi_msc_sense_fail+0x44>
80006afe:	f1 69 00 0c 	st.b	r8[12],r9
	udi_msc_sense.sense_flag_key = sense_key;
80006b02:	48 d8       	lddpc	r8,80006b34 <udi_msc_sense_fail+0x48>
80006b04:	b0 a5       	st.b	r8[0x2],r5
	udi_msc_sense.information[0] = lba >> 24;
80006b06:	ee 09 16 18 	lsr	r9,r7,0x18
80006b0a:	b0 b9       	st.b	r8[0x3],r9
	udi_msc_sense.information[1] = lba >> 16;
80006b0c:	ee 09 16 10 	lsr	r9,r7,0x10
80006b10:	b0 c9       	st.b	r8[0x4],r9
	udi_msc_sense.information[2] = lba >> 8;
80006b12:	ee 09 16 08 	lsr	r9,r7,0x8
80006b16:	b0 d9       	st.b	r8[0x5],r9
	udi_msc_sense.information[3] = lba;
80006b18:	b0 e7       	st.b	r8[0x6],r7
	udi_msc_sense.AddSenseCode = add_sense >> 8;
80006b1a:	f3 d6 c1 08 	bfextu	r9,r6,0x8,0x8
80006b1e:	f1 69 00 0c 	st.b	r8[12],r9
	udi_msc_sense.AddSnsCodeQlfr = add_sense;
80006b22:	f1 66 00 0d 	st.b	r8[13],r6
}
80006b26:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006b2a:	00 00       	add	r0,r0
80006b2c:	80 00       	ld.sh	r0,r0[0x0]
80006b2e:	6a b4       	ld.w	r4,r5[0x2c]
80006b30:	00 00       	add	r0,r0
80006b32:	01 04       	ld.w	r4,r0++
80006b34:	00 00       	add	r0,r0
80006b36:	04 e4       	st.h	--r2,r4

80006b38 <udi_msc_sense_fail_busy_or_change>:
{
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
}

static void udi_msc_sense_fail_busy_or_change(void)
{
80006b38:	d4 01       	pushm	lr
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
80006b3a:	30 0a       	mov	r10,0
80006b3c:	e0 6b 28 00 	mov	r11,10240
80006b40:	30 6c       	mov	r12,6
80006b42:	f0 1f 00 02 	mcall	80006b48 <udi_msc_sense_fail_busy_or_change+0x10>
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}
80006b46:	d8 02       	popm	pc
80006b48:	80 00       	ld.sh	r0,r0[0x0]
80006b4a:	6a ec       	ld.w	r12,r5[0x38]

80006b4c <udi_msc_sense_fail_not_present>:
	udi_msc_csw.bCSWStatus = USB_CSW_STATUS_PASS;
}


static void udi_msc_sense_fail_not_present(void)
{
80006b4c:	d4 01       	pushm	lr
	udi_msc_sense_fail(SCSI_SK_NOT_READY, SCSI_ASC_MEDIUM_NOT_PRESENT, 0);
80006b4e:	30 0a       	mov	r10,0
80006b50:	e0 6b 3a 00 	mov	r11,14848
80006b54:	30 2c       	mov	r12,2
80006b56:	f0 1f 00 02 	mcall	80006b5c <udi_msc_sense_fail_not_present+0x10>
}
80006b5a:	d8 02       	popm	pc
80006b5c:	80 00       	ld.sh	r0,r0[0x0]
80006b5e:	6a ec       	ld.w	r12,r5[0x38]

80006b60 <udi_msc_sense_fail_hardware>:
	udi_msc_sense_fail(SCSI_SK_UNIT_ATTENTION,
			SCSI_ASC_NOT_READY_TO_READY_CHANGE, 0);
}

static void udi_msc_sense_fail_hardware(void)
{
80006b60:	d4 01       	pushm	lr
	udi_msc_sense_fail(SCSI_SK_HARDWARE_ERROR,
80006b62:	30 0a       	mov	r10,0
80006b64:	14 9b       	mov	r11,r10
80006b66:	30 4c       	mov	r12,4
80006b68:	f0 1f 00 02 	mcall	80006b70 <udi_msc_sense_fail_hardware+0x10>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}
80006b6c:	d8 02       	popm	pc
80006b6e:	00 00       	add	r0,r0
80006b70:	80 00       	ld.sh	r0,r0[0x0]
80006b72:	6a ec       	ld.w	r12,r5[0x38]

80006b74 <udi_msc_sense_fail_cdb_invalid>:
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
}

static void udi_msc_sense_fail_cdb_invalid(void)
{
80006b74:	d4 01       	pushm	lr
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
80006b76:	30 0a       	mov	r10,0
80006b78:	e0 6b 24 00 	mov	r11,9216
80006b7c:	30 5c       	mov	r12,5
80006b7e:	f0 1f 00 02 	mcall	80006b84 <udi_msc_sense_fail_cdb_invalid+0x10>
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}
80006b82:	d8 02       	popm	pc
80006b84:	80 00       	ld.sh	r0,r0[0x0]
80006b86:	6a ec       	ld.w	r12,r5[0x38]

80006b88 <udi_msc_csw_send>:
	udi_msc_csw_send();
}


void udi_msc_csw_send(void)
{
80006b88:	d4 01       	pushm	lr
	// Sends CSW on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, false,
80006b8a:	48 88       	lddpc	r8,80006ba8 <udi_msc_csw_send+0x20>
80006b8c:	30 d9       	mov	r9,13
80006b8e:	48 8a       	lddpc	r10,80006bac <udi_msc_csw_send+0x24>
80006b90:	30 0b       	mov	r11,0
80006b92:	e0 6c 00 81 	mov	r12,129
80006b96:	f0 1f 00 07 	mcall	80006bb0 <udi_msc_csw_send+0x28>
80006b9a:	c0 61       	brne	80006ba6 <udi_msc_csw_send+0x1e>
					(uint8_t *) & udi_msc_csw,
					sizeof(udi_msc_csw),
					udi_msc_csw_sent)) {
		// Endpoint not available
		// then restart CSW sent when endpoint IN STALL will be cleared
		udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_send);
80006b9c:	48 6b       	lddpc	r11,80006bb4 <udi_msc_csw_send+0x2c>
80006b9e:	e0 6c 00 81 	mov	r12,129
80006ba2:	f0 1f 00 06 	mcall	80006bb8 <udi_msc_csw_send+0x30>
80006ba6:	d8 02       	popm	pc
80006ba8:	80 00       	ld.sh	r0,r0[0x0]
80006baa:	6d 6c       	ld.w	r12,r6[0x58]
80006bac:	00 00       	add	r0,r0
80006bae:	01 04       	ld.w	r4,r0++
80006bb0:	80 00       	ld.sh	r0,r0[0x0]
80006bb2:	5f d8       	srvc	r8
80006bb4:	80 00       	ld.sh	r0,r0[0x0]
80006bb6:	6b 88       	ld.w	r8,r5[0x60]
80006bb8:	80 00       	ld.sh	r0,r0[0x0]
80006bba:	54 00       	stdsp	sp[0x100],r0

80006bbc <udi_msc_csw_process>:

//---------------------------------------------
//------- Routines to process CSW packet

static void udi_msc_csw_process(void)
{
80006bbc:	d4 01       	pushm	lr
	if (0 != udi_msc_csw.dCSWDataResidue) {
80006bbe:	48 f8       	lddpc	r8,80006bf8 <udi_msc_csw_process+0x3c>
80006bc0:	70 28       	ld.w	r8,r8[0x8]
80006bc2:	58 08       	cp.w	r8,0
80006bc4:	c1 00       	breq	80006be4 <udi_msc_csw_process+0x28>
		// Residue not NULL
		// then STALL next request from USB host on corresponding endpoint
		if (udi_msc_cbw.bmCBWFlags & USB_CBW_DIRECTION_IN)
80006bc6:	48 e8       	lddpc	r8,80006bfc <udi_msc_csw_process+0x40>
80006bc8:	f1 39 00 0c 	ld.ub	r9,r8[12]
80006bcc:	30 08       	mov	r8,0
80006bce:	f0 09 18 00 	cp.b	r9,r8
80006bd2:	c0 64       	brge	80006bde <udi_msc_csw_process+0x22>
			udd_ep_set_halt(UDI_MSC_EP_IN);
80006bd4:	e0 6c 00 81 	mov	r12,129
80006bd8:	f0 1f 00 0a 	mcall	80006c00 <udi_msc_csw_process+0x44>
80006bdc:	c0 48       	rjmp	80006be4 <udi_msc_csw_process+0x28>
		else
			udd_ep_set_halt(UDI_MSC_EP_OUT);
80006bde:	30 2c       	mov	r12,2
80006be0:	f0 1f 00 08 	mcall	80006c00 <udi_msc_csw_process+0x44>
	}
	// Prepare and send CSW
	udi_msc_csw.dCSWTag = udi_msc_cbw.dCBWTag;
80006be4:	48 58       	lddpc	r8,80006bf8 <udi_msc_csw_process+0x3c>
80006be6:	48 69       	lddpc	r9,80006bfc <udi_msc_csw_process+0x40>
80006be8:	72 19       	ld.w	r9,r9[0x4]
80006bea:	91 19       	st.w	r8[0x4],r9
	udi_msc_csw.dCSWDataResidue = cpu_to_le32(udi_msc_csw.dCSWDataResidue);
80006bec:	f1 d9 80 02 	ldswp.w	r9,r8[8]
80006bf0:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_send();
80006bf2:	f0 1f 00 05 	mcall	80006c04 <udi_msc_csw_process+0x48>
}
80006bf6:	d8 02       	popm	pc
80006bf8:	00 00       	add	r0,r0
80006bfa:	01 04       	ld.w	r4,r0++
80006bfc:	00 00       	add	r0,r0
80006bfe:	04 9c       	mov	r12,r2
80006c00:	80 00       	ld.sh	r0,r0[0x0]
80006c02:	52 90       	stdsp	sp[0xa4],r0
80006c04:	80 00       	ld.sh	r0,r0[0x0]
80006c06:	6b 88       	ld.w	r8,r5[0x60]

80006c08 <udi_msc_process_trans>:
	UDI_MSC_NOTIFY_TRANS_EXT();
}


bool udi_msc_process_trans(void)
{
80006c08:	d4 01       	pushm	lr
	Ctrl_status status;

	if (!udi_msc_b_trans_req)
80006c0a:	49 c8       	lddpc	r8,80006c78 <udi_msc_process_trans+0x70>
80006c0c:	11 89       	ld.ub	r9,r8[0x0]
80006c0e:	30 08       	mov	r8,0
80006c10:	f0 09 18 00 	cp.b	r9,r8
80006c14:	c0 21       	brne	80006c18 <udi_msc_process_trans+0x10>
80006c16:	d8 0a       	popm	pc,r12=0
		return false;	// No Transfer request to do
	udi_msc_b_trans_req = false;
80006c18:	30 08       	mov	r8,0
80006c1a:	49 89       	lddpc	r9,80006c78 <udi_msc_process_trans+0x70>
80006c1c:	b2 88       	st.b	r9[0x0],r8

	// Start transfer
	if (udi_msc_b_read) {
80006c1e:	49 89       	lddpc	r9,80006c7c <udi_msc_process_trans+0x74>
80006c20:	13 89       	ld.ub	r9,r9[0x0]
80006c22:	f0 09 18 00 	cp.b	r9,r8
80006c26:	c0 b0       	breq	80006c3c <udi_msc_process_trans+0x34>
		status = memory_2_usb(udi_msc_cbw.bCBWLUN, udi_msc_addr,
80006c28:	49 68       	lddpc	r8,80006c80 <udi_msc_process_trans+0x78>
80006c2a:	90 8a       	ld.uh	r10,r8[0x0]
80006c2c:	49 68       	lddpc	r8,80006c84 <udi_msc_process_trans+0x7c>
80006c2e:	70 0b       	ld.w	r11,r8[0x0]
80006c30:	49 68       	lddpc	r8,80006c88 <udi_msc_process_trans+0x80>
80006c32:	f1 3c 00 0d 	ld.ub	r12,r8[13]
80006c36:	f0 1f 00 16 	mcall	80006c8c <udi_msc_process_trans+0x84>
80006c3a:	c0 a8       	rjmp	80006c4e <udi_msc_process_trans+0x46>
				udi_msc_nb_block);
	} else {
		status = usb_2_memory(udi_msc_cbw.bCBWLUN, udi_msc_addr,
80006c3c:	49 18       	lddpc	r8,80006c80 <udi_msc_process_trans+0x78>
80006c3e:	90 8a       	ld.uh	r10,r8[0x0]
80006c40:	49 18       	lddpc	r8,80006c84 <udi_msc_process_trans+0x7c>
80006c42:	70 0b       	ld.w	r11,r8[0x0]
80006c44:	49 18       	lddpc	r8,80006c88 <udi_msc_process_trans+0x80>
80006c46:	f1 3c 00 0d 	ld.ub	r12,r8[13]
80006c4a:	f0 1f 00 12 	mcall	80006c90 <udi_msc_process_trans+0x88>
				udi_msc_nb_block);
	}

	// Check status of transfer
	switch (status) {
80006c4e:	58 2c       	cp.w	r12,2
80006c50:	c0 b0       	breq	80006c66 <udi_msc_process_trans+0x5e>
80006c52:	58 3c       	cp.w	r12,3
80006c54:	c0 60       	breq	80006c60 <udi_msc_process_trans+0x58>
80006c56:	58 0c       	cp.w	r12,0
80006c58:	c0 a1       	brne	80006c6c <udi_msc_process_trans+0x64>
	case CTRL_GOOD:
		udi_msc_sense_pass();
80006c5a:	f0 1f 00 0f 	mcall	80006c94 <udi_msc_process_trans+0x8c>
		break;
80006c5e:	c0 98       	rjmp	80006c70 <udi_msc_process_trans+0x68>
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
80006c60:	f0 1f 00 0e 	mcall	80006c98 <udi_msc_process_trans+0x90>
		break;
80006c64:	c0 68       	rjmp	80006c70 <udi_msc_process_trans+0x68>
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
80006c66:	f0 1f 00 0e 	mcall	80006c9c <udi_msc_process_trans+0x94>
		break;
80006c6a:	c0 38       	rjmp	80006c70 <udi_msc_process_trans+0x68>
	default:
	case CTRL_FAIL:
		udi_msc_sense_fail_hardware();
80006c6c:	f0 1f 00 0d 	mcall	80006ca0 <udi_msc_process_trans+0x98>
		break;
	}
	// Send status of transfer in CSW packet
	udi_msc_csw_process();
80006c70:	f0 1f 00 0d 	mcall	80006ca4 <udi_msc_process_trans+0x9c>
80006c74:	da 0a       	popm	pc,r12=1
80006c76:	00 00       	add	r0,r0
80006c78:	00 00       	add	r0,r0
80006c7a:	04 98       	mov	r8,r2
80006c7c:	00 00       	add	r0,r0
80006c7e:	04 f8       	st.b	--r2,r8
80006c80:	00 00       	add	r0,r0
80006c82:	04 dc       	st.w	--r2,r12
80006c84:	00 00       	add	r0,r0
80006c86:	04 e0       	st.h	--r2,r0
80006c88:	00 00       	add	r0,r0
80006c8a:	04 9c       	mov	r12,r2
80006c8c:	80 00       	ld.sh	r0,r0[0x0]
80006c8e:	65 50       	ld.w	r0,r2[0x54]
80006c90:	80 00       	ld.sh	r0,r0[0x0]
80006c92:	64 dc       	ld.w	r12,r2[0x34]
80006c94:	80 00       	ld.sh	r0,r0[0x0]
80006c96:	6a d4       	ld.w	r4,r5[0x34]
80006c98:	80 00       	ld.sh	r0,r0[0x0]
80006c9a:	6b 38       	ld.w	r8,r5[0x4c]
80006c9c:	80 00       	ld.sh	r0,r0[0x0]
80006c9e:	6b 4c       	ld.w	r12,r5[0x50]
80006ca0:	80 00       	ld.sh	r0,r0[0x0]
80006ca2:	6b 60       	ld.w	r0,r5[0x58]
80006ca4:	80 00       	ld.sh	r0,r0[0x0]
80006ca6:	6b bc       	ld.w	r12,r5[0x6c]

80006ca8 <udi_msc_cbw_validate>:
	}
}


static bool udi_msc_cbw_validate(uint32_t alloc_len, uint8_t dir_flag)
{
80006ca8:	d4 01       	pushm	lr
	 *  - Case  7: Hi < Di
	 *  - Case  8: Hi <> Do
	 *  - Case 10: Ho <> Di
	 *  - Case 13: Ho < Do
	 */
	if (((udi_msc_cbw.bmCBWFlags ^ dir_flag) & USB_CBW_DIRECTION_IN)
80006caa:	48 a8       	lddpc	r8,80006cd0 <udi_msc_cbw_validate+0x28>
80006cac:	f1 38 00 0c 	ld.ub	r8,r8[12]
80006cb0:	f7 e8 20 08 	eor	r8,r11,r8
80006cb4:	30 09       	mov	r9,0
80006cb6:	f2 08 18 00 	cp.b	r8,r9
80006cba:	c0 65       	brlt	80006cc6 <udi_msc_cbw_validate+0x1e>
80006cbc:	48 68       	lddpc	r8,80006cd4 <udi_msc_cbw_validate+0x2c>
80006cbe:	70 28       	ld.w	r8,r8[0x8]
80006cc0:	18 38       	cp.w	r8,r12
80006cc2:	c0 23       	brcs	80006cc6 <udi_msc_cbw_validate+0x1e>
80006cc4:	da 0a       	popm	pc,r12=1
			|| (udi_msc_csw.dCSWDataResidue < alloc_len)) {
		udi_msc_sense_fail_cdb_invalid();
80006cc6:	f0 1f 00 05 	mcall	80006cd8 <udi_msc_cbw_validate+0x30>
		udi_msc_csw_process();
80006cca:	f0 1f 00 05 	mcall	80006cdc <udi_msc_cbw_validate+0x34>
80006cce:	d8 0a       	popm	pc,r12=0
80006cd0:	00 00       	add	r0,r0
80006cd2:	04 9c       	mov	r12,r2
80006cd4:	00 00       	add	r0,r0
80006cd6:	01 04       	ld.w	r4,r0++
80006cd8:	80 00       	ld.sh	r0,r0[0x0]
80006cda:	6b 74       	ld.w	r4,r5[0x5c]
80006cdc:	80 00       	ld.sh	r0,r0[0x0]
80006cde:	6b bc       	ld.w	r12,r5[0x6c]

80006ce0 <udi_msc_data_send>:

//---------------------------------------------
//------- Routines to process small data packet

static void udi_msc_data_send(uint8_t * buffer, uint8_t buf_size)
{
80006ce0:	d4 01       	pushm	lr
	// Sends data on IN endpoint
	if (!udd_ep_run(UDI_MSC_EP_IN, true,
80006ce2:	48 88       	lddpc	r8,80006d00 <udi_msc_data_send+0x20>
80006ce4:	16 99       	mov	r9,r11
80006ce6:	18 9a       	mov	r10,r12
80006ce8:	30 1b       	mov	r11,1
80006cea:	e0 6c 00 81 	mov	r12,129
80006cee:	f0 1f 00 06 	mcall	80006d04 <udi_msc_data_send+0x24>
80006cf2:	c0 51       	brne	80006cfc <udi_msc_data_send+0x1c>
					buffer, buf_size, udi_msc_data_sent)) {
		// If endpoint not available, then exit process command
		udi_msc_sense_fail_hardware();
80006cf4:	f0 1f 00 05 	mcall	80006d08 <udi_msc_data_send+0x28>
		udi_msc_csw_process();
80006cf8:	f0 1f 00 05 	mcall	80006d0c <udi_msc_data_send+0x2c>
80006cfc:	d8 02       	popm	pc
80006cfe:	00 00       	add	r0,r0
80006d00:	80 00       	ld.sh	r0,r0[0x0]
80006d02:	6d 10       	ld.w	r0,r6[0x44]
80006d04:	80 00       	ld.sh	r0,r0[0x0]
80006d06:	5f d8       	srvc	r8
80006d08:	80 00       	ld.sh	r0,r0[0x0]
80006d0a:	6b 60       	ld.w	r0,r5[0x58]
80006d0c:	80 00       	ld.sh	r0,r0[0x0]
80006d0e:	6b bc       	ld.w	r12,r5[0x6c]

80006d10 <udi_msc_data_sent>:
}


static void udi_msc_data_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
80006d10:	eb cd 40 80 	pushm	r7,lr
80006d14:	16 97       	mov	r7,r11
	UNUSED(ep);
	if (UDD_EP_TRANSFER_OK != status) {
80006d16:	58 0c       	cp.w	r12,0
80006d18:	c0 91       	brne	80006d2a <udi_msc_data_sent+0x1a>
		// Error protocol
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Update sense data
	udi_msc_sense_pass();
80006d1a:	f0 1f 00 06 	mcall	80006d30 <udi_msc_data_sent+0x20>
	// Update CSW
	udi_msc_csw.dCSWDataResidue -= nb_sent;
80006d1e:	48 68       	lddpc	r8,80006d34 <udi_msc_data_sent+0x24>
80006d20:	70 29       	ld.w	r9,r8[0x8]
80006d22:	0e 19       	sub	r9,r7
80006d24:	91 29       	st.w	r8[0x8],r9
	udi_msc_csw_process();
80006d26:	f0 1f 00 05 	mcall	80006d38 <udi_msc_data_sent+0x28>
80006d2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80006d2e:	00 00       	add	r0,r0
80006d30:	80 00       	ld.sh	r0,r0[0x0]
80006d32:	6a d4       	ld.w	r4,r5[0x34]
80006d34:	00 00       	add	r0,r0
80006d36:	01 04       	ld.w	r4,r0++
80006d38:	80 00       	ld.sh	r0,r0[0x0]
80006d3a:	6b bc       	ld.w	r12,r5[0x6c]

80006d3c <udi_msc_cbw_wait>:
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
}

static void udi_msc_cbw_wait(void)
{
80006d3c:	d4 01       	pushm	lr
	// Register buffer and callback on OUT endpoint
	if (!udd_ep_run(UDI_MSC_EP_OUT, true,
80006d3e:	48 88       	lddpc	r8,80006d5c <udi_msc_cbw_wait+0x20>
80006d40:	31 f9       	mov	r9,31
80006d42:	48 8a       	lddpc	r10,80006d60 <udi_msc_cbw_wait+0x24>
80006d44:	30 1b       	mov	r11,1
80006d46:	30 2c       	mov	r12,2
80006d48:	f0 1f 00 07 	mcall	80006d64 <udi_msc_cbw_wait+0x28>
80006d4c:	c0 61       	brne	80006d58 <udi_msc_cbw_wait+0x1c>
					(uint8_t *) & udi_msc_cbw,
					sizeof(udi_msc_cbw),
					udi_msc_cbw_received)) {
		// OUT endpoint not available (halted), then wait a clear of halt.
		udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_wait);
80006d4e:	fe cb 00 12 	sub	r11,pc,18
80006d52:	30 2c       	mov	r12,2
80006d54:	f0 1f 00 05 	mcall	80006d68 <udi_msc_cbw_wait+0x2c>
80006d58:	d8 02       	popm	pc
80006d5a:	00 00       	add	r0,r0
80006d5c:	80 00       	ld.sh	r0,r0[0x0]
80006d5e:	6f 34       	ld.w	r4,r7[0x4c]
80006d60:	00 00       	add	r0,r0
80006d62:	04 9c       	mov	r12,r2
80006d64:	80 00       	ld.sh	r0,r0[0x0]
80006d66:	5f d8       	srvc	r8
80006d68:	80 00       	ld.sh	r0,r0[0x0]
80006d6a:	54 00       	stdsp	sp[0x100],r0

80006d6c <udi_msc_csw_sent>:
}


static void udi_msc_csw_sent(udd_ep_status_t status, iram_size_t nb_sent,
		udd_ep_id_t ep)
{
80006d6c:	d4 01       	pushm	lr
	UNUSED(ep);
	UNUSED(status);
	UNUSED(nb_sent);
	// CSW is sent or not
	// In all case, restart process and wait CBW
	udi_msc_cbw_wait();
80006d6e:	f0 1f 00 02 	mcall	80006d74 <udi_msc_csw_sent+0x8>
}
80006d72:	d8 02       	popm	pc
80006d74:	80 00       	ld.sh	r0,r0[0x0]
80006d76:	6d 3c       	ld.w	r12,r6[0x4c]

80006d78 <udi_msc_cbw_invalid>:

//---------------------------------------------
//------- Routines to process CBW packet

static void udi_msc_cbw_invalid(void)
{
80006d78:	d4 01       	pushm	lr
	if (!udi_msc_b_cbw_invalid)
80006d7a:	48 88       	lddpc	r8,80006d98 <udi_msc_cbw_invalid+0x20>
80006d7c:	11 89       	ld.ub	r9,r8[0x0]
80006d7e:	30 08       	mov	r8,0
80006d80:	f0 09 18 00 	cp.b	r9,r8
80006d84:	c0 90       	breq	80006d96 <udi_msc_cbw_invalid+0x1e>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_OUT);
80006d86:	30 2c       	mov	r12,2
80006d88:	f0 1f 00 05 	mcall	80006d9c <udi_msc_cbw_invalid+0x24>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_OUT, udi_msc_cbw_invalid);
80006d8c:	fe cb 00 14 	sub	r11,pc,20
80006d90:	30 2c       	mov	r12,2
80006d92:	f0 1f 00 04 	mcall	80006da0 <udi_msc_cbw_invalid+0x28>
80006d96:	d8 02       	popm	pc
80006d98:	00 00       	add	r0,r0
80006d9a:	04 d0       	st.w	--r2,r0
80006d9c:	80 00       	ld.sh	r0,r0[0x0]
80006d9e:	52 90       	stdsp	sp[0xa4],r0
80006da0:	80 00       	ld.sh	r0,r0[0x0]
80006da2:	54 00       	stdsp	sp[0x100],r0

80006da4 <udi_msc_csw_invalid>:
}

static void udi_msc_csw_invalid(void)
{
80006da4:	d4 01       	pushm	lr
	if (!udi_msc_b_cbw_invalid)
80006da6:	48 98       	lddpc	r8,80006dc8 <udi_msc_csw_invalid+0x24>
80006da8:	11 89       	ld.ub	r9,r8[0x0]
80006daa:	30 08       	mov	r8,0
80006dac:	f0 09 18 00 	cp.b	r9,r8
80006db0:	c0 b0       	breq	80006dc6 <udi_msc_csw_invalid+0x22>
		return;	// Don't re-stall endpoint if error reseted by setup
	udd_ep_set_halt(UDI_MSC_EP_IN);
80006db2:	e0 6c 00 81 	mov	r12,129
80006db6:	f0 1f 00 06 	mcall	80006dcc <udi_msc_csw_invalid+0x28>
	// If stall cleared then re-stall it. Only Setup MSC Reset can clear it
	udd_ep_wait_stall_clear(UDI_MSC_EP_IN, udi_msc_csw_invalid);
80006dba:	fe cb 00 16 	sub	r11,pc,22
80006dbe:	e0 6c 00 81 	mov	r12,129
80006dc2:	f0 1f 00 04 	mcall	80006dd0 <udi_msc_csw_invalid+0x2c>
80006dc6:	d8 02       	popm	pc
80006dc8:	00 00       	add	r0,r0
80006dca:	04 d0       	st.w	--r2,r0
80006dcc:	80 00       	ld.sh	r0,r0[0x0]
80006dce:	52 90       	stdsp	sp[0xa4],r0
80006dd0:	80 00       	ld.sh	r0,r0[0x0]
80006dd2:	54 00       	stdsp	sp[0x100],r0

80006dd4 <udi_msc_spc_mode_sense>:
	udi_msc_csw_process();
}


static void udi_msc_spc_mode_sense(bool b_sense10)
{
80006dd4:	eb cd 40 e0 	pushm	r5-r7,lr
80006dd8:	18 96       	mov	r6,r12
	uint8_t wp;
	struct spc_control_page_info_execpt *ptr_mode;
	UDC_BSS(4)  static union sense_6_10 sense;

	// Clear all fields
	memset(&sense, 0, sizeof(sense));
80006dda:	30 0a       	mov	r10,0
80006ddc:	30 0b       	mov	r11,0
80006dde:	4a a8       	lddpc	r8,80006e84 <udi_msc_spc_mode_sense+0xb0>
80006de0:	b1 2a       	st.d	r8++,r10
80006de2:	b1 2a       	st.d	r8++,r10
80006de4:	30 09       	mov	r9,0
80006de6:	91 09       	st.w	r8[0x0],r9

	// Initialize process
	if (b_sense10) {
80006de8:	58 0c       	cp.w	r12,0
80006dea:	c0 80       	breq	80006dfa <udi_msc_spc_mode_sense+0x26>
		request_lgt = udi_msc_cbw.CDB[8];
80006dec:	4a 78       	lddpc	r8,80006e88 <udi_msc_spc_mode_sense+0xb4>
80006dee:	f1 35 00 17 	ld.ub	r5,r8[23]
80006df2:	4a 59       	lddpc	r9,80006e84 <udi_msc_spc_mode_sense+0xb0>
80006df4:	2f 89       	sub	r9,-8
80006df6:	30 87       	mov	r7,8
80006df8:	c0 78       	rjmp	80006e06 <udi_msc_spc_mode_sense+0x32>
		ptr_mode = &sense.s10.sense_data;
		data_sense_lgt = sizeof(struct scsi_mode_param_header10);
	} else {
		request_lgt = udi_msc_cbw.CDB[4];
80006dfa:	4a 48       	lddpc	r8,80006e88 <udi_msc_spc_mode_sense+0xb4>
80006dfc:	f1 35 00 13 	ld.ub	r5,r8[19]
80006e00:	4a 19       	lddpc	r9,80006e84 <udi_msc_spc_mode_sense+0xb0>
80006e02:	2f c9       	sub	r9,-4
80006e04:	30 47       	mov	r7,4
	}

	// No Block descriptor

	// Fill page(s)
	mode = udi_msc_cbw.CDB[2] & SCSI_MS_MODE_ALL;
80006e06:	4a 18       	lddpc	r8,80006e88 <udi_msc_spc_mode_sense+0xb4>
80006e08:	f1 38 00 11 	ld.ub	r8,r8[17]
80006e0c:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
	if ((SCSI_MS_MODE_INFEXP == mode)
80006e10:	31 ca       	mov	r10,28
80006e12:	f4 08 18 00 	cp.b	r8,r10
80006e16:	5f 0a       	sreq	r10
80006e18:	33 fb       	mov	r11,63
80006e1a:	f6 08 18 00 	cp.b	r8,r11
80006e1e:	5f 08       	sreq	r8
80006e20:	f5 e8 10 08 	or	r8,r10,r8
80006e24:	c0 90       	breq	80006e36 <udi_msc_spc_mode_sense+0x62>
			|| (SCSI_MS_MODE_ALL == mode)) {
		// Informational exceptions control page (from SPC)
		ptr_mode->page_code =
80006e26:	31 c8       	mov	r8,28
80006e28:	b2 88       	st.b	r9[0x0],r8
				SCSI_MS_MODE_INFEXP;
		ptr_mode->page_length =
80006e2a:	30 a8       	mov	r8,10
80006e2c:	b2 98       	st.b	r9[0x1],r8
				SPC_MP_INFEXP_PAGE_LENGTH;
		ptr_mode->mrie =
80006e2e:	30 58       	mov	r8,5
80006e30:	b2 b8       	st.b	r9[0x3],r8
				SPC_MP_INFEXP_MRIE_NO_SENSE;
		data_sense_lgt += sizeof(struct spc_control_page_info_execpt);
80006e32:	2f 47       	sub	r7,-12
80006e34:	5c 57       	castu.b	r7
80006e36:	ee 05 18 00 	cp.b	r5,r7
80006e3a:	ee 05 17 20 	movhs	r5,r7
	}
	// Can't send more than mode sense data length
	if (request_lgt > data_sense_lgt)
		request_lgt = data_sense_lgt;
	if (!udi_msc_cbw_validate(request_lgt, USB_CBW_DIRECTION_IN))
80006e3e:	e0 6b 00 80 	mov	r11,128
80006e42:	0a 9c       	mov	r12,r5
80006e44:	f0 1f 00 12 	mcall	80006e8c <udi_msc_spc_mode_sense+0xb8>
80006e48:	c1 b0       	breq	80006e7e <udi_msc_spc_mode_sense+0xaa>
		return;

	// Fill mode parameter header length
	wp = (mem_wr_protect(udi_msc_cbw.bCBWLUN)) ? SCSI_MS_SBC_WP : 0;
80006e4a:	49 08       	lddpc	r8,80006e88 <udi_msc_spc_mode_sense+0xb4>
80006e4c:	f1 3c 00 0d 	ld.ub	r12,r8[13]
80006e50:	f0 1f 00 10 	mcall	80006e90 <udi_msc_spc_mode_sense+0xbc>
80006e54:	e0 68 00 80 	mov	r8,128
80006e58:	f0 0c 17 10 	movne	r12,r8
80006e5c:	f9 bc 00 00 	moveq	r12,0

	if (b_sense10) {
80006e60:	58 06       	cp.w	r6,0
80006e62:	c0 60       	breq	80006e6e <udi_msc_spc_mode_sense+0x9a>
		sense.s10.header.mode_data_length =
80006e64:	48 88       	lddpc	r8,80006e84 <udi_msc_spc_mode_sense+0xb0>
80006e66:	20 27       	sub	r7,2
80006e68:	b0 07       	st.h	r8[0x0],r7
				cpu_to_be16((data_sense_lgt - 2));
		//sense.s10.header.medium_type                 = 0;
		sense.s10.header.device_specific_parameter = wp;
80006e6a:	b0 bc       	st.b	r8[0x3],r12
80006e6c:	c0 58       	rjmp	80006e76 <udi_msc_spc_mode_sense+0xa2>
		//sense.s10.header.block_descriptor_length     = 0;
	} else {
		sense.s6.header.mode_data_length = data_sense_lgt - 1;
80006e6e:	48 68       	lddpc	r8,80006e84 <udi_msc_spc_mode_sense+0xb0>
80006e70:	20 17       	sub	r7,1
80006e72:	b0 87       	st.b	r8[0x0],r7
		//sense.s6.header.medium_type                  = 0;
		sense.s6.header.device_specific_parameter = wp;
80006e74:	b0 ac       	st.b	r8[0x2],r12
		//sense.s6.header.block_descriptor_length      = 0;
	}

	// Send mode sense data
	udi_msc_data_send((uint8_t *) & sense, request_lgt);
80006e76:	0a 9b       	mov	r11,r5
80006e78:	48 3c       	lddpc	r12,80006e84 <udi_msc_spc_mode_sense+0xb0>
80006e7a:	f0 1f 00 07 	mcall	80006e94 <udi_msc_spc_mode_sense+0xc0>
80006e7e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006e82:	00 00       	add	r0,r0
80006e84:	00 00       	add	r0,r0
80006e86:	04 bc       	st.h	r2++,r12
80006e88:	00 00       	add	r0,r0
80006e8a:	04 9c       	mov	r12,r2
80006e8c:	80 00       	ld.sh	r0,r0[0x0]
80006e8e:	6c a8       	ld.w	r8,r6[0x28]
80006e90:	80 00       	ld.sh	r0,r0[0x0]
80006e92:	64 80       	ld.w	r0,r2[0x20]
80006e94:	80 00       	ld.sh	r0,r0[0x0]
80006e96:	6c e0       	ld.w	r0,r6[0x38]

80006e98 <udi_msc_sbc_trans>:
			sizeof(udi_msc_capacity));
}


static void udi_msc_sbc_trans(bool b_read)
{
80006e98:	eb cd 40 80 	pushm	r7,lr
80006e9c:	18 97       	mov	r7,r12
	uint32_t trans_size;

	if (!b_read) {
80006e9e:	58 0c       	cp.w	r12,0
80006ea0:	c1 11       	brne	80006ec2 <udi_msc_sbc_trans+0x2a>
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
80006ea2:	49 c8       	lddpc	r8,80006f10 <udi_msc_sbc_trans+0x78>
80006ea4:	f1 3c 00 0d 	ld.ub	r12,r8[13]
80006ea8:	f0 1f 00 1b 	mcall	80006f14 <udi_msc_sbc_trans+0x7c>
80006eac:	c0 b0       	breq	80006ec2 <udi_msc_sbc_trans+0x2a>
			SCSI_ASC_NO_ADDITIONAL_SENSE_INFO, 0);
}

static void udi_msc_sense_fail_protected(void)
{
	udi_msc_sense_fail(SCSI_SK_DATA_PROTECT, SCSI_ASC_WRITE_PROTECTED, 0);
80006eae:	30 0a       	mov	r10,0
80006eb0:	e0 6b 27 00 	mov	r11,9984
80006eb4:	30 7c       	mov	r12,7
80006eb6:	f0 1f 00 19 	mcall	80006f18 <udi_msc_sbc_trans+0x80>
	if (!b_read) {
		// Write operation then check Write Protect
		if (mem_wr_protect(udi_msc_cbw.bCBWLUN)) {
			// Write not authorized
			udi_msc_sense_fail_protected();
			udi_msc_csw_process();
80006eba:	f0 1f 00 19 	mcall	80006f1c <udi_msc_sbc_trans+0x84>
			return;
80006ebe:	e3 cd 80 80 	ldm	sp++,r7,pc
		}
	}
	// Read/Write command fields (address and number of block)
	MSB0(udi_msc_addr) = udi_msc_cbw.CDB[2];
80006ec2:	49 89       	lddpc	r9,80006f20 <udi_msc_sbc_trans+0x88>
80006ec4:	49 38       	lddpc	r8,80006f10 <udi_msc_sbc_trans+0x78>
80006ec6:	f1 3a 00 11 	ld.ub	r10,r8[17]
80006eca:	b2 8a       	st.b	r9[0x0],r10
	MSB1(udi_msc_addr) = udi_msc_cbw.CDB[3];
80006ecc:	f1 3a 00 12 	ld.ub	r10,r8[18]
80006ed0:	b2 9a       	st.b	r9[0x1],r10
	MSB2(udi_msc_addr) = udi_msc_cbw.CDB[4];
80006ed2:	f1 3a 00 13 	ld.ub	r10,r8[19]
80006ed6:	b2 aa       	st.b	r9[0x2],r10
	MSB3(udi_msc_addr) = udi_msc_cbw.CDB[5];
80006ed8:	f1 3a 00 14 	ld.ub	r10,r8[20]
80006edc:	b2 ba       	st.b	r9[0x3],r10
	MSB(udi_msc_nb_block) = udi_msc_cbw.CDB[7];
80006ede:	49 29       	lddpc	r9,80006f24 <udi_msc_sbc_trans+0x8c>
80006ee0:	f1 3a 00 16 	ld.ub	r10,r8[22]
80006ee4:	b2 8a       	st.b	r9[0x0],r10
	LSB(udi_msc_nb_block) = udi_msc_cbw.CDB[8];
80006ee6:	f1 38 00 17 	ld.ub	r8,r8[23]
80006eea:	b2 98       	st.b	r9[0x1],r8

	// Compute number of byte to transfer and valid it
	trans_size = (uint32_t) udi_msc_nb_block *UDI_MSC_BLOCK_SIZE;
	if (!udi_msc_cbw_validate(trans_size,
80006eec:	92 8c       	ld.uh	r12,r9[0x0]
80006eee:	e0 6b 00 80 	mov	r11,128
80006ef2:	58 07       	cp.w	r7,0
80006ef4:	f9 bb 00 00 	moveq	r11,0
80006ef8:	a9 7c       	lsl	r12,0x9
80006efa:	f0 1f 00 0c 	mcall	80006f28 <udi_msc_sbc_trans+0x90>
80006efe:	c0 60       	breq	80006f0a <udi_msc_sbc_trans+0x72>
					(b_read) ? USB_CBW_DIRECTION_IN :
					USB_CBW_DIRECTION_OUT))
		return;

	// Record transfer request to do it in a task and not under interrupt
	udi_msc_b_read = b_read;
80006f00:	48 b8       	lddpc	r8,80006f2c <udi_msc_sbc_trans+0x94>
80006f02:	b0 87       	st.b	r8[0x0],r7
	udi_msc_b_trans_req = true;
80006f04:	30 19       	mov	r9,1
80006f06:	48 b8       	lddpc	r8,80006f30 <udi_msc_sbc_trans+0x98>
80006f08:	b0 89       	st.b	r8[0x0],r9
80006f0a:	e3 cd 80 80 	ldm	sp++,r7,pc
80006f0e:	00 00       	add	r0,r0
80006f10:	00 00       	add	r0,r0
80006f12:	04 9c       	mov	r12,r2
80006f14:	80 00       	ld.sh	r0,r0[0x0]
80006f16:	64 80       	ld.w	r0,r2[0x20]
80006f18:	80 00       	ld.sh	r0,r0[0x0]
80006f1a:	6a ec       	ld.w	r12,r5[0x38]
80006f1c:	80 00       	ld.sh	r0,r0[0x0]
80006f1e:	6b bc       	ld.w	r12,r5[0x6c]
80006f20:	00 00       	add	r0,r0
80006f22:	04 e0       	st.h	--r2,r0
80006f24:	00 00       	add	r0,r0
80006f26:	04 dc       	st.w	--r2,r12
80006f28:	80 00       	ld.sh	r0,r0[0x0]
80006f2a:	6c a8       	ld.w	r8,r6[0x28]
80006f2c:	00 00       	add	r0,r0
80006f2e:	04 f8       	st.b	--r2,r8
80006f30:	00 00       	add	r0,r0
80006f32:	04 98       	mov	r8,r2

80006f34 <udi_msc_cbw_received>:
}


static void udi_msc_cbw_received(udd_ep_status_t status,
		iram_size_t nb_received, udd_ep_id_t ep)
{
80006f34:	eb cd 40 c0 	pushm	r6-r7,lr
	UNUSED(ep);
	// Check status of transfer
	if (UDD_EP_TRANSFER_OK != status) {
80006f38:	58 0c       	cp.w	r12,0
80006f3a:	e0 81 01 2a 	brne	8000718e <udi_msc_cbw_received+0x25a>
		// Now wait MSC setup reset to relaunch CBW reception
		return;
	}
	// Check CBW integrity:
	// transfer status/CBW length/CBW signature
	if ((sizeof(udi_msc_cbw) != nb_received)
80006f3e:	59 fb       	cp.w	r11,31
80006f40:	c0 a1       	brne	80006f54 <udi_msc_cbw_received+0x20>
80006f42:	fe f8 02 52 	ld.w	r8,pc[594]
80006f46:	70 08       	ld.w	r8,r8[0x0]
80006f48:	e0 69 42 43 	mov	r9,16963
80006f4c:	ea 19 55 53 	orh	r9,0x5553
80006f50:	12 38       	cp.w	r8,r9
80006f52:	c0 b0       	breq	80006f68 <udi_msc_cbw_received+0x34>
					CPU_TO_BE32(USB_CBW_SIGNATURE))) {
		// (5.2.1) Devices receiving a CBW with an invalid signature should stall
		// further traffic on the Bulk In pipe, and either stall further traffic
		// or accept and discard further traffic on the Bulk Out pipe, until
		// reset recovery.
		udi_msc_b_cbw_invalid = true;
80006f54:	30 19       	mov	r9,1
80006f56:	fe f8 02 42 	ld.w	r8,pc[578]
80006f5a:	b0 89       	st.b	r8[0x0],r9
		udi_msc_cbw_invalid();
80006f5c:	f0 1f 00 90 	mcall	8000719c <udi_msc_cbw_received+0x268>
		udi_msc_csw_invalid();
80006f60:	f0 1f 00 90 	mcall	800071a0 <udi_msc_cbw_received+0x26c>
		return;
80006f64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	}
	// Check LUN asked
	udi_msc_cbw.bCBWLUN &= USB_CBW_LUN_MASK;
80006f68:	fe f9 02 2c 	ld.w	r9,pc[556]
80006f6c:	f3 38 00 0d 	ld.ub	r8,r9[13]
80006f70:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006f74:	f3 68 00 0d 	st.b	r9[13],r8
	if (udi_msc_cbw.bCBWLUN > udi_msc_nb_lun) {
80006f78:	fe f9 02 2c 	ld.w	r9,pc[556]
80006f7c:	13 89       	ld.ub	r9,r9[0x0]
80006f7e:	f0 09 18 00 	cp.b	r9,r8
80006f82:	c0 72       	brcc	80006f90 <udi_msc_cbw_received+0x5c>
		// Bad LUN, then stop command process
		udi_msc_sense_fail_cdb_invalid();
80006f84:	f0 1f 00 89 	mcall	800071a8 <udi_msc_cbw_received+0x274>
		udi_msc_csw_process();
80006f88:	f0 1f 00 89 	mcall	800071ac <udi_msc_cbw_received+0x278>
		return;
80006f8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);
80006f90:	fe f8 02 04 	ld.w	r8,pc[516]
80006f94:	f1 da 80 02 	ldswp.w	r10,r8[8]
		udi_msc_sense_fail_cdb_invalid();
		udi_msc_csw_process();
		return;
	}
	// Prepare CSW residue field with the size requested
	udi_msc_csw.dCSWDataResidue =
80006f98:	fe f9 02 18 	ld.w	r9,pc[536]
80006f9c:	93 2a       	st.w	r9[0x8],r10
			le32_to_cpu(udi_msc_cbw.dCBWDataTransferLength);

	// Decode opcode
	switch (udi_msc_cbw.CDB[0]) {
80006f9e:	f1 38 00 0f 	ld.ub	r8,r8[15]
80006fa2:	e0 48 00 5a 	cp.w	r8,90
80006fa6:	e0 8b 00 e8 	brhi	80007176 <udi_msc_cbw_received+0x242>
80006faa:	fe f9 02 0a 	ld.w	r9,pc[522]
80006fae:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]
//---------------------------------------------
//------- Routines manage SCSI Commands

static void udi_msc_spc_requestsense(void)
{
	uint8_t length = udi_msc_cbw.CDB[4];
80006fb2:	4f 98       	lddpc	r8,80007194 <udi_msc_cbw_received+0x260>
80006fb4:	f1 37 00 13 	ld.ub	r7,r8[19]
80006fb8:	31 28       	mov	r8,18
80006fba:	f0 07 18 00 	cp.b	r7,r8
80006fbe:	f9 b7 0b 12 	movhi	r7,18

	// Can't send more than sense data length
	if (length > sizeof(udi_msc_sense))
		length = sizeof(udi_msc_sense);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
80006fc2:	e0 6b 00 80 	mov	r11,128
80006fc6:	0e 9c       	mov	r12,r7
80006fc8:	f0 1f 00 7c 	mcall	800071b8 <udi_msc_cbw_received+0x284>
80006fcc:	e0 80 00 e1 	breq	8000718e <udi_msc_cbw_received+0x25a>
		return;
	// Send sense data
	udi_msc_data_send((uint8_t*)&udi_msc_sense, length);
80006fd0:	0e 9b       	mov	r11,r7
80006fd2:	4f bc       	lddpc	r12,800071bc <udi_msc_cbw_received+0x288>
80006fd4:	f0 1f 00 7b 	mcall	800071c0 <udi_msc_cbw_received+0x28c>
80006fd8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		.addl_len = SCSI_INQ_ADDL_LEN(sizeof(struct scsi_inquiry_data)),
		.vendor_id = {UDI_MSC_GLOBAL_VENDOR_ID},
		.product_rev = {UDI_MSC_GLOBAL_PRODUCT_VERSION},
	};

	length = udi_msc_cbw.CDB[4];
80006fdc:	4e e8       	lddpc	r8,80007194 <udi_msc_cbw_received+0x260>
80006fde:	f1 37 00 13 	ld.ub	r7,r8[19]
80006fe2:	32 48       	mov	r8,36
80006fe4:	f0 07 18 00 	cp.b	r7,r8
80006fe8:	f9 b7 0b 24 	movhi	r7,36

	// Can't send more than inquiry data length
	if (length > sizeof(udi_msc_inquiry_data))
		length = sizeof(udi_msc_inquiry_data);

	if (!udi_msc_cbw_validate(length, USB_CBW_DIRECTION_IN))
80006fec:	e0 6b 00 80 	mov	r11,128
80006ff0:	0e 9c       	mov	r12,r7
80006ff2:	f0 1f 00 72 	mcall	800071b8 <udi_msc_cbw_received+0x284>
80006ff6:	e0 80 00 cc 	breq	8000718e <udi_msc_cbw_received+0x25a>
		return;
	if ((0 != (udi_msc_cbw.CDB[1] & (SCSI_INQ_REQ_EVPD | SCSI_INQ_REQ_CMDT)))
80006ffa:	4e 78       	lddpc	r8,80007194 <udi_msc_cbw_received+0x260>
80006ffc:	f1 38 00 10 	ld.ub	r8,r8[16]
80007000:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80007004:	c0 81       	brne	80007014 <udi_msc_cbw_received+0xe0>
			|| (0 != udi_msc_cbw.CDB[2])) {
80007006:	4e 48       	lddpc	r8,80007194 <udi_msc_cbw_received+0x260>
80007008:	f1 39 00 11 	ld.ub	r9,r8[17]
8000700c:	30 08       	mov	r8,0
8000700e:	f0 09 18 00 	cp.b	r9,r8
80007012:	c0 70       	breq	80007020 <udi_msc_cbw_received+0xec>
		// CMDT and EPVD bits are not at 0
		// PAGE or OPERATION CODE fields are not empty
		//  = No standard inquiry asked
		udi_msc_sense_fail_cdb_invalid(); // Command is unsupported
80007014:	f0 1f 00 65 	mcall	800071a8 <udi_msc_cbw_received+0x274>
		udi_msc_csw_process();
80007018:	f0 1f 00 65 	mcall	800071ac <udi_msc_cbw_received+0x278>
8000701c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return;
	}

	//* Fill product ID field
	// Copy name in product id field
	memcpy(udi_msc_inquiry_data.product_id,
80007020:	4d d8       	lddpc	r8,80007194 <udi_msc_cbw_received+0x260>
80007022:	f1 3c 00 0d 	ld.ub	r12,r8[13]
80007026:	f0 1f 00 68 	mcall	800071c4 <udi_msc_cbw_received+0x290>
8000702a:	4e 86       	lddpc	r6,800071c8 <udi_msc_cbw_received+0x294>
8000702c:	31 0a       	mov	r10,16
8000702e:	f8 cb ff ff 	sub	r11,r12,-1
80007032:	ec 0a 00 0c 	add	r12,r6,r10
80007036:	f0 1f 00 66 	mcall	800071cc <udi_msc_cbw_received+0x298>
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		if ((0 == udi_msc_inquiry_data.product_id[i])
8000703a:	ed 39 00 10 	ld.ub	r9,r6[16]
8000703e:	30 08       	mov	r8,0
80007040:	f0 09 18 00 	cp.b	r9,r8
80007044:	5f 0a       	sreq	r10
80007046:	32 2b       	mov	r11,34
80007048:	f6 09 18 00 	cp.b	r9,r11
8000704c:	5f 09       	sreq	r9
8000704e:	f5 e9 10 09 	or	r9,r10,r9
80007052:	f0 09 18 00 	cp.b	r9,r8
80007056:	e0 81 00 9a 	brne	8000718a <udi_msc_cbw_received+0x256>
8000705a:	0c 9a       	mov	r10,r6
8000705c:	2e fa       	sub	r10,-17
8000705e:	30 18       	mov	r8,1
80007060:	30 0b       	mov	r11,0
80007062:	32 26       	mov	r6,34
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
80007064:	31 0e       	mov	lr,16
		if ((0 == udi_msc_inquiry_data.product_id[i])
80007066:	15 89       	ld.ub	r9,r10[0x0]
80007068:	f6 09 18 00 	cp.b	r9,r11
8000706c:	5f 0c       	sreq	r12
8000706e:	ec 09 18 00 	cp.b	r9,r6
80007072:	5f 09       	sreq	r9
80007074:	f9 e9 10 09 	or	r9,r12,r9
80007078:	f6 09 18 00 	cp.b	r9,r11
8000707c:	c0 81       	brne	8000708c <udi_msc_cbw_received+0x158>
				|| ('"' == udi_msc_inquiry_data.product_id[i])) {
			break;
		}
		i++;
8000707e:	2f f8       	sub	r8,-1
80007080:	5c 58       	castu.b	r8
80007082:	2f fa       	sub	r10,-1
			mem_name(udi_msc_cbw.bCBWLUN)+1, // To remove first '"'
			sizeof(udi_msc_inquiry_data.product_id));

	// Search end of name '/0' or '"'
	i = 0;
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
80007084:	fc 08 18 00 	cp.b	r8,lr
80007088:	ce f1       	brne	80007066 <udi_msc_cbw_received+0x132>
8000708a:	c0 d8       	rjmp	800070a4 <udi_msc_cbw_received+0x170>
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
		udi_msc_inquiry_data.product_id[i] = ' ';
8000708c:	4c fc       	lddpc	r12,800071c8 <udi_msc_cbw_received+0x294>
8000708e:	32 0b       	mov	r11,32
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
80007090:	31 0a       	mov	r10,16
		udi_msc_inquiry_data.product_id[i] = ' ';
80007092:	f8 08 00 09 	add	r9,r12,r8
80007096:	f3 6b 00 10 	st.b	r9[16],r11
		i++;
8000709a:	2f f8       	sub	r8,-1
8000709c:	5c 58       	castu.b	r8
			break;
		}
		i++;
	}
	// Padding with space char
	while (sizeof(udi_msc_inquiry_data.product_id) != i) {
8000709e:	f4 08 18 00 	cp.b	r8,r10
800070a2:	cf 81       	brne	80007092 <udi_msc_cbw_received+0x15e>
		udi_msc_inquiry_data.product_id[i] = ' ';
		i++;
	}

	// Send inquiry data
	udi_msc_data_send((uint8_t *) & udi_msc_inquiry_data, length);
800070a4:	0e 9b       	mov	r11,r7
800070a6:	4c 9c       	lddpc	r12,800071c8 <udi_msc_cbw_received+0x294>
800070a8:	f0 1f 00 46 	mcall	800071c0 <udi_msc_cbw_received+0x28c>
800070ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	case SPC_INQUIRY:
		udi_msc_spc_inquiry();
		break;

	case SPC_MODE_SENSE6:
		udi_msc_spc_mode_sense(false);
800070b0:	30 0c       	mov	r12,0
800070b2:	f0 1f 00 48 	mcall	800071d0 <udi_msc_cbw_received+0x29c>
		break;
800070b6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	case SPC_MODE_SENSE10:
		udi_msc_spc_mode_sense(true);
800070ba:	30 1c       	mov	r12,1
800070bc:	f0 1f 00 45 	mcall	800071d0 <udi_msc_cbw_received+0x29c>
		break;
800070c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
}


static bool udi_msc_spc_testunitready_global(void)
{
	switch (mem_test_unit_ready(udi_msc_cbw.bCBWLUN)) {
800070c4:	4b 48       	lddpc	r8,80007194 <udi_msc_cbw_received+0x260>
800070c6:	f1 3c 00 0d 	ld.ub	r12,r8[13]
800070ca:	f0 1f 00 43 	mcall	800071d4 <udi_msc_cbw_received+0x2a0>
800070ce:	58 2c       	cp.w	r12,2
800070d0:	c0 90       	breq	800070e2 <udi_msc_cbw_received+0x1ae>
800070d2:	58 3c       	cp.w	r12,3
800070d4:	c0 40       	breq	800070dc <udi_msc_cbw_received+0x1a8>
800070d6:	58 0c       	cp.w	r12,0
800070d8:	c0 b0       	breq	800070ee <udi_msc_cbw_received+0x1ba>
800070da:	c0 78       	rjmp	800070e8 <udi_msc_cbw_received+0x1b4>
	case CTRL_GOOD:
		return true;	// Don't change sense data
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
800070dc:	f0 1f 00 3f 	mcall	800071d8 <udi_msc_cbw_received+0x2a4>
800070e0:	c0 98       	rjmp	800070f2 <udi_msc_cbw_received+0x1be>
		break;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
800070e2:	f0 1f 00 3f 	mcall	800071dc <udi_msc_cbw_received+0x2a8>
800070e6:	c0 68       	rjmp	800070f2 <udi_msc_cbw_received+0x1be>
		break;
	case CTRL_FAIL:
	default:
		udi_msc_sense_fail_hardware();
800070e8:	f0 1f 00 3e 	mcall	800071e0 <udi_msc_cbw_received+0x2ac>
800070ec:	c0 38       	rjmp	800070f2 <udi_msc_cbw_received+0x1be>

static void udi_msc_spc_testunitready(void)
{
	if (udi_msc_spc_testunitready_global()) {
		// LUN ready, then update sense data with status pass
		udi_msc_sense_pass();
800070ee:	f0 1f 00 3e 	mcall	800071e4 <udi_msc_cbw_received+0x2b0>
	}
	// Send status in CSW packet
	udi_msc_csw_process();
800070f2:	f0 1f 00 2f 	mcall	800071ac <udi_msc_cbw_received+0x278>
		udi_msc_spc_mode_sense(true);
		break;

	case SPC_TEST_UNIT_READY:
		udi_msc_spc_testunitready();
		break;
800070f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

static void udi_msc_sbc_read_capacity(void)
{
	UDC_BSS(4) static struct sbc_read_capacity10_data udi_msc_capacity;

	if (!udi_msc_cbw_validate(sizeof(udi_msc_capacity),
800070fa:	e0 6b 00 80 	mov	r11,128
800070fe:	30 8c       	mov	r12,8
80007100:	f0 1f 00 2e 	mcall	800071b8 <udi_msc_cbw_received+0x284>
80007104:	c4 50       	breq	8000718e <udi_msc_cbw_received+0x25a>
					USB_CBW_DIRECTION_IN))
		return;

	// Get capacity of LUN
	switch (mem_read_capacity(udi_msc_cbw.bCBWLUN,
80007106:	4b 9b       	lddpc	r11,800071e8 <udi_msc_cbw_received+0x2b4>
80007108:	4a 38       	lddpc	r8,80007194 <udi_msc_cbw_received+0x260>
8000710a:	f1 3c 00 0d 	ld.ub	r12,r8[13]
8000710e:	f0 1f 00 38 	mcall	800071ec <udi_msc_cbw_received+0x2b8>
					&udi_msc_capacity.max_lba)) {
80007112:	58 2c       	cp.w	r12,2
80007114:	c0 c0       	breq	8000712c <udi_msc_cbw_received+0x1f8>
80007116:	58 3c       	cp.w	r12,3
80007118:	c0 40       	breq	80007120 <udi_msc_cbw_received+0x1ec>
8000711a:	58 0c       	cp.w	r12,0
8000711c:	c1 40       	breq	80007144 <udi_msc_cbw_received+0x210>
8000711e:	c0 d8       	rjmp	80007138 <udi_msc_cbw_received+0x204>
	case CTRL_GOOD:
		break;
	case CTRL_BUSY:
		udi_msc_sense_fail_busy_or_change();
80007120:	f0 1f 00 2e 	mcall	800071d8 <udi_msc_cbw_received+0x2a4>
		udi_msc_csw_process();
80007124:	f0 1f 00 22 	mcall	800071ac <udi_msc_cbw_received+0x278>
80007128:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return;
	case CTRL_NO_PRESENT:
		udi_msc_sense_fail_not_present();
8000712c:	f0 1f 00 2c 	mcall	800071dc <udi_msc_cbw_received+0x2a8>
		udi_msc_csw_process();
80007130:	f0 1f 00 1f 	mcall	800071ac <udi_msc_cbw_received+0x278>
80007134:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return;
	default:
		udi_msc_sense_fail_hardware();
80007138:	f0 1f 00 2a 	mcall	800071e0 <udi_msc_cbw_received+0x2ac>
		udi_msc_csw_process();
8000713c:	f0 1f 00 1c 	mcall	800071ac <udi_msc_cbw_received+0x278>
80007140:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
		return;
	}

	// Format capacity data
	udi_msc_capacity.block_len = CPU_TO_BE32(UDI_MSC_BLOCK_SIZE);
80007144:	4a 9c       	lddpc	r12,800071e8 <udi_msc_cbw_received+0x2b4>
80007146:	e0 68 02 00 	mov	r8,512
8000714a:	99 18       	st.w	r12[0x4],r8
	udi_msc_capacity.max_lba = cpu_to_be32(udi_msc_capacity.max_lba);
	// Send the corresponding sense data
	udi_msc_data_send((uint8_t *) & udi_msc_capacity,
8000714c:	30 8b       	mov	r11,8
8000714e:	f0 1f 00 1d 	mcall	800071c0 <udi_msc_cbw_received+0x28c>
80007152:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
	case SBC_START_STOP_UNIT:
		// Accepts request to support plug/plug in case of card reader
	case SPC_PREVENT_ALLOW_MEDIUM_REMOVAL:
		// Accepts request to support full format from Windows
	case SBC_VERIFY10:
		udi_msc_sense_pass();
80007156:	f0 1f 00 24 	mcall	800071e4 <udi_msc_cbw_received+0x2b0>
		udi_msc_csw_process();
8000715a:	f0 1f 00 15 	mcall	800071ac <udi_msc_cbw_received+0x278>
		break;
8000715e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

	case SBC_READ10:
		udi_msc_sbc_trans(true);
80007162:	30 1c       	mov	r12,1
80007164:	f0 1f 00 23 	mcall	800071f0 <udi_msc_cbw_received+0x2bc>
		break;
80007168:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc

	case SBC_WRITE10:
		udi_msc_sbc_trans(false);
8000716c:	30 0c       	mov	r12,0
8000716e:	f0 1f 00 21 	mcall	800071f0 <udi_msc_cbw_received+0x2bc>
		break;
80007172:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
			SCSI_ASC_INVALID_FIELD_IN_CDB, 0);
}

static void udi_msc_sense_command_invalid(void)
{
	udi_msc_sense_fail(SCSI_SK_ILLEGAL_REQUEST,
80007176:	30 0a       	mov	r10,0
80007178:	e0 6b 20 00 	mov	r11,8192
8000717c:	30 5c       	mov	r12,5
8000717e:	f0 1f 00 1e 	mcall	800071f4 <udi_msc_cbw_received+0x2c0>
		udi_msc_sbc_trans(false);
		break;

	default:
		udi_msc_sense_command_invalid();
		udi_msc_csw_process();
80007182:	f0 1f 00 0b 	mcall	800071ac <udi_msc_cbw_received+0x278>
80007186:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000718a:	30 08       	mov	r8,0
8000718c:	c8 0b       	rjmp	8000708c <udi_msc_cbw_received+0x158>
8000718e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007192:	00 00       	add	r0,r0
80007194:	00 00       	add	r0,r0
80007196:	04 9c       	mov	r12,r2
80007198:	00 00       	add	r0,r0
8000719a:	04 d0       	st.w	--r2,r0
8000719c:	80 00       	ld.sh	r0,r0[0x0]
8000719e:	6d 78       	ld.w	r8,r6[0x5c]
800071a0:	80 00       	ld.sh	r0,r0[0x0]
800071a2:	6d a4       	ld.w	r4,r6[0x68]
800071a4:	00 00       	add	r0,r0
800071a6:	04 94       	mov	r4,r2
800071a8:	80 00       	ld.sh	r0,r0[0x0]
800071aa:	6b 74       	ld.w	r4,r5[0x5c]
800071ac:	80 00       	ld.sh	r0,r0[0x0]
800071ae:	6b bc       	ld.w	r12,r5[0x6c]
800071b0:	00 00       	add	r0,r0
800071b2:	01 04       	ld.w	r4,r0++
800071b4:	80 00       	ld.sh	r0,r0[0x0]
800071b6:	87 24       	st.w	r3[0x8],r4
800071b8:	80 00       	ld.sh	r0,r0[0x0]
800071ba:	6c a8       	ld.w	r8,r6[0x28]
800071bc:	00 00       	add	r0,r0
800071be:	04 e4       	st.h	--r2,r4
800071c0:	80 00       	ld.sh	r0,r0[0x0]
800071c2:	6c e0       	ld.w	r0,r6[0x38]
800071c4:	80 00       	ld.sh	r0,r0[0x0]
800071c6:	64 94       	ld.w	r4,r2[0x24]
800071c8:	00 00       	add	r0,r0
800071ca:	00 e0       	st.h	--r0,r0
800071cc:	80 00       	ld.sh	r0,r0[0x0]
800071ce:	80 c0       	ld.uh	r0,r0[0x8]
800071d0:	80 00       	ld.sh	r0,r0[0x0]
800071d2:	6d d4       	ld.w	r4,r6[0x74]
800071d4:	80 00       	ld.sh	r0,r0[0x0]
800071d6:	64 4c       	ld.w	r12,r2[0x10]
800071d8:	80 00       	ld.sh	r0,r0[0x0]
800071da:	6b 38       	ld.w	r8,r5[0x4c]
800071dc:	80 00       	ld.sh	r0,r0[0x0]
800071de:	6b 4c       	ld.w	r12,r5[0x50]
800071e0:	80 00       	ld.sh	r0,r0[0x0]
800071e2:	6b 60       	ld.w	r0,r5[0x58]
800071e4:	80 00       	ld.sh	r0,r0[0x0]
800071e6:	6a d4       	ld.w	r4,r5[0x34]
800071e8:	00 00       	add	r0,r0
800071ea:	04 d4       	st.w	--r2,r4
800071ec:	80 00       	ld.sh	r0,r0[0x0]
800071ee:	64 60       	ld.w	r0,r2[0x18]
800071f0:	80 00       	ld.sh	r0,r0[0x0]
800071f2:	6e 98       	ld.w	r8,r7[0x24]
800071f4:	80 00       	ld.sh	r0,r0[0x0]
800071f6:	6a ec       	ld.w	r12,r5[0x38]

800071f8 <udi_msc_setup>:
	UDI_MSC_DISABLE_EXT();
}


bool udi_msc_setup(void)
{
800071f8:	d4 01       	pushm	lr
	if (Udd_setup_is_in()) {
800071fa:	4a 58       	lddpc	r8,8000728c <udi_msc_setup+0x94>
800071fc:	11 88       	ld.ub	r8,r8[0x0]
800071fe:	30 09       	mov	r9,0
80007200:	f2 08 18 00 	cp.b	r8,r9
80007204:	c1 e4       	brge	80007240 <udi_msc_setup+0x48>
		// Requests Interface GET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80007206:	e2 18 00 60 	andl	r8,0x60,COH
8000720a:	e0 48 00 20 	cp.w	r8,32
8000720e:	c3 e1       	brne	8000728a <udi_msc_setup+0x92>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
80007210:	49 f8       	lddpc	r8,8000728c <udi_msc_setup+0x94>
80007212:	11 99       	ld.ub	r9,r8[0x1]
80007214:	3f e8       	mov	r8,-2
80007216:	f0 09 18 00 	cp.b	r9,r8
8000721a:	c3 81       	brne	8000728a <udi_msc_setup+0x92>
			case USB_REQ_MSC_GET_MAX_LUN:
				// Give the number of memories available
				if (1 != udd_g_ctrlreq.req.wLength)
8000721c:	49 c8       	lddpc	r8,8000728c <udi_msc_setup+0x94>
8000721e:	90 39       	ld.sh	r9,r8[0x6]
80007220:	30 18       	mov	r8,1
80007222:	f0 09 19 00 	cp.h	r9,r8
80007226:	c3 21       	brne	8000728a <udi_msc_setup+0x92>
					return false;	// Error for USB host
				if (0 != udd_g_ctrlreq.req.wValue)
80007228:	49 98       	lddpc	r8,8000728c <udi_msc_setup+0x94>
8000722a:	90 19       	ld.sh	r9,r8[0x2]
8000722c:	30 08       	mov	r8,0
8000722e:	f0 09 19 00 	cp.h	r9,r8
80007232:	c2 c1       	brne	8000728a <udi_msc_setup+0x92>
					return false;
				udd_g_ctrlreq.payload = &udi_msc_nb_lun;
80007234:	49 68       	lddpc	r8,8000728c <udi_msc_setup+0x94>
80007236:	49 79       	lddpc	r9,80007290 <udi_msc_setup+0x98>
80007238:	91 29       	st.w	r8[0x8],r9
				udd_g_ctrlreq.payload_size = 1;
8000723a:	30 19       	mov	r9,1
8000723c:	b0 69       	st.h	r8[0xc],r9
8000723e:	da 0a       	popm	pc,r12=1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// Requests Interface SET
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
80007240:	e2 18 00 60 	andl	r8,0x60,COH
80007244:	e0 48 00 20 	cp.w	r8,32
80007248:	c2 11       	brne	8000728a <udi_msc_setup+0x92>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000724a:	49 18       	lddpc	r8,8000728c <udi_msc_setup+0x94>
8000724c:	11 99       	ld.ub	r9,r8[0x1]
8000724e:	3f f8       	mov	r8,-1
80007250:	f0 09 18 00 	cp.b	r9,r8
80007254:	c1 b1       	brne	8000728a <udi_msc_setup+0x92>
			case USB_REQ_MSC_BULK_RESET:
				// Reset MSC interface
				if (0 != udd_g_ctrlreq.req.wLength)
80007256:	48 e8       	lddpc	r8,8000728c <udi_msc_setup+0x94>
80007258:	90 39       	ld.sh	r9,r8[0x6]
8000725a:	30 08       	mov	r8,0
8000725c:	f0 09 19 00 	cp.h	r9,r8
80007260:	c1 51       	brne	8000728a <udi_msc_setup+0x92>
					return false;
				if (0 != udd_g_ctrlreq.req.wValue)
80007262:	48 b8       	lddpc	r8,8000728c <udi_msc_setup+0x94>
80007264:	90 19       	ld.sh	r9,r8[0x2]
80007266:	30 08       	mov	r8,0
80007268:	f0 09 19 00 	cp.h	r9,r8
8000726c:	c0 f1       	brne	8000728a <udi_msc_setup+0x92>
					return false;
				udi_msc_b_cbw_invalid = false;
8000726e:	48 a9       	lddpc	r9,80007294 <udi_msc_setup+0x9c>
80007270:	b2 88       	st.b	r9[0x0],r8
				udi_msc_b_trans_req = false;
80007272:	48 a9       	lddpc	r9,80007298 <udi_msc_setup+0xa0>
80007274:	b2 88       	st.b	r9[0x0],r8
				// Abort all tasks (transfer or clear stall wait) on endpoints
				udd_ep_abort(UDI_MSC_EP_OUT);
80007276:	30 2c       	mov	r12,2
80007278:	f0 1f 00 09 	mcall	8000729c <udi_msc_setup+0xa4>
				udd_ep_abort(UDI_MSC_EP_IN);
8000727c:	e0 6c 00 81 	mov	r12,129
80007280:	f0 1f 00 07 	mcall	8000729c <udi_msc_setup+0xa4>
				// Restart by CBW wait
				udi_msc_cbw_wait();
80007284:	f0 1f 00 07 	mcall	800072a0 <udi_msc_setup+0xa8>
80007288:	da 0a       	popm	pc,r12=1
				return true;
8000728a:	d8 0a       	popm	pc,r12=0
8000728c:	00 00       	add	r0,r0
8000728e:	2a 4c       	sub	r12,-92
80007290:	00 00       	add	r0,r0
80007292:	04 94       	mov	r4,r2
80007294:	00 00       	add	r0,r0
80007296:	04 d0       	st.w	--r2,r0
80007298:	00 00       	add	r0,r0
8000729a:	04 98       	mov	r8,r2
8000729c:	80 00       	ld.sh	r0,r0[0x0]
8000729e:	54 ec       	stdsp	sp[0x138],r12
800072a0:	80 00       	ld.sh	r0,r0[0x0]
800072a2:	6d 3c       	ld.w	r12,r6[0x4c]

800072a4 <udi_msc_disable>:
	return true;
}


void udi_msc_disable(void)
{
800072a4:	d4 01       	pushm	lr
	udi_msc_b_trans_req = false;
800072a6:	30 09       	mov	r9,0
800072a8:	48 38       	lddpc	r8,800072b4 <udi_msc_disable+0x10>
800072aa:	b0 89       	st.b	r8[0x0],r9
	UDI_MSC_DISABLE_EXT();
800072ac:	f0 1f 00 03 	mcall	800072b8 <udi_msc_disable+0x14>
}
800072b0:	d8 02       	popm	pc
800072b2:	00 00       	add	r0,r0
800072b4:	00 00       	add	r0,r0
800072b6:	04 98       	mov	r8,r2
800072b8:	80 00       	ld.sh	r0,r0[0x0]
800072ba:	7a 5c       	ld.w	r12,sp[0x14]

800072bc <udi_msc_enable>:

//@}


bool udi_msc_enable(void)
{
800072bc:	d4 01       	pushm	lr
	udi_msc_b_trans_req = false;
800072be:	30 08       	mov	r8,0
800072c0:	48 a9       	lddpc	r9,800072e8 <udi_msc_enable+0x2c>
800072c2:	b2 88       	st.b	r9[0x0],r8
	udi_msc_b_cbw_invalid = false;
800072c4:	48 a9       	lddpc	r9,800072ec <udi_msc_enable+0x30>
800072c6:	b2 88       	st.b	r9[0x0],r8
	udi_msc_nb_lun = get_nb_lun();
800072c8:	f0 1f 00 0a 	mcall	800072f0 <udi_msc_enable+0x34>
800072cc:	48 a8       	lddpc	r8,800072f4 <udi_msc_enable+0x38>
800072ce:	b0 8c       	st.b	r8[0x0],r12
	if (0 == udi_msc_nb_lun)
800072d0:	58 0c       	cp.w	r12,0
800072d2:	c0 90       	breq	800072e4 <udi_msc_enable+0x28>
		return false;	// No lun available, then not authorize to enable interface
	udi_msc_nb_lun--;
800072d4:	20 1c       	sub	r12,1
800072d6:	b0 8c       	st.b	r8[0x0],r12
	// Call application callback
	// to initialize memories or signal that interface is enabled
	if (!UDI_MSC_ENABLE_EXT())
800072d8:	f0 1f 00 08 	mcall	800072f8 <udi_msc_enable+0x3c>
800072dc:	c0 40       	breq	800072e4 <udi_msc_enable+0x28>
		return false;
	// Start MSC process by CBW reception
	udi_msc_cbw_wait();
800072de:	f0 1f 00 08 	mcall	800072fc <udi_msc_enable+0x40>
800072e2:	da 0a       	popm	pc,r12=1
	return true;
800072e4:	d8 0a       	popm	pc,r12=0
800072e6:	00 00       	add	r0,r0
800072e8:	00 00       	add	r0,r0
800072ea:	04 98       	mov	r8,r2
800072ec:	00 00       	add	r0,r0
800072ee:	04 d0       	st.w	--r2,r0
800072f0:	80 00       	ld.sh	r0,r0[0x0]
800072f2:	64 48       	ld.w	r8,r2[0x10]
800072f4:	00 00       	add	r0,r0
800072f6:	04 94       	mov	r4,r2
800072f8:	80 00       	ld.sh	r0,r0[0x0]
800072fa:	7a 50       	ld.w	r0,sp[0x14]
800072fc:	80 00       	ld.sh	r0,r0[0x0]
800072fe:	6d 3c       	ld.w	r12,r6[0x4c]

80007300 <udc_get_interface_desc>:
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
	return udc_ptr_iface;
}
80007300:	48 28       	lddpc	r8,80007308 <udc_get_interface_desc+0x8>
80007302:	70 0c       	ld.w	r12,r8[0x0]
80007304:	5e fc       	retal	r12
80007306:	00 00       	add	r0,r0
80007308:	00 00       	add	r0,r0
8000730a:	05 04       	ld.w	r4,r2++

8000730c <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
8000730c:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80007310:	49 18       	lddpc	r8,80007354 <udc_sof_notify+0x48>
80007312:	11 89       	ld.ub	r9,r8[0x0]
80007314:	30 08       	mov	r8,0
80007316:	f0 09 18 00 	cp.b	r9,r8
8000731a:	c1 b0       	breq	80007350 <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000731c:	48 f8       	lddpc	r8,80007358 <udc_sof_notify+0x4c>
8000731e:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80007320:	70 09       	ld.w	r9,r8[0x0]
80007322:	13 ca       	ld.ub	r10,r9[0x4]
80007324:	30 09       	mov	r9,0
80007326:	f2 0a 18 00 	cp.b	r10,r9
8000732a:	c1 30       	breq	80007350 <udc_sof_notify+0x44>
8000732c:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000732e:	48 b6       	lddpc	r6,80007358 <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
80007330:	70 18       	ld.w	r8,r8[0x4]
80007332:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80007336:	70 48       	ld.w	r8,r8[0x10]
80007338:	58 08       	cp.w	r8,0
8000733a:	c0 20       	breq	8000733e <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
8000733c:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000733e:	2f f7       	sub	r7,-1
80007340:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007342:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80007344:	70 09       	ld.w	r9,r8[0x0]
80007346:	13 c9       	ld.ub	r9,r9[0x4]
80007348:	ee 09 18 00 	cp.b	r9,r7
8000734c:	fe 9b ff f2 	brhi	80007330 <udc_sof_notify+0x24>
80007350:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007354:	00 00       	add	r0,r0
80007356:	05 02       	ld.w	r2,r2++
80007358:	00 00       	add	r0,r0
8000735a:	04 fc       	st.b	--r2,r12

8000735c <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000735c:	48 78       	lddpc	r8,80007378 <udc_get_eof_conf+0x1c>
8000735e:	70 08       	ld.w	r8,r8[0x0]
80007360:	70 08       	ld.w	r8,r8[0x0]
80007362:	11 aa       	ld.ub	r10,r8[0x2]
80007364:	11 b9       	ld.ub	r9,r8[0x3]
80007366:	f3 ea 10 89 	or	r9,r9,r10<<0x8
8000736a:	5c c9       	swap.bh	r9
8000736c:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
80007370:	f0 0c 00 0c 	add	r12,r8,r12
80007374:	5e fc       	retal	r12
80007376:	00 00       	add	r0,r0
80007378:	00 00       	add	r0,r0
8000737a:	04 fc       	st.b	--r2,r12

8000737c <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
8000737c:	eb cd 40 e0 	pushm	r5-r7,lr
80007380:	18 97       	mov	r7,r12
80007382:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80007384:	49 b8       	lddpc	r8,800073f0 <udc_update_iface_desc+0x74>
80007386:	11 89       	ld.ub	r9,r8[0x0]
80007388:	30 08       	mov	r8,0
8000738a:	f0 09 18 00 	cp.b	r9,r8
8000738e:	c2 f0       	breq	800073ec <udc_update_iface_desc+0x70>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80007390:	49 98       	lddpc	r8,800073f4 <udc_update_iface_desc+0x78>
80007392:	70 08       	ld.w	r8,r8[0x0]
80007394:	70 08       	ld.w	r8,r8[0x0]
80007396:	11 c9       	ld.ub	r9,r8[0x4]
80007398:	18 9e       	mov	lr,r12
8000739a:	f8 09 18 00 	cp.b	r9,r12
8000739e:	e0 88 00 27 	brls	800073ec <udc_update_iface_desc+0x70>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
800073a2:	49 65       	lddpc	r5,800073f8 <udc_update_iface_desc+0x7c>
800073a4:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
800073a6:	f0 1f 00 16 	mcall	800073fc <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
800073aa:	6a 08       	ld.w	r8,r5[0x0]
800073ac:	10 3c       	cp.w	r12,r8
800073ae:	e0 88 00 1f 	brls	800073ec <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
800073b2:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800073b4:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
800073b6:	11 9a       	ld.ub	r10,r8[0x1]
800073b8:	f6 0a 18 00 	cp.b	r10,r11
800073bc:	c0 a1       	brne	800073d0 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
800073be:	11 aa       	ld.ub	r10,r8[0x2]
800073c0:	0e 9e       	mov	lr,r7
800073c2:	ee 0a 18 00 	cp.b	r10,r7
800073c6:	c0 51       	brne	800073d0 <udc_update_iface_desc+0x54>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
800073c8:	11 ba       	ld.ub	r10,r8[0x3]
800073ca:	ec 0a 18 00 	cp.b	r10,r6
800073ce:	c0 b0       	breq	800073e4 <udc_update_iface_desc+0x68>
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
800073d0:	13 88       	ld.ub	r8,r9[0x0]
800073d2:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
800073d6:	10 3c       	cp.w	r12,r8
800073d8:	fe 9b ff ee 	brhi	800073b4 <udc_update_iface_desc+0x38>
800073dc:	48 79       	lddpc	r9,800073f8 <udc_update_iface_desc+0x7c>
800073de:	93 08       	st.w	r9[0x0],r8
800073e0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800073e4:	48 59       	lddpc	r9,800073f8 <udc_update_iface_desc+0x7c>
800073e6:	93 08       	st.w	r9[0x0],r8
800073e8:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800073ec:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800073f0:	00 00       	add	r0,r0
800073f2:	05 02       	ld.w	r2,r2++
800073f4:	00 00       	add	r0,r0
800073f6:	04 fc       	st.b	--r2,r12
800073f8:	00 00       	add	r0,r0
800073fa:	05 04       	ld.w	r4,r2++
800073fc:	80 00       	ld.sh	r0,r0[0x0]
800073fe:	73 5c       	ld.w	r12,r9[0x54]

80007400 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
80007400:	eb cd 40 c0 	pushm	r6-r7,lr
80007404:	18 96       	mov	r6,r12
80007406:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
80007408:	f0 1f 00 11 	mcall	8000744c <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000740c:	0d 88       	ld.ub	r8,r6[0x0]
8000740e:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80007410:	0c 3c       	cp.w	r12,r6
80007412:	e0 88 00 19 	brls	80007444 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80007416:	0d 98       	ld.ub	r8,r6[0x1]
80007418:	30 49       	mov	r9,4
8000741a:	f2 08 18 00 	cp.b	r8,r9
8000741e:	c1 30       	breq	80007444 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80007420:	ee 08 18 00 	cp.b	r8,r7
80007424:	c0 a1       	brne	80007438 <udc_next_desc_in_iface+0x38>
80007426:	c1 08       	rjmp	80007446 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80007428:	0d 98       	ld.ub	r8,r6[0x1]
8000742a:	f2 08 18 00 	cp.b	r8,r9
8000742e:	c0 b0       	breq	80007444 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80007430:	ee 08 18 00 	cp.b	r8,r7
80007434:	c0 31       	brne	8000743a <udc_next_desc_in_iface+0x3a>
80007436:	c0 88       	rjmp	80007446 <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80007438:	30 49       	mov	r9,4
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000743a:	0d 88       	ld.ub	r8,r6[0x0]
8000743c:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000743e:	0c 3c       	cp.w	r12,r6
80007440:	fe 9b ff f4 	brhi	80007428 <udc_next_desc_in_iface+0x28>
80007444:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
80007446:	0c 9c       	mov	r12,r6
80007448:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000744c:	80 00       	ld.sh	r0,r0[0x0]
8000744e:	73 5c       	ld.w	r12,r9[0x54]

80007450 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80007450:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
80007452:	48 48       	lddpc	r8,80007460 <udc_valid_address+0x10>
80007454:	11 bc       	ld.ub	r12,r8[0x3]
80007456:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
8000745a:	f0 1f 00 03 	mcall	80007464 <udc_valid_address+0x14>
}
8000745e:	d8 02       	popm	pc
80007460:	00 00       	add	r0,r0
80007462:	2a 4c       	sub	r12,-92
80007464:	80 00       	ld.sh	r0,r0[0x0]
80007466:	52 36       	stdsp	sp[0x8c],r6

80007468 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80007468:	eb cd 40 e0 	pushm	r5-r7,lr
8000746c:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
8000746e:	f0 1f 00 12 	mcall	800074b4 <udc_iface_enable+0x4c>
80007472:	c1 f0       	breq	800074b0 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80007474:	49 18       	lddpc	r8,800074b8 <udc_iface_enable+0x50>
80007476:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80007478:	30 56       	mov	r6,5
8000747a:	0c 9b       	mov	r11,r6
8000747c:	0e 9c       	mov	r12,r7
8000747e:	f0 1f 00 10 	mcall	800074bc <udc_iface_enable+0x54>
80007482:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80007484:	c0 d0       	breq	8000749e <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
80007486:	19 ca       	ld.ub	r10,r12[0x4]
80007488:	19 d8       	ld.ub	r8,r12[0x5]
8000748a:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
8000748e:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80007490:	5c 7a       	castu.h	r10
80007492:	19 bb       	ld.ub	r11,r12[0x3]
80007494:	19 ac       	ld.ub	r12,r12[0x2]
80007496:	f0 1f 00 0b 	mcall	800074c0 <udc_iface_enable+0x58>
8000749a:	cf 01       	brne	8000747a <udc_iface_enable+0x12>
8000749c:	c0 a8       	rjmp	800074b0 <udc_iface_enable+0x48>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000749e:	48 a8       	lddpc	r8,800074c4 <udc_iface_enable+0x5c>
800074a0:	70 08       	ld.w	r8,r8[0x0]
800074a2:	70 18       	ld.w	r8,r8[0x4]
800074a4:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
800074a8:	70 0c       	ld.w	r12,r8[0x0]
800074aa:	5d 1c       	icall	r12
800074ac:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800074b0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800074b4:	80 00       	ld.sh	r0,r0[0x0]
800074b6:	73 7c       	ld.w	r12,r9[0x5c]
800074b8:	00 00       	add	r0,r0
800074ba:	05 04       	ld.w	r4,r2++
800074bc:	80 00       	ld.sh	r0,r0[0x0]
800074be:	74 00       	ld.w	r0,r10[0x0]
800074c0:	80 00       	ld.sh	r0,r0[0x0]
800074c2:	60 6c       	ld.w	r12,r0[0x18]
800074c4:	00 00       	add	r0,r0
800074c6:	04 fc       	st.b	--r2,r12

800074c8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
800074c8:	eb cd 40 e0 	pushm	r5-r7,lr
800074cc:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
800074ce:	18 97       	mov	r7,r12
800074d0:	30 0b       	mov	r11,0
800074d2:	f0 1f 00 12 	mcall	80007518 <udc_iface_disable+0x50>
800074d6:	c1 e0       	breq	80007512 <udc_iface_disable+0x4a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800074d8:	49 18       	lddpc	r8,8000751c <udc_iface_disable+0x54>
800074da:	70 08       	ld.w	r8,r8[0x0]
800074dc:	70 18       	ld.w	r8,r8[0x4]
800074de:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
800074e2:	6a 3c       	ld.w	r12,r5[0xc]
800074e4:	5d 1c       	icall	r12
800074e6:	18 9b       	mov	r11,r12
800074e8:	0c 9c       	mov	r12,r6
800074ea:	f0 1f 00 0c 	mcall	80007518 <udc_iface_disable+0x50>
800074ee:	c1 20       	breq	80007512 <udc_iface_disable+0x4a>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
800074f0:	48 c8       	lddpc	r8,80007520 <udc_iface_disable+0x58>
800074f2:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
800074f4:	30 56       	mov	r6,5
800074f6:	0c 9b       	mov	r11,r6
800074f8:	0e 9c       	mov	r12,r7
800074fa:	f0 1f 00 0b 	mcall	80007524 <udc_iface_disable+0x5c>
800074fe:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
80007500:	c0 50       	breq	8000750a <udc_iface_disable+0x42>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80007502:	19 ac       	ld.ub	r12,r12[0x2]
80007504:	f0 1f 00 09 	mcall	80007528 <udc_iface_disable+0x60>
		}
80007508:	cf 7b       	rjmp	800074f6 <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
8000750a:	6a 18       	ld.w	r8,r5[0x4]
8000750c:	5d 18       	icall	r8
8000750e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
80007512:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80007516:	00 00       	add	r0,r0
80007518:	80 00       	ld.sh	r0,r0[0x0]
8000751a:	73 7c       	ld.w	r12,r9[0x5c]
8000751c:	00 00       	add	r0,r0
8000751e:	04 fc       	st.b	--r2,r12
80007520:	00 00       	add	r0,r0
80007522:	05 04       	ld.w	r4,r2++
80007524:	80 00       	ld.sh	r0,r0[0x0]
80007526:	74 00       	ld.w	r0,r10[0x0]
80007528:	80 00       	ld.sh	r0,r0[0x0]
8000752a:	55 54       	stdsp	sp[0x154],r4

8000752c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
8000752c:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80007530:	49 28       	lddpc	r8,80007578 <udc_reset+0x4c>
80007532:	11 89       	ld.ub	r9,r8[0x0]
80007534:	30 08       	mov	r8,0
80007536:	f0 09 18 00 	cp.b	r9,r8
8000753a:	c1 70       	breq	80007568 <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000753c:	49 08       	lddpc	r8,8000757c <udc_reset+0x50>
8000753e:	70 08       	ld.w	r8,r8[0x0]
80007540:	70 08       	ld.w	r8,r8[0x0]
80007542:	11 c9       	ld.ub	r9,r8[0x4]
80007544:	30 08       	mov	r8,0
80007546:	f0 09 18 00 	cp.b	r9,r8
8000754a:	c0 f0       	breq	80007568 <udc_reset+0x3c>
8000754c:	30 07       	mov	r7,0
8000754e:	48 c6       	lddpc	r6,8000757c <udc_reset+0x50>
				iface_num++) {
			udc_iface_disable(iface_num);
80007550:	0e 9c       	mov	r12,r7
80007552:	f0 1f 00 0c 	mcall	80007580 <udc_reset+0x54>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80007556:	2f f7       	sub	r7,-1
80007558:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000755a:	6c 08       	ld.w	r8,r6[0x0]
8000755c:	70 08       	ld.w	r8,r8[0x0]
8000755e:	11 c8       	ld.ub	r8,r8[0x4]
80007560:	ee 08 18 00 	cp.b	r8,r7
80007564:	fe 9b ff f6 	brhi	80007550 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80007568:	30 09       	mov	r9,0
8000756a:	48 48       	lddpc	r8,80007578 <udc_reset+0x4c>
8000756c:	b0 89       	st.b	r8[0x0],r9
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
8000756e:	30 09       	mov	r9,0
80007570:	48 58       	lddpc	r8,80007584 <udc_reset+0x58>
80007572:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80007574:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80007578:	00 00       	add	r0,r0
8000757a:	05 02       	ld.w	r2,r2++
8000757c:	00 00       	add	r0,r0
8000757e:	04 fc       	st.b	--r2,r12
80007580:	80 00       	ld.sh	r0,r0[0x0]
80007582:	74 c8       	ld.w	r8,r10[0x30]
80007584:	00 00       	add	r0,r0
80007586:	05 00       	ld.w	r0,r2++

80007588 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80007588:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
8000758c:	fe f8 04 48 	ld.w	r8,pc[1096]
80007590:	30 09       	mov	r9,0
80007592:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80007594:	30 0a       	mov	r10,0
80007596:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80007598:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
8000759a:	11 88       	ld.ub	r8,r8[0x0]
8000759c:	10 9a       	mov	r10,r8
8000759e:	f2 08 18 00 	cp.b	r8,r9
800075a2:	c0 94       	brge	800075b4 <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
800075a4:	fe f9 04 30 	ld.w	r9,pc[1072]
800075a8:	92 3b       	ld.sh	r11,r9[0x6]
800075aa:	30 09       	mov	r9,0
800075ac:	f2 0b 19 00 	cp.h	r11,r9
800075b0:	e0 80 02 0f 	breq	800079ce <udc_process_setup+0x446>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
800075b4:	10 99       	mov	r9,r8
800075b6:	e2 19 00 60 	andl	r9,0x60,COH
800075ba:	e0 81 01 de 	brne	80007976 <udc_process_setup+0x3ee>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
800075be:	f2 0a 18 00 	cp.b	r10,r9
800075c2:	e0 84 01 02 	brge	800077c6 <udc_process_setup+0x23e>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
800075c6:	fe f9 04 0e 	ld.w	r9,pc[1038]
800075ca:	92 39       	ld.sh	r9,r9[0x6]
800075cc:	58 09       	cp.w	r9,0
800075ce:	e0 80 01 d4 	breq	80007976 <udc_process_setup+0x3ee>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
800075d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800075d6:	e0 81 00 9f 	brne	80007714 <udc_process_setup+0x18c>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800075da:	fe fa 03 fa 	ld.w	r10,pc[1018]
800075de:	15 9a       	ld.ub	r10,r10[0x1]
800075e0:	30 6b       	mov	r11,6
800075e2:	f6 0a 18 00 	cp.b	r10,r11
800075e6:	c1 a0       	breq	8000761a <udc_process_setup+0x92>
800075e8:	30 8b       	mov	r11,8
800075ea:	f6 0a 18 00 	cp.b	r10,r11
800075ee:	e0 80 00 86 	breq	800076fa <udc_process_setup+0x172>
800075f2:	30 0b       	mov	r11,0
800075f4:	f6 0a 18 00 	cp.b	r10,r11
800075f8:	e0 81 00 8e 	brne	80007714 <udc_process_setup+0x18c>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
800075fc:	30 28       	mov	r8,2
800075fe:	f0 09 19 00 	cp.h	r9,r8
80007602:	c0 40       	breq	8000760a <udc_process_setup+0x82>
80007604:	30 0c       	mov	r12,0
80007606:	e0 8f 01 b4 	bral	8000796e <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
8000760a:	30 2b       	mov	r11,2
8000760c:	fe fc 03 cc 	ld.w	r12,pc[972]
80007610:	f0 1f 00 f3 	mcall	800079dc <udc_process_setup+0x454>
80007614:	30 1c       	mov	r12,1
80007616:	e0 8f 01 ac 	bral	8000796e <udc_process_setup+0x3e6>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000761a:	fe f8 03 ba 	ld.w	r8,pc[954]
8000761e:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80007620:	f2 08 16 08 	lsr	r8,r9,0x8
80007624:	30 2a       	mov	r10,2
80007626:	f4 08 18 00 	cp.b	r8,r10
8000762a:	c1 00       	breq	8000764a <udc_process_setup+0xc2>
8000762c:	30 3a       	mov	r10,3
8000762e:	f4 08 18 00 	cp.b	r8,r10
80007632:	c2 a0       	breq	80007686 <udc_process_setup+0xfe>
80007634:	30 19       	mov	r9,1
80007636:	f2 08 18 00 	cp.b	r8,r9
8000763a:	c5 e1       	brne	800076f6 <udc_process_setup+0x16e>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
8000763c:	fe f8 03 a4 	ld.w	r8,pc[932]
80007640:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80007642:	19 8b       	ld.ub	r11,r12[0x0]
80007644:	f0 1f 00 e6 	mcall	800079dc <udc_process_setup+0x454>
80007648:	c4 78       	rjmp	800076d6 <udc_process_setup+0x14e>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000764a:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000764c:	fe f8 03 94 	ld.w	r8,pc[916]
80007650:	70 08       	ld.w	r8,r8[0x0]
80007652:	f1 38 00 11 	ld.ub	r8,r8[17]
80007656:	f2 08 18 00 	cp.b	r8,r9
8000765a:	e0 88 00 4e 	brls	800076f6 <udc_process_setup+0x16e>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000765e:	fe f8 03 82 	ld.w	r8,pc[898]
80007662:	70 18       	ld.w	r8,r8[0x4]
80007664:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80007668:	19 a9       	ld.ub	r9,r12[0x2]
8000766a:	19 b8       	ld.ub	r8,r12[0x3]
8000766c:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80007670:	5c c8       	swap.bh	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
80007672:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80007676:	f0 1f 00 da 	mcall	800079dc <udc_process_setup+0x454>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000767a:	fe f8 03 5a 	ld.w	r8,pc[858]
8000767e:	70 28       	ld.w	r8,r8[0x8]
80007680:	30 29       	mov	r9,2
80007682:	b0 99       	st.b	r8[0x1],r9
80007684:	c2 98       	rjmp	800076d6 <udc_process_setup+0x14e>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80007686:	5c 59       	castu.b	r9
80007688:	58 19       	cp.w	r9,1
8000768a:	c1 00       	breq	800076aa <udc_process_setup+0x122>
8000768c:	58 29       	cp.w	r9,2
8000768e:	c0 40       	breq	80007696 <udc_process_setup+0x10e>
80007690:	58 09       	cp.w	r9,0
80007692:	c0 60       	breq	8000769e <udc_process_setup+0x116>
80007694:	c3 18       	rjmp	800076f6 <udc_process_setup+0x16e>
80007696:	fe fc 03 4e 	ld.w	r12,pc[846]
8000769a:	31 4b       	mov	r11,20
8000769c:	c0 a8       	rjmp	800076b0 <udc_process_setup+0x128>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
8000769e:	30 4b       	mov	r11,4
800076a0:	fe fc 03 48 	ld.w	r12,pc[840]
800076a4:	f0 1f 00 ce 	mcall	800079dc <udc_process_setup+0x454>
800076a8:	c1 78       	rjmp	800076d6 <udc_process_setup+0x14e>
800076aa:	fe fc 03 42 	ld.w	r12,pc[834]
800076ae:	30 5b       	mov	r11,5
800076b0:	fe fa 03 40 	ld.w	r10,pc[832]
800076b4:	2f ea       	sub	r10,-2
800076b6:	18 98       	mov	r8,r12
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
800076b8:	11 39       	ld.ub	r9,r8++
800076ba:	5c c9       	swap.bh	r9
800076bc:	14 b9       	st.h	r10++,r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
800076be:	f0 0c 01 09 	sub	r9,r8,r12
800076c2:	f6 09 18 00 	cp.b	r9,r11
800076c6:	cf 93       	brcs	800076b8 <udc_process_setup+0x130>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
800076c8:	a1 7b       	lsl	r11,0x1
800076ca:	2f eb       	sub	r11,-2
800076cc:	fe fc 03 24 	ld.w	r12,pc[804]
800076d0:	b8 8b       	st.b	r12[0x0],r11
		udd_set_setup_payload(
800076d2:	f0 1f 00 c3 	mcall	800079dc <udc_process_setup+0x454>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
800076d6:	fe f8 02 fe 	ld.w	r8,pc[766]
800076da:	90 39       	ld.sh	r9,r8[0x6]
800076dc:	90 68       	ld.sh	r8,r8[0xc]
800076de:	f2 08 19 00 	cp.h	r8,r9
800076e2:	e0 8b 00 05 	brhi	800076ec <udc_process_setup+0x164>
800076e6:	30 1c       	mov	r12,1
800076e8:	e0 8f 01 43 	bral	8000796e <udc_process_setup+0x3e6>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
800076ec:	fe f8 02 e8 	ld.w	r8,pc[744]
800076f0:	b0 69       	st.h	r8[0xc],r9
800076f2:	30 1c       	mov	r12,1
800076f4:	c3 d9       	rjmp	8000796e <udc_process_setup+0x3e6>
800076f6:	30 0c       	mov	r12,0
800076f8:	c3 b9       	rjmp	8000796e <udc_process_setup+0x3e6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
800076fa:	30 18       	mov	r8,1
800076fc:	f0 09 19 00 	cp.h	r9,r8
80007700:	c0 30       	breq	80007706 <udc_process_setup+0x17e>
80007702:	30 0c       	mov	r12,0
80007704:	c3 59       	rjmp	8000796e <udc_process_setup+0x3e6>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
80007706:	30 1b       	mov	r11,1
80007708:	fe fc 02 ec 	ld.w	r12,pc[748]
8000770c:	f0 1f 00 b4 	mcall	800079dc <udc_process_setup+0x454>
80007710:	30 1c       	mov	r12,1
80007712:	c2 e9       	rjmp	8000796e <udc_process_setup+0x3e6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80007714:	58 18       	cp.w	r8,1
80007716:	c3 61       	brne	80007782 <udc_process_setup+0x1fa>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80007718:	fe fa 02 bc 	ld.w	r10,pc[700]
8000771c:	15 9b       	ld.ub	r11,r10[0x1]
8000771e:	30 aa       	mov	r10,10
80007720:	f4 0b 18 00 	cp.b	r11,r10
80007724:	c2 f1       	brne	80007782 <udc_process_setup+0x1fa>
{
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
80007726:	f0 09 19 00 	cp.h	r9,r8
8000772a:	c2 a1       	brne	8000777e <udc_process_setup+0x1f6>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
8000772c:	fe f8 02 c8 	ld.w	r8,pc[712]
80007730:	11 89       	ld.ub	r9,r8[0x0]
80007732:	30 08       	mov	r8,0
80007734:	f0 09 18 00 	cp.b	r9,r8
80007738:	c2 30       	breq	8000777e <udc_process_setup+0x1f6>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000773a:	fe f8 02 9a 	ld.w	r8,pc[666]
8000773e:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80007740:	fe f8 02 b8 	ld.w	r8,pc[696]
80007744:	70 08       	ld.w	r8,r8[0x0]
80007746:	70 08       	ld.w	r8,r8[0x0]
80007748:	11 c8       	ld.ub	r8,r8[0x4]
8000774a:	ee 08 18 00 	cp.b	r8,r7
8000774e:	e0 88 00 18 	brls	8000777e <udc_process_setup+0x1f6>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80007752:	30 0b       	mov	r11,0
80007754:	0e 9c       	mov	r12,r7
80007756:	f0 1f 00 aa 	mcall	800079fc <udc_process_setup+0x474>
8000775a:	c1 20       	breq	8000777e <udc_process_setup+0x1f6>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
8000775c:	fe f8 02 9c 	ld.w	r8,pc[668]
80007760:	70 08       	ld.w	r8,r8[0x0]
80007762:	70 18       	ld.w	r8,r8[0x4]
80007764:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80007768:	70 3c       	ld.w	r12,r8[0xc]
8000776a:	5d 1c       	icall	r12
8000776c:	fe f8 02 94 	ld.w	r8,pc[660]
80007770:	b0 8c       	st.b	r8[0x0],r12

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
80007772:	30 1b       	mov	r11,1
80007774:	10 9c       	mov	r12,r8
80007776:	f0 1f 00 9a 	mcall	800079dc <udc_process_setup+0x454>
8000777a:	30 1c       	mov	r12,1
8000777c:	cf 98       	rjmp	8000796e <udc_process_setup+0x3e6>
8000777e:	30 0c       	mov	r12,0
80007780:	cf 78       	rjmp	8000796e <udc_process_setup+0x3e6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80007782:	58 28       	cp.w	r8,2
80007784:	e0 81 00 f9 	brne	80007976 <udc_process_setup+0x3ee>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80007788:	fe f8 02 4c 	ld.w	r8,pc[588]
8000778c:	11 9a       	ld.ub	r10,r8[0x1]
8000778e:	30 08       	mov	r8,0
80007790:	f0 0a 18 00 	cp.b	r10,r8
80007794:	e0 81 00 ec 	brne	8000796c <udc_process_setup+0x3e4>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
80007798:	30 28       	mov	r8,2
8000779a:	f0 09 19 00 	cp.h	r9,r8
8000779e:	c0 30       	breq	800077a4 <udc_process_setup+0x21c>
800077a0:	30 0c       	mov	r12,0
800077a2:	ce 68       	rjmp	8000796e <udc_process_setup+0x3e6>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
800077a4:	fe f8 02 30 	ld.w	r8,pc[560]
800077a8:	11 dc       	ld.ub	r12,r8[0x5]
800077aa:	f0 1f 00 97 	mcall	80007a04 <udc_process_setup+0x47c>
800077ae:	e0 68 01 00 	mov	r8,256
800077b2:	f9 b8 00 00 	moveq	r8,0
800077b6:	fe fc 02 52 	ld.w	r12,pc[594]
800077ba:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
800077bc:	30 2b       	mov	r11,2
800077be:	f0 1f 00 88 	mcall	800079dc <udc_process_setup+0x454>
800077c2:	30 1c       	mov	r12,1
800077c4:	cd 58       	rjmp	8000796e <udc_process_setup+0x3e6>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
800077c6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800077ca:	c7 81       	brne	800078ba <udc_process_setup+0x332>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
800077cc:	fe f9 02 08 	ld.w	r9,pc[520]
800077d0:	13 99       	ld.ub	r9,r9[0x1]
800077d2:	30 3a       	mov	r10,3
800077d4:	f4 09 18 00 	cp.b	r9,r10
800077d8:	e0 80 00 ca 	breq	8000796c <udc_process_setup+0x3e4>
800077dc:	e0 8b 00 07 	brhi	800077ea <udc_process_setup+0x262>
800077e0:	30 1a       	mov	r10,1
800077e2:	f4 09 18 00 	cp.b	r9,r10
800077e6:	c6 a1       	brne	800078ba <udc_process_setup+0x332>
800077e8:	c1 88       	rjmp	80007818 <udc_process_setup+0x290>
800077ea:	30 5a       	mov	r10,5
800077ec:	f4 09 18 00 	cp.b	r9,r10
800077f0:	c0 60       	breq	800077fc <udc_process_setup+0x274>
800077f2:	30 9a       	mov	r10,9
800077f4:	f4 09 18 00 	cp.b	r9,r10
800077f8:	c6 11       	brne	800078ba <udc_process_setup+0x332>
800077fa:	c2 38       	rjmp	80007840 <udc_process_setup+0x2b8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
800077fc:	4f 68       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
800077fe:	90 39       	ld.sh	r9,r8[0x6]
80007800:	30 08       	mov	r8,0
80007802:	f0 09 19 00 	cp.h	r9,r8
80007806:	c0 30       	breq	8000780c <udc_process_setup+0x284>
80007808:	30 0c       	mov	r12,0
8000780a:	cb 28       	rjmp	8000796e <udc_process_setup+0x3e6>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000780c:	fe f9 02 00 	ld.w	r9,pc[512]
80007810:	4f 18       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
80007812:	91 49       	st.w	r8[0x10],r9
80007814:	30 1c       	mov	r12,1
80007816:	ca c8       	rjmp	8000796e <udc_process_setup+0x3e6>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80007818:	4e f8       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
8000781a:	90 39       	ld.sh	r9,r8[0x6]
8000781c:	30 08       	mov	r8,0
8000781e:	f0 09 19 00 	cp.h	r9,r8
80007822:	c0 d1       	brne	8000783c <udc_process_setup+0x2b4>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
80007824:	4e c8       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
80007826:	90 19       	ld.sh	r9,r8[0x2]
80007828:	30 18       	mov	r8,1
8000782a:	f0 09 19 00 	cp.h	r9,r8
8000782e:	c0 71       	brne	8000783c <udc_process_setup+0x2b4>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
80007830:	4e a8       	lddpc	r8,800079d8 <udc_process_setup+0x450>
80007832:	90 09       	ld.sh	r9,r8[0x0]
80007834:	a9 d9       	cbr	r9,0x9
80007836:	b0 09       	st.h	r8[0x0],r9
80007838:	30 1c       	mov	r12,1
8000783a:	c9 a8       	rjmp	8000796e <udc_process_setup+0x3e6>
8000783c:	30 0c       	mov	r12,0
8000783e:	c9 88       	rjmp	8000796e <udc_process_setup+0x3e6>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
80007840:	4e 58       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
80007842:	90 39       	ld.sh	r9,r8[0x6]
80007844:	30 08       	mov	r8,0
80007846:	f0 09 19 00 	cp.h	r9,r8
8000784a:	c3 41       	brne	800078b2 <udc_process_setup+0x32a>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
8000784c:	f0 1f 00 71 	mcall	80007a10 <udc_process_setup+0x488>
80007850:	c3 10       	breq	800078b2 <udc_process_setup+0x32a>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
80007852:	4e 18       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
80007854:	11 b9       	ld.ub	r9,r8[0x3]
80007856:	4e 38       	lddpc	r8,800079e0 <udc_process_setup+0x458>
80007858:	70 08       	ld.w	r8,r8[0x0]
8000785a:	f1 38 00 11 	ld.ub	r8,r8[17]
8000785e:	10 39       	cp.w	r9,r8
80007860:	e0 89 00 29 	brgt	800078b2 <udc_process_setup+0x32a>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
80007864:	f0 1f 00 6c 	mcall	80007a14 <udc_process_setup+0x48c>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
80007868:	4d b8       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
8000786a:	11 b8       	ld.ub	r8,r8[0x3]
8000786c:	4e 29       	lddpc	r9,800079f4 <udc_process_setup+0x46c>
8000786e:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
80007870:	58 08       	cp.w	r8,0
80007872:	c2 20       	breq	800078b6 <udc_process_setup+0x32e>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
80007874:	20 18       	sub	r8,1
80007876:	4d b9       	lddpc	r9,800079e0 <udc_process_setup+0x458>
80007878:	72 19       	ld.w	r9,r9[0x4]
8000787a:	f2 08 00 38 	add	r8,r9,r8<<0x3
8000787e:	4d f9       	lddpc	r9,800079f8 <udc_process_setup+0x470>
80007880:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007882:	70 08       	ld.w	r8,r8[0x0]
80007884:	11 c9       	ld.ub	r9,r8[0x4]
80007886:	30 08       	mov	r8,0
80007888:	f0 09 18 00 	cp.b	r9,r8
8000788c:	c1 50       	breq	800078b6 <udc_process_setup+0x32e>
8000788e:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
80007890:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
80007892:	4d a6       	lddpc	r6,800079f8 <udc_process_setup+0x470>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
80007894:	0a 9b       	mov	r11,r5
80007896:	0e 9c       	mov	r12,r7
80007898:	f0 1f 00 60 	mcall	80007a18 <udc_process_setup+0x490>
8000789c:	c0 b0       	breq	800078b2 <udc_process_setup+0x32a>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000789e:	2f f7       	sub	r7,-1
800078a0:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800078a2:	6c 08       	ld.w	r8,r6[0x0]
800078a4:	70 08       	ld.w	r8,r8[0x0]
800078a6:	11 c8       	ld.ub	r8,r8[0x4]
800078a8:	ee 08 18 00 	cp.b	r8,r7
800078ac:	fe 9b ff f4 	brhi	80007894 <udc_process_setup+0x30c>
800078b0:	c0 38       	rjmp	800078b6 <udc_process_setup+0x32e>
800078b2:	30 0c       	mov	r12,0
800078b4:	c5 d8       	rjmp	8000796e <udc_process_setup+0x3e6>
800078b6:	30 1c       	mov	r12,1
800078b8:	c5 b8       	rjmp	8000796e <udc_process_setup+0x3e6>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
800078ba:	58 18       	cp.w	r8,1
800078bc:	c2 21       	brne	80007900 <udc_process_setup+0x378>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
800078be:	4c 69       	lddpc	r9,800079d4 <udc_process_setup+0x44c>
800078c0:	13 9a       	ld.ub	r10,r9[0x1]
800078c2:	30 b9       	mov	r9,11
800078c4:	f2 0a 18 00 	cp.b	r10,r9
800078c8:	c1 c1       	brne	80007900 <udc_process_setup+0x378>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
800078ca:	4c 38       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
800078cc:	90 39       	ld.sh	r9,r8[0x6]
800078ce:	30 08       	mov	r8,0
800078d0:	f0 09 19 00 	cp.h	r9,r8
800078d4:	c1 41       	brne	800078fc <udc_process_setup+0x374>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
800078d6:	4c 88       	lddpc	r8,800079f4 <udc_process_setup+0x46c>
800078d8:	11 89       	ld.ub	r9,r8[0x0]
800078da:	30 08       	mov	r8,0
800078dc:	f0 09 18 00 	cp.b	r9,r8
800078e0:	c0 e0       	breq	800078fc <udc_process_setup+0x374>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
800078e2:	4b d8       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
800078e4:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
800078e6:	11 d7       	ld.ub	r7,r8[0x5]
800078e8:	0e 9c       	mov	r12,r7
800078ea:	f0 1f 00 4d 	mcall	80007a1c <udc_process_setup+0x494>
800078ee:	c0 70       	breq	800078fc <udc_process_setup+0x374>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
800078f0:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
800078f4:	0e 9c       	mov	r12,r7
800078f6:	f0 1f 00 49 	mcall	80007a18 <udc_process_setup+0x490>
800078fa:	c3 a8       	rjmp	8000796e <udc_process_setup+0x3e6>
800078fc:	30 0c       	mov	r12,0
800078fe:	c3 88       	rjmp	8000796e <udc_process_setup+0x3e6>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
80007900:	58 28       	cp.w	r8,2
80007902:	c3 a1       	brne	80007976 <udc_process_setup+0x3ee>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
80007904:	4b 48       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
80007906:	11 98       	ld.ub	r8,r8[0x1]
80007908:	30 19       	mov	r9,1
8000790a:	f2 08 18 00 	cp.b	r8,r9
8000790e:	c0 60       	breq	8000791a <udc_process_setup+0x392>
80007910:	30 39       	mov	r9,3
80007912:	f2 08 18 00 	cp.b	r8,r9
80007916:	c2 b1       	brne	8000796c <udc_process_setup+0x3e4>
80007918:	c1 48       	rjmp	80007940 <udc_process_setup+0x3b8>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000791a:	4a f8       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
8000791c:	90 39       	ld.sh	r9,r8[0x6]
8000791e:	30 08       	mov	r8,0
80007920:	f0 09 19 00 	cp.h	r9,r8
80007924:	c0 c1       	brne	8000793c <udc_process_setup+0x3b4>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80007926:	4a c8       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
80007928:	90 19       	ld.sh	r9,r8[0x2]
8000792a:	30 08       	mov	r8,0
8000792c:	f0 09 19 00 	cp.h	r9,r8
80007930:	c0 61       	brne	8000793c <udc_process_setup+0x3b4>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80007932:	4a 98       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
80007934:	11 dc       	ld.ub	r12,r8[0x5]
80007936:	f0 1f 00 3b 	mcall	80007a20 <udc_process_setup+0x498>
8000793a:	c1 a8       	rjmp	8000796e <udc_process_setup+0x3e6>
8000793c:	30 0c       	mov	r12,0
8000793e:	c1 88       	rjmp	8000796e <udc_process_setup+0x3e6>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80007940:	4a 58       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
80007942:	90 39       	ld.sh	r9,r8[0x6]
80007944:	30 08       	mov	r8,0
80007946:	f0 09 19 00 	cp.h	r9,r8
8000794a:	c0 f1       	brne	80007968 <udc_process_setup+0x3e0>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000794c:	4a 28       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
8000794e:	90 19       	ld.sh	r9,r8[0x2]
80007950:	30 08       	mov	r8,0
80007952:	f0 09 19 00 	cp.h	r9,r8
80007956:	c0 91       	brne	80007968 <udc_process_setup+0x3e0>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
80007958:	49 f7       	lddpc	r7,800079d4 <udc_process_setup+0x44c>
8000795a:	0f dc       	ld.ub	r12,r7[0x5]
8000795c:	f0 1f 00 32 	mcall	80007a24 <udc_process_setup+0x49c>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
80007960:	0f dc       	ld.ub	r12,r7[0x5]
80007962:	f0 1f 00 32 	mcall	80007a28 <udc_process_setup+0x4a0>
80007966:	c0 48       	rjmp	8000796e <udc_process_setup+0x3e6>
80007968:	30 0c       	mov	r12,0
8000796a:	c0 28       	rjmp	8000796e <udc_process_setup+0x3e6>
8000796c:	30 0c       	mov	r12,0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
8000796e:	58 0c       	cp.w	r12,0
80007970:	c0 30       	breq	80007976 <udc_process_setup+0x3ee>
80007972:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
80007976:	49 88       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
80007978:	11 88       	ld.ub	r8,r8[0x0]
8000797a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000797e:	58 18       	cp.w	r8,1
80007980:	c2 71       	brne	800079ce <udc_process_setup+0x446>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
80007982:	49 d8       	lddpc	r8,800079f4 <udc_process_setup+0x46c>
80007984:	11 89       	ld.ub	r9,r8[0x0]
80007986:	30 08       	mov	r8,0
80007988:	f0 09 18 00 	cp.b	r9,r8
8000798c:	c2 10       	breq	800079ce <udc_process_setup+0x446>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000798e:	49 28       	lddpc	r8,800079d4 <udc_process_setup+0x44c>
80007990:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80007992:	49 a8       	lddpc	r8,800079f8 <udc_process_setup+0x470>
80007994:	70 08       	ld.w	r8,r8[0x0]
80007996:	70 08       	ld.w	r8,r8[0x0]
80007998:	11 c8       	ld.ub	r8,r8[0x4]
8000799a:	ee 08 18 00 	cp.b	r8,r7
8000799e:	e0 88 00 18 	brls	800079ce <udc_process_setup+0x446>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
800079a2:	0e 96       	mov	r6,r7
800079a4:	30 0b       	mov	r11,0
800079a6:	0e 9c       	mov	r12,r7
800079a8:	f0 1f 00 15 	mcall	800079fc <udc_process_setup+0x474>
800079ac:	c1 10       	breq	800079ce <udc_process_setup+0x446>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800079ae:	49 38       	lddpc	r8,800079f8 <udc_process_setup+0x470>
800079b0:	70 08       	ld.w	r8,r8[0x0]
800079b2:	70 18       	ld.w	r8,r8[0x4]
800079b4:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
800079b8:	6e 3c       	ld.w	r12,r7[0xc]
800079ba:	5d 1c       	icall	r12
800079bc:	18 9b       	mov	r11,r12
800079be:	0c 9c       	mov	r12,r6
800079c0:	f0 1f 00 0f 	mcall	800079fc <udc_process_setup+0x474>
800079c4:	c0 50       	breq	800079ce <udc_process_setup+0x446>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
800079c6:	6e 2c       	ld.w	r12,r7[0x8]
800079c8:	5d 1c       	icall	r12
800079ca:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800079ce:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
800079d2:	00 00       	add	r0,r0
800079d4:	00 00       	add	r0,r0
800079d6:	2a 4c       	sub	r12,-92
800079d8:	00 00       	add	r0,r0
800079da:	05 00       	ld.w	r0,r2++
800079dc:	80 00       	ld.sh	r0,r0[0x0]
800079de:	52 70       	stdsp	sp[0x9c],r0
800079e0:	00 00       	add	r0,r0
800079e2:	00 20       	rsub	r0,r0
800079e4:	00 00       	add	r0,r0
800079e6:	01 14       	ld.sh	r4,r0++
800079e8:	00 00       	add	r0,r0
800079ea:	01 60       	ld.uh	r0,--r0
800079ec:	00 00       	add	r0,r0
800079ee:	01 2c       	ld.uh	r12,r0++
800079f0:	00 00       	add	r0,r0
800079f2:	01 34       	ld.ub	r4,r0++
800079f4:	00 00       	add	r0,r0
800079f6:	05 02       	ld.w	r2,r2++
800079f8:	00 00       	add	r0,r0
800079fa:	04 fc       	st.b	--r2,r12
800079fc:	80 00       	ld.sh	r0,r0[0x0]
800079fe:	73 7c       	ld.w	r12,r9[0x5c]
80007a00:	00 00       	add	r0,r0
80007a02:	05 08       	ld.w	r8,r2++
80007a04:	80 00       	ld.sh	r0,r0[0x0]
80007a06:	52 7c       	stdsp	sp[0x9c],r12
80007a08:	00 00       	add	r0,r0
80007a0a:	04 fa       	st.b	--r2,r10
80007a0c:	80 00       	ld.sh	r0,r0[0x0]
80007a0e:	74 50       	ld.w	r0,r10[0x14]
80007a10:	80 00       	ld.sh	r0,r0[0x0]
80007a12:	52 58       	stdsp	sp[0x94],r8
80007a14:	80 00       	ld.sh	r0,r0[0x0]
80007a16:	75 2c       	ld.w	r12,r10[0x48]
80007a18:	80 00       	ld.sh	r0,r0[0x0]
80007a1a:	74 68       	ld.w	r8,r10[0x18]
80007a1c:	80 00       	ld.sh	r0,r0[0x0]
80007a1e:	74 c8       	ld.w	r8,r10[0x30]
80007a20:	80 00       	ld.sh	r0,r0[0x0]
80007a22:	53 38       	stdsp	sp[0xcc],r8
80007a24:	80 00       	ld.sh	r0,r0[0x0]
80007a26:	54 ec       	stdsp	sp[0x138],r12
80007a28:	80 00       	ld.sh	r0,r0[0x0]
80007a2a:	52 90       	stdsp	sp[0xa4],r0

80007a2c <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
80007a2c:	d4 01       	pushm	lr
	udd_enable();
80007a2e:	f0 1f 00 02 	mcall	80007a34 <udc_start+0x8>
}
80007a32:	d8 02       	popm	pc
80007a34:	80 00       	ld.sh	r0,r0[0x0]
80007a36:	61 e0       	ld.w	r0,r0[0x78]

80007a38 <main_keyboard_enable>:
	ui_wakeup_disable();
}

bool main_keyboard_enable(void)
{
	main_b_keyboard_enable = true;
80007a38:	30 19       	mov	r9,1
80007a3a:	48 28       	lddpc	r8,80007a40 <main_keyboard_enable+0x8>
80007a3c:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80007a3e:	5e ff       	retal	1
80007a40:	00 00       	add	r0,r0
80007a42:	05 0b       	ld.w	r11,r2++

80007a44 <main_keyboard_disable>:

void main_keyboard_disable(void)
{
	main_b_keyboard_enable = false;
80007a44:	30 09       	mov	r9,0
80007a46:	48 28       	lddpc	r8,80007a4c <main_keyboard_disable+0x8>
80007a48:	b0 89       	st.b	r8[0x0],r9
}
80007a4a:	5e fc       	retal	r12
80007a4c:	00 00       	add	r0,r0
80007a4e:	05 0b       	ld.w	r11,r2++

80007a50 <main_msc_enable>:

bool main_msc_enable(void)
{
	main_b_msc_enable = true;
80007a50:	30 19       	mov	r9,1
80007a52:	48 28       	lddpc	r8,80007a58 <main_msc_enable+0x8>
80007a54:	b0 89       	st.b	r8[0x0],r9
	return main_b_msc_enable;
}
80007a56:	5e ff       	retal	1
80007a58:	00 00       	add	r0,r0
80007a5a:	05 16       	ld.sh	r6,r2++

80007a5c <main_msc_disable>:

void main_msc_disable(void)
{
	main_b_msc_enable = false;
80007a5c:	30 09       	mov	r9,0
80007a5e:	48 28       	lddpc	r8,80007a64 <main_msc_disable+0x8>
80007a60:	b0 89       	st.b	r8[0x0],r9
	return false;
}
80007a62:	5e fc       	retal	r12
80007a64:	00 00       	add	r0,r0
80007a66:	05 16       	ld.sh	r6,r2++

80007a68 <ui_kbd_led>:
	sd_mmc_spi_init(spiOptions,pba_hz);
	#endif  // SD_MMC_SPI_MEM == ENABLE
}

void ui_kbd_led(uint8_t value)
{
80007a68:	eb cd 40 80 	pushm	r7,lr
	if(!in_affect){
80007a6c:	49 b8       	lddpc	r8,80007ad8 <ui_kbd_led+0x70>
80007a6e:	11 89       	ld.ub	r9,r8[0x0]
80007a70:	30 08       	mov	r8,0
80007a72:	f0 09 18 00 	cp.b	r9,r8
80007a76:	c2 e1       	brne	80007ad2 <ui_kbd_led+0x6a>
		//this is called when LEDs CAPS LCK, NUM LCK change
		if (value & HID_LED_NUM_LOCK) {
80007a78:	18 97       	mov	r7,r12
80007a7a:	f1 dc c0 01 	bfextu	r8,r12,0x0,0x1
80007a7e:	c0 b0       	breq	80007a94 <ui_kbd_led+0x2c>
			// Here, turn on Num LED
			LED_On( LED1 );
80007a80:	30 2c       	mov	r12,2
80007a82:	f0 1f 00 17 	mcall	80007adc <ui_kbd_led+0x74>
			in_affect=true;
80007a86:	30 19       	mov	r9,1
80007a88:	49 48       	lddpc	r8,80007ad8 <ui_kbd_led+0x70>
80007a8a:	b0 89       	st.b	r8[0x0],r9
			//use injectarray
			state = state_START_INJECT;
80007a8c:	30 19       	mov	r9,1
80007a8e:	49 58       	lddpc	r8,80007ae0 <ui_kbd_led+0x78>
80007a90:	91 09       	st.w	r8[0x0],r9
80007a92:	c0 48       	rjmp	80007a9a <ui_kbd_led+0x32>
		} else{
			// Here, turn off Num LED
			LED_Off( LED1 );
80007a94:	30 2c       	mov	r12,2
80007a96:	f0 1f 00 14 	mcall	80007ae4 <ui_kbd_led+0x7c>
		}
		if (value & HID_LED_CAPS_LOCK) {
80007a9a:	e2 17 00 02 	andl	r7,0x2,COH
80007a9e:	c1 70       	breq	80007acc <ui_kbd_led+0x64>
			// Here, turn on CAPS LED
			LED_On( LED0 );
80007aa0:	30 1c       	mov	r12,1
80007aa2:	f0 1f 00 0f 	mcall	80007adc <ui_kbd_led+0x74>
			in_affect=true;
80007aa6:	30 19       	mov	r9,1
80007aa8:	48 c8       	lddpc	r8,80007ad8 <ui_kbd_led+0x70>
80007aaa:	b0 89       	st.b	r8[0x0],r9
80007aac:	30 08       	mov	r8,0
			//use injectarray2
			for (int c=0;c<(sizeof(inject_array2));c++){
				inject_array[c]=inject_array2[c];
80007aae:	48 fb       	lddpc	r11,80007ae8 <ui_kbd_led+0x80>
80007ab0:	48 fa       	lddpc	r10,80007aec <ui_kbd_led+0x84>
80007ab2:	f4 08 04 09 	ld.sh	r9,r10[r8]
80007ab6:	f6 08 0a 09 	st.h	r11[r8],r9
80007aba:	2f e8       	sub	r8,-2
		if (value & HID_LED_CAPS_LOCK) {
			// Here, turn on CAPS LED
			LED_On( LED0 );
			in_affect=true;
			//use injectarray2
			for (int c=0;c<(sizeof(inject_array2));c++){
80007abc:	e0 48 20 00 	cp.w	r8,8192
80007ac0:	cf 91       	brne	80007ab2 <ui_kbd_led+0x4a>
				inject_array[c]=inject_array2[c];
			}
			state = state_START_INJECT;
80007ac2:	30 19       	mov	r9,1
80007ac4:	48 78       	lddpc	r8,80007ae0 <ui_kbd_led+0x78>
80007ac6:	91 09       	st.w	r8[0x0],r9
80007ac8:	e3 cd 80 80 	ldm	sp++,r7,pc
		} else{
			// Here, turn off CAPS LED
			LED_Off( LED0 );
80007acc:	30 1c       	mov	r12,1
80007ace:	f0 1f 00 06 	mcall	80007ae4 <ui_kbd_led+0x7c>
80007ad2:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ad6:	00 00       	add	r0,r0
80007ad8:	00 00       	add	r0,r0
80007ada:	05 0c       	ld.w	r12,r2++
80007adc:	80 00       	ld.sh	r0,r0[0x0]
80007ade:	4c d8       	lddpc	r8,80007c10 <process_frame+0x120>
80007ae0:	00 00       	add	r0,r0
80007ae2:	05 10       	ld.sh	r0,r2++
80007ae4:	80 00       	ld.sh	r0,r0[0x0]
80007ae6:	4d 28       	lddpc	r8,80007c2c <process_frame+0x13c>
80007ae8:	00 00       	add	r0,r0
80007aea:	05 18       	ld.sh	r8,r2++
80007aec:	00 00       	add	r0,r0
80007aee:	15 1a       	ld.sh	r10,r10++

80007af0 <process_frame>:
		}
	}
}

void process_frame(uint16_t framenumber)
{
80007af0:	d4 01       	pushm	lr
	static uint16_t debounce = 0;
	static uint16_t injectToken = 0x0000;
	static int a=0;
	
	// scan process running each 2ms
	cpt_sof++;
80007af2:	4e 49       	lddpc	r9,80007c80 <process_frame+0x190>
80007af4:	13 88       	ld.ub	r8,r9[0x0]
80007af6:	2f f8       	sub	r8,-1
80007af8:	b2 88       	st.b	r9[0x0],r8
	if( 2 > cpt_sof )
80007afa:	30 19       	mov	r9,1
80007afc:	f2 08 18 00 	cp.b	r8,r9
80007b00:	e0 88 00 be 	brls	80007c7c <process_frame+0x18c>
	return;
	cpt_sof = 0;
80007b04:	30 09       	mov	r9,0
80007b06:	4d f8       	lddpc	r8,80007c80 <process_frame+0x190>
80007b08:	b0 89       	st.b	r8[0x0],r9
	
	// pulse led
	LED_Set_Intensity( LED0, framenumber >> 1 );
80007b0a:	f7 dc c0 28 	bfextu	r11,r12,0x1,0x8
80007b0e:	30 1c       	mov	r12,1
80007b10:	f0 1f 00 5d 	mcall	80007c84 <process_frame+0x194>
	
	// debounce switch
	if( debounce > 0 ) --debounce;
80007b14:	4d d8       	lddpc	r8,80007c88 <process_frame+0x198>
80007b16:	90 08       	ld.sh	r8,r8[0x0]
80007b18:	58 08       	cp.w	r8,0
80007b1a:	c0 40       	breq	80007b22 <process_frame+0x32>
80007b1c:	20 18       	sub	r8,1
80007b1e:	4d b9       	lddpc	r9,80007c88 <process_frame+0x198>
80007b20:	b2 08       	st.h	r9[0x0],r8
	
	// injection state machine
	switch(state) {
80007b22:	4d b8       	lddpc	r8,80007c8c <process_frame+0x19c>
80007b24:	70 08       	ld.w	r8,r8[0x0]
80007b26:	58 98       	cp.w	r8,9
80007b28:	e0 8b 00 a7 	brhi	80007c76 <process_frame+0x186>
80007b2c:	4d 99       	lddpc	r9,80007c90 <process_frame+0x1a0>
80007b2e:	f2 08 03 2f 	ld.w	pc,r9[r8<<0x2]

		case state_IDLE:
		// check switch
		in_affect=false;
80007b32:	30 09       	mov	r9,0
80007b34:	4d 88       	lddpc	r8,80007c94 <process_frame+0x1a4>
80007b36:	b0 89       	st.b	r8[0x0],r9
		LED_Off(LED1);
80007b38:	30 2c       	mov	r12,2
80007b3a:	f0 1f 00 58 	mcall	80007c98 <process_frame+0x1a8>
		if( gpio_get_pin_value(GPIO_JOYSTICK_PUSH) == GPIO_JOYSTICK_PUSH_PRESSED ) {
80007b3e:	30 dc       	mov	r12,13
80007b40:	f0 1f 00 57 	mcall	80007c9c <process_frame+0x1ac>
80007b44:	e0 81 00 9c 	brne	80007c7c <process_frame+0x18c>
			
			// debounce
			if( debounce == 0 ) {
80007b48:	4d 08       	lddpc	r8,80007c88 <process_frame+0x198>
80007b4a:	90 09       	ld.sh	r9,r8[0x0]
80007b4c:	30 08       	mov	r8,0
80007b4e:	f0 09 19 00 	cp.h	r9,r8
80007b52:	e0 81 00 95 	brne	80007c7c <process_frame+0x18c>
				state = state_START_INJECT;
80007b56:	30 19       	mov	r9,1
80007b58:	4c d8       	lddpc	r8,80007c8c <process_frame+0x19c>
80007b5a:	91 09       	st.w	r8[0x0],r9
				a=0;
80007b5c:	30 09       	mov	r9,0
80007b5e:	4d 18       	lddpc	r8,80007ca0 <process_frame+0x1b0>
80007b60:	91 09       	st.w	r8[0x0],r9
				debounce = 100;
80007b62:	36 49       	mov	r9,100
80007b64:	4c 98       	lddpc	r8,80007c88 <process_frame+0x198>
80007b66:	b0 09       	st.h	r8[0x0],r9
80007b68:	d8 02       	popm	pc
		}
		break;
		
		case state_START_INJECT:
		//file_open(FOPEN_MODE_R);
		state = state_INJECTING;
80007b6a:	30 29       	mov	r9,2
80007b6c:	4c 88       	lddpc	r8,80007c8c <process_frame+0x19c>
80007b6e:	91 09       	st.w	r8[0x0],r9
		break;
80007b70:	d8 02       	popm	pc
		
		case state_INJECTING:
		
		if( a >= (sizeof(inject_array)/sizeof(inject_array[0])) ) {
80007b72:	4c c8       	lddpc	r8,80007ca0 <process_frame+0x1b0>
80007b74:	70 08       	ld.w	r8,r8[0x0]
80007b76:	e0 48 07 ff 	cp.w	r8,2047
80007b7a:	e0 88 00 06 	brls	80007b86 <process_frame+0x96>
			//file_close();
			state = state_IDLE;
80007b7e:	30 09       	mov	r9,0
80007b80:	4c 38       	lddpc	r8,80007c8c <process_frame+0x19c>
80007b82:	91 09       	st.w	r8[0x0],r9
			break;
80007b84:	d8 02       	popm	pc
		}
		if(injectToken==0x0000) state = state_IDLE;
80007b86:	4c 89       	lddpc	r9,80007ca4 <process_frame+0x1b4>
80007b88:	92 0a       	ld.sh	r10,r9[0x0]
80007b8a:	30 09       	mov	r9,0
80007b8c:	f2 0a 19 00 	cp.h	r10,r9
80007b90:	c0 41       	brne	80007b98 <process_frame+0xa8>
80007b92:	30 0a       	mov	r10,0
80007b94:	4b e9       	lddpc	r9,80007c8c <process_frame+0x19c>
80007b96:	93 0a       	st.w	r9[0x0],r10
		injectToken = inject_array[a];
80007b98:	4c 49       	lddpc	r9,80007ca8 <process_frame+0x1b8>
80007b9a:	f2 08 04 19 	ld.sh	r9,r9[r8<<0x1]
80007b9e:	4c 28       	lddpc	r8,80007ca4 <process_frame+0x1b4>
80007ba0:	b0 09       	st.h	r8[0x0],r9
		a++;
80007ba2:	4c 09       	lddpc	r9,80007ca0 <process_frame+0x1b0>
80007ba4:	72 08       	ld.w	r8,r9[0x0]
80007ba6:	2f f8       	sub	r8,-1
80007ba8:	93 08       	st.w	r9[0x0],r8
		if ((a % 2)==0){
80007baa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007bae:	c0 51       	brne	80007bb8 <process_frame+0xc8>
			LED_On(LED1);
80007bb0:	30 2c       	mov	r12,2
80007bb2:	f0 1f 00 3f 	mcall	80007cac <process_frame+0x1bc>
80007bb6:	c0 48       	rjmp	80007bbe <process_frame+0xce>
		}else{
			LED_Off(LED1);
80007bb8:	30 2c       	mov	r12,2
80007bba:	f0 1f 00 38 	mcall	80007c98 <process_frame+0x1a8>
		}
		if( ( injectToken&0xff ) == 0xFE){
80007bbe:	4b a8       	lddpc	r8,80007ca4 <process_frame+0x1b4>
80007bc0:	90 08       	ld.sh	r8,r8[0x0]
80007bc2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80007bc6:	e0 49 00 fe 	cp.w	r9,254
80007bca:	c0 71       	brne	80007bd8 <process_frame+0xe8>
			state=state_IDLE;
80007bcc:	30 08       	mov	r8,0
80007bce:	4b 09       	lddpc	r9,80007c8c <process_frame+0x19c>
80007bd0:	93 08       	st.w	r9[0x0],r8
			debounce=0;
80007bd2:	4a e9       	lddpc	r9,80007c88 <process_frame+0x198>
80007bd4:	b2 08       	st.h	r9[0x0],r8
80007bd6:	d8 02       	popm	pc
		}
		else if( ( injectToken&0xff ) == 0x00 ) {
80007bd8:	58 09       	cp.w	r9,0
80007bda:	c0 91       	brne	80007bec <process_frame+0xfc>
			wait = injectToken>>8;
80007bdc:	f1 d8 c1 08 	bfextu	r8,r8,0x8,0x8
80007be0:	4b 49       	lddpc	r9,80007cb0 <process_frame+0x1c0>
80007be2:	b2 88       	st.b	r9[0x0],r8
			state = state_WAIT;
80007be4:	30 99       	mov	r9,9
80007be6:	4a a8       	lddpc	r8,80007c8c <process_frame+0x19c>
80007be8:	91 09       	st.w	r8[0x0],r9
80007bea:	d8 02       	popm	pc
		}
		else if( ( injectToken>>8 ) == 0x00 ) {
80007bec:	f1 d8 c1 08 	bfextu	r8,r8,0x8,0x8
80007bf0:	c0 51       	brne	80007bfa <process_frame+0x10a>
			state = state_KEY_DOWN;
80007bf2:	30 39       	mov	r9,3
80007bf4:	4a 68       	lddpc	r8,80007c8c <process_frame+0x19c>
80007bf6:	91 09       	st.w	r8[0x0],r9
80007bf8:	d8 02       	popm	pc
		}
		else {
			state = state_MOD_DOWN;
80007bfa:	30 59       	mov	r9,5
80007bfc:	4a 48       	lddpc	r8,80007c8c <process_frame+0x19c>
80007bfe:	91 09       	st.w	r8[0x0],r9
80007c00:	d8 02       	popm	pc
		}
		break;
		
		case state_KEY_DOWN:
		udi_hid_kbd_down(injectToken&0xff);
80007c02:	4a 98       	lddpc	r8,80007ca4 <process_frame+0x1b4>
80007c04:	11 9c       	ld.ub	r12,r8[0x1]
80007c06:	f0 1f 00 2c 	mcall	80007cb4 <process_frame+0x1c4>
		state = state_KEY_UP;
80007c0a:	30 49       	mov	r9,4
80007c0c:	4a 08       	lddpc	r8,80007c8c <process_frame+0x19c>
80007c0e:	91 09       	st.w	r8[0x0],r9
		break;
80007c10:	d8 02       	popm	pc

		case state_KEY_UP:
		udi_hid_kbd_up(injectToken&0xff);
80007c12:	4a 58       	lddpc	r8,80007ca4 <process_frame+0x1b4>
80007c14:	11 9c       	ld.ub	r12,r8[0x1]
80007c16:	f0 1f 00 29 	mcall	80007cb8 <process_frame+0x1c8>
		state = state_INJECTING;
80007c1a:	30 29       	mov	r9,2
80007c1c:	49 c8       	lddpc	r8,80007c8c <process_frame+0x19c>
80007c1e:	91 09       	st.w	r8[0x0],r9
		break;
80007c20:	d8 02       	popm	pc
		
		case state_MOD_DOWN:
		udi_hid_kbd_modifier_down(injectToken>>8);
80007c22:	4a 18       	lddpc	r8,80007ca4 <process_frame+0x1b4>
80007c24:	11 8c       	ld.ub	r12,r8[0x0]
80007c26:	f0 1f 00 26 	mcall	80007cbc <process_frame+0x1cc>
		state = state_MOD_KEY_DOWN;
80007c2a:	30 69       	mov	r9,6
80007c2c:	49 88       	lddpc	r8,80007c8c <process_frame+0x19c>
80007c2e:	91 09       	st.w	r8[0x0],r9
		break;
80007c30:	d8 02       	popm	pc

		case state_MOD_KEY_DOWN:
		udi_hid_kbd_down(injectToken&0xff);
80007c32:	49 d8       	lddpc	r8,80007ca4 <process_frame+0x1b4>
80007c34:	11 9c       	ld.ub	r12,r8[0x1]
80007c36:	f0 1f 00 20 	mcall	80007cb4 <process_frame+0x1c4>
		state = state_MOD_KEY_UP;
80007c3a:	30 79       	mov	r9,7
80007c3c:	49 48       	lddpc	r8,80007c8c <process_frame+0x19c>
80007c3e:	91 09       	st.w	r8[0x0],r9
		break;
80007c40:	d8 02       	popm	pc

		case state_MOD_KEY_UP:
		udi_hid_kbd_up(injectToken&0xff);
80007c42:	49 98       	lddpc	r8,80007ca4 <process_frame+0x1b4>
80007c44:	11 9c       	ld.ub	r12,r8[0x1]
80007c46:	f0 1f 00 1d 	mcall	80007cb8 <process_frame+0x1c8>
		state = state_MOD_UP;
80007c4a:	30 89       	mov	r9,8
80007c4c:	49 08       	lddpc	r8,80007c8c <process_frame+0x19c>
80007c4e:	91 09       	st.w	r8[0x0],r9
		break;
80007c50:	d8 02       	popm	pc
		
		case state_MOD_UP:
		udi_hid_kbd_modifier_up(injectToken>>8);
80007c52:	49 58       	lddpc	r8,80007ca4 <process_frame+0x1b4>
80007c54:	11 8c       	ld.ub	r12,r8[0x0]
80007c56:	f0 1f 00 1b 	mcall	80007cc0 <process_frame+0x1d0>
		state = state_INJECTING;
80007c5a:	30 29       	mov	r9,2
80007c5c:	48 c8       	lddpc	r8,80007c8c <process_frame+0x19c>
80007c5e:	91 09       	st.w	r8[0x0],r9
		break;
80007c60:	d8 02       	popm	pc
		
		case state_WAIT:
		if( --wait == 0 ) {
80007c62:	49 49       	lddpc	r9,80007cb0 <process_frame+0x1c0>
80007c64:	13 88       	ld.ub	r8,r9[0x0]
80007c66:	20 18       	sub	r8,1
80007c68:	5c 58       	castu.b	r8
80007c6a:	b2 88       	st.b	r9[0x0],r8
80007c6c:	c0 81       	brne	80007c7c <process_frame+0x18c>
			state = state_INJECTING;
80007c6e:	30 29       	mov	r9,2
80007c70:	48 78       	lddpc	r8,80007c8c <process_frame+0x19c>
80007c72:	91 09       	st.w	r8[0x0],r9
80007c74:	d8 02       	popm	pc
		}
		break;
		
		default:
		state = state_IDLE;
80007c76:	30 09       	mov	r9,0
80007c78:	48 58       	lddpc	r8,80007c8c <process_frame+0x19c>
80007c7a:	91 09       	st.w	r8[0x0],r9
80007c7c:	d8 02       	popm	pc
80007c7e:	00 00       	add	r0,r0
80007c80:	00 00       	add	r0,r0
80007c82:	05 09       	ld.w	r9,r2++
80007c84:	80 00       	ld.sh	r0,r0[0x0]
80007c86:	4c 38       	lddpc	r8,80007d90 <main_vbus_action>
80007c88:	00 00       	add	r0,r0
80007c8a:	05 0e       	ld.w	lr,r2++
80007c8c:	00 00       	add	r0,r0
80007c8e:	05 10       	ld.sh	r0,r2++
80007c90:	80 00       	ld.sh	r0,r0[0x0]
80007c92:	88 90       	ld.uh	r0,r4[0x2]
80007c94:	00 00       	add	r0,r0
80007c96:	05 0c       	ld.w	r12,r2++
80007c98:	80 00       	ld.sh	r0,r0[0x0]
80007c9a:	4d 28       	lddpc	r8,80007de0 <main+0x34>
80007c9c:	80 00       	ld.sh	r0,r0[0x0]
80007c9e:	4f 00       	lddpc	r0,80007e5c <main+0xb0>
80007ca0:	00 00       	add	r0,r0
80007ca2:	25 1c       	sub	r12,81
80007ca4:	00 00       	add	r0,r0
80007ca6:	05 14       	ld.sh	r4,r2++
80007ca8:	00 00       	add	r0,r0
80007caa:	05 18       	ld.sh	r8,r2++
80007cac:	80 00       	ld.sh	r0,r0[0x0]
80007cae:	4c d8       	lddpc	r8,80007de0 <main+0x34>
80007cb0:	00 00       	add	r0,r0
80007cb2:	15 18       	ld.sh	r8,r10++
80007cb4:	80 00       	ld.sh	r0,r0[0x0]
80007cb6:	67 08       	ld.w	r8,r3[0x40]
80007cb8:	80 00       	ld.sh	r0,r0[0x0]
80007cba:	67 80       	ld.w	r0,r3[0x60]
80007cbc:	80 00       	ld.sh	r0,r0[0x0]
80007cbe:	68 18       	ld.w	r8,r4[0x4]
80007cc0:	80 00       	ld.sh	r0,r0[0x0]
80007cc2:	68 48       	ld.w	r8,r4[0x10]

80007cc4 <memories_initialization>:
	return false;
}


void memories_initialization(long pba_hz)
{
80007cc4:	eb cd 40 80 	pushm	r7,lr
80007cc8:	20 4d       	sub	sp,16
80007cca:	18 97       	mov	r7,r12
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	};
80007ccc:	49 a9       	lddpc	r9,80007d34 <memories_initialization+0x70>
80007cce:	f2 ea 00 00 	ld.d	r10,r9[0]
80007cd2:	fa eb 00 00 	st.d	sp[0],r10
80007cd6:	f2 ea 00 08 	ld.d	r10,r9[8]
80007cda:	fa eb 00 08 	st.d	sp[8],r10
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80007cde:	30 5b       	mov	r11,5
80007ce0:	30 2c       	mov	r12,2
80007ce2:	f0 1f 00 16 	mcall	80007d38 <memories_initialization+0x74>

	sysclk_enable_peripheral_clock(SD_MMC_SPI);

	// If the SPI used by the SD/MMC is not enabled.
	if (!spi_is_enabled(SD_MMC_SPI)) {
80007ce6:	fe 7c 24 00 	mov	r12,-56320
80007cea:	f0 1f 00 15 	mcall	80007d3c <memories_initialization+0x78>
80007cee:	c1 11       	brne	80007d10 <memories_initialization+0x4c>
		// Initialize as master.
		spi_initMaster(SD_MMC_SPI, &spiOptions);
80007cf0:	1a 9b       	mov	r11,sp
80007cf2:	fe 7c 24 00 	mov	r12,-56320
80007cf6:	f0 1f 00 13 	mcall	80007d40 <memories_initialization+0x7c>
		// Set selection mode: variable_ps, pcs_decode, delay.
		spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
80007cfa:	30 09       	mov	r9,0
80007cfc:	12 9a       	mov	r10,r9
80007cfe:	12 9b       	mov	r11,r9
80007d00:	fe 7c 24 00 	mov	r12,-56320
80007d04:	f0 1f 00 10 	mcall	80007d44 <memories_initialization+0x80>
		// Enable SPI.
		spi_enable(SD_MMC_SPI);
80007d08:	fe 7c 24 00 	mov	r12,-56320
80007d0c:	f0 1f 00 0f 	mcall	80007d48 <memories_initialization+0x84>
	}

	// Initialize SD/MMC with SPI PB clock.
	sd_mmc_spi_init(spiOptions,pba_hz);
80007d10:	20 4d       	sub	sp,16
80007d12:	fa c8 ff f0 	sub	r8,sp,-16
80007d16:	f0 ea 00 00 	ld.d	r10,r8[0]
80007d1a:	fa eb 00 00 	st.d	sp[0],r10
80007d1e:	f0 e8 00 08 	ld.d	r8,r8[8]
80007d22:	fa e9 00 08 	st.d	sp[8],r8
80007d26:	0e 9c       	mov	r12,r7
80007d28:	f0 1f 00 09 	mcall	80007d4c <memories_initialization+0x88>
80007d2c:	2f cd       	sub	sp,-16
	#endif  // SD_MMC_SPI_MEM == ENABLE
}
80007d2e:	2f cd       	sub	sp,-16
80007d30:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d34:	80 00       	ld.sh	r0,r0[0x0]
80007d36:	88 f0       	ld.uh	r0,r4[0xe]
80007d38:	80 00       	ld.sh	r0,r0[0x0]
80007d3a:	63 08       	ld.w	r8,r1[0x40]
80007d3c:	80 00       	ld.sh	r0,r0[0x0]
80007d3e:	51 f2       	stdsp	sp[0x7c],r2
80007d40:	80 00       	ld.sh	r0,r0[0x0]
80007d42:	50 5c       	stdsp	sp[0x14],r12
80007d44:	80 00       	ld.sh	r0,r0[0x0]
80007d46:	50 94       	stdsp	sp[0x24],r4
80007d48:	80 00       	ld.sh	r0,r0[0x0]
80007d4a:	51 ec       	stdsp	sp[0x78],r12
80007d4c:	80 00       	ld.sh	r0,r0[0x0]
80007d4e:	2b 78       	sub	r8,-73

80007d50 <main_sof_action>:
{
	ui_wakeup();
}

void main_sof_action(void)
{
80007d50:	d4 01       	pushm	lr
	if ((!main_b_keyboard_enable) )
80007d52:	48 78       	lddpc	r8,80007d6c <main_sof_action+0x1c>
80007d54:	11 89       	ld.ub	r9,r8[0x0]
80007d56:	30 08       	mov	r8,0
80007d58:	f0 09 18 00 	cp.b	r9,r8
80007d5c:	c0 60       	breq	80007d68 <main_sof_action+0x18>
		return;
	process_frame(udd_get_frame_number());
80007d5e:	f0 1f 00 05 	mcall	80007d70 <main_sof_action+0x20>
80007d62:	5c 7c       	castu.h	r12
80007d64:	f0 1f 00 04 	mcall	80007d74 <main_sof_action+0x24>
80007d68:	d8 02       	popm	pc
80007d6a:	00 00       	add	r0,r0
80007d6c:	00 00       	add	r0,r0
80007d6e:	05 0b       	ld.w	r11,r2++
80007d70:	80 00       	ld.sh	r0,r0[0x0]
80007d72:	52 64       	stdsp	sp[0x98],r4
80007d74:	80 00       	ld.sh	r0,r0[0x0]
80007d76:	7a f0       	ld.w	r0,sp[0x3c]

80007d78 <main_resume_action>:
{
	ui_powerdown();
}

void main_resume_action(void)
{
80007d78:	d4 01       	pushm	lr
	ui_wakeup();
80007d7a:	f0 1f 00 02 	mcall	80007d80 <main_resume_action+0x8>
}
80007d7e:	d8 02       	popm	pc
80007d80:	80 00       	ld.sh	r0,r0[0x0]
80007d82:	65 ac       	ld.w	r12,r2[0x68]

80007d84 <main_suspend_action>:
		udc_detach();
	}
}

void main_suspend_action(void)
{
80007d84:	d4 01       	pushm	lr
	ui_powerdown();
80007d86:	f0 1f 00 02 	mcall	80007d8c <main_suspend_action+0x8>
}
80007d8a:	d8 02       	popm	pc
80007d8c:	80 00       	ld.sh	r0,r0[0x0]
80007d8e:	65 dc       	ld.w	r12,r2[0x74]

80007d90 <main_vbus_action>:
		}
	}
}

void main_vbus_action(bool b_high)
{
80007d90:	d4 01       	pushm	lr
	if (b_high) {
80007d92:	58 0c       	cp.w	r12,0
80007d94:	c0 40       	breq	80007d9c <main_vbus_action+0xc>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80007d96:	f0 1f 00 04 	mcall	80007da4 <main_vbus_action+0x14>
80007d9a:	d8 02       	popm	pc
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
80007d9c:	f0 1f 00 03 	mcall	80007da8 <main_vbus_action+0x18>
80007da0:	d8 02       	popm	pc
80007da2:	00 00       	add	r0,r0
80007da4:	80 00       	ld.sh	r0,r0[0x0]
80007da6:	56 58       	stdsp	sp[0x194],r8
80007da8:	80 00       	ld.sh	r0,r0[0x0]
80007daa:	56 30       	stdsp	sp[0x18c],r0

80007dac <main>:
static uint16_t inject_array2[2048];

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
80007dac:	d4 21       	pushm	r4-r7,lr
	irq_initialize_vectors();
80007dae:	f0 1f 00 a6 	mcall	80008044 <main+0x298>
	cpu_irq_enable();
80007db2:	d5 03       	csrf	0x10
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
80007db4:	fe f8 02 94 	ld.w	r8,pc[660]
80007db8:	30 09       	mov	r9,0
80007dba:	b0 89       	st.b	r8[0x0],r9
80007dbc:	b0 99       	st.b	r8[0x1],r9
80007dbe:	b0 a9       	st.b	r8[0x2],r9
80007dc0:	b0 b9       	st.b	r8[0x3],r9
80007dc2:	b0 c9       	st.b	r8[0x4],r9
80007dc4:	b0 d9       	st.b	r8[0x5],r9
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
80007dc6:	30 19       	mov	r9,1
80007dc8:	b0 e9       	st.b	r8[0x6],r9

	// Initialize the sleep manager
	sleepmgr_init();

	sysclk_init();
80007dca:	f0 1f 00 a1 	mcall	8000804c <main+0x2a0>
	board_init();
80007dce:	f0 1f 00 a1 	mcall	80008050 <main+0x2a4>
	ui_init();
80007dd2:	f0 1f 00 a1 	mcall	80008054 <main+0x2a8>
	ui_powerdown();
80007dd6:	f0 1f 00 a1 	mcall	80008058 <main+0x2ac>

 memories_initialization(FOSC0);
80007dda:	e0 6c 1b 00 	mov	r12,6912
80007dde:	ea 1c 00 b7 	orh	r12,0xb7
80007de2:	f0 1f 00 9f 	mcall	8000805c <main+0x2b0>
 
nav_reset();
80007de6:	f0 1f 00 9f 	mcall	80008060 <main+0x2b4>
if( nav_setcwd( vidpidFile, false, false ) ) {
80007dea:	30 0a       	mov	r10,0
80007dec:	14 9b       	mov	r11,r10
80007dee:	fe f8 02 76 	ld.w	r8,pc[630]
80007df2:	70 0c       	ld.w	r12,r8[0x0]
80007df4:	f0 1f 00 9d 	mcall	80008068 <main+0x2bc>
80007df8:	c4 40       	breq	80007e80 <main+0xd4>
	file_open(FOPEN_MODE_R);
80007dfa:	30 9c       	mov	r12,9
80007dfc:	f0 1f 00 9c 	mcall	8000806c <main+0x2c0>
	file_bof();
80007e00:	f0 1f 00 9c 	mcall	80008070 <main+0x2c4>
	
	vid =  file_getc() | (file_getc() << 8);
80007e04:	f0 1f 00 9c 	mcall	80008074 <main+0x2c8>
80007e08:	ed dc b0 10 	bfexts	r6,r12,0x0,0x10
80007e0c:	f0 1f 00 9a 	mcall	80008074 <main+0x2c8>
80007e10:	fe f7 02 68 	ld.w	r7,pc[616]
80007e14:	5c 7c       	castu.h	r12
80007e16:	ed ec 10 86 	or	r6,r6,r12<<0x8
80007e1a:	ae 06       	st.h	r7[0x0],r6
	pid =  file_getc() | (file_getc() << 8);
80007e1c:	f0 1f 00 96 	mcall	80008074 <main+0x2c8>
80007e20:	ed dc b0 10 	bfexts	r6,r12,0x0,0x10
80007e24:	f0 1f 00 94 	mcall	80008074 <main+0x2c8>
80007e28:	fe f5 02 54 	ld.w	r5,pc[596]
80007e2c:	5c 7c       	castu.h	r12
80007e2e:	ed ec 10 86 	or	r6,r6,r12<<0x8
80007e32:	aa 06       	st.h	r5[0x0],r6
	serial_len = file_getc();
80007e34:	f0 1f 00 90 	mcall	80008074 <main+0x2c8>
80007e38:	fe f8 02 48 	ld.w	r8,pc[584]
80007e3c:	b0 8c       	st.b	r8[0x0],r12
	//serial = (uint8_t *)dlmalloc(serial_len);
	file_read_buf(serial,sizeof(serial_len));
80007e3e:	fe f6 02 46 	ld.w	r6,pc[582]
80007e42:	30 1b       	mov	r11,1
80007e44:	0c 9c       	mov	r12,r6
80007e46:	f0 1f 00 91 	mcall	80008088 <main+0x2dc>
	serial_p = &serial;
80007e4a:	fe f8 02 42 	ld.w	r8,pc[578]
80007e4e:	91 06       	st.w	r8[0x0],r6
	//serial[serial_len]='\0';
	udc_device_desc.idVendor = (vid);
80007e50:	fe f8 02 40 	ld.w	r8,pc[576]
80007e54:	8e 89       	ld.uh	r9,r7[0x0]
80007e56:	f2 0a 16 08 	lsr	r10,r9,0x8
80007e5a:	f1 6a 00 08 	st.b	r8[8],r10
80007e5e:	f1 69 00 09 	st.b	r8[9],r9
	udc_device_desc.idProduct = (pid);
80007e62:	8a 89       	ld.uh	r9,r5[0x0]
80007e64:	f2 0a 16 08 	lsr	r10,r9,0x8
80007e68:	f1 6a 00 0a 	st.b	r8[10],r10
80007e6c:	f1 69 00 0b 	st.b	r8[11],r9
	udc_device_desc.bcdDevice = 2;
80007e70:	30 09       	mov	r9,0
80007e72:	f1 69 00 0c 	st.b	r8[12],r9
80007e76:	30 29       	mov	r9,2
80007e78:	f1 69 00 0d 	st.b	r8[13],r9
		//#define USB_DEVICE_GET_SERIAL_NAME_LENGTH serial_len;
		#define USB_DEVICE_SERIAL_NAME serial;
		
	}
	
	file_close();
80007e7c:	f0 1f 00 86 	mcall	80008094 <main+0x2e8>
}

 nav_reset();
80007e80:	f0 1f 00 78 	mcall	80008060 <main+0x2b4>
 if( nav_setcwd( injectFile, false, false ) ) {
80007e84:	30 0a       	mov	r10,0
80007e86:	14 9b       	mov	r11,r10
80007e88:	fe f8 02 10 	ld.w	r8,pc[528]
80007e8c:	70 0c       	ld.w	r12,r8[0x0]
80007e8e:	f0 1f 00 77 	mcall	80008068 <main+0x2bc>
80007e92:	c3 40       	breq	80007efa <main+0x14e>
	 file_open(FOPEN_MODE_R);
80007e94:	30 9c       	mov	r12,9
80007e96:	f0 1f 00 76 	mcall	8000806c <main+0x2c0>
	 file_seek(0,FS_SEEK_END);
80007e9a:	30 1b       	mov	r11,1
80007e9c:	30 0c       	mov	r12,0
80007e9e:	f0 1f 00 80 	mcall	8000809c <main+0x2f0>
	 uint32_t filesize=file_getpos();
80007ea2:	f0 1f 00 80 	mcall	800080a0 <main+0x2f4>
80007ea6:	18 94       	mov	r4,r12
	 file_seek(0,FS_SEEK_SET);
80007ea8:	30 0b       	mov	r11,0
80007eaa:	16 9c       	mov	r12,r11
80007eac:	f0 1f 00 7c 	mcall	8000809c <main+0x2f0>
80007eb0:	4f d6       	lddpc	r6,800080a4 <main+0x2f8>
80007eb2:	30 07       	mov	r7,0
	 int a=0;
	 
	 while(!file_eof()){
80007eb4:	c1 08       	rjmp	80007ed4 <main+0x128>
		inject_array[a] =  file_getc() | (file_getc() << 8);
80007eb6:	f0 1f 00 70 	mcall	80008074 <main+0x2c8>
80007eba:	eb dc b0 10 	bfexts	r5,r12,0x0,0x10
80007ebe:	f0 1f 00 6e 	mcall	80008074 <main+0x2c8>
80007ec2:	5c 7c       	castu.h	r12
80007ec4:	eb ec 10 85 	or	r5,r5,r12<<0x8
80007ec8:	0c b5       	st.h	r6++,r5
		a++;
80007eca:	2f f7       	sub	r7,-1
		if (a==4096){
80007ecc:	e0 47 10 00 	cp.w	r7,4096
80007ed0:	e0 80 00 b8 	breq	80008040 <main+0x294>
	 file_seek(0,FS_SEEK_END);
	 uint32_t filesize=file_getpos();
	 file_seek(0,FS_SEEK_SET);
	 int a=0;
	 
	 while(!file_eof()){
80007ed4:	f0 1f 00 75 	mcall	800080a8 <main+0x2fc>
80007ed8:	ce f0       	breq	80007eb6 <main+0x10a>
		a++;
		if (a==4096){
			return;
		}			
	 }	
	 if (a==(filesize/2)){
80007eda:	a1 94       	lsr	r4,0x1
80007edc:	08 37       	cp.w	r7,r4
80007ede:	c0 71       	brne	80007eec <main+0x140>
		 inject_array[a]= 0xFEFE;
80007ee0:	fe 79 fe fe 	mov	r9,-258
80007ee4:	4f 08       	lddpc	r8,800080a4 <main+0x2f8>
80007ee6:	f0 07 0a 19 	st.h	r8[r7<<0x1],r9
80007eea:	c0 68       	rjmp	80007ef6 <main+0x14a>
	 }
	 else {
		 inject_array[a]= 0xFEFE;
80007eec:	fe 79 fe fe 	mov	r9,-258
80007ef0:	4e d8       	lddpc	r8,800080a4 <main+0x2f8>
80007ef2:	f0 07 0a 19 	st.h	r8[r7<<0x1],r9
	}
	file_close();
80007ef6:	f0 1f 00 68 	mcall	80008094 <main+0x2e8>
 }
  nav_reset();
80007efa:	f0 1f 00 5a 	mcall	80008060 <main+0x2b4>
  if( nav_setcwd( injectFile2, false, false ) ) {
80007efe:	30 0a       	mov	r10,0
80007f00:	14 9b       	mov	r11,r10
80007f02:	4e b8       	lddpc	r8,800080ac <main+0x300>
80007f04:	70 0c       	ld.w	r12,r8[0x0]
80007f06:	f0 1f 00 59 	mcall	80008068 <main+0x2bc>
80007f0a:	c3 30       	breq	80007f70 <main+0x1c4>
	  file_open(FOPEN_MODE_R);
80007f0c:	30 9c       	mov	r12,9
80007f0e:	f0 1f 00 58 	mcall	8000806c <main+0x2c0>
	  file_seek(0,FS_SEEK_END);
80007f12:	30 1b       	mov	r11,1
80007f14:	30 0c       	mov	r12,0
80007f16:	f0 1f 00 62 	mcall	8000809c <main+0x2f0>
	  uint32_t filesize=file_getpos();
80007f1a:	f0 1f 00 62 	mcall	800080a0 <main+0x2f4>
80007f1e:	18 94       	mov	r4,r12
	  file_seek(0,FS_SEEK_SET);
80007f20:	30 0b       	mov	r11,0
80007f22:	16 9c       	mov	r12,r11
80007f24:	f0 1f 00 5e 	mcall	8000809c <main+0x2f0>
80007f28:	4e 26       	lddpc	r6,800080b0 <main+0x304>
80007f2a:	30 07       	mov	r7,0
	  int a=0;
	  
	  while(!file_eof()){
80007f2c:	c0 f8       	rjmp	80007f4a <main+0x19e>
		  inject_array2[a] =  file_getc() | (file_getc() << 8);
80007f2e:	f0 1f 00 52 	mcall	80008074 <main+0x2c8>
80007f32:	eb dc b0 10 	bfexts	r5,r12,0x0,0x10
80007f36:	f0 1f 00 50 	mcall	80008074 <main+0x2c8>
80007f3a:	5c 7c       	castu.h	r12
80007f3c:	eb ec 10 85 	or	r5,r5,r12<<0x8
80007f40:	0c b5       	st.h	r6++,r5
		  a++;
80007f42:	2f f7       	sub	r7,-1
		  if (a==4096){
80007f44:	e0 47 10 00 	cp.w	r7,4096
80007f48:	c7 c0       	breq	80008040 <main+0x294>
	  file_seek(0,FS_SEEK_END);
	  uint32_t filesize=file_getpos();
	  file_seek(0,FS_SEEK_SET);
	  int a=0;
	  
	  while(!file_eof()){
80007f4a:	f0 1f 00 58 	mcall	800080a8 <main+0x2fc>
80007f4e:	cf 00       	breq	80007f2e <main+0x182>
		  a++;
		  if (a==4096){
			  return;
		  }
	  }
	  if (a==(filesize/2)){
80007f50:	a1 94       	lsr	r4,0x1
80007f52:	08 37       	cp.w	r7,r4
80007f54:	c0 71       	brne	80007f62 <main+0x1b6>
		  inject_array2[a]= 0xFEFE;
80007f56:	fe 79 fe fe 	mov	r9,-258
80007f5a:	4d 68       	lddpc	r8,800080b0 <main+0x304>
80007f5c:	f0 07 0a 19 	st.h	r8[r7<<0x1],r9
80007f60:	c0 68       	rjmp	80007f6c <main+0x1c0>
	  }
	  else {
		  inject_array2[a]= 0xFEFE;
80007f62:	fe 79 fe fe 	mov	r9,-258
80007f66:	4d 38       	lddpc	r8,800080b0 <main+0x304>
80007f68:	f0 07 0a 19 	st.h	r8[r7<<0x1],r9
	  }
	  file_close();
80007f6c:	f0 1f 00 4a 	mcall	80008094 <main+0x2e8>
  }
	//memories_initialization(FOSC0);
	// Start USB stack to authorize VBus monitoring
	udc_start();
80007f70:	f0 1f 00 51 	mcall	800080b4 <main+0x308>
 * then it will attach device when an acceptable Vbus
 * level from the host is detected.
 */
static inline void udc_attach(void)
{
	udd_attach();
80007f74:	f0 1f 00 51 	mcall	800080b8 <main+0x30c>

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
80007f78:	4b 46       	lddpc	r6,80008048 <main+0x29c>
80007f7a:	30 07       	mov	r7,0
80007f7c:	30 05       	mov	r5,0
	// The main loop manages only the power mode
	// because the USB management is done by interrupt
	while (true) {

		if (main_msc_enable) {
			if (!udi_msc_process_trans()) {
80007f7e:	f0 1f 00 50 	mcall	800080bc <main+0x310>
80007f82:	cf e1       	brne	80007f7e <main+0x1d2>
static inline void sleepmgr_enter_sleep(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	enum sleepmgr_mode sleep_mode;

	cpu_irq_disable();
80007f84:	d3 03       	ssrf	0x10

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
80007f86:	0d 88       	ld.ub	r8,r6[0x0]
80007f88:	ee 08 18 00 	cp.b	r8,r7
80007f8c:	c0 b1       	brne	80007fa2 <main+0x1f6>
80007f8e:	0a 99       	mov	r9,r5
80007f90:	0c 98       	mov	r8,r6
		lock_ptr++;
80007f92:	2f f8       	sub	r8,-1
		sleep_mode++;
80007f94:	2f f9       	sub	r9,-1

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
80007f96:	11 8a       	ld.ub	r10,r8[0x0]
80007f98:	ee 0a 18 00 	cp.b	r10,r7
80007f9c:	cf b0       	breq	80007f92 <main+0x1e6>
	cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
80007f9e:	58 09       	cp.w	r9,0
80007fa0:	c0 31       	brne	80007fa6 <main+0x1fa>
		cpu_irq_enable();
80007fa2:	d5 03       	csrf	0x10
80007fa4:	ce db       	rjmp	80007f7e <main+0x1d2>

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
80007fa6:	d3 03       	ssrf	0x10
# error Unsupported AVR UC3 series.
#endif

static inline void pm_sleep(int sleep_mode)
{
	switch (sleep_mode) {
80007fa8:	20 19       	sub	r9,1
80007faa:	a7 b9       	sbr	r9,0x7
80007fac:	58 59       	cp.w	r9,5
80007fae:	c4 30       	breq	80008034 <main+0x288>
80007fb0:	e0 89 00 10 	brgt	80007fd0 <main+0x224>
80007fb4:	58 29       	cp.w	r9,2
80007fb6:	c2 d0       	breq	80008010 <main+0x264>
80007fb8:	e0 89 00 07 	brgt	80007fc6 <main+0x21a>
80007fbc:	58 09       	cp.w	r9,0
80007fbe:	c1 d0       	breq	80007ff8 <main+0x24c>
80007fc0:	58 19       	cp.w	r9,1
80007fc2:	cd e1       	brne	80007f7e <main+0x1d2>
80007fc4:	c2 08       	rjmp	80008004 <main+0x258>
80007fc6:	58 39       	cp.w	r9,3
80007fc8:	c2 a0       	breq	8000801c <main+0x270>
80007fca:	58 49       	cp.w	r9,4
80007fcc:	cd 91       	brne	80007f7e <main+0x1d2>
80007fce:	c2 d8       	rjmp	80008028 <main+0x27c>
80007fd0:	e0 49 00 82 	cp.w	r9,130
80007fd4:	c2 10       	breq	80008016 <main+0x26a>
80007fd6:	e0 89 00 09 	brgt	80007fe8 <main+0x23c>
80007fda:	e0 49 00 80 	cp.w	r9,128
80007fde:	c1 00       	breq	80007ffe <main+0x252>
80007fe0:	e0 49 00 81 	cp.w	r9,129
80007fe4:	cc d1       	brne	80007f7e <main+0x1d2>
80007fe6:	c1 28       	rjmp	8000800a <main+0x25e>
80007fe8:	e0 49 00 84 	cp.w	r9,132
80007fec:	c2 10       	breq	8000802e <main+0x282>
80007fee:	c1 a5       	brlt	80008022 <main+0x276>
80007ff0:	e0 49 00 85 	cp.w	r9,133
80007ff4:	cc 51       	brne	80007f7e <main+0x1d2>
80007ff6:	c2 28       	rjmp	8000803a <main+0x28e>
	case AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_IDLE);
80007ff8:	e9 b0 00 00 	sleep	0x0
80007ffc:	cc 1b       	rjmp	80007f7e <main+0x1d2>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_IDLE);
80007ffe:	e9 b0 00 80 	sleep	0x80
80008002:	cb eb       	rjmp	80007f7e <main+0x1d2>
		break;
	case AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_FROZEN);
80008004:	e9 b0 00 01 	sleep	0x1
80008008:	cb bb       	rjmp	80007f7e <main+0x1d2>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_FROZEN);
8000800a:	e9 b0 00 81 	sleep	0x81
8000800e:	cb 8b       	rjmp	80007f7e <main+0x1d2>
		break;
	case AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_STANDBY);
80008010:	e9 b0 00 02 	sleep	0x2
80008014:	cb 5b       	rjmp	80007f7e <main+0x1d2>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STANDBY);
80008016:	e9 b0 00 82 	sleep	0x82
8000801a:	cb 2b       	rjmp	80007f7e <main+0x1d2>
		break;
	case AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_STOP);
8000801c:	e9 b0 00 03 	sleep	0x3
80008020:	ca fb       	rjmp	80007f7e <main+0x1d2>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STOP);
80008022:	e9 b0 00 83 	sleep	0x83
80008026:	ca cb       	rjmp	80007f7e <main+0x1d2>
		break;
	case AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_DEEPSTOP);
80008028:	e9 b0 00 04 	sleep	0x4
8000802c:	ca 9b       	rjmp	80007f7e <main+0x1d2>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_DEEPSTOP);
8000802e:	e9 b0 00 84 	sleep	0x84
80008032:	ca 6b       	rjmp	80007f7e <main+0x1d2>
		break;
	case AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_STATIC);
80008034:	e9 b0 00 05 	sleep	0x5
80008038:	ca 3b       	rjmp	80007f7e <main+0x1d2>
		break;
	case AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC:
		SLEEP(AVR32_PM_SMODE_GMCLEAR_MASK | AVR32_PM_SMODE_STATIC);
8000803a:	e9 b0 00 85 	sleep	0x85
8000803e:	ca 0b       	rjmp	80007f7e <main+0x1d2>
			}
		}else{
			sleepmgr_enter_sleep();
		}
	}
}
80008040:	d8 22       	popm	r4-r7,pc
80008042:	00 00       	add	r0,r0
80008044:	80 00       	ld.sh	r0,r0[0x0]
80008046:	4f b0       	lddpc	r0,80008230 <memcpy+0x170>
80008048:	00 00       	add	r0,r0
8000804a:	2a 64       	sub	r4,-90
8000804c:	80 00       	ld.sh	r0,r0[0x0]
8000804e:	63 f8       	ld.w	r8,r1[0x7c]
80008050:	80 00       	ld.sh	r0,r0[0x0]
80008052:	4b c0       	lddpc	r0,80008140 <memcpy+0x80>
80008054:	80 00       	ld.sh	r0,r0[0x0]
80008056:	65 f0       	ld.w	r0,r2[0x7c]
80008058:	80 00       	ld.sh	r0,r0[0x0]
8000805a:	65 dc       	ld.w	r12,r2[0x74]
8000805c:	80 00       	ld.sh	r0,r0[0x0]
8000805e:	7c c4       	ld.w	r4,lr[0x30]
80008060:	80 00       	ld.sh	r0,r0[0x0]
80008062:	48 d8       	lddpc	r8,80008094 <main+0x2e8>
80008064:	00 00       	add	r0,r0
80008066:	01 64       	ld.uh	r4,--r0
80008068:	80 00       	ld.sh	r0,r0[0x0]
8000806a:	46 e4       	lddsp	r4,sp[0x1b8]
8000806c:	80 00       	ld.sh	r0,r0[0x0]
8000806e:	41 e8       	lddsp	r8,sp[0x78]
80008070:	80 00       	ld.sh	r0,r0[0x0]
80008072:	3f 00       	mov	r0,-16
80008074:	80 00       	ld.sh	r0,r0[0x0]
80008076:	3f ec       	mov	r12,-2
80008078:	00 00       	add	r0,r0
8000807a:	2a 6e       	sub	lr,-90
8000807c:	00 00       	add	r0,r0
8000807e:	2a 6c       	sub	r12,-90
80008080:	00 00       	add	r0,r0
80008082:	05 0a       	ld.w	r10,r2++
80008084:	00 00       	add	r0,r0
80008086:	25 20       	sub	r0,82
80008088:	80 00       	ld.sh	r0,r0[0x0]
8000808a:	40 58       	lddsp	r8,sp[0x14]
8000808c:	00 00       	add	r0,r0
8000808e:	25 2c       	sub	r12,82
80008090:	00 00       	add	r0,r0
80008092:	00 28       	rsub	r8,r0
80008094:	80 00       	ld.sh	r0,r0[0x0]
80008096:	3e c4       	mov	r4,-20
80008098:	80 00       	ld.sh	r0,r0[0x0]
8000809a:	88 b8       	ld.uh	r8,r4[0x6]
8000809c:	80 00       	ld.sh	r0,r0[0x0]
8000809e:	3f 20       	mov	r0,-14
800080a0:	80 00       	ld.sh	r0,r0[0x0]
800080a2:	3f d4       	mov	r4,-3
800080a4:	00 00       	add	r0,r0
800080a6:	05 18       	ld.sh	r8,r2++
800080a8:	80 00       	ld.sh	r0,r0[0x0]
800080aa:	3e dc       	mov	r12,-19
800080ac:	80 00       	ld.sh	r0,r0[0x0]
800080ae:	88 bc       	ld.uh	r12,r4[0x6]
800080b0:	00 00       	add	r0,r0
800080b2:	15 1a       	ld.sh	r10,r10++
800080b4:	80 00       	ld.sh	r0,r0[0x0]
800080b6:	7a 2c       	ld.w	r12,sp[0x8]
800080b8:	80 00       	ld.sh	r0,r0[0x0]
800080ba:	56 58       	stdsp	sp[0x194],r8
800080bc:	80 00       	ld.sh	r0,r0[0x0]
800080be:	6c 08       	ld.w	r8,r6[0x0]

800080c0 <memcpy>:
800080c0:	58 8a       	cp.w	r10,8
800080c2:	c2 f5       	brlt	80008120 <memcpy+0x60>
800080c4:	f9 eb 10 09 	or	r9,r12,r11
800080c8:	e2 19 00 03 	andl	r9,0x3,COH
800080cc:	e0 81 00 97 	brne	800081fa <memcpy+0x13a>
800080d0:	e0 4a 00 20 	cp.w	r10,32
800080d4:	c3 b4       	brge	8000814a <memcpy+0x8a>
800080d6:	f4 08 14 02 	asr	r8,r10,0x2
800080da:	f0 09 11 08 	rsub	r9,r8,8
800080de:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800080e2:	76 69       	ld.w	r9,r11[0x18]
800080e4:	99 69       	st.w	r12[0x18],r9
800080e6:	76 59       	ld.w	r9,r11[0x14]
800080e8:	99 59       	st.w	r12[0x14],r9
800080ea:	76 49       	ld.w	r9,r11[0x10]
800080ec:	99 49       	st.w	r12[0x10],r9
800080ee:	76 39       	ld.w	r9,r11[0xc]
800080f0:	99 39       	st.w	r12[0xc],r9
800080f2:	76 29       	ld.w	r9,r11[0x8]
800080f4:	99 29       	st.w	r12[0x8],r9
800080f6:	76 19       	ld.w	r9,r11[0x4]
800080f8:	99 19       	st.w	r12[0x4],r9
800080fa:	76 09       	ld.w	r9,r11[0x0]
800080fc:	99 09       	st.w	r12[0x0],r9
800080fe:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80008102:	f8 08 00 28 	add	r8,r12,r8<<0x2
80008106:	e0 1a 00 03 	andl	r10,0x3
8000810a:	f4 0a 11 04 	rsub	r10,r10,4
8000810e:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80008112:	17 a9       	ld.ub	r9,r11[0x2]
80008114:	b0 a9       	st.b	r8[0x2],r9
80008116:	17 99       	ld.ub	r9,r11[0x1]
80008118:	b0 99       	st.b	r8[0x1],r9
8000811a:	17 89       	ld.ub	r9,r11[0x0]
8000811c:	b0 89       	st.b	r8[0x0],r9
8000811e:	5e fc       	retal	r12
80008120:	f4 0a 11 09 	rsub	r10,r10,9
80008124:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80008128:	17 f9       	ld.ub	r9,r11[0x7]
8000812a:	b8 f9       	st.b	r12[0x7],r9
8000812c:	17 e9       	ld.ub	r9,r11[0x6]
8000812e:	b8 e9       	st.b	r12[0x6],r9
80008130:	17 d9       	ld.ub	r9,r11[0x5]
80008132:	b8 d9       	st.b	r12[0x5],r9
80008134:	17 c9       	ld.ub	r9,r11[0x4]
80008136:	b8 c9       	st.b	r12[0x4],r9
80008138:	17 b9       	ld.ub	r9,r11[0x3]
8000813a:	b8 b9       	st.b	r12[0x3],r9
8000813c:	17 a9       	ld.ub	r9,r11[0x2]
8000813e:	b8 a9       	st.b	r12[0x2],r9
80008140:	17 99       	ld.ub	r9,r11[0x1]
80008142:	b8 99       	st.b	r12[0x1],r9
80008144:	17 89       	ld.ub	r9,r11[0x0]
80008146:	b8 89       	st.b	r12[0x0],r9
80008148:	5e fc       	retal	r12
8000814a:	eb cd 40 c0 	pushm	r6-r7,lr
8000814e:	18 99       	mov	r9,r12
80008150:	22 0a       	sub	r10,32
80008152:	b7 07       	ld.d	r6,r11++
80008154:	b3 26       	st.d	r9++,r6
80008156:	b7 07       	ld.d	r6,r11++
80008158:	b3 26       	st.d	r9++,r6
8000815a:	b7 07       	ld.d	r6,r11++
8000815c:	b3 26       	st.d	r9++,r6
8000815e:	b7 07       	ld.d	r6,r11++
80008160:	b3 26       	st.d	r9++,r6
80008162:	22 0a       	sub	r10,32
80008164:	cf 74       	brge	80008152 <memcpy+0x92>
80008166:	2f 0a       	sub	r10,-16
80008168:	c0 65       	brlt	80008174 <memcpy+0xb4>
8000816a:	b7 07       	ld.d	r6,r11++
8000816c:	b3 26       	st.d	r9++,r6
8000816e:	b7 07       	ld.d	r6,r11++
80008170:	b3 26       	st.d	r9++,r6
80008172:	21 0a       	sub	r10,16
80008174:	5c 3a       	neg	r10
80008176:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000817a:	d7 03       	nop
8000817c:	d7 03       	nop
8000817e:	f7 36 00 0e 	ld.ub	r6,r11[14]
80008182:	f3 66 00 0e 	st.b	r9[14],r6
80008186:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000818a:	f3 66 00 0d 	st.b	r9[13],r6
8000818e:	f7 36 00 0c 	ld.ub	r6,r11[12]
80008192:	f3 66 00 0c 	st.b	r9[12],r6
80008196:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000819a:	f3 66 00 0b 	st.b	r9[11],r6
8000819e:	f7 36 00 0a 	ld.ub	r6,r11[10]
800081a2:	f3 66 00 0a 	st.b	r9[10],r6
800081a6:	f7 36 00 09 	ld.ub	r6,r11[9]
800081aa:	f3 66 00 09 	st.b	r9[9],r6
800081ae:	f7 36 00 08 	ld.ub	r6,r11[8]
800081b2:	f3 66 00 08 	st.b	r9[8],r6
800081b6:	f7 36 00 07 	ld.ub	r6,r11[7]
800081ba:	f3 66 00 07 	st.b	r9[7],r6
800081be:	f7 36 00 06 	ld.ub	r6,r11[6]
800081c2:	f3 66 00 06 	st.b	r9[6],r6
800081c6:	f7 36 00 05 	ld.ub	r6,r11[5]
800081ca:	f3 66 00 05 	st.b	r9[5],r6
800081ce:	f7 36 00 04 	ld.ub	r6,r11[4]
800081d2:	f3 66 00 04 	st.b	r9[4],r6
800081d6:	f7 36 00 03 	ld.ub	r6,r11[3]
800081da:	f3 66 00 03 	st.b	r9[3],r6
800081de:	f7 36 00 02 	ld.ub	r6,r11[2]
800081e2:	f3 66 00 02 	st.b	r9[2],r6
800081e6:	f7 36 00 01 	ld.ub	r6,r11[1]
800081ea:	f3 66 00 01 	st.b	r9[1],r6
800081ee:	f7 36 00 00 	ld.ub	r6,r11[0]
800081f2:	f3 66 00 00 	st.b	r9[0],r6
800081f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800081fa:	20 1a       	sub	r10,1
800081fc:	f6 0a 07 09 	ld.ub	r9,r11[r10]
80008200:	f8 0a 0b 09 	st.b	r12[r10],r9
80008204:	cf b1       	brne	800081fa <memcpy+0x13a>
80008206:	5e fc       	retal	r12

Disassembly of section .exception:

80008400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80008400:	c0 08       	rjmp	80008400 <_evba>
	...

80008404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80008404:	c0 08       	rjmp	80008404 <_handle_TLB_Multiple_Hit>
	...

80008408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80008408:	c0 08       	rjmp	80008408 <_handle_Bus_Error_Data_Fetch>
	...

8000840c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000840c:	c0 08       	rjmp	8000840c <_handle_Bus_Error_Instruction_Fetch>
	...

80008410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80008410:	c0 08       	rjmp	80008410 <_handle_NMI>
	...

80008414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80008414:	c0 08       	rjmp	80008414 <_handle_Instruction_Address>
	...

80008418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80008418:	c0 08       	rjmp	80008418 <_handle_ITLB_Protection>
	...

8000841c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000841c:	c0 08       	rjmp	8000841c <_handle_Breakpoint>
	...

80008420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80008420:	c0 08       	rjmp	80008420 <_handle_Illegal_Opcode>
	...

80008424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80008424:	c0 08       	rjmp	80008424 <_handle_Unimplemented_Instruction>
	...

80008428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80008428:	c0 08       	rjmp	80008428 <_handle_Privilege_Violation>
	...

8000842c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000842c:	c0 08       	rjmp	8000842c <_handle_Floating_Point>
	...

80008430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80008430:	c0 08       	rjmp	80008430 <_handle_Coprocessor_Absent>
	...

80008434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80008434:	c0 08       	rjmp	80008434 <_handle_Data_Address_Read>
	...

80008438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80008438:	c0 08       	rjmp	80008438 <_handle_Data_Address_Write>
	...

8000843c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000843c:	c0 08       	rjmp	8000843c <_handle_DTLB_Protection_Read>
	...

80008440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80008440:	c0 08       	rjmp	80008440 <_handle_DTLB_Protection_Write>
	...

80008444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80008444:	c0 08       	rjmp	80008444 <_handle_DTLB_Modified>
	...

80008450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80008450:	c0 08       	rjmp	80008450 <_handle_ITLB_Miss>
	...

80008460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80008460:	c0 08       	rjmp	80008460 <_handle_DTLB_Miss_Read>
	...

80008470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80008470:	c0 08       	rjmp	80008470 <_handle_DTLB_Miss_Write>
	...

80008500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80008500:	c0 08       	rjmp	80008500 <_handle_Supervisor_Call>
80008502:	d7 03       	nop

80008504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008504:	30 0c       	mov	r12,0
80008506:	fe b0 e5 7f 	rcall	80005004 <_get_interrupt_handler>
8000850a:	58 0c       	cp.w	r12,0
8000850c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80008510:	d6 03       	rete

80008512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008512:	30 1c       	mov	r12,1
80008514:	fe b0 e5 78 	rcall	80005004 <_get_interrupt_handler>
80008518:	58 0c       	cp.w	r12,0
8000851a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000851e:	d6 03       	rete

80008520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80008520:	30 2c       	mov	r12,2
80008522:	fe b0 e5 71 	rcall	80005004 <_get_interrupt_handler>
80008526:	58 0c       	cp.w	r12,0
80008528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000852c:	d6 03       	rete

8000852e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000852e:	30 3c       	mov	r12,3
80008530:	fe b0 e5 6a 	rcall	80005004 <_get_interrupt_handler>
80008534:	58 0c       	cp.w	r12,0
80008536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000853a:	d6 03       	rete
8000853c:	d7 03       	nop
8000853e:	d7 03       	nop
80008540:	d7 03       	nop
80008542:	d7 03       	nop
80008544:	d7 03       	nop
80008546:	d7 03       	nop
80008548:	d7 03       	nop
8000854a:	d7 03       	nop
8000854c:	d7 03       	nop
8000854e:	d7 03       	nop
80008550:	d7 03       	nop
80008552:	d7 03       	nop
80008554:	d7 03       	nop
80008556:	d7 03       	nop
80008558:	d7 03       	nop
8000855a:	d7 03       	nop
8000855c:	d7 03       	nop
8000855e:	d7 03       	nop
80008560:	d7 03       	nop
80008562:	d7 03       	nop
80008564:	d7 03       	nop
80008566:	d7 03       	nop
80008568:	d7 03       	nop
8000856a:	d7 03       	nop
8000856c:	d7 03       	nop
8000856e:	d7 03       	nop
80008570:	d7 03       	nop
80008572:	d7 03       	nop
80008574:	d7 03       	nop
80008576:	d7 03       	nop
80008578:	d7 03       	nop
8000857a:	d7 03       	nop
8000857c:	d7 03       	nop
8000857e:	d7 03       	nop
80008580:	d7 03       	nop
80008582:	d7 03       	nop
80008584:	d7 03       	nop
80008586:	d7 03       	nop
80008588:	d7 03       	nop
8000858a:	d7 03       	nop
8000858c:	d7 03       	nop
8000858e:	d7 03       	nop
80008590:	d7 03       	nop
80008592:	d7 03       	nop
80008594:	d7 03       	nop
80008596:	d7 03       	nop
80008598:	d7 03       	nop
8000859a:	d7 03       	nop
8000859c:	d7 03       	nop
8000859e:	d7 03       	nop
800085a0:	d7 03       	nop
800085a2:	d7 03       	nop
800085a4:	d7 03       	nop
800085a6:	d7 03       	nop
800085a8:	d7 03       	nop
800085aa:	d7 03       	nop
800085ac:	d7 03       	nop
800085ae:	d7 03       	nop
800085b0:	d7 03       	nop
800085b2:	d7 03       	nop
800085b4:	d7 03       	nop
800085b6:	d7 03       	nop
800085b8:	d7 03       	nop
800085ba:	d7 03       	nop
800085bc:	d7 03       	nop
800085be:	d7 03       	nop
800085c0:	d7 03       	nop
800085c2:	d7 03       	nop
800085c4:	d7 03       	nop
800085c6:	d7 03       	nop
800085c8:	d7 03       	nop
800085ca:	d7 03       	nop
800085cc:	d7 03       	nop
800085ce:	d7 03       	nop
800085d0:	d7 03       	nop
800085d2:	d7 03       	nop
800085d4:	d7 03       	nop
800085d6:	d7 03       	nop
800085d8:	d7 03       	nop
800085da:	d7 03       	nop
800085dc:	d7 03       	nop
800085de:	d7 03       	nop
800085e0:	d7 03       	nop
800085e2:	d7 03       	nop
800085e4:	d7 03       	nop
800085e6:	d7 03       	nop
800085e8:	d7 03       	nop
800085ea:	d7 03       	nop
800085ec:	d7 03       	nop
800085ee:	d7 03       	nop
800085f0:	d7 03       	nop
800085f2:	d7 03       	nop
800085f4:	d7 03       	nop
800085f6:	d7 03       	nop
800085f8:	d7 03       	nop
800085fa:	d7 03       	nop
800085fc:	d7 03       	nop
800085fe:	d7 03       	nop
